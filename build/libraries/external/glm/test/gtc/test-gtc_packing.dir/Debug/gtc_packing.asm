; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG58662 DB	'f32: ', 00H
	ORG $+2
$SG58665 DB	' ', 00H
	ORG $+2
$SG58666 DB	'%d', 00H
	ORG $+1
$SG58674 DB	'10b: ', 00H
	ORG $+2
$SG58676 DB	' ', 00H
	ORG $+2
$SG58677 DB	'%d', 00H
	ORG $+1
$SG58685 DB	'11b: ', 00H
	ORG $+2
$SG58687 DB	' ', 00H
	ORG $+2
$SG58688 DB	'%d', 00H
	ORG $+1
$SG58692 DB	'%2.5f, ', 00H
$SG58693 DB	', ', 00H
	ORG $+1
$SG58694 DB	0aH, 00H
	ORG $+2
$SG69959 DB	'invalid argument', 00H
	ORG $+3
$SG69960 DB	'%s', 00H
	ORG $+1
$SG69964 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG69961 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+2
$SG69963 DB	00H, 00H
	ORG $+10
$SG69962 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
	ORG $+12
$SG62688 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG62689 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63404 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63405 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63426 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63427 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63449 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63450 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63471 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63472 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63492 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63493 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63530 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63531 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63568 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63569 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63589 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63590 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63628 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63629 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63671 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63672 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63695 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63696 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63716 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63717 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63737 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63738 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63758 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63759 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG63779 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG63780 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
CONST	ENDS
PUBLIC	?fpclassify@@YAHM@Z				; fpclassify
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?max@?$numeric_limits@F@std@@SAFXZ		; std::numeric_limits<short>::max
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	?max@?$numeric_limits@G@std@@SAGXZ		; std::numeric_limits<unsigned short>::max
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	?log2@@YAMM@Z					; log2
PUBLIC	?pow@@YAMMM@Z					; pow
PUBLIC	?round@@YAMM@Z					; round
PUBLIC	?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z	; glm::packUnorm2x16
PUBLIC	?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z	; glm::packSnorm2x16
PUBLIC	?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z	; glm::packUnorm4x8
PUBLIC	?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z	; glm::packSnorm4x8
PUBLIC	?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z	; glm::unpackUnorm2x16
PUBLIC	?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z	; glm::unpackSnorm2x16
PUBLIC	?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z	; glm::unpackUnorm4x8
PUBLIC	?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z	; glm::unpackSnorm4x8
PUBLIC	?toFloat32@detail@glm@@YAMF@Z			; glm::detail::toFloat32
PUBLIC	?toFloat16@detail@glm@@YAFAEBM@Z		; glm::detail::toFloat16
PUBLIC	?overflow@detail@glm@@YAMXZ			; glm::detail::overflow
PUBLIC	??0uif32@detail@glm@@QEAA@XZ			; glm::detail::uif32::uif32
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec2>
PUBLIC	?length@?$tvec2@G$0A@@glm@@SAHXZ		; glm::tvec2<unsigned short,0>::length
PUBLIC	??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z		; glm::tvec2<unsigned short,0>::operator[]
PUBLIC	??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><float,0>
PUBLIC	??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z		; glm::tvec2<float,0>::tvec2<float,0><unsigned short,unsigned short>
PUBLIC	?length@?$tvec2@F$0A@@glm@@SAHXZ		; glm::tvec2<short,0>::length
PUBLIC	??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z		; glm::tvec2<short,0>::operator[]
PUBLIC	??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<short,0>::tvec2<short,0><float,0>
PUBLIC	??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z		; glm::tvec2<float,0>::tvec2<float,0><short,short>
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@E$0A@@glm@@SAHXZ		; glm::tvec4<unsigned char,0>::length
PUBLIC	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z		; glm::tvec4<unsigned char,0>::operator[]
PUBLIC	??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>
PUBLIC	??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z	; glm::tvec4<float,0>::tvec4<float,0><unsigned char,unsigned char,unsigned char,unsigned char>
PUBLIC	?length@?$tvec4@C$0A@@glm@@SAHXZ		; glm::tvec4<signed char,0>::length
PUBLIC	??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z		; glm::tvec4<signed char,0>::operator[]
PUBLIC	??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>
PUBLIC	??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z	; glm::tvec4<float,0>::tvec4<float,0><signed char,signed char,signed char,signed char>
PUBLIC	?packUnorm1x8@glm@@YAEM@Z			; glm::packUnorm1x8
PUBLIC	?unpackUnorm1x8@glm@@YAME@Z			; glm::unpackUnorm1x8
PUBLIC	?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z	; glm::packUnorm2x8
PUBLIC	?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z	; glm::unpackUnorm2x8
PUBLIC	?packSnorm1x8@glm@@YAEM@Z			; glm::packSnorm1x8
PUBLIC	?unpackSnorm1x8@glm@@YAME@Z			; glm::unpackSnorm1x8
PUBLIC	?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z	; glm::packSnorm2x8
PUBLIC	?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z	; glm::unpackSnorm2x8
PUBLIC	?packUnorm1x16@glm@@YAGM@Z			; glm::packUnorm1x16
PUBLIC	?unpackUnorm1x16@glm@@YAMG@Z			; glm::unpackUnorm1x16
PUBLIC	?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z	; glm::packUnorm4x16
PUBLIC	?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z	; glm::unpackUnorm4x16
PUBLIC	?packSnorm1x16@glm@@YAGM@Z			; glm::packSnorm1x16
PUBLIC	?unpackSnorm1x16@glm@@YAMG@Z			; glm::unpackSnorm1x16
PUBLIC	?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z	; glm::packSnorm4x16
PUBLIC	?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z	; glm::unpackSnorm4x16
PUBLIC	?packHalf1x16@glm@@YAGM@Z			; glm::packHalf1x16
PUBLIC	?unpackHalf1x16@glm@@YAMG@Z			; glm::unpackHalf1x16
PUBLIC	?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z	; glm::packHalf4x16
PUBLIC	?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z	; glm::unpackHalf4x16
PUBLIC	?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z	; glm::packI3x10_1x2
PUBLIC	?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z	; glm::unpackI3x10_1x2
PUBLIC	?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z	; glm::packU3x10_1x2
PUBLIC	?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z	; glm::unpackU3x10_1x2
PUBLIC	?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ; glm::packSnorm3x10_1x2
PUBLIC	?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ; glm::unpackSnorm3x10_1x2
PUBLIC	?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ; glm::packUnorm3x10_1x2
PUBLIC	?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ; glm::unpackUnorm3x10_1x2
PUBLIC	?packF2x11_1x10@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z	; glm::packF2x11_1x10
PUBLIC	?unpackF2x11_1x10@glm@@YA?AU?$tvec3@M$0A@@1@I@Z	; glm::unpackF2x11_1x10
PUBLIC	?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z	; glm::packF3x9_E1x5
PUBLIC	?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z	; glm::unpackF3x9_E1x5
PUBLIC	?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z	; glm::packUnorm2x4
PUBLIC	?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z	; glm::unpackUnorm2x4
PUBLIC	?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z	; glm::packUnorm4x4
PUBLIC	?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z	; glm::unpackUnorm4x4
PUBLIC	?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z ; glm::packUnorm1x5_1x6_1x5
PUBLIC	?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z ; glm::unpackUnorm1x5_1x6_1x5
PUBLIC	?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z ; glm::packUnorm3x5_1x1
PUBLIC	?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z ; glm::unpackUnorm3x5_1x1
PUBLIC	?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z ; glm::packUnorm2x3_1x2
PUBLIC	?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z ; glm::unpackUnorm2x3_1x2
PUBLIC	?float2packed11@detail@glm@@YAII@Z		; glm::detail::float2packed11
PUBLIC	?packed11ToFloat@detail@glm@@YAII@Z		; glm::detail::packed11ToFloat
PUBLIC	?float2packed10@detail@glm@@YAII@Z		; glm::detail::float2packed10
PUBLIC	?packed10ToFloat@detail@glm@@YAII@Z		; glm::detail::packed10ToFloat
PUBLIC	?floatTo11bit@detail@glm@@YAIM@Z		; glm::detail::floatTo11bit
PUBLIC	??$isnan@M@@YA_NM@Z				; isnan<float>
PUBLIC	??$isinf@M@@YA_NM@Z				; isinf<float>
PUBLIC	?packed11bitToFloat@detail@glm@@YAMI@Z		; glm::detail::packed11bitToFloat
PUBLIC	?floatTo10bit@detail@glm@@YAIM@Z		; glm::detail::floatTo10bit
PUBLIC	?packed10bitToFloat@detail@glm@@YAMI@Z		; glm::detail::packed10bitToFloat
PUBLIC	??$clamp@M@glm@@YAMMMM@Z			; glm::clamp<float>
PUBLIC	??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??$?0M$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><float,0>
PUBLIC	??$?0E$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><unsigned char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??$?0M$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<signed char,0>::tvec2<signed char,0><float,0>
PUBLIC	??$?0C$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><signed char,0>
PUBLIC	??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><float,0>
PUBLIC	??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><unsigned short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z		; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<short,0>::tvec4<short,0><float,0>
PUBLIC	??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><short,0>
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec4<int,0>::operator[]
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@H@Z			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	?length@?$tvec4@I$0A@@glm@@SAHXZ		; glm::tvec4<unsigned int,0>::length
PUBLIC	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec4<unsigned int,0>::operator[]
PUBLIC	??0?$tvec4@I$0A@@glm@@QEAA@I@Z			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?0M$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><float,0>
PUBLIC	??$?0IIII@?$tvec4@M$0A@@glm@@QEAA@IIII@Z	; glm::tvec4<float,0>::tvec4<float,0><unsigned int,unsigned int,unsigned int,unsigned int>
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec3>
PUBLIC	??$max@M@glm@@YAMMM@Z				; glm::max<float>
PUBLIC	??$log2@M@glm@@YAMM@Z				; glm::log2<float>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator+<float,0>
PUBLIC	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
PUBLIC	??$?0M$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><float,0>
PUBLIC	??$?0III@?$tvec3@M$0A@@glm@@QEAA@III@Z		; glm::tvec3<float,0>::tvec3<float,0><unsigned int,unsigned int,unsigned int>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$?0M$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><float,0>
PUBLIC	??$?0II@?$tvec2@M$0A@@glm@@QEAA@II@Z		; glm::tvec2<float,0>::tvec2<float,0><unsigned int,unsigned int>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$round@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec3>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?print_bits@@YAXAEBM@Z				; print_bits
PUBLIC	?print_10bits@@YAXAEBI@Z			; print_10bits
PUBLIC	?print_11bits@@YAXAEBI@Z			; print_11bits
PUBLIC	?print_value@@YAXAEBM@Z				; print_value
PUBLIC	?test_Half1x16@@YAHXZ				; test_Half1x16
PUBLIC	??0?$allocator@M@std@@QEAA@XZ			; std::allocator<float>::allocator<float>
PUBLIC	?deallocate@?$allocator@M@std@@QEAAXQEAM_K@Z	; std::allocator<float>::deallocate
PUBLIC	?allocate@?$allocator@M@std@@QEAAPEAM_K@Z	; std::allocator<float>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SA_KAEBV?$allocator@M@2@@Z ; std::_Default_allocator_traits<std::allocator<float> >::max_size
PUBLIC	??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
PUBLIC	??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
PUBLIC	?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z ; std::vector<float,std::allocator<float> >::push_back
PUBLIC	?size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ ; std::vector<float,std::allocator<float> >::size
PUBLIC	?max_size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ ; std::vector<float,std::allocator<float> >::max_size
PUBLIC	?capacity@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ ; std::vector<float,std::allocator<float> >::capacity
PUBLIC	??A?$vector@MV?$allocator@M@std@@@std@@QEAAAEAM_K@Z ; std::vector<float,std::allocator<float> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@AEBA_K_K@Z ; std::vector<float,std::allocator<float> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AEAAXQEAM_K1@Z ; std::vector<float,std::allocator<float> >::_Change_array
PUBLIC	?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ ; std::vector<float,std::allocator<float> >::_Tidy
PUBLIC	?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ ; std::vector<float,std::allocator<float> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range
PUBLIC	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
PUBLIC	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEBAAEBV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<float> >::_Vector_val<std::_Simple_types<float> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAAAEAV?$allocator@M@2@XZ ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEBAAEBV?$allocator@M@2@XZ ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first
PUBLIC	?test_Half4x16@@YAHXZ				; test_Half4x16
PUBLIC	??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
PUBLIC	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
PUBLIC	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back
PUBLIC	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
PUBLIC	?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
PUBLIC	?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity
PUBLIC	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
PUBLIC	?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
PUBLIC	??$packHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::packHalf<0,glm::tvec4>
PUBLIC	??$unpackHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z ; glm::unpackHalf<0,glm::tvec4>
PUBLIC	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	?test_I3x10_1x2@@YAHXZ				; test_I3x10_1x2
PUBLIC	??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<int,0> >::allocator<glm::tvec4<int,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
PUBLIC	??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
PUBLIC	?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::push_back
PUBLIC	?size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::size
PUBLIC	?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::max_size
PUBLIC	?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::capacity
PUBLIC	??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::operator[]
PUBLIC	?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first
PUBLIC	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
PUBLIC	?test_U3x10_1x2@@YAHXZ				; test_U3x10_1x2
PUBLIC	??0?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<unsigned int,0> >::allocator<glm::tvec4<unsigned int,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAXQEAU?$tvec4@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<unsigned int,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<unsigned int,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<unsigned int,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >
PUBLIC	??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::~vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >
PUBLIC	?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::push_back
PUBLIC	?size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::size
PUBLIC	?max_size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::max_size
PUBLIC	?capacity@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::capacity
PUBLIC	??A?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@I$0A@@glm@@_K@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::operator[]
PUBLIC	?_Calculate_growth@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@I$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Get_first
PUBLIC	??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec4>
PUBLIC	?test_Snorm3x10_1x2@@YAHXZ			; test_Snorm3x10_1x2
PUBLIC	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
PUBLIC	?test_Unorm3x10_1x2@@YAHXZ			; test_Unorm3x10_1x2
PUBLIC	?test_F2x11_1x10@@YAHXZ				; test_F2x11_1x10
PUBLIC	??0?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec3<float,0> >::allocator<glm::tvec3<float,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAXQEAU?$tvec3@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec3<float,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec3<float,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec3<float,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
PUBLIC	??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
PUBLIC	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back
PUBLIC	?size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::size
PUBLIC	?max_size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::max_size
PUBLIC	?capacity@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::capacity
PUBLIC	??A?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@M$0A@@glm@@_K@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::operator[]
PUBLIC	?_Calculate_growth@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec3@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Get_first
PUBLIC	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
PUBLIC	?length@?$tvec3@_N$0A@@glm@@SAHXZ		; glm::tvec3<bool,0>::length
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
PUBLIC	?test_F3x9_E1x5@@YAHXZ				; test_F3x9_E1x5
PUBLIC	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec3>
PUBLIC	?test_packUnorm1x16@@YAHXZ			; test_packUnorm1x16
PUBLIC	??0?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec1<float,0> >::allocator<glm::tvec1<float,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAXQEAU?$tvec1@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec1<float,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec1<float,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec1<float,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
PUBLIC	??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
PUBLIC	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back
PUBLIC	?size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::size
PUBLIC	?max_size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::max_size
PUBLIC	?capacity@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::capacity
PUBLIC	??A?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec1@M$0A@@glm@@_K@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::operator[]
PUBLIC	?_Calculate_growth@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec1@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Get_first
PUBLIC	?length@?$tvec1@M$0A@@glm@@SAHXZ		; glm::tvec1<float,0>::length
PUBLIC	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec1<float,0>::operator[]
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec1>
PUBLIC	?length@?$tvec1@_N$0A@@glm@@SAHXZ		; glm::tvec1<bool,0>::length
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<bool,0>::tvec1<bool,0>
PUBLIC	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
PUBLIC	?test_packSnorm1x16@@YAHXZ			; test_packSnorm1x16
PUBLIC	?test_packUnorm2x16@@YAHXZ			; test_packUnorm2x16
PUBLIC	??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec2<float,0> >::allocator<glm::tvec2<float,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
PUBLIC	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
PUBLIC	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back
PUBLIC	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
PUBLIC	?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::max_size
PUBLIC	?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::capacity
PUBLIC	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
PUBLIC	?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first
PUBLIC	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
PUBLIC	?length@?$tvec2@_N$0A@@glm@@SAHXZ		; glm::tvec2<bool,0>::length
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
PUBLIC	?test_packSnorm2x16@@YAHXZ			; test_packSnorm2x16
PUBLIC	?test_packUnorm4x16@@YAHXZ			; test_packUnorm4x16
PUBLIC	?test_packSnorm4x16@@YAHXZ			; test_packSnorm4x16
PUBLIC	?test_packUnorm1x8@@YAHXZ			; test_packUnorm1x8
PUBLIC	?test_packSnorm1x8@@YAHXZ			; test_packSnorm1x8
PUBLIC	?test_packUnorm2x8@@YAHXZ			; test_packUnorm2x8
PUBLIC	?test_packSnorm2x8@@YAHXZ			; test_packSnorm2x8
PUBLIC	?test_packUnorm4x8@@YAHXZ			; test_packUnorm4x8
PUBLIC	?test_packSnorm4x8@@YAHXZ			; test_packSnorm4x8
PUBLIC	?test_packUnorm@@YAHXZ				; test_packUnorm
PUBLIC	??$packUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::packUnorm<unsigned short,float,0,glm::tvec2>
PUBLIC	??$unpackUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@G$0A@@0@@Z ; glm::unpackUnorm<unsigned short,float,0,glm::tvec2>
PUBLIC	?test_packSnorm@@YAHXZ				; test_packSnorm
PUBLIC	??$packSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::packSnorm<short,float,0,glm::tvec2>
PUBLIC	??$unpackSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@F$0A@@0@@Z ; glm::unpackSnorm<short,float,0,glm::tvec2>
PUBLIC	?test_packUnorm2x4@@YAHXZ			; test_packUnorm2x4
PUBLIC	?test_packUnorm4x4@@YAHXZ			; test_packUnorm4x4
PUBLIC	?test_packUnorm3x5_1x1@@YAHXZ			; test_packUnorm3x5_1x1
PUBLIC	?test_packUnorm1x5_1x6_1x5@@YAHXZ		; test_packUnorm1x5_1x6_1x5
PUBLIC	?test_packUnorm2x3_1x2@@YAHXZ			; test_packUnorm2x3_1x2
PUBLIC	main
PUBLIC	??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec2<float,0> &>
PUBLIC	??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::emplace_back<glm::tvec2<float,0> >
PUBLIC	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
PUBLIC	??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_one_at_back<glm::tvec2<float,0> >
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<float,0> >
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1><>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$move@AEAU?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec1<float,0> &>
PUBLIC	??$emplace_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::emplace_back<glm::tvec1<float,0> >
PUBLIC	??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec1<float,0> >
PUBLIC	??$_Emplace_one_at_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_one_at_back<glm::tvec1<float,0> >
PUBLIC	??$?0U?$tvec1@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec1<float,0> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1><>
PUBLIC	??$move@AEAU?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec3<float,0> &>
PUBLIC	??$emplace_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::emplace_back<glm::tvec3<float,0> >
PUBLIC	??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec3<float,0> >
PUBLIC	??$_Emplace_one_at_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_one_at_back<glm::tvec3<float,0> >
PUBLIC	??$?0U?$tvec3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec3<float,0> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1><>
PUBLIC	??$move@AEAU?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<unsigned int,0> &>
PUBLIC	??$emplace_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@I$0A@@glm@@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::emplace_back<glm::tvec4<unsigned int,0> >
PUBLIC	??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<unsigned int,0> >
PUBLIC	??$_Emplace_one_at_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_one_at_back<glm::tvec4<unsigned int,0> >
PUBLIC	??$?0U?$tvec4@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<unsigned int,0> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1><>
PUBLIC	??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<int,0> &>
PUBLIC	??$emplace_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::emplace_back<glm::tvec4<int,0> >
PUBLIC	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
PUBLIC	??$_Emplace_one_at_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_one_at_back<glm::tvec4<int,0> >
PUBLIC	??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<int,0> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1><>
PUBLIC	??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<float,0> &>
PUBLIC	??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::emplace_back<glm::tvec4<float,0> >
PUBLIC	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
PUBLIC	??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_one_at_back<glm::tvec4<float,0> >
PUBLIC	??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>
PUBLIC	??$move@AEAM@std@@YA$$QEAMAEAM@Z		; std::move<float &>
PUBLIC	??$emplace_back@M@?$vector@MV?$allocator@M@std@@@std@@QEAA?A_T$$QEAM@Z ; std::vector<float,std::allocator<float> >::emplace_back<float>
PUBLIC	??$forward@M@std@@YA$$QEAMAEAM@Z		; std::forward<float>
PUBLIC	??$_Emplace_one_at_back@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z ; std::vector<float,std::allocator<float> >::_Emplace_one_at_back<float>
PUBLIC	??$?0M@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@M@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><float>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec1@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec1<float,0> > >
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec3<float,0> > >
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<unsigned int,0> > >
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >
PUBLIC	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPEAMQEAMAEAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_round<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_round<float,0,glm::tvec4,0>::call
PUBLIC	??$min@M@glm@@YAMMM@Z				; glm::min<float>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec3,0>::call
PUBLIC	??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::log2<float,0,glm::tvec1>
PUBLIC	?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_round@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_round<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_half<0,glm::tvec4>::pack
PUBLIC	?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z ; glm::detail::compute_half<0,glm::tvec4>::unpack
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
PUBLIC	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
PUBLIC	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec1>
PUBLIC	??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec1>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>
PUBLIC	??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec2>
PUBLIC	??$?0G$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><unsigned short,0>
PUBLIC	??$?0F$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><short,0>
PUBLIC	??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<float,0> >
PUBLIC	??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Emplace_back_with_unused_capacity@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec1<float,0> >
PUBLIC	??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_reallocate<glm::tvec1<float,0> >
PUBLIC	??$_Emplace_back_with_unused_capacity@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec3<float,0> >
PUBLIC	??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_reallocate<glm::tvec3<float,0> >
PUBLIC	??$_Emplace_back_with_unused_capacity@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<unsigned int,0> >
PUBLIC	??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_reallocate<glm::tvec4<unsigned int,0> >
PUBLIC	??$_Emplace_back_with_unused_capacity@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<int,0> >
PUBLIC	??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_reallocate<glm::tvec4<int,0> >
PUBLIC	??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<float,0> >
PUBLIC	??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >
PUBLIC	??$_Emplace_back_with_unused_capacity@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z ; std::vector<float,std::allocator<float> >::_Emplace_back_with_unused_capacity<float>
PUBLIC	??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float>
PUBLIC	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
PUBLIC	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec3>
PUBLIC	??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec3>
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec4>
PUBLIC	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec4>
PUBLIC	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
PUBLIC	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec2>
PUBLIC	??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec2>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<float,0,glm::tvec1,1,0>::call
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
PUBLIC	??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec2<float,0>,glm::tvec2<float,0> >
PUBLIC	??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<float,0> >
PUBLIC	??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::construct<glm::tvec2<float,0>,glm::tvec2<float,0> >
PUBLIC	??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Construct_in_place@U?$tvec1@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec1@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec1<float,0>,glm::tvec1<float,0> >
PUBLIC	??$_Unfancy@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec1<float,0> >
PUBLIC	??$construct@U?$tvec1@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@QEAU?$tvec1@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec1<float,0> > >::construct<glm::tvec1<float,0>,glm::tvec1<float,0> >
PUBLIC	??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec1<float,0> *,std::allocator<glm::tvec1<float,0> > >
PUBLIC	??$_Construct_in_place@U?$tvec3@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec3@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec3<float,0>,glm::tvec3<float,0> >
PUBLIC	??$_Unfancy@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec3<float,0> >
PUBLIC	??$construct@U?$tvec3@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@QEAU?$tvec3@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec3<float,0> > >::construct<glm::tvec3<float,0>,glm::tvec3<float,0> >
PUBLIC	??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec3<float,0> *,std::allocator<glm::tvec3<float,0> > >
PUBLIC	??$_Construct_in_place@U?$tvec4@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@I$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec4<unsigned int,0>,glm::tvec4<unsigned int,0> >
PUBLIC	??$_Unfancy@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<unsigned int,0> >
PUBLIC	??$construct@U?$tvec4@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@QEAU?$tvec4@I$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<unsigned int,0> > >::construct<glm::tvec4<unsigned int,0>,glm::tvec4<unsigned int,0> >
PUBLIC	??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<unsigned int,0> *,std::allocator<glm::tvec4<unsigned int,0> > >
PUBLIC	??$_Construct_in_place@U?$tvec4@H$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@H$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec4<int,0>,glm::tvec4<int,0> >
PUBLIC	??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<int,0> >
PUBLIC	??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0>,glm::tvec4<int,0> >
PUBLIC	??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
PUBLIC	??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec4<float,0>,glm::tvec4<float,0> >
PUBLIC	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
PUBLIC	??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >
PUBLIC	??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
PUBLIC	??$_Construct_in_place@MM@std@@YAXAEAM$$QEAM@Z	; std::_Construct_in_place<float,float>
PUBLIC	??$_Unfancy@M@std@@YAPEAMPEAM@Z			; std::_Unfancy<float>
PUBLIC	??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAM$$QEAM@Z ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float>
PUBLIC	??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z ; std::_Uninitialized_move<float *,std::allocator<float> >
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
PUBLIC	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
PUBLIC	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$07@std@@YA_K_K@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Get_size_of_n@$03@std@@YA_K_K@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Get_size_of_n@$0M@@std@@YA_K_K@Z		; std::_Get_size_of_n<12>
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec2<float,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec2<float,0> *>
PUBLIC	??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec2<float,0> * const &>
PUBLIC	??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec2<float,0> *,glm::tvec2<float,0> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Release
PUBLIC	??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Emplace_back<glm::tvec2<float,0> >
PUBLIC	??$addressof@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec1<float,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec1@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec1@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec1<float,0> *>
PUBLIC	??$_Get_unwrapped@AEBQEAU?$tvec1@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec1@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec1<float,0> * const &>
PUBLIC	??$_Copy_memmove@PEAU?$tvec1@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec1<float,0> *,glm::tvec1<float,0> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec1@M$0A@@glm@@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Release
PUBLIC	??$_Emplace_back@U?$tvec1@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Emplace_back<glm::tvec1<float,0> >
PUBLIC	??$addressof@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec3<float,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec3@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec3<float,0> *>
PUBLIC	??$_Get_unwrapped@AEBQEAU?$tvec3@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec3@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec3<float,0> * const &>
PUBLIC	??$_Copy_memmove@PEAU?$tvec3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec3<float,0> *,glm::tvec3<float,0> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@M$0A@@glm@@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Release
PUBLIC	??$_Emplace_back@U?$tvec3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Emplace_back<glm::tvec3<float,0> >
PUBLIC	??$addressof@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec4<unsigned int,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec4@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@I$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<unsigned int,0> *>
PUBLIC	??$_Get_unwrapped@AEBQEAU?$tvec4@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@I$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<unsigned int,0> * const &>
PUBLIC	??$_Copy_memmove@PEAU?$tvec4@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<unsigned int,0> *,glm::tvec4<unsigned int,0> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@I$0A@@glm@@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Release
PUBLIC	??$_Emplace_back@U?$tvec4@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_back<glm::tvec4<unsigned int,0> >
PUBLIC	??$addressof@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec4<int,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<int,0> *>
PUBLIC	??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<int,0> * const &>
PUBLIC	??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<int,0> *,glm::tvec4<int,0> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Release
PUBLIC	??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<glm::tvec4<int,0> >
PUBLIC	??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec4<float,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<float,0> *>
PUBLIC	??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
PUBLIC	??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release
PUBLIC	??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >
PUBLIC	??$addressof@M@std@@YAPEAMAEAM@Z		; std::addressof<float>
PUBLIC	??$_Voidify_iter@PEAM@std@@YAPEAXPEAM@Z		; std::_Voidify_iter<float *>
PUBLIC	??$_Get_unwrapped@AEBQEAM@std@@YA?A_TAEBQEAM@Z	; std::_Get_unwrapped<float * const &>
PUBLIC	??$_Copy_memmove@PEAMPEAM@std@@YAPEAMPEAM00@Z	; std::_Copy_memmove<float *,float *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@PEAMAEAV?$allocator@M@1@@Z ; std::_Uninitialized_backout_al<std::allocator<float> >::_Uninitialized_backout_al<std::allocator<float> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAPEAMXZ ; std::_Uninitialized_backout_al<std::allocator<float> >::_Release
PUBLIC	??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAX$$QEAM@Z ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float>
PUBLIC	??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_To_address<glm::tvec2<float,0> *>
PUBLIC	??$_To_address@PEAU?$tvec1@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec1@M$0A@@glm@@@Z ; std::_To_address<glm::tvec1<float,0> *>
PUBLIC	??$_To_address@PEAU?$tvec3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec3@M$0A@@glm@@@Z ; std::_To_address<glm::tvec3<float,0> *>
PUBLIC	??$_To_address@PEAU?$tvec4@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@I$0A@@glm@@@Z ; std::_To_address<glm::tvec4<unsigned int,0> *>
PUBLIC	??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_To_address<glm::tvec4<int,0> *>
PUBLIC	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
PUBLIC	??$_To_address@PEAM@std@@YA?A_PAEBQEAM@Z	; std::_To_address<float *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@37800080
PUBLIC	__real@38000100
PUBLIC	__real@38800100
PUBLIC	__real@3a802008
PUBLIC	__real@3a83126f
PUBLIC	__real@3b808081
PUBLIC	__real@3c010204
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c820821
PUBLIC	__real@3d042108
PUBLIC	__real@3d888889
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e124925
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3eaaaaab
PUBLIC	__real@3f000000
PUBLIC	__real@3f333333
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3ff33333
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40e00000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41700000
PUBLIC	__real@41800000
PUBLIC	__real@41f80000
PUBLIC	__real@427c0000
PUBLIC	__real@42fe0000
PUBLIC	__real@437f0000
PUBLIC	__real@43ff8000
PUBLIC	__real@447fc000
PUBLIC	__real@46fffe00
PUBLIC	__real@477fff00
PUBLIC	__real@501502f9
PUBLIC	__real@bdcccccd
PUBLIC	__real@be4ccccd
PUBLIC	__real@be99999a
PUBLIC	__real@bf000000
PUBLIC	__real@bf333333
PUBLIC	__real@bf666666
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__real@c1800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp__fdtest:PROC
EXTRN	__imp_log2f:PROC
EXTRN	__imp_powf:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	floorf:PROC
EXTRN	roundf:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fpclassify@@YAHM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?fpclassify@@YAHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@F@std@@SAFXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?max@?$numeric_limits@F@std@@SAFXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@G@std@@SAGXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?max@?$numeric_limits@G@std@@SAGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?floor@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?floor@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?log2@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?log2@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pow@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?pow@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?round@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?round@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+201
	DD	imagerel $unwind$?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+206
	DD	imagerel $unwind$?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+267
	DD	imagerel $unwind$?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+165
	DD	imagerel $unwind$?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+180
	DD	imagerel $unwind$?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+221
	DD	imagerel $unwind$?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?toFloat32@detail@glm@@YAMF@Z DD imagerel $LN12
	DD	imagerel $LN12+407
	DD	imagerel $unwind$?toFloat32@detail@glm@@YAMF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?toFloat16@detail@glm@@YAFAEBM@Z DD imagerel $LN16
	DD	imagerel $LN16+432
	DD	imagerel $unwind$?toFloat16@detail@glm@@YAFAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?overflow@detail@glm@@YAMXZ DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$?overflow@detail@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0uif32@detail@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??0uif32@detail@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@G$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@G$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@F$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@F$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@E$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@E$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@C$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@C$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm1x8@glm@@YAEM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?packUnorm1x8@glm@@YAEM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm1x8@glm@@YAME@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?unpackUnorm1x8@glm@@YAME@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+169
	DD	imagerel $unwind$?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packSnorm1x8@glm@@YAEM@Z DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$?packSnorm1x8@glm@@YAEM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackSnorm1x8@glm@@YAME@Z DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$?unpackSnorm1x8@glm@@YAME@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+174
	DD	imagerel $unwind$?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z DD imagerel $LN3
	DD	imagerel $LN3+167
	DD	imagerel $unwind$?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm1x16@glm@@YAGM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?packUnorm1x16@glm@@YAGM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm1x16@glm@@YAMG@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?unpackUnorm1x16@glm@@YAMG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+179
	DD	imagerel $unwind$?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packSnorm1x16@glm@@YAGM@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$?packSnorm1x16@glm@@YAGM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackSnorm1x16@glm@@YAMG@Z DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$?unpackSnorm1x16@glm@@YAMG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+184
	DD	imagerel $unwind$?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+167
	DD	imagerel $unwind$?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packHalf1x16@glm@@YAGM@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$?packHalf1x16@glm@@YAGM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackHalf1x16@glm@@YAMG@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$?unpackHalf1x16@glm@@YAMG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+220
	DD	imagerel $unwind$?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+203
	DD	imagerel $unwind$?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+383
	DD	imagerel $unwind$?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+316
	DD	imagerel $unwind$?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+329
	DD	imagerel $unwind$?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+245
	DD	imagerel $unwind$?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packF2x11_1x10@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?packF2x11_1x10@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackF2x11_1x10@glm@@YA?AU?$tvec3@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?unpackF2x11_1x10@glm@@YA?AU?$tvec3@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+726
	DD	imagerel $unwind$?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+204
	DD	imagerel $unwind$?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z DD imagerel $LN3
	DD	imagerel $LN3+144
	DD	imagerel $unwind$?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+256
	DD	imagerel $unwind$?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z DD imagerel $LN3
	DD	imagerel $LN3+196
	DD	imagerel $unwind$?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+273
	DD	imagerel $unwind$?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z DD imagerel $LN3
	DD	imagerel $LN3+186
	DD	imagerel $unwind$?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+319
	DD	imagerel $unwind$?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z DD imagerel $LN3
	DD	imagerel $LN3+239
	DD	imagerel $unwind$?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+270
	DD	imagerel $unwind$?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z DD imagerel $LN3
	DD	imagerel $LN3+184
	DD	imagerel $unwind$?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?float2packed11@detail@glm@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?float2packed11@detail@glm@@YAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packed11ToFloat@detail@glm@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?packed11ToFloat@detail@glm@@YAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?float2packed10@detail@glm@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?float2packed10@detail@glm@@YAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packed10ToFloat@detail@glm@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?packed10ToFloat@detail@glm@@YAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?floatTo11bit@detail@glm@@YAIM@Z DD imagerel $LN8
	DD	imagerel $LN8+168
	DD	imagerel $unwind$?floatTo11bit@detail@glm@@YAIM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isnan@M@@YA_NM@Z DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$??$isnan@M@@YA_NM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isinf@M@@YA_NM@Z DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$??$isinf@M@@YA_NM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packed11bitToFloat@detail@glm@@YAMI@Z DD imagerel $LN8
	DD	imagerel $LN8+183
	DD	imagerel $unwind$?packed11bitToFloat@detail@glm@@YAMI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?floatTo10bit@detail@glm@@YAIM@Z DD imagerel $LN8
	DD	imagerel $LN8+168
	DD	imagerel $unwind$?floatTo10bit@detail@glm@@YAIM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packed10bitToFloat@detail@glm@@YAMI@Z DD imagerel $LN8
	DD	imagerel $LN8+183
	DD	imagerel $unwind$?packed10bitToFloat@detail@glm@@YAMI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M@glm@@YAMMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$clamp@M@glm@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0M$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0E$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?0E$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0M$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0C$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?0C$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@I$0A@@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@I$0A@@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0M$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0IIII@?$tvec4@M$0A@@glm@@QEAA@IIII@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$??$?0IIII@?$tvec4@M$0A@@glm@@QEAA@IIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$max@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log2@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$log2@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$?0M$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0III@?$tvec3@M$0A@@glm@@QEAA@III@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?0III@?$tvec3@M$0A@@glm@@QEAA@III@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?0M$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0II@?$tvec2@M$0A@@glm@@QEAA@II@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$?0II@?$tvec2@M$0A@@glm@@QEAA@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$round@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$round@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?print_bits@@YAXAEBM@Z DD imagerel $LN10
	DD	imagerel $LN10+214
	DD	imagerel $unwind$?print_bits@@YAXAEBM@Z
$pdata$?print_10bits@@YAXAEBI@Z DD imagerel $LN9
	DD	imagerel $LN9+157
	DD	imagerel $unwind$?print_10bits@@YAXAEBI@Z
$pdata$?print_11bits@@YAXAEBI@Z DD imagerel $LN9
	DD	imagerel $LN9+157
	DD	imagerel $unwind$?print_11bits@@YAXAEBI@Z
$pdata$?print_value@@YAXAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?print_value@@YAXAEBM@Z
$pdata$?test_Half1x16@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+495
	DD	imagerel $unwind$?test_Half1x16@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_Half1x16@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_Half1x16@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_Half1x16@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_Half1x16@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@M@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@M@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@M@std@@QEAAXQEAM_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@M@std@@QEAAXQEAM_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@M@std@@QEAAPEAM_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@M@std@@QEAAPEAM_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SA_KAEBV?$allocator@M@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SA_KAEBV?$allocator@M@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@MV?$allocator@M@std@@@std@@QEAAAEAM_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@MV?$allocator@M@std@@@std@@QEAAAEAM_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AEAAXQEAM_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+246
	DD	imagerel $unwind$?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AEAAXQEAM_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEBAAEBV?$allocator@M@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEBAAEBV?$allocator@M@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAAAEAV?$allocator@M@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAAAEAV?$allocator@M@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEBAAEBV?$allocator@M@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEBAAEBV?$allocator@M@2@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_Half4x16@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+654
	DD	imagerel $unwind$?test_Half4x16@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_Half4x16@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_Half4x16@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_Half4x16@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_Half4x16@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+197
	DD	imagerel $unwind$??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+252
	DD	imagerel $unwind$?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$packHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$packHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$unpackHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$unpackHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_I3x10_1x2@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+505
	DD	imagerel $unwind$?test_I3x10_1x2@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_I3x10_1x2@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_I3x10_1x2@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_I3x10_1x2@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_I3x10_1x2@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+197
	DD	imagerel $unwind$??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+252
	DD	imagerel $unwind$?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_U3x10_1x2@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+505
	DD	imagerel $unwind$?test_U3x10_1x2@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_U3x10_1x2@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_U3x10_1x2@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_U3x10_1x2@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_U3x10_1x2@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAXQEAU?$tvec4@I$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAXQEAU?$tvec4@I$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@I$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+197
	DD	imagerel $unwind$??A?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@I$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@I$0A@@glm@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+252
	DD	imagerel $unwind$?_Change_array@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@I$0A@@glm@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_Snorm3x10_1x2@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+546
	DD	imagerel $unwind$?test_Snorm3x10_1x2@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_Snorm3x10_1x2@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_Snorm3x10_1x2@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_Snorm3x10_1x2@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_Snorm3x10_1x2@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_Unorm3x10_1x2@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+546
	DD	imagerel $unwind$?test_Unorm3x10_1x2@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_Unorm3x10_1x2@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_Unorm3x10_1x2@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_Unorm3x10_1x2@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_Unorm3x10_1x2@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_F2x11_1x10@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+521
	DD	imagerel $unwind$?test_F2x11_1x10@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_F2x11_1x10@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_F2x11_1x10@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_F2x11_1x10@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_F2x11_1x10@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAXQEAU?$tvec3@M$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAXQEAU?$tvec3@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?capacity@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@M$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+203
	DD	imagerel $unwind$??A?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec3@M$0A@@glm@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+258
	DD	imagerel $unwind$?_Change_array@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec3@M$0A@@glm@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+216
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+282
	DD	imagerel $unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_F3x9_E1x5@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+546
	DD	imagerel $unwind$?test_F3x9_E1x5@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_F3x9_E1x5@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_F3x9_E1x5@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_F3x9_E1x5@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_F3x9_E1x5@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm1x16@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+497
	DD	imagerel $unwind$?test_packUnorm1x16@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm1x16@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm1x16@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm1x16@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm1x16@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAXQEAU?$tvec1@M$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAXQEAU?$tvec1@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec1@M$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec1@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec1@M$0A@@glm@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+246
	DD	imagerel $unwind$?_Change_array@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec1@M$0A@@glm@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packSnorm1x16@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+462
	DD	imagerel $unwind$?test_packSnorm1x16@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packSnorm1x16@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packSnorm1x16@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packSnorm1x16@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packSnorm1x16@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm2x16@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+476
	DD	imagerel $unwind$?test_packUnorm2x16@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+246
	DD	imagerel $unwind$?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packSnorm2x16@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+476
	DD	imagerel $unwind$?test_packSnorm2x16@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm4x16@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+500
	DD	imagerel $unwind$?test_packUnorm4x16@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm4x16@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm4x16@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm4x16@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm4x16@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packSnorm4x16@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+565
	DD	imagerel $unwind$?test_packSnorm4x16@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packSnorm4x16@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packSnorm4x16@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packSnorm4x16@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packSnorm4x16@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm1x8@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+460
	DD	imagerel $unwind$?test_packUnorm1x8@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm1x8@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm1x8@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm1x8@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm1x8@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packSnorm1x8@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+430
	DD	imagerel $unwind$?test_packSnorm1x8@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packSnorm1x8@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packSnorm1x8@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packSnorm1x8@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packSnorm1x8@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm2x8@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+441
	DD	imagerel $unwind$?test_packUnorm2x8@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm2x8@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm2x8@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm2x8@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm2x8@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packSnorm2x8@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+401
	DD	imagerel $unwind$?test_packSnorm2x8@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packSnorm2x8@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packSnorm2x8@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packSnorm2x8@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packSnorm2x8@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm4x8@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+499
	DD	imagerel $unwind$?test_packUnorm4x8@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packSnorm4x8@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+499
	DD	imagerel $unwind$?test_packSnorm4x8@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+441
	DD	imagerel $unwind$?test_packUnorm@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$packUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$??$packUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$unpackUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@G$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$unpackUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@G$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packSnorm@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+478
	DD	imagerel $unwind$?test_packSnorm@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packSnorm@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packSnorm@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packSnorm@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packSnorm@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$packSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$??$packSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$unpackSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@F$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??$unpackSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@F$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm2x4@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+435
	DD	imagerel $unwind$?test_packUnorm2x4@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm2x4@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm2x4@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm2x4@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm2x4@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm4x4@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+496
	DD	imagerel $unwind$?test_packUnorm4x4@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm4x4@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm4x4@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm4x4@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm4x4@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm3x5_1x1@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+496
	DD	imagerel $unwind$?test_packUnorm3x5_1x1@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm3x5_1x1@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm3x5_1x1@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm3x5_1x1@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm3x5_1x1@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm1x5_1x6_1x5@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+464
	DD	imagerel $unwind$?test_packUnorm1x5_1x6_1x5@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm1x5_1x6_1x5@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm1x5_1x6_1x5@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm1x5_1x6_1x5@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm1x5_1x6_1x5@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm2x3_1x2@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+463
	DD	imagerel $unwind$?test_packUnorm2x3_1x2@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm2x3_1x2@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm2x3_1x2@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm2x3_1x2@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm2x3_1x2@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+483
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAU?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAU?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec1@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$emplace_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec1@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_one_at_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??$_Emplace_one_at_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec1@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec1@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAU?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAU?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec3@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$emplace_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec3@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_one_at_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??$_Emplace_one_at_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAU?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAU?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$emplace_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_one_at_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??$_Emplace_one_at_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec4@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec4@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@H$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$emplace_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@H$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_one_at_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??$_Emplace_one_at_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAM@std@@YA$$QEAMAEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAM@std@@YA$$QEAMAEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_back@M@?$vector@MV?$allocator@M@std@@@std@@QEAA?A_T$$QEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$emplace_back@M@?$vector@MV?$allocator@M@std@@@std@@QEAA?A_T$$QEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@M@std@@YA$$QEAMAEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@M@std@@YA$$QEAMAEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_one_at_back@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??$_Emplace_one_at_back@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@M@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0M@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@M@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec1@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec1@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPEAMQEAMAEAV?$allocator@M@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPEAMQEAMAEAV?$allocator@M@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$min@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_round@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_round@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+247
	DD	imagerel $unwind$?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+218
	DD	imagerel $unwind$?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+280
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0G$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?0G$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0F$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?0F$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD imagerel $LN13
	DD	imagerel $LN13+519
	DD	imagerel $unwind$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_with_unused_capacity@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Emplace_back_with_unused_capacity@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD imagerel $LN13
	DD	imagerel $LN13+519
	DD	imagerel $unwind$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_with_unused_capacity@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Emplace_back_with_unused_capacity@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD imagerel $LN13
	DD	imagerel $LN13+542
	DD	imagerel $unwind$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_with_unused_capacity@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Emplace_back_with_unused_capacity@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z DD imagerel $LN13
	DD	imagerel $LN13+530
	DD	imagerel $unwind$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_with_unused_capacity@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Emplace_back_with_unused_capacity@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z DD imagerel $LN13
	DD	imagerel $LN13+530
	DD	imagerel $unwind$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD imagerel $LN13
	DD	imagerel $LN13+530
	DD	imagerel $unwind$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_with_unused_capacity@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Emplace_back_with_unused_capacity@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z DD imagerel $LN13
	DD	imagerel $LN13+519
	DD	imagerel $unwind$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z@4HA DD imagerel ?catch$0@?0???$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z@4HA
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+278
	DD	imagerel $unwind$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U?$tvec1@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec1@M$0A@@glm@@$$QEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$_Construct_in_place@U?$tvec1@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec1@M$0A@@glm@@$$QEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec1@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@QEAU?$tvec1@M$0A@@glm@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$construct@U?$tvec1@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@QEAU?$tvec1@M$0A@@glm@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+278
	DD	imagerel $unwind$??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U?$tvec3@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec3@M$0A@@glm@@$$QEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$_Construct_in_place@U?$tvec3@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec3@M$0A@@glm@@$$QEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec3@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@QEAU?$tvec3@M$0A@@glm@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$construct@U?$tvec3@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@QEAU?$tvec3@M$0A@@glm@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+290
	DD	imagerel $unwind$??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U?$tvec4@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@I$0A@@glm@@$$QEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$_Construct_in_place@U?$tvec4@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@I$0A@@glm@@$$QEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec4@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@QEAU?$tvec4@I$0A@@glm@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$construct@U?$tvec4@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@QEAU?$tvec4@I$0A@@glm@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U?$tvec4@H$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@H$0A@@glm@@$$QEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$_Construct_in_place@U?$tvec4@H$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@H$0A@@glm@@$$QEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@MM@std@@YAXAEAM$$QEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@MM@std@@YAXAEAM$$QEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@M@std@@YAPEAMPEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@M@std@@YAPEAMPEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAM$$QEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAM$$QEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+278
	DD	imagerel $unwind$??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$07@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Get_size_of_n@$07@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0M@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0M@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec1@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec1@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec1@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec1@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAU?$tvec1@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec1@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAU?$tvec1@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec1@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAU?$tvec1@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAU?$tvec1@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec1@M$0A@@glm@@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec1@M$0A@@glm@@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@U?$tvec1@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@U?$tvec1@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec3@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec3@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAU?$tvec3@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec3@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAU?$tvec3@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec3@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAU?$tvec3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAU?$tvec3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@M$0A@@glm@@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@M$0A@@glm@@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@U?$tvec3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@U?$tvec3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec4@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec4@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAU?$tvec4@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAU?$tvec4@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAU?$tvec4@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@I$0A@@glm@@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@I$0A@@glm@@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@U?$tvec4@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@U?$tvec4@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@M@std@@YAPEAMAEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@M@std@@YAPEAMAEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAM@std@@YAPEAXPEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAM@std@@YAPEAXPEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAM@std@@YA?A_TAEBQEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAM@std@@YA?A_TAEBQEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAMPEAM@std@@YAPEAMPEAM00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAMPEAM@std@@YAPEAMPEAM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@PEAMAEAV?$allocator@M@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@PEAMAEAV?$allocator@M@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAPEAMXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAPEAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAX$$QEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAX$$QEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tvec1@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec1@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tvec1@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec1@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tvec3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec3@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tvec3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec3@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tvec4@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tvec4@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAM@std@@YA?A_PAEBQEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAM@std@@YA?A_PAEBQEAM@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c1800000
CONST	SEGMENT
__real@c1800000 DD 0c1800000r			; -16
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@501502f9
CONST	SEGMENT
__real@501502f9 DD 0501502f9r			; 1e+10
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@447fc000
CONST	SEGMENT
__real@447fc000 DD 0447fc000r			; 1023
CONST	ENDS
;	COMDAT __real@43ff8000
CONST	SEGMENT
__real@43ff8000 DD 043ff8000r			; 511
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42fe0000
CONST	SEGMENT
__real@42fe0000 DD 042fe0000r			; 127
CONST	ENDS
;	COMDAT __real@427c0000
CONST	SEGMENT
__real@427c0000 DD 0427c0000r			; 63
CONST	ENDS
;	COMDAT __real@41f80000
CONST	SEGMENT
__real@41f80000 DD 041f80000r			; 31
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff33333
CONST	SEGMENT
__real@3ff33333 DD 03ff33333r			; 1.9
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eaaaaab
CONST	SEGMENT
__real@3eaaaaab DD 03eaaaaabr			; 0.333333
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e124925
CONST	SEGMENT
__real@3e124925 DD 03e124925r			; 0.142857
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d888889
CONST	SEGMENT
__real@3d888889 DD 03d888889r			; 0.0666667
CONST	ENDS
;	COMDAT __real@3d042108
CONST	SEGMENT
__real@3d042108 DD 03d042108r			; 0.0322581
CONST	ENDS
;	COMDAT __real@3c820821
CONST	SEGMENT
__real@3c820821 DD 03c820821r			; 0.015873
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3c010204
CONST	SEGMENT
__real@3c010204 DD 03c010204r			; 0.00787402
CONST	ENDS
;	COMDAT __real@3b808081
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@3a802008
CONST	SEGMENT
__real@3a802008 DD 03a802008r			; 0.000977517
CONST	ENDS
;	COMDAT __real@38800100
CONST	SEGMENT
__real@38800100 DD 038800100r			; 6.1037e-05
CONST	ENDS
;	COMDAT __real@38000100
CONST	SEGMENT
__real@38000100 DD 038000100r			; 3.05185e-05
CONST	ENDS
;	COMDAT __real@37800080
CONST	SEGMENT
__real@37800080 DD 037800080r			; 1.5259e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'1', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAM@std@@YA?A_PAEBQEAM@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tvec4@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@I$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tvec3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec3@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tvec1@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec1@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAX$$QEAM@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAPEAMXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@PEAMAEAV?$allocator@M@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAMPEAM@std@@YAPEAMPEAM00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAM@std@@YA?A_TAEBQEAM@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAM@std@@YAPEAXPEAM@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@M@std@@YAPEAMAEAM@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@U?$tvec4@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@I$0A@@glm@@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAU?$tvec4@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@I$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec4@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@I$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@U?$tvec3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@M$0A@@glm@@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAU?$tvec3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAU?$tvec3@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec3@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec3@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@U?$tvec1@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec1@M$0A@@glm@@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAU?$tvec1@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAU?$tvec1@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec1@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec1@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec1@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0M@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$07@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<float *,std::allocator<float> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<float *,std::allocator<float> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<float *,std::allocator<float> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAM$$QEAM@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@M@std@@YAPEAMPEAM@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@MM@std@@YAXAEAM$$QEAM@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U?$tvec4@H$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@H$0A@@glm@@$$QEAU12@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<glm::tvec4<unsigned int,0> *,std::allocator<glm::tvec4<unsigned int,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<glm::tvec4<unsigned int,0> *,std::allocator<glm::tvec4<unsigned int,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<glm::tvec4<unsigned int,0> *,std::allocator<glm::tvec4<unsigned int,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec4@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@QEAU?$tvec4@I$0A@@glm@@$$QEAU34@@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U?$tvec4@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@I$0A@@glm@@$$QEAU12@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<glm::tvec3<float,0> *,std::allocator<glm::tvec3<float,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<glm::tvec3<float,0> *,std::allocator<glm::tvec3<float,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<glm::tvec3<float,0> *,std::allocator<glm::tvec3<float,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec3@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@QEAU?$tvec3@M$0A@@glm@@$$QEAU34@@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U?$tvec3@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec3@M$0A@@glm@@$$QEAU12@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<glm::tvec1<float,0> *,std::allocator<glm::tvec1<float,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<glm::tvec1<float,0> *,std::allocator<glm::tvec1<float,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<glm::tvec1<float,0> *,std::allocator<glm::tvec1<float,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec1@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@QEAU?$tvec1@M$0A@@glm@@$$QEAU34@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U?$tvec1@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec1@M$0A@@glm@@$$QEAU12@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z DB 06H
	DB	00H
	DB	00H
	DB	0f1H, 03H
	DB	02H
	DB	'Y', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z
	DD	imagerel $tryMap$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z
	DD	imagerel $ip2state$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z DD 021719H
	DD	07010f217H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_with_unused_capacity@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 06H
	DB	00H
	DB	00H
	DB	0f5H, 03H
	DB	02H
	DB	'u', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $tryMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $ip2state$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD 021719H
	DD	07010f217H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z DB 06H
	DB	00H
	DB	00H
	DB	0f5H, 03H
	DB	02H
	DB	'u', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $tryMap$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $ip2state$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z DD 021719H
	DD	07010f217H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_with_unused_capacity@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z DB 06H
	DB	00H
	DB	00H
	DB	0f5H, 03H
	DB	02H
	DB	'u', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $tryMap$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $ip2state$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z DD 021719H
	DD	07010f217H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_with_unused_capacity@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 06H
	DB	00H
	DB	00H
	DB	'%', 04H
	DB	02H
	DB	'u', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $tryMap$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $ip2state$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD 021719H
	DD	07010f217H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_with_unused_capacity@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 06H
	DB	00H
	DB	00H
	DB	0f1H, 03H
	DB	02H
	DB	'Y', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $tryMap$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $ip2state$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD 021719H
	DD	07010f217H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_with_unused_capacity@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 06H
	DB	00H
	DB	00H
	DB	0f1H, 03H
	DB	02H
	DB	'Y', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $tryMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $ip2state$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD 021719H
	DD	07010f217H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0F$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0G$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z$rtcName$0 DB 055H ; glm::detail::compute_half<0,glm::tvec4>::unpack
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z$rtcVarDesc DD 038H ; glm::detail::compute_half<0,glm::tvec4>::unpack
	DD	08H
	DQ	FLAT:?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z$rtcName$0
	ORG $+48
?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_half<0,glm::tvec4>::unpack
	DD	00H
	DQ	FLAT:?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$0 DB 055H ; glm::detail::compute_half<0,glm::tvec4>::pack
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$1 DB 050H ; glm::detail::compute_half<0,glm::tvec4>::pack
	DB	061H
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+1
?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcVarDesc DD 058H ; glm::detail::compute_half<0,glm::tvec4>::pack
	DD	08H
	DQ	FLAT:?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$0
	ORG $+96
?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcFrameData DD 02H ; glm::detail::compute_half<0,glm::tvec4>::pack
	DD	00H
	DQ	FLAT:?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_round@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPEAMQEAMAEAV?$allocator@M@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec1@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@M@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_one_at_back@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@M@std@@YA$$QEAMAEAM@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_back@M@?$vector@MV?$allocator@M@std@@@std@@QEAA?A_T$$QEAM@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAM@std@@YA$$QEAMAEAM@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_one_at_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@H$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec4@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_one_at_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@I$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAU?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_one_at_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec3@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAU?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec1@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_one_at_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec1@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAU?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$unpackSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@F$0A@@0@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$packSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$unpackUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@G$0A@@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$packUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcName$0 DB 05fH ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcVarDesc DD 024H ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcFrameData DD 01H ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z$rtcName$0 DB 05fH ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z$rtcVarDesc DD 024H ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z$rtcFrameData DD 01H ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec1@M$0A@@glm@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec1@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	DB	053H
	DB	032H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAXQEAU?$tvec1@M$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z$rtcName$0 DB 05fH ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z$rtcVarDesc DD 024H ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z$rtcFrameData DD 01H ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec3@M$0A@@glm@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	DB	053H
	DB	033H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAXQEAU?$tvec3@M$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD 021901H
	DD	07015b219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z$rtcName$0 DB 05fH ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z$rtcVarDesc DD 024H ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z$rtcFrameData DD 01H ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@I$0A@@glm@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@I$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::~vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >
	DB	053H
	DB	034H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::~vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::~vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAXQEAU?$tvec4@I$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcName$0 DB 05fH ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcVarDesc DD 024H ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcFrameData DD 01H ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	DB	053H
	DB	035H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$unpackHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$packHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcName$0 DB 05fH ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcVarDesc DD 024H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcFrameData DD 01H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	DB	053H
	DB	036H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEBAAEBV?$allocator@M@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAAAEAV?$allocator@M@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEBAAEBV?$allocator@M@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z$rtcName$0 DB 05fH ; std::vector<float,std::allocator<float> >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z$rtcVarDesc DD 024H ; std::vector<float,std::allocator<float> >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z$rtcFrameData DD 01H ; std::vector<float,std::allocator<float> >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AEAAXQEAM_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@MV?$allocator@M@std@@@std@@QEAAAEAM_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	DB	053H
	DB	037H
	DB	00H
	ORG $+12
??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	DD	01H
	DQ	FLAT:??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	DD	00H
	DQ	FLAT:??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SA_KAEBV?$allocator@M@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@M@std@@QEAAPEAM_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@M@std@@QEAAXQEAM_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@M@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm2x3_1x2@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm1x5_1x6_1x5@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm3x5_1x1@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm4x4@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm2x4@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packSnorm@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packSnorm2x8@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm2x8@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packSnorm1x8@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm1x8@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packSnorm4x16@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm4x16@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packSnorm1x16@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm1x16@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_F3x9_E1x5@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_F2x11_1x10@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_Unorm3x10_1x2@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_Snorm3x10_1x2@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_U3x10_1x2@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_I3x10_1x2@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_Half4x16@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_Half1x16@@YAHXZ@4HA
	DD	00H
	DD	05H
voltbl	ENDS
xdata	SEGMENT
$unwind$?print_bits@@YAXAEBM@Z DD 022001H
	DD	07006920aH
$unwind$?print_10bits@@YAXAEBI@Z DD 020a01H
	DD	07006520aH
$unwind$?print_11bits@@YAXAEBI@Z DD 020a01H
	DD	07006520aH
$unwind$?print_value@@YAXAEBM@Z DD 020a01H
	DD	07006320aH
$unwind$?test_Half1x16@@YAHXZ DD 031a11H
	DD	0140109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_Half1x16@@YAHXZ
$cppxdata$?test_Half1x16@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_Half1x16@@YAHXZ
	DD	imagerel $ip2state$?test_Half1x16@@YAHXZ
$stateUnwindMap$?test_Half1x16@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_Half1x16@@YAHXZ@4HA
$ip2state$?test_Half1x16@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'U', 06H
	DB	00H
$cppxdata$?test_Half4x16@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_Half4x16@@YAHXZ
	DD	imagerel $ip2state$?test_Half4x16@@YAHXZ
$unwind$?dtor$0@?0??test_Half1x16@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_Half4x16@@YAHXZ DD 031a11H
	DD	0340109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_Half4x16@@YAHXZ
$stateUnwindMap$?test_Half4x16@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_Half4x16@@YAHXZ@4HA
$ip2state$?test_Half4x16@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	0d1H, 08H
	DB	00H
$cppxdata$?test_I3x10_1x2@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_I3x10_1x2@@YAHXZ
	DD	imagerel $ip2state$?test_I3x10_1x2@@YAHXZ
$cppxdata$?test_U3x10_1x2@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_U3x10_1x2@@YAHXZ
	DD	imagerel $ip2state$?test_U3x10_1x2@@YAHXZ
$unwind$?dtor$0@?0??test_Half4x16@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_I3x10_1x2@@YAHXZ DD 031a11H
	DD	0280109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_I3x10_1x2@@YAHXZ
$stateUnwindMap$?test_I3x10_1x2@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_I3x10_1x2@@YAHXZ@4HA
$ip2state$?test_I3x10_1x2@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'}', 06H
	DB	00H
$stateUnwindMap$?test_U3x10_1x2@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_U3x10_1x2@@YAHXZ@4HA
$unwind$?dtor$0@?0??test_I3x10_1x2@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_U3x10_1x2@@YAHXZ DD 031a11H
	DD	0280109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_U3x10_1x2@@YAHXZ
$ip2state$?test_U3x10_1x2@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'}', 06H
	DB	00H
$unwind$?dtor$0@?0??test_U3x10_1x2@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_Snorm3x10_1x2@@YAHXZ DD 031a11H
	DD	02a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_Snorm3x10_1x2@@YAHXZ
$cppxdata$?test_Snorm3x10_1x2@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_Snorm3x10_1x2@@YAHXZ
	DD	imagerel $ip2state$?test_Snorm3x10_1x2@@YAHXZ
$stateUnwindMap$?test_Snorm3x10_1x2@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_Snorm3x10_1x2@@YAHXZ@4HA
$ip2state$?test_Snorm3x10_1x2@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'!', 07H
	DB	00H
$cppxdata$?test_Unorm3x10_1x2@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_Unorm3x10_1x2@@YAHXZ
	DD	imagerel $ip2state$?test_Unorm3x10_1x2@@YAHXZ
$unwind$?dtor$0@?0??test_Snorm3x10_1x2@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_Unorm3x10_1x2@@YAHXZ DD 031a11H
	DD	02a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_Unorm3x10_1x2@@YAHXZ
$stateUnwindMap$?test_Unorm3x10_1x2@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_Unorm3x10_1x2@@YAHXZ@4HA
$ip2state$?test_Unorm3x10_1x2@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'!', 07H
	DB	00H
$cppxdata$?test_F2x11_1x10@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_F2x11_1x10@@YAHXZ
	DD	imagerel $ip2state$?test_F2x11_1x10@@YAHXZ
$cppxdata$?test_F3x9_E1x5@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_F3x9_E1x5@@YAHXZ
	DD	imagerel $ip2state$?test_F3x9_E1x5@@YAHXZ
$unwind$?dtor$0@?0??test_Unorm3x10_1x2@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_F2x11_1x10@@YAHXZ DD 031a11H
	DD	0260109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_F2x11_1x10@@YAHXZ
$stateUnwindMap$?test_F2x11_1x10@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_F2x11_1x10@@YAHXZ@4HA
$ip2state$?test_F2x11_1x10@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	0bdH, 06H
	DB	00H
$stateUnwindMap$?test_F3x9_E1x5@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_F3x9_E1x5@@YAHXZ@4HA
$unwind$?dtor$0@?0??test_F2x11_1x10@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_F3x9_E1x5@@YAHXZ DD 031a11H
	DD	0260109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_F3x9_E1x5@@YAHXZ
$ip2state$?test_F3x9_E1x5@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'!', 07H
	DB	00H
$unwind$?dtor$0@?0??test_F3x9_E1x5@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm1x16@@YAHXZ DD 031a11H
	DD	01a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm1x16@@YAHXZ
$cppxdata$?test_packUnorm1x16@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm1x16@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm1x16@@YAHXZ
$stateUnwindMap$?test_packUnorm1x16@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm1x16@@YAHXZ@4HA
$ip2state$?test_packUnorm1x16@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	']', 06H
	DB	00H
$cppxdata$?test_packSnorm1x16@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packSnorm1x16@@YAHXZ
	DD	imagerel $ip2state$?test_packSnorm1x16@@YAHXZ
$unwind$?dtor$0@?0??test_packUnorm1x16@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packSnorm1x16@@YAHXZ DD 031a11H
	DD	01a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packSnorm1x16@@YAHXZ
$stateUnwindMap$?test_packSnorm1x16@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packSnorm1x16@@YAHXZ@4HA
$ip2state$?test_packSnorm1x16@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	0d1H, 05H
	DB	00H
$cppxdata$?test_packUnorm2x16@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm2x16@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm2x16@@YAHXZ
$cppxdata$?test_packSnorm2x16@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packSnorm2x16@@YAHXZ
	DD	imagerel $ip2state$?test_packSnorm2x16@@YAHXZ
$unwind$?dtor$0@?0??test_packSnorm1x16@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm2x16@@YAHXZ DD 031a11H
	DD	01a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm2x16@@YAHXZ
$stateUnwindMap$?test_packUnorm2x16@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA
$ip2state$?test_packUnorm2x16@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	09H, 06H
	DB	00H
$stateUnwindMap$?test_packSnorm2x16@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA
$unwind$?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packSnorm2x16@@YAHXZ DD 031a11H
	DD	01a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packSnorm2x16@@YAHXZ
$ip2state$?test_packSnorm2x16@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	09H, 06H
	DB	00H
$unwind$?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm4x16@@YAHXZ DD 041b11H
	DD	025010aH
	DD	060027003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm4x16@@YAHXZ
$cppxdata$?test_packUnorm4x16@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm4x16@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm4x16@@YAHXZ
$stateUnwindMap$?test_packUnorm4x16@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm4x16@@YAHXZ@4HA
$ip2state$?test_packUnorm4x16@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'\'
	DB	02H
	DB	'a', 06H
	DB	00H
$cppxdata$?test_packSnorm4x16@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packSnorm4x16@@YAHXZ
	DD	imagerel $ip2state$?test_packSnorm4x16@@YAHXZ
$unwind$?dtor$0@?0??test_packUnorm4x16@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packSnorm4x16@@YAHXZ DD 041b11H
	DD	025010aH
	DD	060027003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packSnorm4x16@@YAHXZ
$stateUnwindMap$?test_packSnorm4x16@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packSnorm4x16@@YAHXZ@4HA
$ip2state$?test_packSnorm4x16@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'\'
	DB	02H
	DB	'e', 07H
	DB	00H
$cppxdata$?test_packUnorm1x8@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm1x8@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm1x8@@YAHXZ
$cppxdata$?test_packSnorm1x8@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packSnorm1x8@@YAHXZ
	DD	imagerel $ip2state$?test_packSnorm1x8@@YAHXZ
$unwind$?dtor$0@?0??test_packSnorm4x16@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm1x8@@YAHXZ DD 031a11H
	DD	0180109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm1x8@@YAHXZ
$stateUnwindMap$?test_packUnorm1x8@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm1x8@@YAHXZ@4HA
$ip2state$?test_packUnorm1x8@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	0c9H, 05H
	DB	00H
$stateUnwindMap$?test_packSnorm1x8@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packSnorm1x8@@YAHXZ@4HA
$unwind$?dtor$0@?0??test_packUnorm1x8@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packSnorm1x8@@YAHXZ DD 031a11H
	DD	0180109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packSnorm1x8@@YAHXZ
$ip2state$?test_packSnorm1x8@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'Q', 05H
	DB	00H
$unwind$?dtor$0@?0??test_packSnorm1x8@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm2x8@@YAHXZ DD 031a11H
	DD	01a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm2x8@@YAHXZ
$cppxdata$?test_packUnorm2x8@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm2x8@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm2x8@@YAHXZ
$stateUnwindMap$?test_packUnorm2x8@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm2x8@@YAHXZ@4HA
$ip2state$?test_packUnorm2x8@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'}', 05H
	DB	00H
$cppxdata$?test_packSnorm2x8@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packSnorm2x8@@YAHXZ
	DD	imagerel $ip2state$?test_packSnorm2x8@@YAHXZ
$unwind$?dtor$0@?0??test_packUnorm2x8@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packSnorm2x8@@YAHXZ DD 031a11H
	DD	01a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packSnorm2x8@@YAHXZ
$stateUnwindMap$?test_packSnorm2x8@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packSnorm2x8@@YAHXZ@4HA
$ip2state$?test_packSnorm2x8@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	0ddH, 04H
	DB	00H
$cppxdata$?test_packUnorm4x8@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm4x8@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm4x8@@YAHXZ
$cppxdata$?test_packSnorm4x8@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packSnorm4x8@@YAHXZ
	DD	imagerel $ip2state$?test_packSnorm4x8@@YAHXZ
$unwind$?dtor$0@?0??test_packSnorm2x8@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm4x8@@YAHXZ DD 041b11H
	DD	023010aH
	DD	060027003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm4x8@@YAHXZ
$stateUnwindMap$?test_packUnorm4x8@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA
$ip2state$?test_packUnorm4x8@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'\'
	DB	02H
	DB	']', 06H
	DB	00H
$stateUnwindMap$?test_packSnorm4x8@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA
$unwind$?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packSnorm4x8@@YAHXZ DD 041b11H
	DD	023010aH
	DD	060027003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packSnorm4x8@@YAHXZ
$ip2state$?test_packSnorm4x8@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'\'
	DB	02H
	DB	']', 06H
	DB	00H
$unwind$?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm@@YAHXZ DD 031a11H
	DD	01e0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm@@YAHXZ
$cppxdata$?test_packUnorm@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm@@YAHXZ
$stateUnwindMap$?test_packUnorm@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm@@YAHXZ@4HA
$ip2state$?test_packUnorm@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'}', 05H
	DB	00H
$cppxdata$?test_packSnorm@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packSnorm@@YAHXZ
	DD	imagerel $ip2state$?test_packSnorm@@YAHXZ
$unwind$?dtor$0@?0??test_packUnorm@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packSnorm@@YAHXZ DD 031a11H
	DD	01e0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packSnorm@@YAHXZ
$stateUnwindMap$?test_packSnorm@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packSnorm@@YAHXZ@4HA
$ip2state$?test_packSnorm@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	011H, 06H
	DB	00H
$cppxdata$?test_packUnorm2x4@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm2x4@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm2x4@@YAHXZ
$cppxdata$?test_packUnorm4x4@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm4x4@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm4x4@@YAHXZ
$unwind$?dtor$0@?0??test_packSnorm@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm2x4@@YAHXZ DD 031a11H
	DD	01a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm2x4@@YAHXZ
$stateUnwindMap$?test_packUnorm2x4@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm2x4@@YAHXZ@4HA
$ip2state$?test_packUnorm2x4@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'e', 05H
	DB	00H
$stateUnwindMap$?test_packUnorm4x4@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm4x4@@YAHXZ@4HA
$unwind$?dtor$0@?0??test_packUnorm2x4@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm4x4@@YAHXZ DD 041b11H
	DD	023010aH
	DD	060027003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm4x4@@YAHXZ
$ip2state$?test_packUnorm4x4@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'\'
	DB	02H
	DB	'Q', 06H
	DB	00H
$unwind$?dtor$0@?0??test_packUnorm4x4@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm3x5_1x1@@YAHXZ DD 041b11H
	DD	023010aH
	DD	060027003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm3x5_1x1@@YAHXZ
$cppxdata$?test_packUnorm3x5_1x1@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm3x5_1x1@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm3x5_1x1@@YAHXZ
$stateUnwindMap$?test_packUnorm3x5_1x1@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm3x5_1x1@@YAHXZ@4HA
$ip2state$?test_packUnorm3x5_1x1@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'\'
	DB	02H
	DB	'Q', 06H
	DB	00H
$cppxdata$?test_packUnorm1x5_1x6_1x5@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm1x5_1x6_1x5@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm1x5_1x6_1x5@@YAHXZ
$unwind$?dtor$0@?0??test_packUnorm3x5_1x1@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm1x5_1x6_1x5@@YAHXZ DD 041b11H
	DD	01f010aH
	DD	060027003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm1x5_1x6_1x5@@YAHXZ
$stateUnwindMap$?test_packUnorm1x5_1x6_1x5@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm1x5_1x6_1x5@@YAHXZ@4HA
$ip2state$?test_packUnorm1x5_1x6_1x5@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'\'
	DB	02H
	DB	0d1H, 05H
	DB	00H
$cppxdata$?test_packUnorm2x3_1x2@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm2x3_1x2@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm2x3_1x2@@YAHXZ
	ORG $+1
$unwind$?dtor$0@?0??test_packUnorm1x5_1x6_1x5@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm2x3_1x2@@YAHXZ DD 041b11H
	DD	01f010aH
	DD	060027003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm2x3_1x2@@YAHXZ
$stateUnwindMap$?test_packUnorm2x3_1x2@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm2x3_1x2@@YAHXZ@4HA
$ip2state$?test_packUnorm2x3_1x2@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'\'
	DB	02H
	DB	0cdH, 05H
	DB	00H
	ORG $+2
$unwind$?dtor$0@?0??test_packUnorm2x3_1x2@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
	ORG $+2
?print_bits@@YAXAEBM@Z$rtcName$0 DB 075H		; print_bits
	DB	069H
	DB	066H
	DB	00H
	ORG $+4
?print_bits@@YAXAEBM@Z$rtcVarDesc DD 024H		; print_bits
	DD	04H
	DQ	FLAT:?print_bits@@YAXAEBM@Z$rtcName$0
	ORG $+48
?print_bits@@YAXAEBM@Z$rtcFrameData DD 01H		; print_bits
	DD	00H
	DQ	FLAT:?print_bits@@YAXAEBM@Z$rtcVarDesc
?test_Half1x16@@YAHXZ$rtcName$0 DB 054H			; test_Half1x16
	DB	065H
	DB	073H
	DB	074H
	DB	073H
	DB	00H
	ORG $+2
?test_Half1x16@@YAHXZ$rtcFrameData DD 01H		; test_Half1x16
	DD	00H
	DQ	FLAT:?test_Half1x16@@YAHXZ$rtcVarDesc
?test_Half4x16@@YAHXZ$rtcName$0 DB 054H			; test_Half4x16
	DB	065H
	DB	073H
	DB	074H
	DB	073H
	DB	00H
	ORG $+2
?test_Half1x16@@YAHXZ$rtcVarDesc DD 038H		; test_Half1x16
	DD	020H
	DQ	FLAT:?test_Half1x16@@YAHXZ$rtcName$0
	ORG $+48
?test_Half4x16@@YAHXZ$rtcName$1 DB 076H			; test_Half4x16
	DB	030H
	DB	00H
	ORG $+1
?test_Half4x16@@YAHXZ$rtcName$2 DB 076H			; test_Half4x16
	DB	031H
	DB	00H
	ORG $+1
?test_Half4x16@@YAHXZ$rtcName$3 DB 070H			; test_Half4x16
	DB	032H
	DB	00H
	ORG $+1
?test_Half4x16@@YAHXZ$rtcName$4 DB 076H			; test_Half4x16
	DB	032H
	DB	00H
	ORG $+1
?test_Half4x16@@YAHXZ$rtcVarDesc DD 0108H		; test_Half4x16
	DD	010H
	DQ	FLAT:?test_Half4x16@@YAHXZ$rtcName$4
	DD	0e8H
	DD	08H
	DQ	FLAT:?test_Half4x16@@YAHXZ$rtcName$3
	DD	0b8H
	DD	010H
	DQ	FLAT:?test_Half4x16@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test_Half4x16@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_Half4x16@@YAHXZ$rtcName$0
	ORG $+240
?test_Half4x16@@YAHXZ$rtcFrameData DD 05H		; test_Half4x16
	DD	00H
	DQ	FLAT:?test_Half4x16@@YAHXZ$rtcVarDesc
?test_I3x10_1x2@@YAHXZ$rtcName$0 DB 054H		; test_I3x10_1x2
	DB	065H
	DB	073H
	DB	074H
	DB	073H
	DB	00H
	ORG $+2
?test_I3x10_1x2@@YAHXZ$rtcName$1 DB 076H		; test_I3x10_1x2
	DB	030H
	DB	00H
	ORG $+1
?test_I3x10_1x2@@YAHXZ$rtcName$2 DB 076H		; test_I3x10_1x2
	DB	031H
	DB	00H
	ORG $+1
?test_I3x10_1x2@@YAHXZ$rtcVarDesc DD 0b8H		; test_I3x10_1x2
	DD	010H
	DQ	FLAT:?test_I3x10_1x2@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test_I3x10_1x2@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_I3x10_1x2@@YAHXZ$rtcName$0
	ORG $+144
?test_I3x10_1x2@@YAHXZ$rtcFrameData DD 03H		; test_I3x10_1x2
	DD	00H
	DQ	FLAT:?test_I3x10_1x2@@YAHXZ$rtcVarDesc
?test_U3x10_1x2@@YAHXZ$rtcName$0 DB 054H		; test_U3x10_1x2
	DB	065H
	DB	073H
	DB	074H
	DB	073H
	DB	00H
	ORG $+2
?test_U3x10_1x2@@YAHXZ$rtcName$1 DB 076H		; test_U3x10_1x2
	DB	030H
	DB	00H
	ORG $+1
?test_U3x10_1x2@@YAHXZ$rtcName$2 DB 076H		; test_U3x10_1x2
	DB	031H
	DB	00H
	ORG $+1
?test_U3x10_1x2@@YAHXZ$rtcVarDesc DD 0b8H		; test_U3x10_1x2
	DD	010H
	DQ	FLAT:?test_U3x10_1x2@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test_U3x10_1x2@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_U3x10_1x2@@YAHXZ$rtcName$0
	ORG $+144
?test_U3x10_1x2@@YAHXZ$rtcFrameData DD 03H		; test_U3x10_1x2
	DD	00H
	DQ	FLAT:?test_U3x10_1x2@@YAHXZ$rtcVarDesc
?test_Snorm3x10_1x2@@YAHXZ$rtcName$0 DB 054H		; test_Snorm3x10_1x2
	DB	065H
	DB	073H
	DB	074H
	DB	073H
	DB	00H
	ORG $+2
?test_Snorm3x10_1x2@@YAHXZ$rtcName$1 DB 076H		; test_Snorm3x10_1x2
	DB	030H
	DB	00H
	ORG $+1
?test_Snorm3x10_1x2@@YAHXZ$rtcName$2 DB 076H		; test_Snorm3x10_1x2
	DB	031H
	DB	00H
	ORG $+1
?test_Snorm3x10_1x2@@YAHXZ$rtcVarDesc DD 0b8H		; test_Snorm3x10_1x2
	DD	010H
	DQ	FLAT:?test_Snorm3x10_1x2@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test_Snorm3x10_1x2@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_Snorm3x10_1x2@@YAHXZ$rtcName$0
	ORG $+144
?test_Snorm3x10_1x2@@YAHXZ$rtcFrameData DD 03H		; test_Snorm3x10_1x2
	DD	00H
	DQ	FLAT:?test_Snorm3x10_1x2@@YAHXZ$rtcVarDesc
?test_Unorm3x10_1x2@@YAHXZ$rtcName$0 DB 054H		; test_Unorm3x10_1x2
	DB	065H
	DB	073H
	DB	074H
	DB	073H
	DB	00H
	ORG $+2
?test_Unorm3x10_1x2@@YAHXZ$rtcName$1 DB 076H		; test_Unorm3x10_1x2
	DB	030H
	DB	00H
	ORG $+1
?test_Unorm3x10_1x2@@YAHXZ$rtcName$2 DB 076H		; test_Unorm3x10_1x2
	DB	031H
	DB	00H
	ORG $+1
?test_Unorm3x10_1x2@@YAHXZ$rtcVarDesc DD 0b8H		; test_Unorm3x10_1x2
	DD	010H
	DQ	FLAT:?test_Unorm3x10_1x2@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test_Unorm3x10_1x2@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_Unorm3x10_1x2@@YAHXZ$rtcName$0
	ORG $+144
?test_Unorm3x10_1x2@@YAHXZ$rtcFrameData DD 03H		; test_Unorm3x10_1x2
	DD	00H
	DQ	FLAT:?test_Unorm3x10_1x2@@YAHXZ$rtcVarDesc
?test_F2x11_1x10@@YAHXZ$rtcName$0 DB 054H		; test_F2x11_1x10
	DB	065H
	DB	073H
	DB	074H
	DB	073H
	DB	00H
	ORG $+2
?test_F2x11_1x10@@YAHXZ$rtcName$1 DB 076H		; test_F2x11_1x10
	DB	030H
	DB	00H
	ORG $+1
?test_F2x11_1x10@@YAHXZ$rtcName$2 DB 076H		; test_F2x11_1x10
	DB	031H
	DB	00H
	ORG $+1
?test_F2x11_1x10@@YAHXZ$rtcVarDesc DD 0b8H		; test_F2x11_1x10
	DD	0cH
	DQ	FLAT:?test_F2x11_1x10@@YAHXZ$rtcName$2
	DD	088H
	DD	0cH
	DQ	FLAT:?test_F2x11_1x10@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_F2x11_1x10@@YAHXZ$rtcName$0
	ORG $+144
?test_F2x11_1x10@@YAHXZ$rtcFrameData DD 03H		; test_F2x11_1x10
	DD	00H
	DQ	FLAT:?test_F2x11_1x10@@YAHXZ$rtcVarDesc
?test_F3x9_E1x5@@YAHXZ$rtcName$0 DB 054H		; test_F3x9_E1x5
	DB	065H
	DB	073H
	DB	074H
	DB	073H
	DB	00H
	ORG $+2
?test_F3x9_E1x5@@YAHXZ$rtcName$1 DB 076H		; test_F3x9_E1x5
	DB	030H
	DB	00H
	ORG $+1
?test_F3x9_E1x5@@YAHXZ$rtcName$2 DB 076H		; test_F3x9_E1x5
	DB	031H
	DB	00H
	ORG $+1
?test_F3x9_E1x5@@YAHXZ$rtcVarDesc DD 0b8H		; test_F3x9_E1x5
	DD	0cH
	DQ	FLAT:?test_F3x9_E1x5@@YAHXZ$rtcName$2
	DD	088H
	DD	0cH
	DQ	FLAT:?test_F3x9_E1x5@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_F3x9_E1x5@@YAHXZ$rtcName$0
	ORG $+144
?test_F3x9_E1x5@@YAHXZ$rtcFrameData DD 03H		; test_F3x9_E1x5
	DD	00H
	DQ	FLAT:?test_F3x9_E1x5@@YAHXZ$rtcVarDesc
?test_packUnorm1x16@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm1x16
	DB	00H
	ORG $+2
?test_packUnorm1x16@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm1x16
	DB	00H
	ORG $+2
?test_packUnorm1x16@@YAHXZ$rtcName$2 DB 044H		; test_packUnorm1x16
	DB	00H
	ORG $+6
?test_packUnorm1x16@@YAHXZ$rtcVarDesc DD 094H		; test_packUnorm1x16
	DD	04H
	DQ	FLAT:?test_packUnorm1x16@@YAHXZ$rtcName$2
	DD	074H
	DD	04H
	DQ	FLAT:?test_packUnorm1x16@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packUnorm1x16@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm1x16@@YAHXZ$rtcFrameData DD 03H		; test_packUnorm1x16
	DD	00H
	DQ	FLAT:?test_packUnorm1x16@@YAHXZ$rtcVarDesc
?test_packSnorm1x16@@YAHXZ$rtcName$0 DB 041H		; test_packSnorm1x16
	DB	00H
	ORG $+2
?test_packSnorm1x16@@YAHXZ$rtcName$1 DB 042H		; test_packSnorm1x16
	DB	00H
	ORG $+2
?test_packSnorm1x16@@YAHXZ$rtcName$2 DB 044H		; test_packSnorm1x16
	DB	00H
	ORG $+6
?test_packSnorm1x16@@YAHXZ$rtcVarDesc DD 094H		; test_packSnorm1x16
	DD	04H
	DQ	FLAT:?test_packSnorm1x16@@YAHXZ$rtcName$2
	DD	074H
	DD	04H
	DQ	FLAT:?test_packSnorm1x16@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packSnorm1x16@@YAHXZ$rtcName$0
	ORG $+144
?test_packSnorm1x16@@YAHXZ$rtcFrameData DD 03H		; test_packSnorm1x16
	DD	00H
	DQ	FLAT:?test_packSnorm1x16@@YAHXZ$rtcVarDesc
?test_packUnorm2x16@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm2x16
	DB	00H
	ORG $+2
?test_packUnorm2x16@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm2x16
	DB	00H
	ORG $+2
?test_packUnorm2x16@@YAHXZ$rtcName$2 DB 044H		; test_packUnorm2x16
	DB	00H
	ORG $+6
?test_packUnorm2x16@@YAHXZ$rtcVarDesc DD 098H		; test_packUnorm2x16
	DD	08H
	DQ	FLAT:?test_packUnorm2x16@@YAHXZ$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?test_packUnorm2x16@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packUnorm2x16@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm2x16@@YAHXZ$rtcFrameData DD 03H		; test_packUnorm2x16
	DD	00H
	DQ	FLAT:?test_packUnorm2x16@@YAHXZ$rtcVarDesc
?test_packSnorm2x16@@YAHXZ$rtcName$0 DB 041H		; test_packSnorm2x16
	DB	00H
	ORG $+2
?test_packSnorm2x16@@YAHXZ$rtcName$1 DB 042H		; test_packSnorm2x16
	DB	00H
	ORG $+2
?test_packSnorm2x16@@YAHXZ$rtcName$2 DB 044H		; test_packSnorm2x16
	DB	00H
	ORG $+6
?test_packSnorm2x16@@YAHXZ$rtcVarDesc DD 098H		; test_packSnorm2x16
	DD	08H
	DQ	FLAT:?test_packSnorm2x16@@YAHXZ$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?test_packSnorm2x16@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packSnorm2x16@@YAHXZ$rtcName$0
	ORG $+144
?test_packSnorm2x16@@YAHXZ$rtcFrameData DD 03H		; test_packSnorm2x16
	DD	00H
	DQ	FLAT:?test_packSnorm2x16@@YAHXZ$rtcVarDesc
?test_packUnorm4x16@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm4x16
	DB	00H
	ORG $+2
?test_packUnorm4x16@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm4x16
	DB	00H
	ORG $+2
?test_packUnorm4x16@@YAHXZ$rtcName$2 DB 044H		; test_packUnorm4x16
	DB	00H
	ORG $+6
?test_packUnorm4x16@@YAHXZ$rtcVarDesc DD 0a8H		; test_packUnorm4x16
	DD	010H
	DQ	FLAT:?test_packUnorm4x16@@YAHXZ$rtcName$2
	DD	078H
	DD	010H
	DQ	FLAT:?test_packUnorm4x16@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packUnorm4x16@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm4x16@@YAHXZ$rtcFrameData DD 03H		; test_packUnorm4x16
	DD	00H
	DQ	FLAT:?test_packUnorm4x16@@YAHXZ$rtcVarDesc
?test_packSnorm4x16@@YAHXZ$rtcName$0 DB 041H		; test_packSnorm4x16
	DB	00H
	ORG $+2
?test_packSnorm4x16@@YAHXZ$rtcName$1 DB 042H		; test_packSnorm4x16
	DB	00H
	ORG $+2
?test_packSnorm4x16@@YAHXZ$rtcName$2 DB 044H		; test_packSnorm4x16
	DB	00H
	ORG $+6
?test_packSnorm4x16@@YAHXZ$rtcVarDesc DD 0b8H		; test_packSnorm4x16
	DD	010H
	DQ	FLAT:?test_packSnorm4x16@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test_packSnorm4x16@@YAHXZ$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?test_packSnorm4x16@@YAHXZ$rtcName$0
	ORG $+144
?test_packSnorm4x16@@YAHXZ$rtcFrameData DD 03H		; test_packSnorm4x16
	DD	00H
	DQ	FLAT:?test_packSnorm4x16@@YAHXZ$rtcVarDesc
?test_packUnorm1x8@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm1x8
	DB	00H
	ORG $+2
?test_packUnorm1x8@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm1x8
	DB	00H
	ORG $+2
?test_packUnorm1x8@@YAHXZ$rtcName$2 DB 044H		; test_packUnorm1x8
	DB	00H
	ORG $+6
?test_packUnorm1x8@@YAHXZ$rtcVarDesc DD 094H		; test_packUnorm1x8
	DD	04H
	DQ	FLAT:?test_packUnorm1x8@@YAHXZ$rtcName$2
	DD	074H
	DD	04H
	DQ	FLAT:?test_packUnorm1x8@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packUnorm1x8@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm1x8@@YAHXZ$rtcFrameData DD 03H		; test_packUnorm1x8
	DD	00H
	DQ	FLAT:?test_packUnorm1x8@@YAHXZ$rtcVarDesc
?test_packSnorm1x8@@YAHXZ$rtcName$0 DB 041H		; test_packSnorm1x8
	DB	00H
	ORG $+2
?test_packSnorm1x8@@YAHXZ$rtcName$1 DB 042H		; test_packSnorm1x8
	DB	00H
	ORG $+2
?test_packSnorm1x8@@YAHXZ$rtcName$2 DB 044H		; test_packSnorm1x8
	DB	00H
	ORG $+6
?test_packSnorm1x8@@YAHXZ$rtcVarDesc DD 094H		; test_packSnorm1x8
	DD	04H
	DQ	FLAT:?test_packSnorm1x8@@YAHXZ$rtcName$2
	DD	074H
	DD	04H
	DQ	FLAT:?test_packSnorm1x8@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packSnorm1x8@@YAHXZ$rtcName$0
	ORG $+144
?test_packSnorm1x8@@YAHXZ$rtcFrameData DD 03H		; test_packSnorm1x8
	DD	00H
	DQ	FLAT:?test_packSnorm1x8@@YAHXZ$rtcVarDesc
?test_packUnorm2x8@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm2x8
	DB	00H
	ORG $+2
?test_packUnorm2x8@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm2x8
	DB	00H
	ORG $+2
?test_packUnorm2x8@@YAHXZ$rtcName$2 DB 044H		; test_packUnorm2x8
	DB	00H
	ORG $+6
?test_packUnorm2x8@@YAHXZ$rtcVarDesc DD 098H		; test_packUnorm2x8
	DD	08H
	DQ	FLAT:?test_packUnorm2x8@@YAHXZ$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?test_packUnorm2x8@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packUnorm2x8@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm2x8@@YAHXZ$rtcFrameData DD 03H		; test_packUnorm2x8
	DD	00H
	DQ	FLAT:?test_packUnorm2x8@@YAHXZ$rtcVarDesc
?test_packSnorm2x8@@YAHXZ$rtcName$0 DB 041H		; test_packSnorm2x8
	DB	00H
	ORG $+2
?test_packSnorm2x8@@YAHXZ$rtcName$1 DB 042H		; test_packSnorm2x8
	DB	00H
	ORG $+2
?test_packSnorm2x8@@YAHXZ$rtcName$2 DB 044H		; test_packSnorm2x8
	DB	00H
	ORG $+6
?test_packSnorm2x8@@YAHXZ$rtcVarDesc DD 098H		; test_packSnorm2x8
	DD	08H
	DQ	FLAT:?test_packSnorm2x8@@YAHXZ$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?test_packSnorm2x8@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packSnorm2x8@@YAHXZ$rtcName$0
	ORG $+144
?test_packSnorm2x8@@YAHXZ$rtcFrameData DD 03H		; test_packSnorm2x8
	DD	00H
	DQ	FLAT:?test_packSnorm2x8@@YAHXZ$rtcVarDesc
?test_packUnorm4x8@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm4x8
	DB	00H
	ORG $+2
?test_packUnorm4x8@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm4x8
	DB	00H
	ORG $+2
?test_packUnorm4x8@@YAHXZ$rtcName$2 DB 044H		; test_packUnorm4x8
	DB	00H
	ORG $+6
?test_packUnorm4x8@@YAHXZ$rtcVarDesc DD 0b8H		; test_packUnorm4x8
	DD	010H
	DQ	FLAT:?test_packUnorm4x8@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test_packUnorm4x8@@YAHXZ$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?test_packUnorm4x8@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm4x8@@YAHXZ$rtcFrameData DD 03H		; test_packUnorm4x8
	DD	00H
	DQ	FLAT:?test_packUnorm4x8@@YAHXZ$rtcVarDesc
?test_packSnorm4x8@@YAHXZ$rtcName$0 DB 041H		; test_packSnorm4x8
	DB	00H
	ORG $+2
?test_packSnorm4x8@@YAHXZ$rtcName$1 DB 042H		; test_packSnorm4x8
	DB	00H
	ORG $+2
?test_packSnorm4x8@@YAHXZ$rtcName$2 DB 044H		; test_packSnorm4x8
	DB	00H
	ORG $+6
?test_packSnorm4x8@@YAHXZ$rtcVarDesc DD 0b8H		; test_packSnorm4x8
	DD	010H
	DQ	FLAT:?test_packSnorm4x8@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test_packSnorm4x8@@YAHXZ$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?test_packSnorm4x8@@YAHXZ$rtcName$0
	ORG $+144
?test_packSnorm4x8@@YAHXZ$rtcFrameData DD 03H		; test_packSnorm4x8
	DD	00H
	DQ	FLAT:?test_packSnorm4x8@@YAHXZ$rtcVarDesc
?test_packUnorm@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm
	DB	00H
	ORG $+2
?test_packUnorm@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm
	DB	00H
	ORG $+2
?test_packUnorm@@YAHXZ$rtcName$2 DB 043H		; test_packUnorm
	DB	00H
	ORG $+2
?test_packUnorm@@YAHXZ$rtcName$3 DB 044H		; test_packUnorm
	DB	00H
	ORG $+2
?test_packUnorm@@YAHXZ$rtcVarDesc DD 0b8H		; test_packUnorm
	DD	08H
	DQ	FLAT:?test_packUnorm@@YAHXZ$rtcName$3
	DD	094H
	DD	04H
	DQ	FLAT:?test_packUnorm@@YAHXZ$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?test_packUnorm@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packUnorm@@YAHXZ$rtcName$0
	ORG $+192
?test_packUnorm@@YAHXZ$rtcFrameData DD 04H		; test_packUnorm
	DD	00H
	DQ	FLAT:?test_packUnorm@@YAHXZ$rtcVarDesc
?test_packSnorm@@YAHXZ$rtcName$0 DB 041H		; test_packSnorm
	DB	00H
	ORG $+2
?test_packSnorm@@YAHXZ$rtcName$1 DB 042H		; test_packSnorm
	DB	00H
	ORG $+2
?test_packSnorm@@YAHXZ$rtcName$2 DB 043H		; test_packSnorm
	DB	00H
	ORG $+2
?test_packSnorm@@YAHXZ$rtcName$3 DB 044H		; test_packSnorm
	DB	00H
	ORG $+2
?test_packSnorm@@YAHXZ$rtcVarDesc DD 0b8H		; test_packSnorm
	DD	08H
	DQ	FLAT:?test_packSnorm@@YAHXZ$rtcName$3
	DD	094H
	DD	04H
	DQ	FLAT:?test_packSnorm@@YAHXZ$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?test_packSnorm@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packSnorm@@YAHXZ$rtcName$0
	ORG $+192
?test_packSnorm@@YAHXZ$rtcFrameData DD 04H		; test_packSnorm
	DD	00H
	DQ	FLAT:?test_packSnorm@@YAHXZ$rtcVarDesc
?test_packUnorm2x4@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm2x4
	DB	00H
	ORG $+2
?test_packUnorm2x4@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm2x4
	DB	00H
	ORG $+2
?test_packUnorm2x4@@YAHXZ$rtcName$2 DB 044H		; test_packUnorm2x4
	DB	00H
	ORG $+6
?test_packUnorm2x4@@YAHXZ$rtcVarDesc DD 098H		; test_packUnorm2x4
	DD	08H
	DQ	FLAT:?test_packUnorm2x4@@YAHXZ$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?test_packUnorm2x4@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packUnorm2x4@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm2x4@@YAHXZ$rtcFrameData DD 03H		; test_packUnorm2x4
	DD	00H
	DQ	FLAT:?test_packUnorm2x4@@YAHXZ$rtcVarDesc
?test_packUnorm4x4@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm4x4
	DB	00H
	ORG $+2
?test_packUnorm4x4@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm4x4
	DB	00H
	ORG $+2
?test_packUnorm4x4@@YAHXZ$rtcName$2 DB 044H		; test_packUnorm4x4
	DB	00H
	ORG $+6
?test_packUnorm4x4@@YAHXZ$rtcVarDesc DD 0b8H		; test_packUnorm4x4
	DD	010H
	DQ	FLAT:?test_packUnorm4x4@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test_packUnorm4x4@@YAHXZ$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?test_packUnorm4x4@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm4x4@@YAHXZ$rtcFrameData DD 03H		; test_packUnorm4x4
	DD	00H
	DQ	FLAT:?test_packUnorm4x4@@YAHXZ$rtcVarDesc
?test_packUnorm3x5_1x1@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm3x5_1x1
	DB	00H
	ORG $+2
?test_packUnorm3x5_1x1@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm3x5_1x1
	DB	00H
	ORG $+2
?test_packUnorm3x5_1x1@@YAHXZ$rtcName$2 DB 044H		; test_packUnorm3x5_1x1
	DB	00H
	ORG $+6
?test_packUnorm3x5_1x1@@YAHXZ$rtcVarDesc DD 0b8H	; test_packUnorm3x5_1x1
	DD	010H
	DQ	FLAT:?test_packUnorm3x5_1x1@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test_packUnorm3x5_1x1@@YAHXZ$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?test_packUnorm3x5_1x1@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm3x5_1x1@@YAHXZ$rtcFrameData DD 03H	; test_packUnorm3x5_1x1
	DD	00H
	DQ	FLAT:?test_packUnorm3x5_1x1@@YAHXZ$rtcVarDesc
?test_packUnorm1x5_1x6_1x5@@YAHXZ$rtcName$0 DB 041H	; test_packUnorm1x5_1x6_1x5
	DB	00H
	ORG $+2
?test_packUnorm1x5_1x6_1x5@@YAHXZ$rtcName$1 DB 042H	; test_packUnorm1x5_1x6_1x5
	DB	00H
	ORG $+2
?test_packUnorm1x5_1x6_1x5@@YAHXZ$rtcName$2 DB 044H	; test_packUnorm1x5_1x6_1x5
	DB	00H
	ORG $+6
?test_packUnorm1x5_1x6_1x5@@YAHXZ$rtcVarDesc DD 0a8H	; test_packUnorm1x5_1x6_1x5
	DD	0cH
	DQ	FLAT:?test_packUnorm1x5_1x6_1x5@@YAHXZ$rtcName$2
	DD	078H
	DD	0cH
	DQ	FLAT:?test_packUnorm1x5_1x6_1x5@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packUnorm1x5_1x6_1x5@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm1x5_1x6_1x5@@YAHXZ$rtcFrameData DD 03H	; test_packUnorm1x5_1x6_1x5
	DD	00H
	DQ	FLAT:?test_packUnorm1x5_1x6_1x5@@YAHXZ$rtcVarDesc
?test_packUnorm2x3_1x2@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm2x3_1x2
	DB	00H
	ORG $+2
?test_packUnorm2x3_1x2@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm2x3_1x2
	DB	00H
	ORG $+2
?test_packUnorm2x3_1x2@@YAHXZ$rtcName$2 DB 044H		; test_packUnorm2x3_1x2
	DB	00H
	ORG $+6
?test_packUnorm2x3_1x2@@YAHXZ$rtcVarDesc DD 0a8H	; test_packUnorm2x3_1x2
	DD	0cH
	DQ	FLAT:?test_packUnorm2x3_1x2@@YAHXZ$rtcName$2
	DD	078H
	DD	0cH
	DQ	FLAT:?test_packUnorm2x3_1x2@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packUnorm2x3_1x2@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm2x3_1x2@@YAHXZ$rtcFrameData DD 03H	; test_packUnorm2x3_1x2
	DD	00H
	DQ	FLAT:?test_packUnorm2x3_1x2@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$round@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0II@?$tvec2@M$0A@@glm@@QEAA@II@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0III@?$tvec3@M$0A@@glm@@QEAA@III@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log2@M@glm@@YAMM@Z DD 020b01H
	DD	07007720bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@MM@Z DD 021b01H
	DD	07017721bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0IIII@?$tvec4@M$0A@@glm@@QEAA@IIII@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@I$0A@@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z DD 011701H
	DD	07017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0C$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0E$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M@glm@@YAMMMM@Z DD 021701H
	DD	070135217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packed10bitToFloat@detail@glm@@YAMI@Z DD 022101H
	DD	07005d209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packed10bitToFloat@detail@glm@@YAMI@Z$rtcName$0 DB 052H ; glm::detail::packed10bitToFloat
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?packed10bitToFloat@detail@glm@@YAMI@Z$rtcName$1 DB 054H ; glm::detail::packed10bitToFloat
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
?packed10bitToFloat@detail@glm@@YAMI@Z$rtcVarDesc DD 054H ; glm::detail::packed10bitToFloat
	DD	04H
	DQ	FLAT:?packed10bitToFloat@detail@glm@@YAMI@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?packed10bitToFloat@detail@glm@@YAMI@Z$rtcName$0
	ORG $+96
?packed10bitToFloat@detail@glm@@YAMI@Z$rtcFrameData DD 02H ; glm::detail::packed10bitToFloat
	DD	00H
	DQ	FLAT:?packed10bitToFloat@detail@glm@@YAMI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?floatTo10bit@detail@glm@@YAIM@Z DD 021c01H
	DD	07007720bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?floatTo10bit@detail@glm@@YAIM@Z$rtcName$0 DB 050H	; glm::detail::floatTo10bit
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+11
?floatTo10bit@detail@glm@@YAIM@Z$rtcVarDesc DD 024H	; glm::detail::floatTo10bit
	DD	04H
	DQ	FLAT:?floatTo10bit@detail@glm@@YAIM@Z$rtcName$0
	ORG $+48
?floatTo10bit@detail@glm@@YAIM@Z$rtcFrameData DD 01H	; glm::detail::floatTo10bit
	DD	00H
	DQ	FLAT:?floatTo10bit@detail@glm@@YAIM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packed11bitToFloat@detail@glm@@YAMI@Z DD 022101H
	DD	07005d209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packed11bitToFloat@detail@glm@@YAMI@Z$rtcName$0 DB 052H ; glm::detail::packed11bitToFloat
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?packed11bitToFloat@detail@glm@@YAMI@Z$rtcName$1 DB 054H ; glm::detail::packed11bitToFloat
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
?packed11bitToFloat@detail@glm@@YAMI@Z$rtcVarDesc DD 054H ; glm::detail::packed11bitToFloat
	DD	04H
	DQ	FLAT:?packed11bitToFloat@detail@glm@@YAMI@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?packed11bitToFloat@detail@glm@@YAMI@Z$rtcName$0
	ORG $+96
?packed11bitToFloat@detail@glm@@YAMI@Z$rtcFrameData DD 02H ; glm::detail::packed11bitToFloat
	DD	00H
	DQ	FLAT:?packed11bitToFloat@detail@glm@@YAMI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isinf@M@@YA_NM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isnan@M@@YA_NM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?floatTo11bit@detail@glm@@YAIM@Z DD 021c01H
	DD	07007720bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?floatTo11bit@detail@glm@@YAIM@Z$rtcName$0 DB 050H	; glm::detail::floatTo11bit
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+11
?floatTo11bit@detail@glm@@YAIM@Z$rtcVarDesc DD 024H	; glm::detail::floatTo11bit
	DD	04H
	DQ	FLAT:?floatTo11bit@detail@glm@@YAIM@Z$rtcName$0
	ORG $+48
?floatTo11bit@detail@glm@@YAIM@Z$rtcFrameData DD 01H	; glm::detail::floatTo11bit
	DD	00H
	DQ	FLAT:?floatTo11bit@detail@glm@@YAIM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packed10ToFloat@detail@glm@@YAII@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?float2packed10@detail@glm@@YAII@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packed11ToFloat@detail@glm@@YAII@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?float2packed11@detail@glm@@YAII@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z DD 022701H
	DD	0700ad20eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z$rtcName$0 DB 053H ; glm::unpackUnorm2x3_1x2
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	046H
	DB	061H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z$rtcName$1 DB 055H ; glm::unpackUnorm2x3_1x2
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+13
?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z$rtcVarDesc DD 054H ; glm::unpackUnorm2x3_1x2
	DD	04H
	DQ	FLAT:?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z$rtcName$0
	ORG $+96
?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z$rtcFrameData DD 02H ; glm::unpackUnorm2x3_1x2
	DD	00H
	DQ	FLAT:?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z DD 032601H
	DD	014010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z$rtcName$0 DB 055H ; glm::packUnorm2x3_1x2
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z$rtcName$1 DB 052H ; glm::packUnorm2x3_1x2
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z$rtcVarDesc DD 054H ; glm::packUnorm2x3_1x2
	DD	04H
	DQ	FLAT:?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm2x3_1x2
	DD	00H
	DQ	FLAT:?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z DD 032b01H
	DD	0120112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcName$0 DB 053H ; glm::unpackUnorm3x5_1x1
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	046H
	DB	061H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcName$1 DB 055H ; glm::unpackUnorm3x5_1x1
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+13
?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcVarDesc DD 064H ; glm::unpackUnorm3x5_1x1
	DD	04H
	DQ	FLAT:?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcName$0
	ORG $+96
?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcFrameData DD 02H ; glm::unpackUnorm3x5_1x1
	DD	00H
	DQ	FLAT:?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z DD 032601H
	DD	018010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcName$0 DB 055H ; glm::packUnorm3x5_1x1
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcName$1 DB 052H ; glm::packUnorm3x5_1x1
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc DD 064H ; glm::packUnorm3x5_1x1
	DD	04H
	DQ	FLAT:?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm3x5_1x1
	DD	00H
	DQ	FLAT:?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z$rtcName$0 DB 053H ; glm::unpackUnorm1x5_1x6_1x5
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	046H
	DB	061H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z$rtcName$1 DB 055H ; glm::unpackUnorm1x5_1x6_1x5
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+13
?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z$rtcVarDesc DD 054H ; glm::unpackUnorm1x5_1x6_1x5
	DD	04H
	DQ	FLAT:?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z$rtcName$0
	ORG $+96
?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z$rtcFrameData DD 02H ; glm::unpackUnorm1x5_1x6_1x5
	DD	00H
	DQ	FLAT:?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z DD 032601H
	DD	014010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z$rtcName$0 DB 055H ; glm::packUnorm1x5_1x6_1x5
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z$rtcName$1 DB 052H ; glm::packUnorm1x5_1x6_1x5
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z$rtcVarDesc DD 054H ; glm::packUnorm1x5_1x6_1x5
	DD	04H
	DQ	FLAT:?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm1x5_1x6_1x5
	DD	00H
	DQ	FLAT:?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcName$0 DB 055H ; glm::unpackUnorm4x4
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcVarDesc DD 044H ; glm::unpackUnorm4x4
	DD	04H
	DQ	FLAT:?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcName$0
	ORG $+48
?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcFrameData DD 01H ; glm::unpackUnorm4x4
	DD	00H
	DQ	FLAT:?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z DD 032601H
	DD	014010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcName$0 DB 055H ; glm::packUnorm4x4
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcName$1 DB 052H ; glm::packUnorm4x4
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc DD 054H ; glm::packUnorm4x4
	DD	04H
	DQ	FLAT:?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm4x4
	DD	00H
	DQ	FLAT:?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z DD 022401H
	DD	0700a920eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z$rtcName$0 DB 055H ; glm::unpackUnorm2x4
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z$rtcVarDesc DD 034H ; glm::unpackUnorm2x4
	DD	04H
	DQ	FLAT:?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z$rtcName$0
	ORG $+48
?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z$rtcFrameData DD 01H ; glm::unpackUnorm2x4
	DD	00H
	DQ	FLAT:?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z DD 022301H
	DD	07006d20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z$rtcName$0 DB 055H ; glm::packUnorm2x4
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z$rtcName$1 DB 052H ; glm::packUnorm2x4
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc DD 044H ; glm::packUnorm2x4
	DD	04H
	DQ	FLAT:?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm2x4
	DD	00H
	DQ	FLAT:?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z DD 022401H
	DD	0700a920eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z$rtcName$0 DB 055H ; glm::unpackF3x9_E1x5
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z$rtcVarDesc DD 024H ; glm::unpackF3x9_E1x5
	DD	04H
	DQ	FLAT:?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackF3x9_E1x5
	DD	00H
	DQ	FLAT:?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z DD 032601H
	DD	01e010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z$rtcName$0 DB 043H ; glm::packF3x9_E1x5
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	00H
	ORG $+2
?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z$rtcName$1 DB 043H ; glm::packF3x9_E1x5
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	043H
	DB	06fH
	DB	06dH
	DB	070H
	DB	00H
	ORG $+2
?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z$rtcName$2 DB 055H ; glm::packF3x9_E1x5
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+5
?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z$rtcVarDesc DD 0a4H ; glm::packF3x9_E1x5
	DD	04H
	DQ	FLAT:?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z$rtcName$2
	DD	078H
	DD	0cH
	DQ	FLAT:?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z$rtcName$0
	ORG $+144
?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z$rtcFrameData DD 03H ; glm::packF3x9_E1x5
	DD	00H
	DQ	FLAT:?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackF2x11_1x10@glm@@YA?AU?$tvec3@M$0A@@1@I@Z DD 020e01H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packF2x11_1x10@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD 032a01H
	DD	0120111H
	DD	0700aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0 DB 053H ; glm::unpackUnorm3x10_1x2
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	046H
	DB	061H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	073H
	DB	00H
	ORG $+3
?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$1 DB 055H ; glm::unpackUnorm3x10_1x2
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc DD 064H ; glm::unpackUnorm3x10_1x2
	DD	04H
	DQ	FLAT:?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0
	ORG $+96
?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData DD 02H ; glm::unpackUnorm3x10_1x2
	DD	00H
	DQ	FLAT:?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD 032601H
	DD	018010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0 DB 055H ; glm::packUnorm3x10_1x2
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$1 DB 052H ; glm::packUnorm3x10_1x2
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc DD 064H ; glm::packUnorm3x10_1x2
	DD	04H
	DQ	FLAT:?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm3x10_1x2
	DD	00H
	DQ	FLAT:?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD 032801H
	DD	0700be20fH
	DD	0600aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0 DB 055H ; glm::unpackSnorm3x10_1x2
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$1 DB 052H ; glm::unpackSnorm3x10_1x2
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc DD 048H ; glm::unpackSnorm3x10_1x2
	DD	010H
	DQ	FLAT:?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0
	ORG $+96
?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData DD 02H ; glm::unpackSnorm3x10_1x2
	DD	00H
	DQ	FLAT:?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0 DB 052H ; glm::packSnorm3x10_1x2
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc DD 024H ; glm::packSnorm3x10_1x2
	DD	04H
	DQ	FLAT:?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0
	ORG $+48
?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData DD 01H ; glm::packSnorm3x10_1x2
	DD	00H
	DQ	FLAT:?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z DD 022401H
	DD	0700a920eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z$rtcName$0 DB 055H ; glm::unpackU3x10_1x2
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z$rtcVarDesc DD 034H ; glm::unpackU3x10_1x2
	DD	04H
	DQ	FLAT:?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackU3x10_1x2
	DD	00H
	DQ	FLAT:?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z$rtcName$0 DB 052H ; glm::packU3x10_1x2
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z$rtcVarDesc DD 024H ; glm::packU3x10_1x2
	DD	04H
	DQ	FLAT:?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z$rtcName$0
	ORG $+48
?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z$rtcFrameData DD 01H ; glm::packU3x10_1x2
	DD	00H
	DQ	FLAT:?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z DD 022401H
	DD	0700a920eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z$rtcName$0 DB 055H ; glm::unpackI3x10_1x2
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z$rtcVarDesc DD 034H ; glm::unpackI3x10_1x2
	DD	04H
	DQ	FLAT:?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackI3x10_1x2
	DD	00H
	DQ	FLAT:?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z$rtcName$0 DB 052H ; glm::packI3x10_1x2
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z$rtcVarDesc DD 024H ; glm::packI3x10_1x2
	DD	04H
	DQ	FLAT:?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z$rtcName$0
	ORG $+48
?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z$rtcFrameData DD 01H ; glm::packI3x10_1x2
	DD	00H
	DQ	FLAT:?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcName$0 DB 055H ; glm::unpackHalf4x16
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcVarDesc DD 038H ; glm::unpackHalf4x16
	DD	08H
	DQ	FLAT:?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcName$0
	ORG $+48
?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcFrameData DD 01H ; glm::unpackHalf4x16
	DD	00H
	DQ	FLAT:?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z DD 022301H
	DD	07006d20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$0 DB 055H ; glm::packHalf4x16
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$1 DB 050H ; glm::packHalf4x16
	DB	061H
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+1
?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc DD 058H ; glm::packHalf4x16
	DD	08H
	DQ	FLAT:?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packHalf4x16
	DD	00H
	DQ	FLAT:?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackHalf1x16@glm@@YAMG@Z DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackHalf1x16@glm@@YAMG@Z$rtcName$0 DB 055H		; glm::unpackHalf1x16
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackHalf1x16@glm@@YAMG@Z$rtcVarDesc DD 034H		; glm::unpackHalf1x16
	DD	02H
	DQ	FLAT:?unpackHalf1x16@glm@@YAMG@Z$rtcName$0
	ORG $+48
?unpackHalf1x16@glm@@YAMG@Z$rtcFrameData DD 01H		; glm::unpackHalf1x16
	DD	00H
	DQ	FLAT:?unpackHalf1x16@glm@@YAMG@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packHalf1x16@glm@@YAGM@Z DD 021c01H
	DD	07007b20bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packHalf1x16@glm@@YAGM@Z$rtcName$0 DB 054H		; glm::packHalf1x16
	DB	06fH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packHalf1x16@glm@@YAGM@Z$rtcName$1 DB 050H		; glm::packHalf1x16
	DB	061H
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+1
?packHalf1x16@glm@@YAGM@Z$rtcVarDesc DD 044H		; glm::packHalf1x16
	DD	02H
	DQ	FLAT:?packHalf1x16@glm@@YAGM@Z$rtcName$1
	DD	024H
	DD	02H
	DQ	FLAT:?packHalf1x16@glm@@YAGM@Z$rtcName$0
	ORG $+96
?packHalf1x16@glm@@YAGM@Z$rtcFrameData DD 02H		; glm::packHalf1x16
	DD	00H
	DQ	FLAT:?packHalf1x16@glm@@YAGM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcName$0 DB 055H ; glm::unpackSnorm4x16
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcVarDesc DD 028H ; glm::unpackSnorm4x16
	DD	08H
	DQ	FLAT:?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcName$0
	ORG $+48
?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcFrameData DD 01H ; glm::unpackSnorm4x16
	DD	00H
	DQ	FLAT:?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z DD 032601H
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$0 DB 054H ; glm::packSnorm4x16
	DB	06fH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$1 DB 050H ; glm::packSnorm4x16
	DB	061H
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+1
?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc DD 048H ; glm::packSnorm4x16
	DD	08H
	DQ	FLAT:?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packSnorm4x16
	DD	00H
	DQ	FLAT:?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackSnorm1x16@glm@@YAMG@Z DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackSnorm1x16@glm@@YAMG@Z$rtcName$0 DB 055H		; glm::unpackSnorm1x16
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackSnorm1x16@glm@@YAMG@Z$rtcVarDesc DD 034H		; glm::unpackSnorm1x16
	DD	02H
	DQ	FLAT:?unpackSnorm1x16@glm@@YAMG@Z$rtcName$0
	ORG $+48
?unpackSnorm1x16@glm@@YAMG@Z$rtcFrameData DD 01H	; glm::unpackSnorm1x16
	DD	00H
	DQ	FLAT:?unpackSnorm1x16@glm@@YAMG@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packSnorm1x16@glm@@YAGM@Z DD 021c01H
	DD	07007b20bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packSnorm1x16@glm@@YAGM@Z$rtcName$0 DB 054H		; glm::packSnorm1x16
	DB	06fH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packSnorm1x16@glm@@YAGM@Z$rtcName$1 DB 050H		; glm::packSnorm1x16
	DB	061H
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+1
?packSnorm1x16@glm@@YAGM@Z$rtcVarDesc DD 044H		; glm::packSnorm1x16
	DD	02H
	DQ	FLAT:?packSnorm1x16@glm@@YAGM@Z$rtcName$1
	DD	024H
	DD	02H
	DQ	FLAT:?packSnorm1x16@glm@@YAGM@Z$rtcName$0
	ORG $+96
?packSnorm1x16@glm@@YAGM@Z$rtcFrameData DD 02H		; glm::packSnorm1x16
	DD	00H
	DQ	FLAT:?packSnorm1x16@glm@@YAGM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcName$0 DB 055H ; glm::unpackUnorm4x16
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcVarDesc DD 028H ; glm::unpackUnorm4x16
	DD	08H
	DQ	FLAT:?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcName$0
	ORG $+48
?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcFrameData DD 01H ; glm::unpackUnorm4x16
	DD	00H
	DQ	FLAT:?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z DD 032601H
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$0 DB 054H ; glm::packUnorm4x16
	DB	06fH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$1 DB 050H ; glm::packUnorm4x16
	DB	061H
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+1
?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc DD 048H ; glm::packUnorm4x16
	DD	08H
	DQ	FLAT:?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm4x16
	DD	00H
	DQ	FLAT:?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm1x16@glm@@YAMG@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm1x16@glm@@YAGM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcName$0 DB 055H ; glm::unpackSnorm2x8
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcVarDesc DD 024H ; glm::unpackSnorm2x8
	DD	02H
	DQ	FLAT:?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcName$0
	ORG $+48
?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcFrameData DD 01H ; glm::unpackSnorm2x8
	DD	00H
	DQ	FLAT:?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z DD 022301H
	DD	07006d20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcName$0 DB 054H ; glm::packSnorm2x8
	DB	06fH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcName$1 DB 050H ; glm::packSnorm2x8
	DB	061H
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+1
?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc DD 044H ; glm::packSnorm2x8
	DD	02H
	DQ	FLAT:?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcName$1
	DD	024H
	DD	02H
	DQ	FLAT:?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packSnorm2x8
	DD	00H
	DQ	FLAT:?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackSnorm1x8@glm@@YAME@Z DD 021f01H
	DD	070059209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackSnorm1x8@glm@@YAME@Z$rtcName$0 DB 055H		; glm::unpackSnorm1x8
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackSnorm1x8@glm@@YAME@Z$rtcVarDesc DD 034H		; glm::unpackSnorm1x8
	DD	01H
	DQ	FLAT:?unpackSnorm1x8@glm@@YAME@Z$rtcName$0
	ORG $+48
?unpackSnorm1x8@glm@@YAME@Z$rtcFrameData DD 01H		; glm::unpackSnorm1x8
	DD	00H
	DQ	FLAT:?unpackSnorm1x8@glm@@YAME@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packSnorm1x8@glm@@YAEM@Z DD 021c01H
	DD	07007b20bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packSnorm1x8@glm@@YAEM@Z$rtcName$0 DB 054H		; glm::packSnorm1x8
	DB	06fH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packSnorm1x8@glm@@YAEM@Z$rtcName$1 DB 050H		; glm::packSnorm1x8
	DB	061H
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+1
?packSnorm1x8@glm@@YAEM@Z$rtcVarDesc DD 044H		; glm::packSnorm1x8
	DD	01H
	DQ	FLAT:?packSnorm1x8@glm@@YAEM@Z$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:?packSnorm1x8@glm@@YAEM@Z$rtcName$0
	ORG $+96
?packSnorm1x8@glm@@YAEM@Z$rtcFrameData DD 02H		; glm::packSnorm1x8
	DD	00H
	DQ	FLAT:?packSnorm1x8@glm@@YAEM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z DD 022501H
	DD	0700b720fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcName$0 DB 055H ; glm::unpackUnorm2x8
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+9
?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcVarDesc DD 024H ; glm::unpackUnorm2x8
	DD	02H
	DQ	FLAT:?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcName$0
	ORG $+48
?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcFrameData DD 01H ; glm::unpackUnorm2x8
	DD	00H
	DQ	FLAT:?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z DD 022301H
	DD	07006d20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcName$0 DB 054H ; glm::packUnorm2x8
	DB	06fH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcName$1 DB 055H ; glm::packUnorm2x8
	DB	06eH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc DD 044H ; glm::packUnorm2x8
	DD	02H
	DQ	FLAT:?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcName$1
	DD	024H
	DD	02H
	DQ	FLAT:?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm2x8
	DD	00H
	DQ	FLAT:?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm1x8@glm@@YAME@Z DD 020901H
	DD	070053209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm1x8@glm@@YAEM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@C$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@E$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z DD 021b01H
	DD	07017921bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@F$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@G$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z DD 021b01H
	DD	07017721bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0uif32@detail@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0eH
	DB	02fH
	DB	035H
	DB	03fH
	DB	047H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?overflow@detail@glm@@YAMXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?toFloat16@detail@glm@@YAFAEBM@Z DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?toFloat16@detail@glm@@YAFAEBM@Z$rtcName$0 DB 045H	; glm::detail::toFloat16
	DB	06eH
	DB	074H
	DB	072H
	DB	079H
	DB	00H
	ORG $+10
?toFloat16@detail@glm@@YAFAEBM@Z$rtcVarDesc DD 024H	; glm::detail::toFloat16
	DD	04H
	DQ	FLAT:?toFloat16@detail@glm@@YAFAEBM@Z$rtcName$0
	ORG $+48
?toFloat16@detail@glm@@YAFAEBM@Z$rtcFrameData DD 01H	; glm::detail::toFloat16
	DD	00H
	DQ	FLAT:?toFloat16@detail@glm@@YAFAEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?toFloat32@detail@glm@@YAMF@Z DD 032601H
	DD	018010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?toFloat32@detail@glm@@YAMF@Z$rtcName$0 DB 072H		; glm::detail::toFloat32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?toFloat32@detail@glm@@YAMF@Z$rtcName$1 DB 072H		; glm::detail::toFloat32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?toFloat32@detail@glm@@YAMF@Z$rtcName$2 DB 072H		; glm::detail::toFloat32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?toFloat32@detail@glm@@YAMF@Z$rtcName$3 DB 052H		; glm::detail::toFloat32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?toFloat32@detail@glm@@YAMF@Z$rtcVarDesc DD 0a4H	; glm::detail::toFloat32
	DD	04H
	DQ	FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcName$0
	ORG $+192
?toFloat32@detail@glm@@YAMF@Z$rtcFrameData DD 04H	; glm::detail::toFloat32
	DD	00H
	DQ	FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD 022701H
	DD	0700ad20eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0 DB 075H ; glm::unpackSnorm4x8
	DB	00H
	ORG $+14
?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc DD 034H ; glm::unpackSnorm4x8
	DD	04H
	DQ	FLAT:?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackSnorm4x8
	DD	00H
	DQ	FLAT:?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD 022401H
	DD	0700ab20eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0 DB 075H ; glm::unpackUnorm4x8
	DB	00H
	ORG $+14
?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc DD 034H ; glm::unpackUnorm4x8
	DD	04H
	DQ	FLAT:?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackUnorm4x8
	DD	00H
	DQ	FLAT:?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z DD 022401H
	DD	0700a920eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcName$0 DB 075H ; glm::unpackSnorm2x16
	DB	00H
	ORG $+14
?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcVarDesc DD 024H ; glm::unpackSnorm2x16
	DD	04H
	DQ	FLAT:?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackSnorm2x16
	DD	00H
	DQ	FLAT:?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z DD 022401H
	DD	0700a720eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcName$0 DB 075H ; glm::unpackUnorm2x16
	DB	00H
	ORG $+14
?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcVarDesc DD 024H ; glm::unpackUnorm2x16
	DD	04H
	DQ	FLAT:?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackUnorm2x16
	DD	00H
	DQ	FLAT:?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD 032601H
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0 DB 075H ; glm::packSnorm4x8
	DB	00H
	ORG $+2
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$1 DB 072H ; glm::packSnorm4x8
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+5
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc DD 044H ; glm::packSnorm4x8
	DD	04H
	DQ	FLAT:?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packSnorm4x8
	DD	00H
	DQ	FLAT:?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD 032601H
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0 DB 075H ; glm::packUnorm4x8
	DB	00H
	ORG $+2
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$1 DB 072H ; glm::packUnorm4x8
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+5
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc DD 044H ; glm::packUnorm4x8
	DD	04H
	DQ	FLAT:?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm4x8
	DD	00H
	DQ	FLAT:?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z DD 022301H
	DD	07006d20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$0 DB 075H ; glm::packSnorm2x16
	DB	00H
	ORG $+2
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$1 DB 072H ; glm::packSnorm2x16
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+5
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc DD 044H ; glm::packSnorm2x16
	DD	04H
	DQ	FLAT:?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packSnorm2x16
	DD	00H
	DQ	FLAT:?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z DD 022301H
	DD	07006d20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$0 DB 075H ; glm::packUnorm2x16
	DB	00H
	ORG $+2
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$1 DB 072H ; glm::packUnorm2x16
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+5
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc DD 044H ; glm::packUnorm2x16
	DD	04H
	DQ	FLAT:?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm2x16
	DD	00H
	DQ	FLAT:?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?round@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pow@@YAMMM@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?log2@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?floor@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@G@std@@SAGXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@F@std@@SAFXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fpclassify@@YAHM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAM@std@@YA?A_PAEBQEAM@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAM@std@@YA?A_PAEBQEAM@Z PROC		; std::_To_address<float *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAM@std@@YA?A_PAEBQEAM@Z ENDP		; std::_To_address<float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_To_address<glm::tvec4<float,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_To_address<glm::tvec4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z PROC ; std::_To_address<glm::tvec4<int,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z ENDP ; std::_To_address<glm::tvec4<int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tvec4@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@I$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tvec4@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@I$0A@@glm@@@Z PROC ; std::_To_address<glm::tvec4<unsigned int,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tvec4@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@I$0A@@glm@@@Z ENDP ; std::_To_address<glm::tvec4<unsigned int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tvec3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec3@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tvec3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec3@M$0A@@glm@@@Z PROC ; std::_To_address<glm::tvec3<float,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tvec3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec3@M$0A@@glm@@@Z ENDP ; std::_To_address<glm::tvec3<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tvec1@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec1@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tvec1@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec1@M$0A@@glm@@@Z PROC ; std::_To_address<glm::tvec1<float,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tvec1@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec1@M$0A@@glm@@@Z ENDP ; std::_To_address<glm::tvec1<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::_To_address<glm::tvec2<float,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::_To_address<glm::tvec2<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAX$$QEAM@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAX$$QEAM@Z PROC ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@M@std@@YA$$QEAMAEAM@Z	; std::forward<float>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@M@std@@YAPEAMPEAM@Z		; std::_Unfancy<float>
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAM$$QEAM@Z ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAX$$QEAM@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAPEAMXZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAPEAMXZ PROC ; std::_Uninitialized_backout_al<std::allocator<float> >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAPEAMXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<float> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPEAMQEAMAEAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@PEAMAEAV?$allocator@M@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@PEAMAEAV?$allocator@M@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<float> >::_Uninitialized_backout_al<std::allocator<float> >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@PEAMAEAV?$allocator@M@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<float> >::_Uninitialized_backout_al<std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAMPEAM@std@@YAPEAMPEAM00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAMPEAM@std@@YAPEAMPEAM00@Z PROC	; std::_Copy_memmove<float *,float *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAM@std@@YA?A_PAEBQEAM@Z ; std::_To_address<float *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAM@std@@YA?A_PAEBQEAM@Z ; std::_To_address<float *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAM@std@@YA?A_PAEBQEAM@Z ; std::_To_address<float *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAMPEAM@std@@YAPEAMPEAM00@Z ENDP	; std::_Copy_memmove<float *,float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAM@std@@YA?A_TAEBQEAM@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAM@std@@YA?A_TAEBQEAM@Z PROC	; std::_Get_unwrapped<float * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAM@std@@YA?A_TAEBQEAM@Z ENDP	; std::_Get_unwrapped<float * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAM@std@@YAPEAXPEAM@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAM@std@@YAPEAXPEAM@Z PROC		; std::_Voidify_iter<float *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAM@std@@YAPEAXPEAM@Z ENDP		; std::_Voidify_iter<float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@M@std@@YAPEAMAEAM@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@M@std@@YAPEAMAEAM@Z PROC			; std::addressof<float>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@M@std@@YAPEAMAEAM@Z ENDP			; std::addressof<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z PROC ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z ENDP ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec4<float,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z PROC ; std::addressof<glm::tvec4<float,0> >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ENDP ; std::addressof<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<glm::tvec4<int,0> >, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<int,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0>,glm::tvec4<int,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z PROC ; std::_Copy_memmove<glm::tvec4<int,0> *,glm::tvec4<int,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_To_address<glm::tvec4<int,0> *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_To_address<glm::tvec4<int,0> *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_To_address<glm::tvec4<int,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z ENDP ; std::_Copy_memmove<glm::tvec4<int,0> *,glm::tvec4<int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tvec4<int,0> * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tvec4<int,0> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec4<int,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec4<int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@AEAU12@@Z PROC ; std::addressof<glm::tvec4<int,0> >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ENDP ; std::addressof<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@U?$tvec4@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@U?$tvec4@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_back<glm::tvec4<unsigned int,0> >, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<unsigned int,0> >
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<unsigned int,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec4@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@QEAU?$tvec4@I$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<unsigned int,0> > >::construct<glm::tvec4<unsigned int,0>,glm::tvec4<unsigned int,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@U?$tvec4@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_back<glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<unsigned int,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@I$0A@@glm@@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@I$0A@@glm@@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@I$0A@@glm@@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAU?$tvec4@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAU?$tvec4@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@00@Z PROC ; std::_Copy_memmove<glm::tvec4<unsigned int,0> *,glm::tvec4<unsigned int,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAU?$tvec4@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@I$0A@@glm@@@Z ; std::_To_address<glm::tvec4<unsigned int,0> *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAU?$tvec4@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@I$0A@@glm@@@Z ; std::_To_address<glm::tvec4<unsigned int,0> *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tvec4@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@I$0A@@glm@@@Z ; std::_To_address<glm::tvec4<unsigned int,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAU?$tvec4@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@00@Z ENDP ; std::_Copy_memmove<glm::tvec4<unsigned int,0> *,glm::tvec4<unsigned int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAU?$tvec4@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@I$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAU?$tvec4@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@I$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tvec4<unsigned int,0> * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAU?$tvec4@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@I$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tvec4<unsigned int,0> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec4@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@I$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec4@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@I$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec4<unsigned int,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec4@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@I$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec4<unsigned int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@AEAU12@@Z PROC ; std::addressof<glm::tvec4<unsigned int,0> >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ENDP ; std::addressof<glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@U?$tvec3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@U?$tvec3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Emplace_back<glm::tvec3<float,0> >, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec3<float,0> >
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec3<float,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec3@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@QEAU?$tvec3@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec3<float,0> > >::construct<glm::tvec3<float,0>,glm::tvec3<float,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@U?$tvec3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Emplace_back<glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec3<float,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@M$0A@@glm@@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@M$0A@@glm@@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@M$0A@@glm@@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAU?$tvec3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAU?$tvec3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@00@Z PROC ; std::_Copy_memmove<glm::tvec3<float,0> *,glm::tvec3<float,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAU?$tvec3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec3@M$0A@@glm@@@Z ; std::_To_address<glm::tvec3<float,0> *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAU?$tvec3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec3@M$0A@@glm@@@Z ; std::_To_address<glm::tvec3<float,0> *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tvec3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec3@M$0A@@glm@@@Z ; std::_To_address<glm::tvec3<float,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAU?$tvec3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@00@Z ENDP ; std::_Copy_memmove<glm::tvec3<float,0> *,glm::tvec3<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAU?$tvec3@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec3@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAU?$tvec3@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec3@M$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tvec3<float,0> * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAU?$tvec3@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec3@M$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tvec3<float,0> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec3@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec3@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@M$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec3<float,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec3@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@M$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec3<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@AEAU12@@Z PROC ; std::addressof<glm::tvec3<float,0> >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ENDP ; std::addressof<glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@U?$tvec1@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@U?$tvec1@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Emplace_back<glm::tvec1<float,0> >, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec1<float,0> >
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec1<float,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec1@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@QEAU?$tvec1@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec1<float,0> > >::construct<glm::tvec1<float,0>,glm::tvec1<float,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@U?$tvec1@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Emplace_back<glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec1@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec1<float,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec1@M$0A@@glm@@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec1@M$0A@@glm@@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec1@M$0A@@glm@@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAU?$tvec1@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAU?$tvec1@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@00@Z PROC ; std::_Copy_memmove<glm::tvec1<float,0> *,glm::tvec1<float,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAU?$tvec1@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec1@M$0A@@glm@@@Z ; std::_To_address<glm::tvec1<float,0> *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAU?$tvec1@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec1@M$0A@@glm@@@Z ; std::_To_address<glm::tvec1<float,0> *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tvec1@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec1@M$0A@@glm@@@Z ; std::_To_address<glm::tvec1<float,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAU?$tvec1@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@00@Z ENDP ; std::_Copy_memmove<glm::tvec1<float,0> *,glm::tvec1<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAU?$tvec1@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec1@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAU?$tvec1@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec1@M$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tvec1<float,0> * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAU?$tvec1@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec1@M$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tvec1<float,0> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec1@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec1@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec1@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec1@M$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec1<float,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec1@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec1@M$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec1<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@AEAU12@@Z PROC ; std::addressof<glm::tvec1<float,0> >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ENDP ; std::addressof<glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Emplace_back<glm::tvec2<float,0> >, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<float,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::construct<glm::tvec2<float,0>,glm::tvec2<float,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Emplace_back<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z PROC ; std::_Copy_memmove<glm::tvec2<float,0> *,glm::tvec2<float,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_To_address<glm::tvec2<float,0> *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_To_address<glm::tvec2<float,0> *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_To_address<glm::tvec2<float,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z ENDP ; std::_Copy_memmove<glm::tvec2<float,0> *,glm::tvec2<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tvec2<float,0> * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tvec2<float,0> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec2<float,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec2<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z PROC ; std::addressof<glm::tvec2<float,0> >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ENDP ; std::addressof<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0M@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0M@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<12>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1537228672809129301		; 1555555555555555H
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1537228672809129301		; 1555555555555555H
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 12
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0M@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$03@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<4>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$03@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$07@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<8>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 2305843009213693951		; 1fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 2305843009213693951		; 1fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 3
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$07@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 67   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
tv72 = 36
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec3>::call, COMDAT

; 78   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 79   : 			return tvec3<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 80   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv78 = 56
__$ReturnUdt$ = 80
Func$ = 88
a$ = 96
b$ = 104
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec4>::call, COMDAT

; 87   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 88   : 			return tvec4<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z), Func(a.w, b.w));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 130  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG69959
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG69960
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 135				; 00000087H
	lea	rdx, OFFSET FLAT:$SG69961
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG69962
	lea	rdx, OFFSET FLAT:$SG69963
	lea	rcx, OFFSET FLAT:$SG69964
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 143  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z PROC ; std::_Uninitialized_move<float *,std::allocator<float> >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAM@std@@YA?A_TAEBQEAM@Z ; std::_Get_unwrapped<float * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAM@std@@YA?A_TAEBQEAM@Z ; std::_Get_unwrapped<float * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@M@std@@YAPEAMPEAM@Z		; std::_Unfancy<float>
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAMPEAM@std@@YAPEAMPEAM00@Z ; std::_Copy_memmove<float *,float *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	mov	rcx, QWORD PTR _Dest$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@PEAMAEAV?$allocator@M@1@@Z ; std::_Uninitialized_backout_al<std::allocator<float> >::_Uninitialized_backout_al<std::allocator<float> >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 4
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAM@std@@YA$$QEAMAEAM@Z	; std::move<float &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAX$$QEAM@Z ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float>

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAAPEAMXZ ; std::_Uninitialized_backout_al<std::allocator<float> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z ENDP ; std::_Uninitialized_move<float *,std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z@4HA PROC ; `std::_Uninitialized_move<float *,std::allocator<float> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z@4HA ENDP ; `std::_Uninitialized_move<float *,std::allocator<float> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAM$$QEAM@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAM$$QEAM@Z PROC ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAM@std@@YAPEAXPEAM@Z	; std::_Voidify_iter<float *>
	mov	rdx, rax
	mov	ecx, 4
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@M@std@@YA$$QEAMAEAM@Z	; std::forward<float>
	mov	rcx, QWORD PTR $T1[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rcx], xmm0

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAM$$QEAM@Z ENDP ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@M@std@@YAPEAMPEAM@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@M@std@@YAPEAMPEAM@Z PROC			; std::_Unfancy<float>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@M@std@@YAPEAMPEAM@Z ENDP			; std::_Unfancy<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@MM@std@@YAXAEAM$$QEAM@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@MM@std@@YAXAEAM$$QEAM@Z PROC	; std::_Construct_in_place<float,float>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@M@std@@YAPEAMAEAM@Z	; std::addressof<float>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAM@std@@YAPEAXPEAM@Z	; std::_Voidify_iter<float *>
	mov	rdx, rax
	mov	ecx, 4
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@M@std@@YA$$QEAMAEAM@Z	; std::forward<float>
	mov	rcx, QWORD PTR $T1[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rcx], xmm0

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@MM@std@@YAXAEAM$$QEAM@Z ENDP	; std::_Construct_in_place<float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR _Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 16
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<float,0> &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<float,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 681  :         }
; 682  :     }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec4<float,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 80
<_Args_0>$ = 88
??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z PROC ; std::_Construct_in_place<glm::tvec4<float,0>,glm::tvec4<float,0> >, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec4<float,0> >
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<float,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 150  :     }
; 151  : }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z ENDP ; std::_Construct_in_place<glm::tvec4<float,0>,glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<int,0> * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<int,0> * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<int,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<int,0> *,glm::tvec4<int,0> *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR _Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 16
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<int,0> &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<glm::tvec4<int,0> >

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0>,glm::tvec4<int,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<int,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 681  :         }
; 682  :     }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0>,glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec4<int,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U?$tvec4@H$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@H$0A@@glm@@$$QEAU12@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 80
<_Args_0>$ = 88
??$_Construct_in_place@U?$tvec4@H$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@H$0A@@glm@@$$QEAU12@@Z PROC ; std::_Construct_in_place<glm::tvec4<int,0>,glm::tvec4<int,0> >, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec4<int,0> >
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<int,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 150  :     }
; 151  : }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$_Construct_in_place@U?$tvec4@H$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@H$0A@@glm@@$$QEAU12@@Z ENDP ; std::_Construct_in_place<glm::tvec4<int,0>,glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_move<glm::tvec4<unsigned int,0> *,std::allocator<glm::tvec4<unsigned int,0> > >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@I$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<unsigned int,0> * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@I$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<unsigned int,0> * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<unsigned int,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAU?$tvec4@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<unsigned int,0> *,glm::tvec4<unsigned int,0> *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR _Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@I$0A@@glm@@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 16
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAU?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<unsigned int,0> &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@U?$tvec4@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_back<glm::tvec4<unsigned int,0> >

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_move<glm::tvec4<unsigned int,0> *,std::allocator<glm::tvec4<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<glm::tvec4<unsigned int,0> *,std::allocator<glm::tvec4<unsigned int,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<unsigned int,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<glm::tvec4<unsigned int,0> *,std::allocator<glm::tvec4<unsigned int,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec4@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@QEAU?$tvec4@I$0A@@glm@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@U?$tvec4@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@QEAU?$tvec4@I$0A@@glm@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<unsigned int,0> > >::construct<glm::tvec4<unsigned int,0>,glm::tvec4<unsigned int,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec4@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@I$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<unsigned int,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<unsigned int,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 681  :         }
; 682  :     }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$construct@U?$tvec4@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@QEAU?$tvec4@I$0A@@glm@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<unsigned int,0> > >::construct<glm::tvec4<unsigned int,0>,glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec4<unsigned int,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U?$tvec4@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@I$0A@@glm@@$$QEAU12@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 80
<_Args_0>$ = 88
??$_Construct_in_place@U?$tvec4@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@I$0A@@glm@@$$QEAU12@@Z PROC ; std::_Construct_in_place<glm::tvec4<unsigned int,0>,glm::tvec4<unsigned int,0> >, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec4<unsigned int,0> >
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU?$tvec4@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@I$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<unsigned int,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<unsigned int,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 150  :     }
; 151  : }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$_Construct_in_place@U?$tvec4@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@I$0A@@glm@@$$QEAU12@@Z ENDP ; std::_Construct_in_place<glm::tvec4<unsigned int,0>,glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_move<glm::tvec3<float,0> *,std::allocator<glm::tvec3<float,0> > >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec3@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec3@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec3<float,0> * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec3@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec3@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec3<float,0> * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec3<float,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAU?$tvec3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec3<float,0> *,glm::tvec3<float,0> *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cdq
	mov	ecx, 12
	idiv	rcx
	imul	rax, rax, 12
	mov	rcx, QWORD PTR _Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@M$0A@@glm@@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 12
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAU?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec3<float,0> &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@U?$tvec3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Emplace_back<glm::tvec3<float,0> >

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_move<glm::tvec3<float,0> *,std::allocator<glm::tvec3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<glm::tvec3<float,0> *,std::allocator<glm::tvec3<float,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec3<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<glm::tvec3<float,0> *,std::allocator<glm::tvec3<float,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec3@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@QEAU?$tvec3@M$0A@@glm@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@U?$tvec3@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@QEAU?$tvec3@M$0A@@glm@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec3<float,0> > >::construct<glm::tvec3<float,0>,glm::tvec3<float,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec3@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec3<float,0> *>
	mov	rdx, rax
	mov	ecx, 12
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec3<float,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 681  :         }
; 682  :     }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$construct@U?$tvec3@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@QEAU?$tvec3@M$0A@@glm@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec3<float,0> > >::construct<glm::tvec3<float,0>,glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec3<float,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U?$tvec3@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec3@M$0A@@glm@@$$QEAU12@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 80
<_Args_0>$ = 88
??$_Construct_in_place@U?$tvec3@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec3@M$0A@@glm@@$$QEAU12@@Z PROC ; std::_Construct_in_place<glm::tvec3<float,0>,glm::tvec3<float,0> >, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec3<float,0> >
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU?$tvec3@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec3<float,0> *>
	mov	rdx, rax
	mov	ecx, 12
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec3<float,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 150  :     }
; 151  : }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$_Construct_in_place@U?$tvec3@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec3@M$0A@@glm@@$$QEAU12@@Z ENDP ; std::_Construct_in_place<glm::tvec3<float,0>,glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_move<glm::tvec1<float,0> *,std::allocator<glm::tvec1<float,0> > >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec1@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec1@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec1<float,0> * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec1@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec1@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec1<float,0> * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec1<float,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAU?$tvec1@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec1<float,0> *,glm::tvec1<float,0> *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	mov	rcx, QWORD PTR _Dest$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec1@M$0A@@glm@@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 4
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAU?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec1<float,0> &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@U?$tvec1@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Emplace_back<glm::tvec1<float,0> >

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_move<glm::tvec1<float,0> *,std::allocator<glm::tvec1<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<glm::tvec1<float,0> *,std::allocator<glm::tvec1<float,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec1<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<glm::tvec1<float,0> *,std::allocator<glm::tvec1<float,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec1@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@QEAU?$tvec1@M$0A@@glm@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@U?$tvec1@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@QEAU?$tvec1@M$0A@@glm@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec1<float,0> > >::construct<glm::tvec1<float,0>,glm::tvec1<float,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec1@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec1@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec1<float,0> *>
	mov	rdx, rax
	mov	ecx, 4
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec1<float,0> >
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	DWORD PTR [rcx], eax

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@U?$tvec1@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@QEAU?$tvec1@M$0A@@glm@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec1<float,0> > >::construct<glm::tvec1<float,0>,glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec1<float,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U?$tvec1@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec1@M$0A@@glm@@$$QEAU12@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U?$tvec1@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec1@M$0A@@glm@@$$QEAU12@@Z PROC ; std::_Construct_in_place<glm::tvec1<float,0>,glm::tvec1<float,0> >, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec1<float,0> >
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU?$tvec1@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec1@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec1<float,0> *>
	mov	rdx, rax
	mov	ecx, 4
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec1<float,0> >
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	DWORD PTR [rcx], eax

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U?$tvec1@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec1@M$0A@@glm@@$$QEAU12@@Z ENDP ; std::_Construct_in_place<glm::tvec1<float,0>,glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 669  :         }
; 670  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec2<float,0> * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec2<float,0> * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<float,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec2<float,0> *,glm::tvec2<float,0> *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 3
	mov	rcx, QWORD PTR _Dest$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 8
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec2<float,0> &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Emplace_back<glm::tvec2<float,0> >

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::construct<glm::tvec2<float,0>,glm::tvec2<float,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec2<float,0> *>
	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx], rax

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::construct<glm::tvec2<float,0>,glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec2<float,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z PROC ; std::_Construct_in_place<glm::tvec2<float,0>,glm::tvec2<float,0> >, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec2<float,0> >
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec2<float,0> *>
	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx], rax

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z ENDP ; std::_Construct_in_place<glm::tvec2<float,0>,glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
vec$ = 56
?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_log2<float,0,glm::tvec1,1,0>::call, COMDAT

; 27   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 28   : 			return detail::functor1<T, T, P, vecType>::call(log2, vec);

	mov	r8, QWORD PTR vec$[rsp]
	lea	rdx, OFFSET FLAT:?log2@@YAMM@Z		; log2
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_log2<float,0,glm::tvec1,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec2>::call, COMDAT

; 30   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 			return tvec2<R, P>(Func(v.x), Func(v.y));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 32   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec4>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec4>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec3>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec3>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
tv70 = 36
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 41   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z PROC ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float>, COMDAT

; 836  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 837  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 838  :         _Alty& _Al        = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 839  :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 840  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 841  :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 842  : 
; 843  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 844  : 
; 845  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Whereoff$[rsp], rax

; 846  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 847  : 
; 848  :         if (_Oldsize == max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ ; std::vector<float,std::allocator<float> >::max_size
	cmp	QWORD PTR _Oldsize$[rsp], rax
	jne	SHORT $LN2@Emplace_re

; 849  :             _Xlength();

	call	?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ ; std::vector<float,std::allocator<float> >::_Xlength
$LN2@Emplace_re:

; 850  :         }
; 851  : 
; 852  :         const size_type _Newsize     = _Oldsize + 1;

	mov	rax, QWORD PTR _Oldsize$[rsp]
	inc	rax
	mov	QWORD PTR _Newsize$[rsp], rax

; 853  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@AEBA_K_K@Z ; std::vector<float,std::allocator<float> >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 854  : 
; 855  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@M@std@@QEAAPEAM_K@Z ; std::allocator<float>::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 856  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4+4]
	mov	QWORD PTR _Constructed_last$[rsp], rax

; 857  :         pointer _Constructed_first      = _Constructed_last;

	mov	rax, QWORD PTR _Constructed_last$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 858  : 
; 859  :         _TRY_BEGIN
; 860  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@M@std@@YA$$QEAMAEAM@Z	; std::forward<float>
	mov	QWORD PTR tv90[rsp], rax
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereoff$[rsp]
	lea	rcx, QWORD PTR [rcx+rdx*4]
	call	??$_Unfancy@M@std@@YAPEAMPEAM@Z		; std::_Unfancy<float>
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAM$$QEAM@Z ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float>

; 861  :         _Constructed_first = _Newvec + _Whereoff;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 862  : 
; 863  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR _Whereptr$[rsp], rax
	jne	SHORT $LN4@Emplace_re

; 864  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 865  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z ; std::_Uninitialized_move<float *,std::allocator<float> >

; 866  :             } else {
; 867  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 868  :             }
; 869  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 870  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereptr$[rsp]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z ; std::_Uninitialized_move<float *,std::allocator<float> >

; 871  :             _Constructed_first = _Newvec;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 872  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4+4]
	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	call	??$_Uninitialized_move@PEAMV?$allocator@M@std@@@std@@YAPEAMQEAM0PEAMAEAV?$allocator@M@0@@Z ; std::_Uninitialized_move<float *,std::allocator<float> >
	npad	1
$LN5@Emplace_re:
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
$LN9@Emplace_re:

; 873  :         }
; 874  :         _CATCH_ALL
; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 876  :         _Al.deallocate(_Newvec, _Newcapacity);
; 877  :         _RERAISE;
; 878  :         _CATCH_END
; 879  : 
; 880  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AEAAXQEAM_K1@Z ; std::vector<float,std::allocator<float> >::_Change_array

; 881  :         return _Newvec + _Whereoff;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]

; 882  :     }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
$LN11@Emplace_re:
??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z ENDP ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
?catch$0@?0???$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z@4HA PROC ; `std::vector<float,std::allocator<float> >::_Emplace_reallocate<float>'::`1'::catch$0

; 874  :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z$0:

; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Constructed_last$[rbp]
	mov	rcx, QWORD PTR _Constructed_first$[rbp]
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPEAMQEAMAEAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >

; 876  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@M@std@@QEAAXQEAM_K@Z ; std::allocator<float>::deallocate

; 877  :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 878  :         _CATCH_END

	lea	rax, $LN10@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z@4HA ENDP ; `std::vector<float,std::allocator<float> >::_Emplace_reallocate<float>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
_Result$ = 48
this$ = 80
<_Val_0>$ = 88
??$_Emplace_back_with_unused_capacity@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z PROC ; std::vector<float,std::allocator<float> >::_Emplace_back_with_unused_capacity<float>, COMDAT

; 813  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 814  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 815  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 816  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 817  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 818  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 819  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 820  :             _ASAN_VECTOR_MODIFY(1);
; 821  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@M@std@@YA$$QEAMAEAM@Z	; std::forward<float>
	mov	rdx, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@MM@std@@YAXAEAM$$QEAM@Z ; std::_Construct_in_place<float,float>

; 822  :         } else {
; 823  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 824  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 825  :             _ASAN_VECTOR_RELEASE_GUARD;
; 826  :         }
; 827  : 
; 828  :         _Orphan_range(_Mylast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range

; 829  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Result$[rsp], rax

; 830  :         ++_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 4
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 831  : 
; 832  :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 833  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$_Emplace_back_with_unused_capacity@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z ENDP ; std::vector<float,std::allocator<float> >::_Emplace_back_with_unused_capacity<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >, COMDAT

; 836  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 837  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 838  :         _Alty& _Al        = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 839  :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 840  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 841  :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 842  : 
; 843  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 844  : 
; 845  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Whereoff$[rsp], rax

; 846  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldsize$[rsp], rax

; 847  : 
; 848  :         if (_Oldsize == max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
	cmp	QWORD PTR _Oldsize$[rsp], rax
	jne	SHORT $LN2@Emplace_re

; 849  :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength
$LN2@Emplace_re:

; 850  :         }
; 851  : 
; 852  :         const size_type _Newsize     = _Oldsize + 1;

	mov	rax, QWORD PTR _Oldsize$[rsp]
	inc	rax
	mov	QWORD PTR _Newsize$[rsp], rax

; 853  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 854  : 
; 855  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 856  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR _Constructed_last$[rsp], rax

; 857  :         pointer _Constructed_first      = _Constructed_last;

	mov	rax, QWORD PTR _Constructed_last$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 858  : 
; 859  :         _TRY_BEGIN
; 860  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	QWORD PTR tv90[rsp], rax
	imul	rcx, QWORD PTR _Whereoff$[rsp], 16
	mov	rdx, QWORD PTR _Newvec$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	call	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >

; 861  :         _Constructed_first = _Newvec + _Whereoff;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 862  : 
; 863  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR _Whereptr$[rsp], rax
	jne	SHORT $LN4@Emplace_re

; 864  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 865  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >

; 866  :             } else {
; 867  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 868  :             }
; 869  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 870  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereptr$[rsp]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >

; 871  :             _Constructed_first = _Newvec;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 872  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	call	??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	npad	1
$LN5@Emplace_re:
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
$LN9@Emplace_re:

; 873  :         }
; 874  :         _CATCH_ALL
; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 876  :         _Al.deallocate(_Newvec, _Newcapacity);
; 877  :         _RERAISE;
; 878  :         _CATCH_END
; 879  : 
; 880  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array

; 881  :         return _Newvec + _Whereoff;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 882  :     }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
$LN11@Emplace_re:
??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA PROC ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >'::`1'::catch$0

; 874  :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z$0:

; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Constructed_last$[rbp]
	mov	rcx, QWORD PTR _Constructed_first$[rbp]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 876  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate

; 877  :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 878  :         _CATCH_END

	lea	rax, $LN10@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA ENDP ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
_Result$ = 48
this$ = 80
<_Val_0>$ = 88
??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<float,0> >, COMDAT

; 813  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 814  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 815  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 816  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 817  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 818  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 819  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 820  :             _ASAN_VECTOR_MODIFY(1);
; 821  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec4<float,0>,glm::tvec4<float,0> >

; 822  :         } else {
; 823  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 824  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 825  :             _ASAN_VECTOR_RELEASE_GUARD;
; 826  :         }
; 827  : 
; 828  :         _Orphan_range(_Mylast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range

; 829  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Result$[rsp], rax

; 830  :         ++_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 16
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 831  : 
; 832  :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 833  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_reallocate<glm::tvec4<int,0> >, COMDAT

; 836  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 837  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 838  :         _Alty& _Al        = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 839  :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 840  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 841  :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 842  : 
; 843  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 844  : 
; 845  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Whereoff$[rsp], rax

; 846  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldsize$[rsp], rax

; 847  : 
; 848  :         if (_Oldsize == max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::max_size
	cmp	QWORD PTR _Oldsize$[rsp], rax
	jne	SHORT $LN2@Emplace_re

; 849  :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Xlength
$LN2@Emplace_re:

; 850  :         }
; 851  : 
; 852  :         const size_type _Newsize     = _Oldsize + 1;

	mov	rax, QWORD PTR _Oldsize$[rsp]
	inc	rax
	mov	QWORD PTR _Newsize$[rsp], rax

; 853  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 854  : 
; 855  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 856  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR _Constructed_last$[rsp], rax

; 857  :         pointer _Constructed_first      = _Constructed_last;

	mov	rax, QWORD PTR _Constructed_last$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 858  : 
; 859  :         _TRY_BEGIN
; 860  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
	mov	QWORD PTR tv90[rsp], rax
	imul	rcx, QWORD PTR _Whereoff$[rsp], 16
	mov	rdx, QWORD PTR _Newvec$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	call	??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<int,0> >
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0>,glm::tvec4<int,0> >

; 861  :         _Constructed_first = _Newvec + _Whereoff;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 862  : 
; 863  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR _Whereptr$[rsp], rax
	jne	SHORT $LN4@Emplace_re

; 864  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 865  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >

; 866  :             } else {
; 867  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 868  :             }
; 869  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 870  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereptr$[rsp]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >

; 871  :             _Constructed_first = _Newvec;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 872  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	call	??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
	npad	1
$LN5@Emplace_re:
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
$LN9@Emplace_re:

; 873  :         }
; 874  :         _CATCH_ALL
; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 876  :         _Al.deallocate(_Newvec, _Newcapacity);
; 877  :         _RERAISE;
; 878  :         _CATCH_END
; 879  : 
; 880  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Change_array

; 881  :         return _Newvec + _Whereoff;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 882  :     }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
$LN11@Emplace_re:
??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_reallocate<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
?catch$0@?0???$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA PROC ; `std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_reallocate<glm::tvec4<int,0> >'::`1'::catch$0

; 874  :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z$0:

; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Constructed_last$[rbp]
	mov	rcx, QWORD PTR _Constructed_first$[rbp]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >

; 876  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::deallocate

; 877  :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 878  :         _CATCH_END

	lea	rax, $LN10@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA ENDP ; `std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_reallocate<glm::tvec4<int,0> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
_Result$ = 48
this$ = 80
<_Val_0>$ = 88
??$_Emplace_back_with_unused_capacity@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<int,0> >, COMDAT

; 813  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 814  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 815  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 816  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 817  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 818  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 819  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 820  :             _ASAN_VECTOR_MODIFY(1);
; 821  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U?$tvec4@H$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@H$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec4<int,0>,glm::tvec4<int,0> >

; 822  :         } else {
; 823  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 824  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 825  :             _ASAN_VECTOR_RELEASE_GUARD;
; 826  :         }
; 827  : 
; 828  :         _Orphan_range(_Mylast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range

; 829  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Result$[rsp], rax

; 830  :         ++_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 16
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 831  : 
; 832  :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 833  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$_Emplace_back_with_unused_capacity@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_reallocate<glm::tvec4<unsigned int,0> >, COMDAT

; 836  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 837  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 838  :         _Alty& _Al        = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 839  :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 840  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 841  :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 842  : 
; 843  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 844  : 
; 845  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Whereoff$[rsp], rax

; 846  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldsize$[rsp], rax

; 847  : 
; 848  :         if (_Oldsize == max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::max_size
	cmp	QWORD PTR _Oldsize$[rsp], rax
	jne	SHORT $LN2@Emplace_re

; 849  :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Xlength
$LN2@Emplace_re:

; 850  :         }
; 851  : 
; 852  :         const size_type _Newsize     = _Oldsize + 1;

	mov	rax, QWORD PTR _Oldsize$[rsp]
	inc	rax
	mov	QWORD PTR _Newsize$[rsp], rax

; 853  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 854  : 
; 855  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<unsigned int,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 856  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR _Constructed_last$[rsp], rax

; 857  :         pointer _Constructed_first      = _Constructed_last;

	mov	rax, QWORD PTR _Constructed_last$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 858  : 
; 859  :         _TRY_BEGIN
; 860  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<unsigned int,0> >
	mov	QWORD PTR tv90[rsp], rax
	imul	rcx, QWORD PTR _Whereoff$[rsp], 16
	mov	rdx, QWORD PTR _Newvec$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	call	??$_Unfancy@U?$tvec4@I$0A@@glm@@@std@@YAPEAU?$tvec4@I$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<unsigned int,0> >
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$construct@U?$tvec4@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@I$0A@@glm@@@1@QEAU?$tvec4@I$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<unsigned int,0> > >::construct<glm::tvec4<unsigned int,0>,glm::tvec4<unsigned int,0> >

; 861  :         _Constructed_first = _Newvec + _Whereoff;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 862  : 
; 863  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR _Whereptr$[rsp], rax
	jne	SHORT $LN4@Emplace_re

; 864  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 865  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<unsigned int,0> *,std::allocator<glm::tvec4<unsigned int,0> > >

; 866  :             } else {
; 867  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 868  :             }
; 869  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 870  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereptr$[rsp]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<unsigned int,0> *,std::allocator<glm::tvec4<unsigned int,0> > >

; 871  :             _Constructed_first = _Newvec;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 872  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	call	??$_Uninitialized_move@PEAU?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<unsigned int,0> *,std::allocator<glm::tvec4<unsigned int,0> > >
	npad	1
$LN5@Emplace_re:
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
$LN9@Emplace_re:

; 873  :         }
; 874  :         _CATCH_ALL
; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 876  :         _Al.deallocate(_Newvec, _Newcapacity);
; 877  :         _RERAISE;
; 878  :         _CATCH_END
; 879  : 
; 880  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@I$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Change_array

; 881  :         return _Newvec + _Whereoff;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 882  :     }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
$LN11@Emplace_re:
??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_reallocate<glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
?catch$0@?0???$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA PROC ; `std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_reallocate<glm::tvec4<unsigned int,0> >'::`1'::catch$0

; 874  :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z$0:

; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Constructed_last$[rbp]
	mov	rcx, QWORD PTR _Constructed_first$[rbp]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<unsigned int,0> > >

; 876  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAXQEAU?$tvec4@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<unsigned int,0> >::deallocate

; 877  :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 878  :         _CATCH_END

	lea	rax, $LN10@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA ENDP ; `std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_reallocate<glm::tvec4<unsigned int,0> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
_Result$ = 48
this$ = 80
<_Val_0>$ = 88
??$_Emplace_back_with_unused_capacity@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<unsigned int,0> >, COMDAT

; 813  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 814  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 815  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 816  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 817  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 818  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 819  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 820  :             _ASAN_VECTOR_MODIFY(1);
; 821  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<unsigned int,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U?$tvec4@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@I$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec4<unsigned int,0>,glm::tvec4<unsigned int,0> >

; 822  :         } else {
; 823  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 824  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 825  :             _ASAN_VECTOR_RELEASE_GUARD;
; 826  :         }
; 827  : 
; 828  :         _Orphan_range(_Mylast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range

; 829  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Result$[rsp], rax

; 830  :         ++_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 16
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 831  : 
; 832  :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 833  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$_Emplace_back_with_unused_capacity@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_reallocate<glm::tvec3<float,0> >, COMDAT

; 836  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 837  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 838  :         _Alty& _Al        = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 839  :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 840  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 841  :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 842  : 
; 843  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 844  : 
; 845  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cdq
	mov	ecx, 12
	idiv	rcx
	mov	QWORD PTR _Whereoff$[rsp], rax

; 846  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	cdq
	mov	ecx, 12
	idiv	rcx
	mov	QWORD PTR _Oldsize$[rsp], rax

; 847  : 
; 848  :         if (_Oldsize == max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::max_size
	cmp	QWORD PTR _Oldsize$[rsp], rax
	jne	SHORT $LN2@Emplace_re

; 849  :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Xlength
$LN2@Emplace_re:

; 850  :         }
; 851  : 
; 852  :         const size_type _Newsize     = _Oldsize + 1;

	mov	rax, QWORD PTR _Oldsize$[rsp]
	inc	rax
	mov	QWORD PTR _Newsize$[rsp], rax

; 853  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 854  : 
; 855  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec3<float,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 856  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	rax, QWORD PTR _Whereoff$[rsp], 12
	mov	rcx, QWORD PTR _Newvec$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	QWORD PTR _Constructed_last$[rsp], rax

; 857  :         pointer _Constructed_first      = _Constructed_last;

	mov	rax, QWORD PTR _Constructed_last$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 858  : 
; 859  :         _TRY_BEGIN
; 860  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec3<float,0> >
	mov	QWORD PTR tv90[rsp], rax
	imul	rcx, QWORD PTR _Whereoff$[rsp], 12
	mov	rdx, QWORD PTR _Newvec$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	call	??$_Unfancy@U?$tvec3@M$0A@@glm@@@std@@YAPEAU?$tvec3@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec3<float,0> >
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$construct@U?$tvec3@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@M$0A@@glm@@@1@QEAU?$tvec3@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec3<float,0> > >::construct<glm::tvec3<float,0>,glm::tvec3<float,0> >

; 861  :         _Constructed_first = _Newvec + _Whereoff;

	imul	rax, QWORD PTR _Whereoff$[rsp], 12
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 862  : 
; 863  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR _Whereptr$[rsp], rax
	jne	SHORT $LN4@Emplace_re

; 864  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 865  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec3<float,0> *,std::allocator<glm::tvec3<float,0> > >

; 866  :             } else {
; 867  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 868  :             }
; 869  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 870  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereptr$[rsp]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec3<float,0> *,std::allocator<glm::tvec3<float,0> > >

; 871  :             _Constructed_first = _Newvec;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 872  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	imul	rax, QWORD PTR _Whereoff$[rsp], 12
	mov	rcx, QWORD PTR _Newvec$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	call	??$_Uninitialized_move@PEAU?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec3<float,0> *,std::allocator<glm::tvec3<float,0> > >
	npad	1
$LN5@Emplace_re:
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
$LN9@Emplace_re:

; 873  :         }
; 874  :         _CATCH_ALL
; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 876  :         _Al.deallocate(_Newvec, _Newcapacity);
; 877  :         _RERAISE;
; 878  :         _CATCH_END
; 879  : 
; 880  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec3@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Change_array

; 881  :         return _Newvec + _Whereoff;

	imul	rax, QWORD PTR _Whereoff$[rsp], 12
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 882  :     }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
$LN11@Emplace_re:
??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_reallocate<glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
?catch$0@?0???$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA PROC ; `std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_reallocate<glm::tvec3<float,0> >'::`1'::catch$0

; 874  :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z$0:

; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Constructed_last$[rbp]
	mov	rcx, QWORD PTR _Constructed_first$[rbp]
	call	??$_Destroy_range@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec3<float,0> > >

; 876  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAXQEAU?$tvec3@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec3<float,0> >::deallocate

; 877  :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 878  :         _CATCH_END

	lea	rax, $LN10@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA ENDP ; `std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_reallocate<glm::tvec3<float,0> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
_Result$ = 48
this$ = 80
<_Val_0>$ = 88
??$_Emplace_back_with_unused_capacity@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec3<float,0> >, COMDAT

; 813  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 814  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 815  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 816  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 817  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 818  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 819  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 820  :             _ASAN_VECTOR_MODIFY(1);
; 821  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec3<float,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U?$tvec3@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec3@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec3<float,0>,glm::tvec3<float,0> >

; 822  :         } else {
; 823  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 824  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 825  :             _ASAN_VECTOR_RELEASE_GUARD;
; 826  :         }
; 827  : 
; 828  :         _Orphan_range(_Mylast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range

; 829  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Result$[rsp], rax

; 830  :         ++_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 12
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 831  : 
; 832  :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 833  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$_Emplace_back_with_unused_capacity@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_reallocate<glm::tvec1<float,0> >, COMDAT

; 836  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 837  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 838  :         _Alty& _Al        = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 839  :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 840  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 841  :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 842  : 
; 843  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 844  : 
; 845  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Whereoff$[rsp], rax

; 846  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 847  : 
; 848  :         if (_Oldsize == max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::max_size
	cmp	QWORD PTR _Oldsize$[rsp], rax
	jne	SHORT $LN2@Emplace_re

; 849  :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Xlength
$LN2@Emplace_re:

; 850  :         }
; 851  : 
; 852  :         const size_type _Newsize     = _Oldsize + 1;

	mov	rax, QWORD PTR _Oldsize$[rsp]
	inc	rax
	mov	QWORD PTR _Newsize$[rsp], rax

; 853  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 854  : 
; 855  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec1<float,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 856  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4+4]
	mov	QWORD PTR _Constructed_last$[rsp], rax

; 857  :         pointer _Constructed_first      = _Constructed_last;

	mov	rax, QWORD PTR _Constructed_last$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 858  : 
; 859  :         _TRY_BEGIN
; 860  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec1<float,0> >
	mov	QWORD PTR tv90[rsp], rax
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereoff$[rsp]
	lea	rcx, QWORD PTR [rcx+rdx*4]
	call	??$_Unfancy@U?$tvec1@M$0A@@glm@@@std@@YAPEAU?$tvec1@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec1<float,0> >
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$construct@U?$tvec1@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec1@M$0A@@glm@@@1@QEAU?$tvec1@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec1<float,0> > >::construct<glm::tvec1<float,0>,glm::tvec1<float,0> >

; 861  :         _Constructed_first = _Newvec + _Whereoff;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 862  : 
; 863  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR _Whereptr$[rsp], rax
	jne	SHORT $LN4@Emplace_re

; 864  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 865  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec1<float,0> *,std::allocator<glm::tvec1<float,0> > >

; 866  :             } else {
; 867  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 868  :             }
; 869  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 870  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereptr$[rsp]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec1<float,0> *,std::allocator<glm::tvec1<float,0> > >

; 871  :             _Constructed_first = _Newvec;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 872  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4+4]
	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	call	??$_Uninitialized_move@PEAU?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec1@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec1<float,0> *,std::allocator<glm::tvec1<float,0> > >
	npad	1
$LN5@Emplace_re:
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
$LN9@Emplace_re:

; 873  :         }
; 874  :         _CATCH_ALL
; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 876  :         _Al.deallocate(_Newvec, _Newcapacity);
; 877  :         _RERAISE;
; 878  :         _CATCH_END
; 879  : 
; 880  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec1@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Change_array

; 881  :         return _Newvec + _Whereoff;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]

; 882  :     }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
$LN11@Emplace_re:
??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_reallocate<glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
?catch$0@?0???$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA PROC ; `std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_reallocate<glm::tvec1<float,0> >'::`1'::catch$0

; 874  :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z$0:

; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Constructed_last$[rbp]
	mov	rcx, QWORD PTR _Constructed_first$[rbp]
	call	??$_Destroy_range@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec1@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec1<float,0> > >

; 876  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAXQEAU?$tvec1@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec1<float,0> >::deallocate

; 877  :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 878  :         _CATCH_END

	lea	rax, $LN10@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA ENDP ; `std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_reallocate<glm::tvec1<float,0> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
_Result$ = 48
this$ = 80
<_Val_0>$ = 88
??$_Emplace_back_with_unused_capacity@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec1<float,0> >, COMDAT

; 813  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 814  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 815  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 816  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 817  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 818  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 819  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 820  :             _ASAN_VECTOR_MODIFY(1);
; 821  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec1<float,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U?$tvec1@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec1@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec1<float,0>,glm::tvec1<float,0> >

; 822  :         } else {
; 823  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 824  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 825  :             _ASAN_VECTOR_RELEASE_GUARD;
; 826  :         }
; 827  : 
; 828  :         _Orphan_range(_Mylast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range

; 829  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Result$[rsp], rax

; 830  :         ++_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 4
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 831  : 
; 832  :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 833  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$_Emplace_back_with_unused_capacity@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 972  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 973  :     // deallocate a plain pointer using an allocator
; 974  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 975  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 976  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 977  :     } else {
; 978  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 979  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 980  :     }
; 981  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >, COMDAT

; 836  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 837  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 838  :         _Alty& _Al        = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 839  :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 840  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 841  :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 842  : 
; 843  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 844  : 
; 845  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 3
	mov	QWORD PTR _Whereoff$[rsp], rax

; 846  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	QWORD PTR _Oldsize$[rsp], rax

; 847  : 
; 848  :         if (_Oldsize == max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::max_size
	cmp	QWORD PTR _Oldsize$[rsp], rax
	jne	SHORT $LN2@Emplace_re

; 849  :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Xlength
$LN2@Emplace_re:

; 850  :         }
; 851  : 
; 852  :         const size_type _Newsize     = _Oldsize + 1;

	mov	rax, QWORD PTR _Oldsize$[rsp]
	inc	rax
	mov	QWORD PTR _Newsize$[rsp], rax

; 853  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 854  : 
; 855  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 856  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8+8]
	mov	QWORD PTR _Constructed_last$[rsp], rax

; 857  :         pointer _Constructed_first      = _Constructed_last;

	mov	rax, QWORD PTR _Constructed_last$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 858  : 
; 859  :         _TRY_BEGIN
; 860  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	QWORD PTR tv90[rsp], rax
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereoff$[rsp]
	lea	rcx, QWORD PTR [rcx+rdx*8]
	call	??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<float,0> >
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::construct<glm::tvec2<float,0>,glm::tvec2<float,0> >

; 861  :         _Constructed_first = _Newvec + _Whereoff;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 862  : 
; 863  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR _Whereptr$[rsp], rax
	jne	SHORT $LN4@Emplace_re

; 864  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 865  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >

; 866  :             } else {
; 867  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 868  :             }
; 869  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 870  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereptr$[rsp]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >

; 871  :             _Constructed_first = _Newvec;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 872  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8+8]
	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	call	??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
	npad	1
$LN5@Emplace_re:
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
$LN9@Emplace_re:

; 873  :         }
; 874  :         _CATCH_ALL
; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 876  :         _Al.deallocate(_Newvec, _Newcapacity);
; 877  :         _RERAISE;
; 878  :         _CATCH_END
; 879  : 
; 880  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Change_array

; 881  :         return _Newvec + _Whereoff;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]

; 882  :     }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
$LN11@Emplace_re:
??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA PROC ; `std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >'::`1'::catch$0

; 874  :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z$0:

; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Constructed_last$[rbp]
	mov	rcx, QWORD PTR _Constructed_first$[rbp]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >

; 876  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::deallocate

; 877  :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 878  :         _CATCH_END

	lea	rax, $LN10@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA ENDP ; `std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
_Result$ = 48
this$ = 80
<_Val_0>$ = 88
??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<float,0> >, COMDAT

; 813  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 814  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 815  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 816  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 817  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 818  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 819  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 820  :             _ASAN_VECTOR_MODIFY(1);
; 821  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec2<float,0>,glm::tvec2<float,0> >

; 822  :         } else {
; 823  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 824  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 825  :             _ASAN_VECTOR_RELEASE_GUARD;
; 826  :         }
; 827  : 
; 828  :         _Orphan_range(_Mylast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range

; 829  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Result$[rsp], rax

; 830  :         ++_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 831  : 
; 832  :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 833  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0F$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0F$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><short,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0F$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0G$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0G$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><unsigned short,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0G$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec2>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec2>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec1>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec1>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec3>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec3>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	subss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z
_TEXT	SEGMENT
Unpack$ = 56
tv71 = 68
tv75 = 72
tv79 = 76
__$ReturnUdt$ = 96
v$ = 104
?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z PROC ; glm::detail::compute_half<0,glm::tvec4>::unpack, COMDAT

; 346  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 347  : 			i16vec4 Unpack(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<short,0>::tvec4<short,0>

; 348  : 			memcpy(&Unpack, &v, sizeof(Unpack));

	mov	r8d, 8
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	memcpy

; 349  : 			return tvec4<float, P>(detail::toFloat32(v.x), detail::toFloat32(v.y), detail::toFloat32(v.z), detail::toFloat32(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rax+6]
	call	?toFloat32@detail@glm@@YAMF@Z		; glm::detail::toFloat32
	movss	DWORD PTR tv71[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rax+4]
	call	?toFloat32@detail@glm@@YAMF@Z		; glm::detail::toFloat32
	movss	DWORD PTR tv75[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rax+2]
	call	?toFloat32@detail@glm@@YAMF@Z		; glm::detail::toFloat32
	movss	DWORD PTR tv79[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rax]
	call	?toFloat32@detail@glm@@YAMF@Z		; glm::detail::toFloat32
	movss	xmm1, DWORD PTR tv71[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv75[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv79[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 350  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z ENDP ; glm::detail::compute_half<0,glm::tvec4>::unpack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z
_TEXT	SEGMENT
Unpack$ = 56
Packed$ = 88
tv69 = 100
tv131 = 102
tv133 = 104
__$ReturnUdt$ = 128
v$ = 136
?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z PROC ; glm::detail::compute_half<0,glm::tvec4>::pack, COMDAT

; 338  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 339  : 			tvec4<int16, P> const Unpack(detail::toFloat16(v.x), detail::toFloat16(v.y), detail::toFloat16(v.z), detail::toFloat16(v.w));

	mov	rax, QWORD PTR v$[rsp]
	add	rax, 12
	mov	rcx, rax
	call	?toFloat16@detail@glm@@YAFAEBM@Z	; glm::detail::toFloat16
	mov	WORD PTR tv69[rsp], ax
	mov	rcx, QWORD PTR v$[rsp]
	add	rcx, 8
	call	?toFloat16@detail@glm@@YAFAEBM@Z	; glm::detail::toFloat16
	mov	WORD PTR tv131[rsp], ax
	mov	rcx, QWORD PTR v$[rsp]
	add	rcx, 4
	call	?toFloat16@detail@glm@@YAFAEBM@Z	; glm::detail::toFloat16
	mov	WORD PTR tv133[rsp], ax
	mov	rcx, QWORD PTR v$[rsp]
	call	?toFloat16@detail@glm@@YAFAEBM@Z	; glm::detail::toFloat16
	movzx	ecx, WORD PTR tv69[rsp]
	mov	WORD PTR [rsp+32], cx
	movzx	ecx, WORD PTR tv131[rsp]
	movzx	r9d, cx
	movzx	ecx, WORD PTR tv133[rsp]
	movzx	r8d, cx
	movzx	edx, ax
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z	; glm::tvec4<short,0>::tvec4<short,0>

; 340  : 			u16vec4 Packed(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Packed$[rsp]
	call	??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>

; 341  : 			memcpy(&Packed, &Unpack, sizeof(Packed));

	mov	r8d, 8
	lea	rdx, QWORD PTR Unpack$[rsp]
	lea	rcx, QWORD PTR Packed$[rsp]
	call	memcpy

; 342  : 			return Packed;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR Packed$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 343  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ENDP ; glm::detail::compute_half<0,glm::tvec4>::pack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_round@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_round@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_round<float,0,glm::tvec3,0>::call, COMDAT

; 245  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 246  : 			return detail::functor1<T, T, P, vecType>::call(round, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?round@@YAMM@Z		; round
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 247  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_round@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_round<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::log2<float,0,glm::tvec1>, COMDAT

; 115  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 116  : 		return detail::compute_log2<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<float,0,glm::tvec1,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 117  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::log2<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
minVal$ = 80
maxVal$ = 88
?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z PROC ; glm::detail::compute_clamp_vector<float,0,glm::tvec3,0>::call, COMDAT

; 282  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 283  : 			return min(max(x, minVal), maxVal);

	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec3>
	mov	r8, QWORD PTR maxVal$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 284  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z ENDP ; glm::detail::compute_clamp_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$min@M@glm@@YAMMM@Z PROC				; glm::min<float>, COMDAT

; 16   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	movss	xmm0, DWORD PTR y$[rsp]
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN3@min
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@min
$LN3@min:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@min:
	movss	xmm0, DWORD PTR tv65[rsp]

; 19   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M@glm@@YAMMM@Z ENDP				; glm::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_round<float,0,glm::tvec4,0>::call, COMDAT

; 245  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 246  : 			return detail::functor1<T, T, P, vecType>::call(round, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?round@@YAMM@Z		; round
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 247  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_round<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
minVal$ = 80
maxVal$ = 88
?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z PROC ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call, COMDAT

; 282  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 283  : 			return min(max(x, minVal), maxVal);

	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec4>
	mov	r8, QWORD PTR maxVal$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 284  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ENDP ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_round<float,0,glm::tvec2,0>::call, COMDAT

; 245  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 246  : 			return detail::functor1<T, T, P, vecType>::call(round, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?round@@YAMM@Z		; round
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 247  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_round<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
minVal$ = 80
maxVal$ = 88
?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z PROC ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call, COMDAT

; 282  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 283  : 			return min(max(x, minVal), maxVal);

	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec2>
	mov	r8, QWORD PTR maxVal$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 284  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z ENDP ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 256  :     }
; 257  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPEAMQEAMAEAV?$allocator@M@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPEAMQEAMAEAV?$allocator@M@0@@Z PROC ; std::_Destroy_range<std::allocator<float> >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPEAMQEAMAEAV?$allocator@M@0@@Z ENDP ; std::_Destroy_range<std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec4<unsigned int,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec4<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec3<float,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec1@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec1@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec1<float,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec1@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec1<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@M@std@@QEAA@XZ		; std::allocator<float>::allocator<float>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<float> >::_Vector_val<std::_Simple_types<float> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0M@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@M@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0M@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@M@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><float>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@M@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_one_at_back@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
this$ = 64
<_Val_0>$ = 72
??$_Emplace_one_at_back@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z PROC ; std::vector<float,std::allocator<float> >::_Emplace_one_at_back<float>, COMDAT

; 800  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 801  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 802  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 803  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 804  : 
; 805  :         if (_Mylast != _My_data._Myend) {

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN2@Emplace_on

; 806  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@M@std@@YA$$QEAMAEAM@Z	; std::forward<float>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_back_with_unused_capacity@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z ; std::vector<float,std::allocator<float> >::_Emplace_back_with_unused_capacity<float>
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 807  :         }
; 808  : 
; 809  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@M@std@@YA$$QEAMAEAM@Z	; std::forward<float>
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_reallocate@M@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAM$$QEAM@Z ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float>
$LN1@Emplace_on:

; 810  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_one_at_back@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z ENDP ; std::vector<float,std::allocator<float> >::_Emplace_one_at_back<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@M@std@@YA$$QEAMAEAM@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@M@std@@YA$$QEAMAEAM@Z PROC			; std::forward<float>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@M@std@@YA$$QEAMAEAM@Z ENDP			; std::forward<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$emplace_back@M@?$vector@MV?$allocator@M@std@@@std@@QEAA?A_T$$QEAM@Z
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
<_Val_0>$ = 72
??$emplace_back@M@?$vector@MV?$allocator@M@std@@@std@@QEAA?A_T$$QEAM@Z PROC ; std::vector<float,std::allocator<float> >::emplace_back<float>, COMDAT

; 886  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 887  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 888  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@M@std@@YA$$QEAMAEAM@Z	; std::forward<float>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_one_at_back@M@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAM$$QEAM@Z ; std::vector<float,std::allocator<float> >::_Emplace_one_at_back<float>
	mov	QWORD PTR _Result$[rsp], rax

; 889  : #if _HAS_CXX17
; 890  :         return _Result;
; 891  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 892  :         (void) _Result;
; 893  : #endif // _HAS_CXX17
; 894  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$emplace_back@M@?$vector@MV?$allocator@M@std@@@std@@QEAA?A_T$$QEAM@Z ENDP ; std::vector<float,std::allocator<float> >::emplace_back<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAM@std@@YA$$QEAMAEAM@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAM@std@@YA$$QEAMAEAM@Z PROC			; std::move<float &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAM@std@@YA$$QEAMAEAM@Z ENDP			; std::move<float &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
this$ = 64
<_Val_0>$ = 72
??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_one_at_back<glm::tvec4<float,0> >, COMDAT

; 800  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 801  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 802  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 803  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 804  : 
; 805  :         if (_Mylast != _My_data._Myend) {

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN2@Emplace_on

; 806  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<float,0> >
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 807  :         }
; 808  : 
; 809  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >
$LN1@Emplace_on:

; 810  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_one_at_back<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z PROC ; std::forward<glm::tvec4<float,0> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ENDP ; std::forward<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
<_Val_0>$ = 72
??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::emplace_back<glm::tvec4<float,0> >, COMDAT

; 886  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 887  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 888  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_one_at_back<glm::tvec4<float,0> >
	mov	QWORD PTR _Result$[rsp], rax

; 889  : #if _HAS_CXX17
; 890  :         return _Result;
; 891  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 892  :         (void) _Result;
; 893  : #endif // _HAS_CXX17
; 894  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::emplace_back<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z PROC ; std::move<glm::tvec4<float,0> &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ENDP ; std::move<glm::tvec4<float,0> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<int,0> >::allocator<glm::tvec4<int,0> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<int,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_one_at_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
this$ = 64
<_Val_0>$ = 72
??$_Emplace_one_at_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_one_at_back<glm::tvec4<int,0> >, COMDAT

; 800  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 801  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 802  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 803  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 804  : 
; 805  :         if (_Mylast != _My_data._Myend) {

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN2@Emplace_on

; 806  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_back_with_unused_capacity@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<int,0> >
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 807  :         }
; 808  : 
; 809  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_reallocate@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@H$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_reallocate<glm::tvec4<int,0> >
$LN1@Emplace_on:

; 810  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_one_at_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_one_at_back<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z PROC ; std::forward<glm::tvec4<int,0> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ENDP ; std::forward<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$emplace_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@H$0A@@glm@@@Z
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
<_Val_0>$ = 72
??$emplace_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@H$0A@@glm@@@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::emplace_back<glm::tvec4<int,0> >, COMDAT

; 886  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 887  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 888  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_one_at_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@H$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Emplace_one_at_back<glm::tvec4<int,0> >
	mov	QWORD PTR _Result$[rsp], rax

; 889  : #if _HAS_CXX17
; 890  :         return _Result;
; 891  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 892  :         (void) _Result;
; 893  : #endif // _HAS_CXX17
; 894  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$emplace_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@H$0A@@glm@@@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::emplace_back<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z PROC ; std::move<glm::tvec4<int,0> &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ENDP ; std::move<glm::tvec4<int,0> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<unsigned int,0> >::allocator<glm::tvec4<unsigned int,0> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec4@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec4@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<unsigned int,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec4@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_one_at_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
this$ = 64
<_Val_0>$ = 72
??$_Emplace_one_at_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_one_at_back<glm::tvec4<unsigned int,0> >, COMDAT

; 800  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 801  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 802  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 803  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 804  : 
; 805  :         if (_Mylast != _My_data._Myend) {

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN2@Emplace_on

; 806  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<unsigned int,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_back_with_unused_capacity@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<unsigned int,0> >
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 807  :         }
; 808  : 
; 809  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<unsigned int,0> >
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_reallocate@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@I$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_reallocate<glm::tvec4<unsigned int,0> >
$LN1@Emplace_on:

; 810  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_one_at_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_one_at_back<glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z PROC ; std::forward<glm::tvec4<unsigned int,0> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ENDP ; std::forward<glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$emplace_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@I$0A@@glm@@@Z
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
<_Val_0>$ = 72
??$emplace_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@I$0A@@glm@@@Z PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::emplace_back<glm::tvec4<unsigned int,0> >, COMDAT

; 886  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 887  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 888  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<unsigned int,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_one_at_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@I$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Emplace_one_at_back<glm::tvec4<unsigned int,0> >
	mov	QWORD PTR _Result$[rsp], rax

; 889  : #if _HAS_CXX17
; 890  :         return _Result;
; 891  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 892  :         (void) _Result;
; 893  : #endif // _HAS_CXX17
; 894  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$emplace_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@I$0A@@glm@@@Z ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::emplace_back<glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAU?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAU?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z PROC ; std::move<glm::tvec4<unsigned int,0> &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAU?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ENDP ; std::move<glm::tvec4<unsigned int,0> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec3<float,0> >::allocator<glm::tvec3<float,0> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec3<float,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_one_at_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
this$ = 64
<_Val_0>$ = 72
??$_Emplace_one_at_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_one_at_back<glm::tvec3<float,0> >, COMDAT

; 800  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 801  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 802  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 803  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 804  : 
; 805  :         if (_Mylast != _My_data._Myend) {

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN2@Emplace_on

; 806  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec3<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_back_with_unused_capacity@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec3<float,0> >
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 807  :         }
; 808  : 
; 809  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec3<float,0> >
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_reallocate@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec3@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_reallocate<glm::tvec3<float,0> >
$LN1@Emplace_on:

; 810  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_one_at_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_one_at_back<glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z PROC ; std::forward<glm::tvec3<float,0> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ENDP ; std::forward<glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$emplace_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec3@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
<_Val_0>$ = 72
??$emplace_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec3@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::emplace_back<glm::tvec3<float,0> >, COMDAT

; 886  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 887  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 888  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec3<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_one_at_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec3@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Emplace_one_at_back<glm::tvec3<float,0> >
	mov	QWORD PTR _Result$[rsp], rax

; 889  : #if _HAS_CXX17
; 890  :         return _Result;
; 891  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 892  :         (void) _Result;
; 893  : #endif // _HAS_CXX17
; 894  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$emplace_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec3@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::emplace_back<glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAU?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAU?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z PROC ; std::move<glm::tvec3<float,0> &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAU?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ENDP ; std::move<glm::tvec3<float,0> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec1<float,0> >::allocator<glm::tvec1<float,0> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec1@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec1@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec1<float,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec1@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_one_at_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
this$ = 64
<_Val_0>$ = 72
??$_Emplace_one_at_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_one_at_back<glm::tvec1<float,0> >, COMDAT

; 800  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 801  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 802  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 803  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 804  : 
; 805  :         if (_Mylast != _My_data._Myend) {

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN2@Emplace_on

; 806  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec1<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_back_with_unused_capacity@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec1<float,0> >
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 807  :         }
; 808  : 
; 809  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec1<float,0> >
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_reallocate@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec1@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_reallocate<glm::tvec1<float,0> >
$LN1@Emplace_on:

; 810  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_one_at_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_one_at_back<glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z PROC ; std::forward<glm::tvec1<float,0> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ENDP ; std::forward<glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$emplace_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec1@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
<_Val_0>$ = 72
??$emplace_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec1@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::emplace_back<glm::tvec1<float,0> >, COMDAT

; 886  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 887  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 888  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec1<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_one_at_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec1@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Emplace_one_at_back<glm::tvec1<float,0> >
	mov	QWORD PTR _Result$[rsp], rax

; 889  : #if _HAS_CXX17
; 890  :         return _Result;
; 891  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 892  :         (void) _Result;
; 893  : #endif // _HAS_CXX17
; 894  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$emplace_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec1@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::emplace_back<glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAU?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAU?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z PROC ; std::move<glm::tvec1<float,0> &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAU?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ENDP ; std::move<glm::tvec1<float,0> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 32
$T1 = 40
this$ = 64
_Al$ = 72
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	QWORD PTR _New_proxy$[rsp], rax

; 1058 :         _Construct_in_place(*_New_proxy, this);

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1059 :         _Myproxy            = _New_proxy;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	mov	QWORD PTR [rax], rcx

; 1060 :         _New_proxy->_Mycont = this;

	mov	rax, QWORD PTR _New_proxy$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], rcx

; 1061 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec2<float,0> >::allocator<glm::tvec2<float,0> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 984  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 985  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 986  :     using _Ty = typename _Alloc::value_type;
; 987  :     _Ptr->~_Ty();
; 988  :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 989  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 609  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 610  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<float,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
this$ = 64
<_Val_0>$ = 72
??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_one_at_back<glm::tvec2<float,0> >, COMDAT

; 800  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 801  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 802  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 803  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 804  : 
; 805  :         if (_Mylast != _My_data._Myend) {

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN2@Emplace_on

; 806  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<float,0> >
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 807  :         }
; 808  : 
; 809  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >
$LN1@Emplace_on:

; 810  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_one_at_back<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z PROC ; std::forward<glm::tvec2<float,0> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ENDP ; std::forward<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
<_Val_0>$ = 72
??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::emplace_back<glm::tvec2<float,0> >, COMDAT

; 886  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 887  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 888  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_one_at_back<glm::tvec2<float,0> >
	mov	QWORD PTR _Result$[rsp], rax

; 889  : #if _HAS_CXX17
; 890  :         return _Result;
; 891  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 892  :         (void) _Result;
; 893  : #endif // _HAS_CXX17
; 894  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::emplace_back<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z PROC ; std::move<glm::tvec2<float,0> &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ENDP ; std::move<glm::tvec2<float,0> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 646  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 647  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 648  : 
; 649  : 	Error += test_packUnorm();

	call	?test_packUnorm@@YAHXZ			; test_packUnorm
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 650  : 	Error += test_packSnorm();

	call	?test_packSnorm@@YAHXZ			; test_packSnorm
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 651  : 
; 652  : 	Error += test_packSnorm1x16();

	call	?test_packSnorm1x16@@YAHXZ		; test_packSnorm1x16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 653  : 	Error += test_packSnorm2x16();

	call	?test_packSnorm2x16@@YAHXZ		; test_packSnorm2x16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 654  : 	Error += test_packSnorm4x16();

	call	?test_packSnorm4x16@@YAHXZ		; test_packSnorm4x16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 655  : 
; 656  : 	Error += test_packSnorm1x8();

	call	?test_packSnorm1x8@@YAHXZ		; test_packSnorm1x8
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 657  : 	Error += test_packSnorm2x8();

	call	?test_packSnorm2x8@@YAHXZ		; test_packSnorm2x8
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 658  : 	Error += test_packSnorm4x8();

	call	?test_packSnorm4x8@@YAHXZ		; test_packSnorm4x8
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 659  : 
; 660  : 	Error += test_packUnorm1x16();

	call	?test_packUnorm1x16@@YAHXZ		; test_packUnorm1x16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 661  : 	Error += test_packUnorm2x16();

	call	?test_packUnorm2x16@@YAHXZ		; test_packUnorm2x16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 662  : 	Error += test_packUnorm4x16();

	call	?test_packUnorm4x16@@YAHXZ		; test_packUnorm4x16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 663  : 
; 664  : 	Error += test_packUnorm1x8();

	call	?test_packUnorm1x8@@YAHXZ		; test_packUnorm1x8
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 665  : 	Error += test_packUnorm2x8();

	call	?test_packUnorm2x8@@YAHXZ		; test_packUnorm2x8
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 666  : 	Error += test_packUnorm4x8();

	call	?test_packUnorm4x8@@YAHXZ		; test_packUnorm4x8
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 667  : 
; 668  : 	Error += test_packUnorm2x4();

	call	?test_packUnorm2x4@@YAHXZ		; test_packUnorm2x4
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 669  : 	Error += test_packUnorm4x4();

	call	?test_packUnorm4x4@@YAHXZ		; test_packUnorm4x4
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 670  : 	Error += test_packUnorm3x5_1x1();

	call	?test_packUnorm3x5_1x1@@YAHXZ		; test_packUnorm3x5_1x1
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 671  : 	Error += test_packUnorm1x5_1x6_1x5();

	call	?test_packUnorm1x5_1x6_1x5@@YAHXZ	; test_packUnorm1x5_1x6_1x5
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 672  : 	Error += test_packUnorm2x3_1x2();

	call	?test_packUnorm2x3_1x2@@YAHXZ		; test_packUnorm2x3_1x2
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 673  : 
; 674  : 	Error += test_F2x11_1x10();

	call	?test_F2x11_1x10@@YAHXZ			; test_F2x11_1x10
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 675  : 	Error += test_F3x9_E1x5();

	call	?test_F3x9_E1x5@@YAHXZ			; test_F3x9_E1x5
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 676  : 	Error += test_Snorm3x10_1x2();

	call	?test_Snorm3x10_1x2@@YAHXZ		; test_Snorm3x10_1x2
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 677  : 	Error += test_Unorm3x10_1x2();

	call	?test_Unorm3x10_1x2@@YAHXZ		; test_Unorm3x10_1x2
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 678  : 
; 679  : 	Error += test_I3x10_1x2();

	call	?test_I3x10_1x2@@YAHXZ			; test_I3x10_1x2
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 680  : 	Error += test_U3x10_1x2();

	call	?test_U3x10_1x2@@YAHXZ			; test_U3x10_1x2
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 681  : 	Error += test_Half1x16();

	call	?test_Half1x16@@YAHXZ			; test_Half1x16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 682  : 	Error += test_Half4x16();

	call	?test_Half4x16@@YAHXZ			; test_Half4x16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 683  : 
; 684  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 685  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 148
D$9 = 168
$T10 = 196
$T11 = 208
$T12 = 220
$T13 = 224
$T14 = 228
tv134 = 232
?test_packUnorm2x3_1x2@@YAHXZ PROC			; test_packUnorm2x3_1x2

; 626  : {

$LN10:
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 627  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 628  : 
; 629  : 	std::vector<glm::vec3> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	npad	1

; 630  : 	A.push_back(glm::vec3(1.0f, 0.7f, 0.5f));

	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 631  : 	A.push_back(glm::vec3(0.5f, 0.1f, 0.0f));

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 632  : 
; 633  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 634  : 	{
; 635  : 		glm::vec3 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@M$0A@@glm@@_K@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::operator[]
	lea	rcx, QWORD PTR B$7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 636  : 		glm::uint8 C = glm::packUnorm2x3_1x2(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z ; glm::packUnorm2x3_1x2
	mov	BYTE PTR C$8[rsp], al

; 637  : 		glm::vec3 D = glm::unpackUnorm2x3_1x2(C);

	movzx	edx, BYTE PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z ; glm::unpackUnorm2x3_1x2

; 638  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 3.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3eaaaaab
	movss	DWORD PTR $T12[rsp], xmm0
	lea	r9, QWORD PTR $T12[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv134[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 639  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 639				; 0000027fH
	lea	rdx, OFFSET FLAT:$SG63779
	lea	rcx, OFFSET FLAT:$SG63780
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 640  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 641  : 
; 642  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T14[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	mov	eax, DWORD PTR $T14[rsp]

; 643  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm2x3_1x2@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?test_packUnorm2x3_1x2@@YAHXZ ENDP			; test_packUnorm2x3_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 148
D$9 = 168
$T10 = 196
$T11 = 208
$T12 = 220
$T13 = 224
$T14 = 228
tv134 = 232
?dtor$0@?0??test_packUnorm2x3_1x2@@YAHXZ@4HA PROC	; `test_packUnorm2x3_1x2'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm2x3_1x2@@YAHXZ@4HA ENDP	; `test_packUnorm2x3_1x2'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 148
D$9 = 168
$T10 = 196
$T11 = 208
$T12 = 220
$T13 = 224
$T14 = 228
tv134 = 232
?test_packUnorm1x5_1x6_1x5@@YAHXZ PROC			; test_packUnorm1x5_1x6_1x5

; 606  : {

$LN10:
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 607  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 608  : 
; 609  : 	std::vector<glm::vec3> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	npad	1

; 610  : 	A.push_back(glm::vec3(1.0f, 0.7f, 0.5f));

	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 611  : 	A.push_back(glm::vec3(0.5f, 0.1f, 0.0f));

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 612  : 
; 613  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 614  : 	{
; 615  : 		glm::vec3 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@M$0A@@glm@@_K@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::operator[]
	lea	rcx, QWORD PTR B$7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 616  : 		glm::uint16 C = glm::packUnorm1x5_1x6_1x5(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z ; glm::packUnorm1x5_1x6_1x5
	mov	WORD PTR C$8[rsp], ax

; 617  : 		glm::vec3 D = glm::unpackUnorm1x5_1x6_1x5(C);

	movzx	edx, WORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z ; glm::unpackUnorm1x5_1x6_1x5

; 618  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 15.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3d888889
	movss	DWORD PTR $T12[rsp], xmm0
	lea	r9, QWORD PTR $T12[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv134[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 619  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 619				; 0000026bH
	lea	rdx, OFFSET FLAT:$SG63758
	lea	rcx, OFFSET FLAT:$SG63759
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 620  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 621  : 
; 622  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T14[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	mov	eax, DWORD PTR $T14[rsp]

; 623  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm1x5_1x6_1x5@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?test_packUnorm1x5_1x6_1x5@@YAHXZ ENDP			; test_packUnorm1x5_1x6_1x5
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 148
D$9 = 168
$T10 = 196
$T11 = 208
$T12 = 220
$T13 = 224
$T14 = 228
tv134 = 232
?dtor$0@?0??test_packUnorm1x5_1x6_1x5@@YAHXZ@4HA PROC	; `test_packUnorm1x5_1x6_1x5'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm1x5_1x6_1x5@@YAHXZ@4HA ENDP	; `test_packUnorm1x5_1x6_1x5'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 164
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 248
$T14 = 252
tv136 = 256
?test_packUnorm3x5_1x1@@YAHXZ PROC			; test_packUnorm3x5_1x1

; 586  : {

$LN10:
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 587  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 588  : 
; 589  : 	std::vector<glm::vec4> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 590  : 	A.push_back(glm::vec4(1.0f, 0.7f, 0.5f, 0.0f));

	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 591  : 	A.push_back(glm::vec4(0.5f, 0.1f, 0.0f, 1.0f));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 592  : 
; 593  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 594  : 	{
; 595  : 		glm::vec4 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	lea	rcx, QWORD PTR B$7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 596  : 		glm::uint16 C = glm::packUnorm3x5_1x1(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z ; glm::packUnorm3x5_1x1
	mov	WORD PTR C$8[rsp], ax

; 597  : 		glm::vec4 D = glm::unpackUnorm3x5_1x1(C);

	movzx	edx, WORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z ; glm::unpackUnorm3x5_1x1

; 598  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 15.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3d888889
	movss	DWORD PTR $T12[rsp], xmm0
	lea	r9, QWORD PTR $T12[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv136[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 599  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 599				; 00000257H
	lea	rdx, OFFSET FLAT:$SG63737
	lea	rcx, OFFSET FLAT:$SG63738
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 600  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 601  : 
; 602  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T14[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T14[rsp]

; 603  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm3x5_1x1@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
?test_packUnorm3x5_1x1@@YAHXZ ENDP			; test_packUnorm3x5_1x1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 164
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 248
$T14 = 252
tv136 = 256
?dtor$0@?0??test_packUnorm3x5_1x1@@YAHXZ@4HA PROC	; `test_packUnorm3x5_1x1'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm3x5_1x1@@YAHXZ@4HA ENDP	; `test_packUnorm3x5_1x1'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 164
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 248
$T14 = 252
tv136 = 256
?test_packUnorm4x4@@YAHXZ PROC				; test_packUnorm4x4

; 566  : {

$LN10:
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 567  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 568  : 
; 569  : 	std::vector<glm::vec4> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 570  : 	A.push_back(glm::vec4(1.0f, 0.7f, 0.5f, 0.0f));

	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 571  : 	A.push_back(glm::vec4(0.5f, 0.1f, 0.0f, 1.0f));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 572  : 
; 573  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 574  : 	{
; 575  : 		glm::vec4 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	lea	rcx, QWORD PTR B$7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 576  : 		glm::uint16 C = glm::packUnorm4x4(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z ; glm::packUnorm4x4
	mov	WORD PTR C$8[rsp], ax

; 577  : 		glm::vec4 D = glm::unpackUnorm4x4(C);

	movzx	edx, WORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z ; glm::unpackUnorm4x4

; 578  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 15.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3d888889
	movss	DWORD PTR $T12[rsp], xmm0
	lea	r9, QWORD PTR $T12[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv136[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 579  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 579				; 00000243H
	lea	rdx, OFFSET FLAT:$SG63716
	lea	rcx, OFFSET FLAT:$SG63717
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 580  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 581  : 
; 582  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T14[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T14[rsp]

; 583  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm4x4@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
?test_packUnorm4x4@@YAHXZ ENDP				; test_packUnorm4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 164
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 248
$T14 = 252
tv136 = 256
?dtor$0@?0??test_packUnorm4x4@@YAHXZ@4HA PROC		; `test_packUnorm4x4'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm4x4@@YAHXZ@4HA ENDP		; `test_packUnorm4x4'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 184
$T14 = 188
tv132 = 192
?test_packUnorm2x4@@YAHXZ PROC				; test_packUnorm2x4

; 546  : {

$LN10:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 547  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 548  : 
; 549  : 	std::vector<glm::vec2> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	npad	1

; 550  : 	A.push_back(glm::vec2(1.0f, 0.7f));

	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 551  : 	A.push_back(glm::vec2(0.5f, 0.0f));

	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 552  : 
; 553  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 554  : 	{
; 555  : 		glm::vec2 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR B$7[rsp], rax

; 556  : 		glm::uint8 C = glm::packUnorm2x4(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z ; glm::packUnorm2x4
	mov	BYTE PTR C$8[rsp], al

; 557  : 		glm::vec2 D = glm::unpackUnorm2x4(C);

	movzx	edx, BYTE PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z ; glm::unpackUnorm2x4

; 558  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 15.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3d888889
	movss	DWORD PTR $T12[rsp], xmm0
	lea	r9, QWORD PTR $T12[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv132[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv132[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv132[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 559  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 559				; 0000022fH
	lea	rdx, OFFSET FLAT:$SG63695
	lea	rcx, OFFSET FLAT:$SG63696
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 560  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 561  : 
; 562  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T14[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	mov	eax, DWORD PTR $T14[rsp]

; 563  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm2x4@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_packUnorm2x4@@YAHXZ ENDP				; test_packUnorm2x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 184
$T14 = 188
tv132 = 192
?dtor$0@?0??test_packUnorm2x4@@YAHXZ@4HA PROC		; `test_packUnorm2x4'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm2x4@@YAHXZ@4HA ENDP		; `test_packUnorm2x4'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ??$unpackSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@F$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv72 = 48
__$ReturnUdt$ = 80
v$ = 88
??$unpackSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@F$0A@@0@@Z PROC ; glm::unpackSnorm<short,float,0,glm::tvec2>, COMDAT

; 683  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 684  : 		GLM_STATIC_ASSERT(std::numeric_limits<intType>::is_integer, "uintType must be an integer type");
; 685  : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "floatType must be a floating point type");
; 686  : 
; 687  : 		return clamp(vecType<floatType, P>(v) * (static_cast<floatType>(1) / static_cast<floatType>(std::numeric_limits<intType>::max())), static_cast<floatType>(-1), static_cast<floatType>(1));

	call	?max@?$numeric_limits@F@std@@SAFXZ	; std::numeric_limits<short>::max
	cwde
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0F$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><short,0>
	movss	xmm0, DWORD PTR tv72[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 688  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$unpackSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@F$0A@@0@@Z ENDP ; glm::unpackSnorm<short,float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ??$packSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv70 = 56
__$ReturnUdt$ = 80
v$ = 88
??$packSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU?$tvec2@M$0A@@0@@Z PROC ; glm::packSnorm<short,float,0,glm::tvec2>, COMDAT

; 674  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 675  : 		GLM_STATIC_ASSERT(std::numeric_limits<intType>::is_integer, "uintType must be an integer type");
; 676  : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "floatType must be a floating point type");
; 677  : 
; 678  : 		return vecType<intType, P>(round(clamp(v , static_cast<floatType>(-1), static_cast<floatType>(1)) * static_cast<floatType>(std::numeric_limits<intType>::max())));

	call	?max@?$numeric_limits@F@std@@SAFXZ	; std::numeric_limits<short>::max
	cwde
	cvtsi2ss xmm0, eax
	movss	DWORD PTR tv70[rsp], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	movss	xmm0, DWORD PTR tv70[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec2>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<short,0>::tvec2<short,0><float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 679  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$packSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::packSnorm<short,float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$7 = 104
B$8 = 120
C$9 = 148
D$10 = 184
$T11 = 196
$T12 = 204
$T13 = 212
$T14 = 220
$T15 = 224
$T16 = 228
tv138 = 232
?test_packSnorm@@YAHXZ PROC				; test_packSnorm

; 525  : {

$LN10:
	push	rdi
	sub	rsp, 240				; 000000f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 526  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 527  : 
; 528  : 	std::vector<glm::vec2> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	npad	1

; 529  : 	A.push_back(glm::vec2( 1.0f, 0.0f));

	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 530  : 	A.push_back(glm::vec2(-0.5f,-0.7f));

	movss	xmm2, DWORD PTR __real@bf333333
	movss	xmm1, DWORD PTR __real@bf000000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 531  : 	A.push_back(glm::vec2(-0.1f, 0.1f));

	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@bdcccccd
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 532  : 
; 533  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$7[rsp], 0
	jmp	SHORT $LN4@test_packS
$LN2@test_packS:
	mov	rax, QWORD PTR i$7[rsp]
	inc	rax
	mov	QWORD PTR i$7[rsp], rax
$LN4@test_packS:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
	cmp	QWORD PTR i$7[rsp], rax
	jae	$LN3@test_packS

; 534  : 	{
; 535  : 		glm::vec2 B(A[i]);

	mov	rdx, QWORD PTR i$7[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR B$8[rsp], rax

; 536  : 		glm::i16vec2 C = glm::packSnorm<glm::int16>(B);

	lea	rdx, QWORD PTR B$8[rsp]
	lea	rcx, QWORD PTR C$9[rsp]
	call	??$packSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::packSnorm<short,float,0,glm::tvec2>

; 537  : 		glm::vec2 D = glm::unpackSnorm<glm::int16, float>(C);

	lea	rdx, QWORD PTR C$9[rsp]
	lea	rcx, QWORD PTR D$10[rsp]
	call	??$unpackSnorm@FM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@F$0A@@0@@Z ; glm::unpackSnorm<short,float,0,glm::tvec2>

; 538  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 32767.0f * 2.0f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38800100
	movss	DWORD PTR $T14[rsp], xmm0
	lea	r9, QWORD PTR $T14[rsp]
	lea	r8, QWORD PTR D$10[rsp]
	lea	rdx, QWORD PTR B$8[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packS
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN7@test_packS
$LN6@test_packS:
	mov	DWORD PTR tv138[rsp], 1
$LN7@test_packS:
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 539  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packS
	mov	r8d, 539				; 0000021bH
	lea	rdx, OFFSET FLAT:$SG63671
	lea	rcx, OFFSET FLAT:$SG63672
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packS:

; 540  : 	}

	jmp	$LN2@test_packS
$LN3@test_packS:

; 541  : 
; 542  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T16[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	mov	eax, DWORD PTR $T16[rsp]

; 543  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packSnorm@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
?test_packSnorm@@YAHXZ ENDP				; test_packSnorm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$7 = 104
B$8 = 120
C$9 = 148
D$10 = 184
$T11 = 196
$T12 = 204
$T13 = 212
$T14 = 220
$T15 = 224
$T16 = 228
tv138 = 232
?dtor$0@?0??test_packSnorm@@YAHXZ@4HA PROC		; `test_packSnorm'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packSnorm@@YAHXZ@4HA ENDP		; `test_packSnorm'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ??$unpackUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@G$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
tv69 = 40
__$ReturnUdt$ = 64
v$ = 72
??$unpackUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@G$0A@@0@@Z PROC ; glm::unpackUnorm<unsigned short,float,0,glm::tvec2>, COMDAT

; 665  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 666  : 		GLM_STATIC_ASSERT(std::numeric_limits<uintType>::is_integer, "uintType must be an integer type");
; 667  : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "floatType must be a floating point type");
; 668  : 
; 669  : 		return vecType<float, P>(v) * (static_cast<floatType>(1) / static_cast<floatType>(std::numeric_limits<uintType>::max()));

	call	?max@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::max
	movzx	eax, ax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv69[rsp], xmm0
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0G$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><unsigned short,0>
	movss	xmm0, DWORD PTR tv69[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 670  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$unpackUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@G$0A@@0@@Z ENDP ; glm::unpackUnorm<unsigned short,float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ??$packUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv70 = 56
__$ReturnUdt$ = 80
v$ = 88
??$packUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU?$tvec2@M$0A@@0@@Z PROC ; glm::packUnorm<unsigned short,float,0,glm::tvec2>, COMDAT

; 656  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 657  : 		GLM_STATIC_ASSERT(std::numeric_limits<uintType>::is_integer, "uintType must be an integer type");
; 658  : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "floatType must be a floating point type");
; 659  : 
; 660  : 		return vecType<uintType, P>(round(clamp(v, static_cast<floatType>(0), static_cast<floatType>(1)) * static_cast<floatType>(std::numeric_limits<uintType>::max())));

	call	?max@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::max
	movzx	eax, ax
	cvtsi2ss xmm0, eax
	movss	DWORD PTR tv70[rsp], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	movss	xmm0, DWORD PTR tv70[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec2>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 661  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$packUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::packUnorm<unsigned short,float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$7 = 104
B$8 = 120
C$9 = 148
D$10 = 184
$T11 = 196
$T12 = 204
$T13 = 212
$T14 = 216
$T15 = 220
tv132 = 224
?test_packUnorm@@YAHXZ PROC				; test_packUnorm

; 505  : {

$LN10:
	push	rdi
	sub	rsp, 240				; 000000f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 506  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 507  : 
; 508  : 	std::vector<glm::vec2> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	npad	1

; 509  : 	A.push_back(glm::vec2(1.0f, 0.7f));

	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 510  : 	A.push_back(glm::vec2(0.5f, 0.1f));

	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 511  : 
; 512  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$7[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$7[rsp]
	inc	rax
	mov	QWORD PTR i$7[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
	cmp	QWORD PTR i$7[rsp], rax
	jae	$LN3@test_packU

; 513  : 	{
; 514  : 		glm::vec2 B(A[i]);

	mov	rdx, QWORD PTR i$7[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR B$8[rsp], rax

; 515  : 		glm::u16vec2 C = glm::packUnorm<glm::uint16>(B);

	lea	rdx, QWORD PTR B$8[rsp]
	lea	rcx, QWORD PTR C$9[rsp]
	call	??$packUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::packUnorm<unsigned short,float,0,glm::tvec2>

; 516  : 		glm::vec2 D = glm::unpackUnorm<glm::uint16, float>(C);

	lea	rdx, QWORD PTR C$9[rsp]
	lea	rcx, QWORD PTR D$10[rsp]
	call	??$unpackUnorm@GM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@G$0A@@0@@Z ; glm::unpackUnorm<unsigned short,float,0,glm::tvec2>

; 517  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 255.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3b808081
	movss	DWORD PTR $T13[rsp], xmm0
	lea	r9, QWORD PTR $T13[rsp]
	lea	r8, QWORD PTR D$10[rsp]
	lea	rdx, QWORD PTR B$8[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv132[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv132[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv132[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 518  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 518				; 00000206H
	lea	rdx, OFFSET FLAT:$SG63628
	lea	rcx, OFFSET FLAT:$SG63629
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 519  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 520  : 
; 521  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	mov	eax, DWORD PTR $T15[rsp]

; 522  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
?test_packUnorm@@YAHXZ ENDP				; test_packUnorm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$7 = 104
B$8 = 120
C$9 = 148
D$10 = 184
$T11 = 196
$T12 = 204
$T13 = 212
$T14 = 216
$T15 = 220
tv132 = 224
?dtor$0@?0??test_packUnorm@@YAHXZ@4HA PROC		; `test_packUnorm'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm@@YAHXZ@4HA ENDP		; `test_packUnorm'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 164
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 248
$T14 = 252
tv136 = 256
?test_packSnorm4x8@@YAHXZ PROC				; test_packSnorm4x8

; 485  : {

$LN10:
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 486  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 487  : 	
; 488  : 	std::vector<glm::vec4> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 489  : 	A.push_back(glm::vec4( 1.0f, 0.0f,-0.5f,-1.0f));

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@bf000000
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 490  : 	A.push_back(glm::vec4(-0.7f,-0.1f, 0.1f, 0.7f));

	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3dcccccd
	movss	xmm2, DWORD PTR __real@bdcccccd
	movss	xmm1, DWORD PTR __real@bf333333
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 491  : 	
; 492  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packS
$LN2@test_packS:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packS:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packS

; 493  : 	{
; 494  : 		glm::vec4 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	lea	rcx, QWORD PTR B$7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 495  : 		glm::uint32 C = glm::packSnorm4x8(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ; glm::packSnorm4x8
	mov	DWORD PTR C$8[rsp], eax

; 496  : 		glm::vec4 D = glm::unpackSnorm4x8(C);

	mov	edx, DWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ; glm::unpackSnorm4x8

; 497  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 127.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c010204
	movss	DWORD PTR $T12[rsp], xmm0
	lea	r9, QWORD PTR $T12[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packS
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN7@test_packS
$LN6@test_packS:
	mov	DWORD PTR tv136[rsp], 1
$LN7@test_packS:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 498  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packS
	mov	r8d, 498				; 000001f2H
	lea	rdx, OFFSET FLAT:$SG63589
	lea	rcx, OFFSET FLAT:$SG63590
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packS:

; 499  : 	}

	jmp	$LN2@test_packS
$LN3@test_packS:

; 500  : 	
; 501  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T14[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T14[rsp]

; 502  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packSnorm4x8@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
?test_packSnorm4x8@@YAHXZ ENDP				; test_packSnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 164
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 248
$T14 = 252
tv136 = 256
?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA PROC		; `test_packSnorm4x8'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA ENDP		; `test_packSnorm4x8'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 164
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 248
$T14 = 252
tv136 = 256
?test_packUnorm4x8@@YAHXZ PROC				; test_packUnorm4x8

; 465  : {

$LN10:
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 466  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 467  : 	
; 468  : 	std::vector<glm::vec4> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 469  : 	A.push_back(glm::vec4(1.0f, 0.7f, 0.3f, 0.0f));

	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 470  : 	A.push_back(glm::vec4(0.5f, 0.1f, 0.2f, 0.3f));

	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 471  : 	
; 472  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 473  : 	{
; 474  : 		glm::vec4 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	lea	rcx, QWORD PTR B$7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 475  : 		glm::uint32 C = glm::packUnorm4x8(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ; glm::packUnorm4x8
	mov	DWORD PTR C$8[rsp], eax

; 476  : 		glm::vec4 D = glm::unpackUnorm4x8(C);

	mov	edx, DWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ; glm::unpackUnorm4x8

; 477  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 255.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3b808081
	movss	DWORD PTR $T12[rsp], xmm0
	lea	r9, QWORD PTR $T12[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv136[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 478  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 478				; 000001deH
	lea	rdx, OFFSET FLAT:$SG63568
	lea	rcx, OFFSET FLAT:$SG63569
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 479  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 480  : 	
; 481  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T14[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T14[rsp]

; 482  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm4x8@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
?test_packUnorm4x8@@YAHXZ ENDP				; test_packUnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 164
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 248
$T14 = 252
tv136 = 256
?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA PROC		; `test_packUnorm4x8'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA ENDP		; `test_packUnorm4x8'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 184
$T14 = 188
tv132 = 192
?test_packSnorm2x8@@YAHXZ PROC				; test_packSnorm2x8

; 446  : {

$LN9:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 447  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 448  : 	
; 449  : 	std::vector<glm::vec2> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	npad	1

; 450  : 	A.push_back(glm::vec2( 1.0f, 0.0f));

	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 451  : 	A.push_back(glm::vec2(-0.7f,-0.1f));

	movss	xmm2, DWORD PTR __real@bdcccccd
	movss	xmm1, DWORD PTR __real@bf333333
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 452  : 	
; 453  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packS
$LN2@test_packS:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packS:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packS

; 454  : 	{
; 455  : 		glm::vec2 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR B$7[rsp], rax

; 456  : 		glm::uint16 C = glm::packSnorm2x8(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z ; glm::packSnorm2x8
	mov	WORD PTR C$8[rsp], ax

; 457  : 		glm::vec2 D = glm::unpackSnorm2x8(C);

	movzx	edx, WORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z ; glm::unpackSnorm2x8

; 458  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 127.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c010204
	movss	DWORD PTR $T12[rsp], xmm0
	lea	r9, QWORD PTR $T12[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packS
	mov	DWORD PTR tv132[rsp], 0
	jmp	SHORT $LN7@test_packS
$LN6@test_packS:
	mov	DWORD PTR tv132[rsp], 1
$LN7@test_packS:
	mov	eax, DWORD PTR tv132[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 459  : 	}

	jmp	$LN2@test_packS
$LN3@test_packS:

; 460  : 	
; 461  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T14[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	mov	eax, DWORD PTR $T14[rsp]

; 462  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packSnorm2x8@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_packSnorm2x8@@YAHXZ ENDP				; test_packSnorm2x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 184
$T14 = 188
tv132 = 192
?dtor$0@?0??test_packSnorm2x8@@YAHXZ@4HA PROC		; `test_packSnorm2x8'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packSnorm2x8@@YAHXZ@4HA ENDP		; `test_packSnorm2x8'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 184
$T14 = 188
tv132 = 192
?test_packUnorm2x8@@YAHXZ PROC				; test_packUnorm2x8

; 426  : {

$LN10:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 427  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 428  : 	
; 429  : 	std::vector<glm::vec2> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	npad	1

; 430  : 	A.push_back(glm::vec2(1.0f, 0.7f));

	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 431  : 	A.push_back(glm::vec2(0.5f, 0.1f));

	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 432  : 	
; 433  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 434  : 	{
; 435  : 		glm::vec2 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR B$7[rsp], rax

; 436  : 		glm::uint16 C = glm::packUnorm2x8(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z ; glm::packUnorm2x8
	mov	WORD PTR C$8[rsp], ax

; 437  : 		glm::vec2 D = glm::unpackUnorm2x8(C);

	movzx	edx, WORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z ; glm::unpackUnorm2x8

; 438  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 255.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3b808081
	movss	DWORD PTR $T12[rsp], xmm0
	lea	r9, QWORD PTR $T12[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv132[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv132[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv132[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 439  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 439				; 000001b7H
	lea	rdx, OFFSET FLAT:$SG63530
	lea	rcx, OFFSET FLAT:$SG63531
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 440  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 441  : 	
; 442  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T14[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	mov	eax, DWORD PTR $T14[rsp]

; 443  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm2x8@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_packUnorm2x8@@YAHXZ ENDP				; test_packUnorm2x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 184
$T14 = 188
tv132 = 192
?dtor$0@?0??test_packUnorm2x8@@YAHXZ@4HA PROC		; `test_packUnorm2x8'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm2x8@@YAHXZ@4HA ENDP		; `test_packUnorm2x8'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 116
C$8 = 132
D$9 = 148
$T10 = 164
$T11 = 168
$T12 = 172
$T13 = 176
$T14 = 180
$T15 = 184
tv137 = 188
?test_packSnorm1x8@@YAHXZ PROC				; test_packSnorm1x8

; 406  : {

$LN9:
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 407  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 408  : 	
; 409  : 	std::vector<glm::vec1> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	npad	1

; 410  : 	A.push_back(glm::vec1( 1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 411  : 	A.push_back(glm::vec1(-0.7f));

	movss	xmm1, DWORD PTR __real@bf333333
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 412  : 	A.push_back(glm::vec1(-1.0f));

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 413  : 	
; 414  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packS
$LN2@test_packS:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packS:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packS

; 415  : 	{
; 416  : 		glm::vec1 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec1@M$0A@@glm@@_K@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR B$7[rsp], eax

; 417  : 		glm::uint8 C = glm::packSnorm1x8(B.x);

	movss	xmm0, DWORD PTR B$7[rsp]
	call	?packSnorm1x8@glm@@YAEM@Z		; glm::packSnorm1x8
	mov	BYTE PTR C$8[rsp], al

; 418  : 		glm::vec1 D(glm::unpackSnorm1x8(C));

	movzx	ecx, BYTE PTR C$8[rsp]
	call	?unpackSnorm1x8@glm@@YAME@Z		; glm::unpackSnorm1x8
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR D$9[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>

; 419  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 127.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c010204
	movss	DWORD PTR $T13[rsp], xmm0
	lea	r9, QWORD PTR $T13[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packS
	mov	DWORD PTR tv137[rsp], 0
	jmp	SHORT $LN7@test_packS
$LN6@test_packS:
	mov	DWORD PTR tv137[rsp], 1
$LN7@test_packS:
	mov	eax, DWORD PTR tv137[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 420  : 	}

	jmp	$LN2@test_packS
$LN3@test_packS:

; 421  : 	
; 422  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	mov	eax, DWORD PTR $T15[rsp]

; 423  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packSnorm1x8@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_packSnorm1x8@@YAHXZ ENDP				; test_packSnorm1x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 116
C$8 = 132
D$9 = 148
$T10 = 164
$T11 = 168
$T12 = 172
$T13 = 176
$T14 = 180
$T15 = 184
tv137 = 188
?dtor$0@?0??test_packSnorm1x8@@YAHXZ@4HA PROC		; `test_packSnorm1x8'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packSnorm1x8@@YAHXZ@4HA ENDP		; `test_packSnorm1x8'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 116
C$8 = 132
D$9 = 148
$T10 = 164
$T11 = 168
$T12 = 172
$T13 = 176
$T14 = 180
$T15 = 184
tv137 = 188
?test_packUnorm1x8@@YAHXZ PROC				; test_packUnorm1x8

; 385  : {

$LN10:
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 386  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 387  : 	
; 388  : 	std::vector<glm::vec1> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	npad	1

; 389  : 	A.push_back(glm::vec1(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 390  : 	A.push_back(glm::vec1(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 391  : 	A.push_back(glm::vec1(0.0f));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 392  : 	
; 393  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 394  : 	{
; 395  : 		glm::vec1 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec1@M$0A@@glm@@_K@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR B$7[rsp], eax

; 396  : 		glm::uint8 C = glm::packUnorm1x8(B.x);

	movss	xmm0, DWORD PTR B$7[rsp]
	call	?packUnorm1x8@glm@@YAEM@Z		; glm::packUnorm1x8
	mov	BYTE PTR C$8[rsp], al

; 397  : 		glm::vec1 D(glm::unpackUnorm1x8(C));

	movzx	ecx, BYTE PTR C$8[rsp]
	call	?unpackUnorm1x8@glm@@YAME@Z		; glm::unpackUnorm1x8
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR D$9[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>

; 398  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 255.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3b808081
	movss	DWORD PTR $T13[rsp], xmm0
	lea	r9, QWORD PTR $T13[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv137[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv137[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv137[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 399  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 399				; 0000018fH
	lea	rdx, OFFSET FLAT:$SG63492
	lea	rcx, OFFSET FLAT:$SG63493
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 400  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 401  : 	
; 402  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	mov	eax, DWORD PTR $T15[rsp]

; 403  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm1x8@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_packUnorm1x8@@YAHXZ ENDP				; test_packUnorm1x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 116
C$8 = 132
D$9 = 148
$T10 = 164
$T11 = 168
$T12 = 172
$T13 = 176
$T14 = 180
$T15 = 184
tv137 = 188
?dtor$0@?0??test_packUnorm1x8@@YAHXZ@4HA PROC		; `test_packUnorm1x8'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm1x8@@YAHXZ@4HA ENDP		; `test_packUnorm1x8'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 168
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 260
$T14 = 264
$T15 = 268
tv144 = 272
?test_packSnorm4x16@@YAHXZ PROC				; test_packSnorm4x16

; 364  : {

$LN10:
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 365  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 366  : 
; 367  : 	std::vector<glm::vec4> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 368  : 	A.push_back(glm::vec4( 1.0f, 0.0f, -0.5f, 0.5f));

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@bf000000
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 369  : 	A.push_back(glm::vec4(-0.3f,-0.7f,  0.3f, 0.7f));

	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@bf333333
	movss	xmm1, DWORD PTR __real@be99999a
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 370  : 	A.push_back(glm::vec4(-0.1f, 0.1f, -0.2f, 0.2f));

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@be4ccccd
	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@bdcccccd
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 371  : 
; 372  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packS
$LN2@test_packS:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packS:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packS

; 373  : 	{
; 374  : 		glm::vec4 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	lea	rcx, QWORD PTR B$7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 375  : 		glm::uint64 C = glm::packSnorm4x16(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z ; glm::packSnorm4x16
	mov	QWORD PTR C$8[rsp], rax

; 376  : 		glm::vec4 D(glm::unpackSnorm4x16(C));

	mov	rdx, QWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z ; glm::unpackSnorm4x16

; 377  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 32767.0f * 2.0f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38800100
	movss	DWORD PTR $T13[rsp], xmm0
	lea	r9, QWORD PTR $T13[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packS
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN7@test_packS
$LN6@test_packS:
	mov	DWORD PTR tv144[rsp], 1
$LN7@test_packS:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 378  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packS
	mov	r8d, 378				; 0000017aH
	lea	rdx, OFFSET FLAT:$SG63471
	lea	rcx, OFFSET FLAT:$SG63472
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packS:

; 379  : 	}

	jmp	$LN2@test_packS
$LN3@test_packS:

; 380  : 	
; 381  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T15[rsp]

; 382  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packSnorm4x16@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
?test_packSnorm4x16@@YAHXZ ENDP				; test_packSnorm4x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 168
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 260
$T14 = 264
$T15 = 268
tv144 = 272
?dtor$0@?0??test_packSnorm4x16@@YAHXZ@4HA PROC		; `test_packSnorm4x16'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packSnorm4x16@@YAHXZ@4HA ENDP		; `test_packSnorm4x16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 152
D$9 = 168
$T10 = 196
$T11 = 212
$T12 = 228
$T13 = 244
$T14 = 260
$T15 = 264
$T16 = 268
tv140 = 272
?test_packUnorm4x16@@YAHXZ PROC				; test_packUnorm4x16

; 342  : {

$LN10:
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 343  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 344  : 
; 345  : 	std::vector<glm::vec4> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 346  : 	A.push_back(glm::vec4(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 347  : 	A.push_back(glm::vec4(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 348  : 	A.push_back(glm::vec4(0.1f));

	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 349  : 	A.push_back(glm::vec4(0.0f));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 350  : 
; 351  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 352  : 	{
; 353  : 		glm::vec4 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	lea	rcx, QWORD PTR B$7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 354  : 		glm::uint64 C = glm::packUnorm4x16(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z ; glm::packUnorm4x16
	mov	QWORD PTR C$8[rsp], rax

; 355  : 		glm::vec4 D(glm::unpackUnorm4x16(C));

	mov	rdx, QWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z ; glm::unpackUnorm4x16

; 356  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 65535.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@37800080
	movss	DWORD PTR $T14[rsp], xmm0
	lea	r9, QWORD PTR $T14[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv140[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 357  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 357				; 00000165H
	lea	rdx, OFFSET FLAT:$SG63449
	lea	rcx, OFFSET FLAT:$SG63450
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 358  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 359  : 	
; 360  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T16[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T16[rsp]

; 361  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm4x16@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
?test_packUnorm4x16@@YAHXZ ENDP				; test_packUnorm4x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 152
D$9 = 168
$T10 = 196
$T11 = 212
$T12 = 228
$T13 = 244
$T14 = 260
$T15 = 264
$T16 = 268
tv140 = 272
?dtor$0@?0??test_packUnorm4x16@@YAHXZ@4HA PROC		; `test_packUnorm4x16'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm4x16@@YAHXZ@4HA ENDP		; `test_packUnorm4x16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
$T14 = 192
$T15 = 196
tv138 = 200
?test_packSnorm2x16@@YAHXZ PROC				; test_packSnorm2x16

; 321  : {

$LN10:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 322  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 323  : 
; 324  : 	std::vector<glm::vec2> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	npad	1

; 325  : 	A.push_back(glm::vec2( 1.0f, 0.0f));

	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 326  : 	A.push_back(glm::vec2(-0.5f,-0.7f));

	movss	xmm2, DWORD PTR __real@bf333333
	movss	xmm1, DWORD PTR __real@bf000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 327  : 	A.push_back(glm::vec2(-0.1f, 0.1f));

	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@bdcccccd
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 328  : 
; 329  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packS
$LN2@test_packS:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packS:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packS

; 330  : 	{
; 331  : 		glm::vec2 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR B$7[rsp], rax

; 332  : 		glm::uint32 C = glm::packSnorm2x16(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z ; glm::packSnorm2x16
	mov	DWORD PTR C$8[rsp], eax

; 333  : 		glm::vec2 D = glm::unpackSnorm2x16(C);

	mov	edx, DWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z ; glm::unpackSnorm2x16

; 334  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 32767.0f * 2.0f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38800100
	movss	DWORD PTR $T13[rsp], xmm0
	lea	r9, QWORD PTR $T13[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packS
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN7@test_packS
$LN6@test_packS:
	mov	DWORD PTR tv138[rsp], 1
$LN7@test_packS:
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 335  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packS
	mov	r8d, 335				; 0000014fH
	lea	rdx, OFFSET FLAT:$SG63426
	lea	rcx, OFFSET FLAT:$SG63427
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packS:

; 336  : 	}

	jmp	$LN2@test_packS
$LN3@test_packS:

; 337  : 	
; 338  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	mov	eax, DWORD PTR $T15[rsp]

; 339  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packSnorm2x16@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_packSnorm2x16@@YAHXZ ENDP				; test_packSnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
$T14 = 192
$T15 = 196
tv138 = 200
?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA PROC		; `test_packSnorm2x16'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA ENDP		; `test_packSnorm2x16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec2>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_N$0A@@glm@@SAHXZ PROC			; glm::tvec2<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv66 = 56
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
epsilon$ = 104
??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec2>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA PROC ; `std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA ENDP ; `std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 3
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 3

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 3

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back, COMDAT

; 900  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 901  :         // insert by moving into element at end, provide strong guarantee
; 902  :         emplace_back(_STD move(_Val));

	mov	rcx, QWORD PTR _Val$[rsp]
	call	??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec2<float,0> &>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::emplace_back<glm::tvec2<float,0> >

; 903  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S1$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S1$[rsp]
	call	??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<float,0> >
	lea	rax, QWORD PTR $S1$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<float,0> >
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 2305843009213693951		; 1fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec2<float,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec2<float,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec2<float,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 3
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec2<float,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec2<float,0> >::allocator<glm::tvec2<float,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec2<float,0> >::allocator<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
$T14 = 192
$T15 = 196
tv138 = 200
?test_packUnorm2x16@@YAHXZ PROC				; test_packUnorm2x16

; 300  : {

$LN10:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 301  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 302  : 
; 303  : 	std::vector<glm::vec2> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	npad	1

; 304  : 	A.push_back(glm::vec2(1.0f, 0.0f));

	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 305  : 	A.push_back(glm::vec2(0.5f, 0.7f));

	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 306  : 	A.push_back(glm::vec2(0.1f, 0.2f));

	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 307  : 
; 308  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 309  : 	{
; 310  : 		glm::vec2 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR B$7[rsp], rax

; 311  : 		glm::uint32 C = glm::packUnorm2x16(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z ; glm::packUnorm2x16
	mov	DWORD PTR C$8[rsp], eax

; 312  : 		glm::vec2 D = glm::unpackUnorm2x16(C);

	mov	edx, DWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z ; glm::unpackUnorm2x16

; 313  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 65535.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@37800080
	movss	DWORD PTR $T13[rsp], xmm0
	lea	r9, QWORD PTR $T13[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv138[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 314  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 314				; 0000013aH
	lea	rdx, OFFSET FLAT:$SG63404
	lea	rcx, OFFSET FLAT:$SG63405
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 315  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 316  : 	
; 317  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	mov	eax, DWORD PTR $T15[rsp]

; 318  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm2x16@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_packUnorm2x16@@YAHXZ ENDP				; test_packUnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
$T14 = 192
$T15 = 196
tv138 = 200
?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA PROC		; `test_packUnorm2x16'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA ENDP		; `test_packUnorm2x16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 116
C$8 = 132
D$9 = 148
$T10 = 164
$T11 = 168
$T12 = 172
$T13 = 176
$T14 = 180
$T15 = 184
$T16 = 188
tv143 = 192
?test_packSnorm1x16@@YAHXZ PROC				; test_packSnorm1x16

; 279  : {

$LN9:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 281  : 
; 282  : 	std::vector<glm::vec1> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	npad	1

; 283  : 	A.push_back(glm::vec1( 1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 284  : 	A.push_back(glm::vec1( 0.0f));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 285  : 	A.push_back(glm::vec1(-0.5f));

	movss	xmm1, DWORD PTR __real@bf000000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 286  : 	A.push_back(glm::vec1(-0.1f));

	movss	xmm1, DWORD PTR __real@bdcccccd
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 287  : 
; 288  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packS
$LN2@test_packS:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packS:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packS

; 289  : 	{
; 290  : 		glm::vec1 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec1@M$0A@@glm@@_K@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR B$7[rsp], eax

; 291  : 		glm::uint32 C = glm::packSnorm1x16(B.x);

	movss	xmm0, DWORD PTR B$7[rsp]
	call	?packSnorm1x16@glm@@YAGM@Z		; glm::packSnorm1x16
	movzx	eax, ax
	mov	DWORD PTR C$8[rsp], eax

; 292  : 		glm::vec1 D(glm::unpackSnorm1x16(C));

	movzx	ecx, WORD PTR C$8[rsp]
	call	?unpackSnorm1x16@glm@@YAMG@Z		; glm::unpackSnorm1x16
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR D$9[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>

; 293  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 32767.0f * 2.0f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38800100
	movss	DWORD PTR $T14[rsp], xmm0
	lea	r9, QWORD PTR $T14[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packS
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN7@test_packS
$LN6@test_packS:
	mov	DWORD PTR tv143[rsp], 1
$LN7@test_packS:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 294  : 	}

	jmp	$LN2@test_packS
$LN3@test_packS:

; 295  : 	
; 296  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T16[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	mov	eax, DWORD PTR $T16[rsp]

; 297  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packSnorm1x16@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_packSnorm1x16@@YAHXZ ENDP				; test_packSnorm1x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 116
C$8 = 132
D$9 = 148
$T10 = 164
$T11 = 168
$T12 = 172
$T13 = 176
$T14 = 180
$T15 = 184
$T16 = 188
tv143 = 192
?dtor$0@?0??test_packSnorm1x16@@YAHXZ@4HA PROC		; `test_packSnorm1x16'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packSnorm1x16@@YAHXZ@4HA ENDP		; `test_packSnorm1x16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec1>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<bool,0>::tvec1<bool,0>, COMDAT

; 34   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<bool,0>::tvec1<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 71   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 73   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 74   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_N$0A@@glm@@SAHXZ PROC			; glm::tvec1<bool,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
tv66 = 48
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
epsilon$ = 104
??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec1>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec1>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 39   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$0A@@glm@@SAHXZ PROC			; glm::tvec1<float,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@M$0A@@glm@@SAHXZ ENDP			; glm::tvec1<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z@4HA PROC ; `std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z@4HA ENDP ; `std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec1@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec1@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec1<float,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAXQEAU?$tvec1@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec1<float,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec1@M$0A@@glm@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec1@M$0A@@glm@@_K1@Z PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec1@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec1@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec1<float,0> > >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAXQEAU?$tvec1@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec1<float,0> >::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec1@M$0A@@glm@@_K1@Z ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec1@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec1@M$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 2
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec1@M$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec1<float,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 2

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back, COMDAT

; 900  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 901  :         // insert by moving into element at end, provide strong guarantee
; 902  :         emplace_back(_STD move(_Val));

	mov	rcx, QWORD PTR _Val$[rsp]
	call	??$move@AEAU?$tvec1@M$0A@@glm@@@std@@YA$$QEAU?$tvec1@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec1<float,0> &>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$emplace_back@U?$tvec1@M$0A@@glm@@@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::emplace_back<glm::tvec1<float,0> >

; 903  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S2$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S2$[rsp]
	call	??$?0U?$tvec1@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec1<float,0> >
	lea	rax, QWORD PTR $S2$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec1@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec1<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec1<float,0> > >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec1@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0U?$tvec1@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec1@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec1<float,0> >
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec1<float,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 4611686018427387903		; 3fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec1@M$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec1<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec1<float,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$03@std@@YA_K_K@Z	; std::_Get_size_of_n<4>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAPEAU?$tvec1@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec1<float,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAXQEAU?$tvec1@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAXQEAU?$tvec1@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec1<float,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAAXQEAU?$tvec1@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec1<float,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec1<float,0> >::allocator<glm::tvec1<float,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec1@M$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec1<float,0> >::allocator<glm::tvec1<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 116
C$8 = 132
D$9 = 148
$T10 = 164
$T11 = 168
$T12 = 172
$T13 = 176
$T14 = 180
$T15 = 184
$T16 = 188
tv143 = 192
?test_packUnorm1x16@@YAHXZ PROC				; test_packUnorm1x16

; 257  : {

$LN10:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 258  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 259  : 
; 260  : 	std::vector<glm::vec1> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	npad	1

; 261  : 	A.push_back(glm::vec1(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 262  : 	A.push_back(glm::vec1(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 263  : 	A.push_back(glm::vec1(0.1f));

	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 264  : 	A.push_back(glm::vec1(0.0f));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec1@M$0A@@glm@@@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::push_back

; 265  : 
; 266  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 267  : 	{
; 268  : 		glm::vec1 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec1@M$0A@@glm@@_K@Z ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR B$7[rsp], eax

; 269  : 		glm::uint32 C = glm::packUnorm1x16(B.x);

	movss	xmm0, DWORD PTR B$7[rsp]
	call	?packUnorm1x16@glm@@YAGM@Z		; glm::packUnorm1x16
	movzx	eax, ax
	mov	DWORD PTR C$8[rsp], eax

; 270  : 		glm::vec1 D(glm::unpackUnorm1x16(C));

	movzx	ecx, WORD PTR C$8[rsp]
	call	?unpackUnorm1x16@glm@@YAMG@Z		; glm::unpackUnorm1x16
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR D$9[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>

; 271  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 65535.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@37800080
	movss	DWORD PTR $T14[rsp], xmm0
	lea	r9, QWORD PTR $T14[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv143[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 272  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 272				; 00000110H
	lea	rdx, OFFSET FLAT:$SG62688
	lea	rcx, OFFSET FLAT:$SG62689
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 273  : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 274  : 	
; 275  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T16[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	mov	eax, DWORD PTR $T16[rsp]

; 276  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm1x16@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_packUnorm1x16@@YAHXZ ENDP				; test_packUnorm1x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 116
C$8 = 132
D$9 = 148
$T10 = 164
$T11 = 168
$T12 = 172
$T13 = 176
$T14 = 180
$T15 = 184
$T16 = 188
tv143 = 192
?dtor$0@?0??test_packUnorm1x16@@YAHXZ@4HA PROC		; `test_packUnorm1x16'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec1@M$0A@@glm@@V?$allocator@U?$tvec1@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >::~vector<glm::tvec1<float,0>,std::allocator<glm::tvec1<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm1x16@@YAHXZ@4HA ENDP		; `test_packUnorm1x16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv66 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
epsilon$ = 120
??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec3>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 224
$T13 = 236
$T14 = 248
$T15 = 260
$T16 = 272
$T17 = 284
$T18 = 288
$T19 = 292
tv153 = 296
?test_F3x9_E1x5@@YAHXZ PROC				; test_F3x9_E1x5

; 233  : {

$LN9:
	push	rdi
	sub	rsp, 304				; 00000130H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 234  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 235  : 
; 236  : 	std::vector<glm::vec3> Tests;

	lea	rcx, QWORD PTR Tests$[rsp]
	call	??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	npad	1

; 237  : 	Tests.push_back(glm::vec3(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 238  : 	Tests.push_back(glm::vec3(0.0f));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 239  : 	Tests.push_back(glm::vec3(2.0f));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 240  : 	Tests.push_back(glm::vec3(0.1f));

	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 241  : 	Tests.push_back(glm::vec3(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 242  : 	Tests.push_back(glm::vec3(0.9f));

	movss	xmm1, DWORD PTR __real@3f666666
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 243  : 
; 244  : 	for (std::size_t i = 0; i < Tests.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_F3x9_
$LN2@test_F3x9_:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_F3x9_:
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_F3x9_

; 245  : 	{
; 246  : 		glm::uint32 p0 = glm::packF3x9_E1x5(Tests[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??A?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@M$0A@@glm@@_K@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::operator[]
	mov	rcx, rax
	call	?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z ; glm::packF3x9_E1x5
	mov	DWORD PTR p0$7[rsp], eax

; 247  : 		glm::vec3 v0 = glm::unpackF3x9_E1x5(p0);

	mov	edx, DWORD PTR p0$7[rsp]
	lea	rcx, QWORD PTR v0$8[rsp]
	call	?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z ; glm::unpackF3x9_E1x5

; 248  : 		glm::uint32 p1 = glm::packF3x9_E1x5(v0);

	lea	rcx, QWORD PTR v0$8[rsp]
	call	?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z ; glm::packF3x9_E1x5
	mov	DWORD PTR p1$9[rsp], eax

; 249  : 		glm::vec3 v1 = glm::unpackF3x9_E1x5(p1);

	mov	edx, DWORD PTR p1$9[rsp]
	lea	rcx, QWORD PTR v1$10[rsp]
	call	?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z ; glm::unpackF3x9_E1x5

; 250  : 		Error += glm::all(glm::epsilonEqual(v0, v1, 0.01f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T17[rsp], xmm0
	lea	r9, QWORD PTR $T17[rsp]
	lea	r8, QWORD PTR v1$10[rsp]
	lea	rdx, QWORD PTR v0$8[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_F3x9_
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN7@test_F3x9_
$LN6@test_F3x9_:
	mov	DWORD PTR tv153[rsp], 1
$LN7@test_F3x9_:
	mov	eax, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 251  : 	}

	jmp	$LN2@test_F3x9_
$LN3@test_F3x9_:

; 252  : 
; 253  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T19[rsp], eax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	mov	eax, DWORD PTR $T19[rsp]

; 254  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_F3x9_E1x5@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 304				; 00000130H
	pop	rdi
	ret	0
?test_F3x9_E1x5@@YAHXZ ENDP				; test_F3x9_E1x5
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 224
$T13 = 236
$T14 = 248
$T15 = 260
$T16 = 272
$T17 = 284
$T18 = 288
$T19 = 292
tv153 = 296
?dtor$0@?0??test_F3x9_E1x5@@YAHXZ@4HA PROC		; `test_F3x9_E1x5'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Tests$[rbp]
	call	??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_F3x9_E1x5@@YAHXZ@4HA ENDP		; `test_F3x9_E1x5'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec3>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_N$0A@@glm@@SAHXZ PROC			; glm::tvec3<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z@4HA PROC ; `std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z@4HA ENDP ; `std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec3@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec3<float,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	cdq
	mov	ecx, 12
	idiv	rcx
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAXQEAU?$tvec3@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec3<float,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec3@M$0A@@glm@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec3@M$0A@@glm@@_K1@Z PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec3<float,0> > >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	cdq
	mov	ecx, 12
	idiv	rcx
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAXQEAU?$tvec3@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec3<float,0> >::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 12
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 12
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec3@M$0A@@glm@@_K1@Z ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@M$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	cdq
	mov	ecx, 12
	idiv	rcx
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	imul	rax, QWORD PTR _Pos$[rsp], 12
	mov	rcx, QWORD PTR _My_data$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@M$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	cdq
	mov	ecx, 12
	idiv	rcx

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec3<float,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	cdq
	mov	ecx, 12
	idiv	rcx

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back, COMDAT

; 900  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 901  :         // insert by moving into element at end, provide strong guarantee
; 902  :         emplace_back(_STD move(_Val));

	mov	rcx, QWORD PTR _Val$[rsp]
	call	??$move@AEAU?$tvec3@M$0A@@glm@@@std@@YA$$QEAU?$tvec3@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec3<float,0> &>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$emplace_back@U?$tvec3@M$0A@@glm@@@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::emplace_back<glm::tvec3<float,0> >

; 903  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S3$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S3$[rsp]
	call	??$?0U?$tvec3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec3<float,0> >
	lea	rax, QWORD PTR $S3$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<float,0> > >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0U?$tvec3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec3<float,0> >
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec3<float,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 1537228672809129301		; 1555555555555555H

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@M$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec3<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec3<float,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0M@@std@@YA_K_K@Z	; std::_Get_size_of_n<12>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAPEAU?$tvec3@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec3<float,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAXQEAU?$tvec3@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAXQEAU?$tvec3@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec3<float,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 12
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAAXQEAU?$tvec3@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec3<float,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec3<float,0> >::allocator<glm::tvec3<float,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec3@M$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec3<float,0> >::allocator<glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 224
$T13 = 236
$T14 = 248
$T15 = 260
$T16 = 272
$T17 = 284
$T18 = 288
tv152 = 292
?test_F2x11_1x10@@YAHXZ PROC				; test_F2x11_1x10

; 209  : {

$LN9:
	push	rdi
	sub	rsp, 304				; 00000130H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 210  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 211  : 
; 212  : 	std::vector<glm::vec3> Tests;

	lea	rcx, QWORD PTR Tests$[rsp]
	call	??0?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	npad	1

; 213  : 	Tests.push_back(glm::vec3(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 214  : 	Tests.push_back(glm::vec3(0.0f));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 215  : 	Tests.push_back(glm::vec3(2.0f));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 216  : 	Tests.push_back(glm::vec3(0.1f));

	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 217  : 	Tests.push_back(glm::vec3(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 218  : 	Tests.push_back(glm::vec3(0.9f));

	movss	xmm1, DWORD PTR __real@3f666666
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec3@M$0A@@glm@@@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::push_back

; 219  : 
; 220  : 	for(std::size_t i = 0; i < Tests.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_F2x11
$LN2@test_F2x11:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_F2x11:
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?size@?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_F2x11

; 221  : 	{
; 222  : 		glm::uint32 p0 = glm::packF2x11_1x10(Tests[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??A?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@M$0A@@glm@@_K@Z ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::operator[]
	mov	rcx, rax
	call	?packF2x11_1x10@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z ; glm::packF2x11_1x10
	mov	DWORD PTR p0$7[rsp], eax

; 223  : 		glm::vec3 v0 = glm::unpackF2x11_1x10(p0);

	mov	edx, DWORD PTR p0$7[rsp]
	lea	rcx, QWORD PTR v0$8[rsp]
	call	?unpackF2x11_1x10@glm@@YA?AU?$tvec3@M$0A@@1@I@Z ; glm::unpackF2x11_1x10

; 224  : 		glm::uint32 p1 = glm::packF2x11_1x10(v0);

	lea	rcx, QWORD PTR v0$8[rsp]
	call	?packF2x11_1x10@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z ; glm::packF2x11_1x10
	mov	DWORD PTR p1$9[rsp], eax

; 225  : 		glm::vec3 v1 = glm::unpackF2x11_1x10(p1);

	mov	edx, DWORD PTR p1$9[rsp]
	lea	rcx, QWORD PTR v1$10[rsp]
	call	?unpackF2x11_1x10@glm@@YA?AU?$tvec3@M$0A@@1@I@Z ; glm::unpackF2x11_1x10

; 226  : 		Error += glm::all(glm::equal(v0, v1)) ? 0 : 1;

	lea	r8, QWORD PTR v1$10[rsp]
	lea	rdx, QWORD PTR v0$8[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_F2x11
	mov	DWORD PTR tv152[rsp], 0
	jmp	SHORT $LN7@test_F2x11
$LN6@test_F2x11:
	mov	DWORD PTR tv152[rsp], 1
$LN7@test_F2x11:
	mov	eax, DWORD PTR tv152[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 227  : 	}

	jmp	$LN2@test_F2x11
$LN3@test_F2x11:

; 228  : 
; 229  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T18[rsp], eax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	mov	eax, DWORD PTR $T18[rsp]

; 230  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_F2x11_1x10@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 304				; 00000130H
	pop	rdi
	ret	0
?test_F2x11_1x10@@YAHXZ ENDP				; test_F2x11_1x10
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 224
$T13 = 236
$T14 = 248
$T15 = 260
$T16 = 272
$T17 = 284
$T18 = 288
tv152 = 292
?dtor$0@?0??test_F2x11_1x10@@YAHXZ@4HA PROC		; `test_F2x11_1x10'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Tests$[rbp]
	call	??1?$vector@U?$tvec3@M$0A@@glm@@V?$allocator@U?$tvec3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >::~vector<glm::tvec3<float,0>,std::allocator<glm::tvec3<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_F2x11_1x10@@YAHXZ@4HA ENDP		; `test_F2x11_1x10'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 228
$T13 = 244
$T14 = 260
$T15 = 276
$T16 = 292
$T17 = 308
$T18 = 312
$T19 = 316
tv153 = 320
?test_Unorm3x10_1x2@@YAHXZ PROC				; test_Unorm3x10_1x2

; 184  : {

$LN9:
	push	rdi
	sub	rsp, 336				; 00000150H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 185  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 186  : 
; 187  : 	std::vector<glm::vec4> Tests;

	lea	rcx, QWORD PTR Tests$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 188  : 	Tests.push_back(glm::vec4(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 189  : 	Tests.push_back(glm::vec4(0.0f));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 190  : 	Tests.push_back(glm::vec4(2.0f));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 191  : 	Tests.push_back(glm::vec4(0.1f));

	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 192  : 	Tests.push_back(glm::vec4(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 193  : 	Tests.push_back(glm::vec4(0.9f));

	movss	xmm1, DWORD PTR __real@3f666666
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 194  : 
; 195  : 	for(std::size_t i = 0; i < Tests.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_Unorm
$LN2@test_Unorm:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_Unorm:
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_Unorm

; 196  : 	{
; 197  : 		glm::uint32 p0 = glm::packUnorm3x10_1x2(Tests[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	mov	rcx, rax
	call	?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ; glm::packUnorm3x10_1x2
	mov	DWORD PTR p0$7[rsp], eax

; 198  : 		glm::vec4 v0 = glm::unpackUnorm3x10_1x2(p0);

	mov	edx, DWORD PTR p0$7[rsp]
	lea	rcx, QWORD PTR v0$8[rsp]
	call	?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ; glm::unpackUnorm3x10_1x2

; 199  : 		glm::uint32 p1 = glm::packUnorm3x10_1x2(v0);

	lea	rcx, QWORD PTR v0$8[rsp]
	call	?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ; glm::packUnorm3x10_1x2
	mov	DWORD PTR p1$9[rsp], eax

; 200  : 		glm::vec4 v1 = glm::unpackUnorm3x10_1x2(p1);

	mov	edx, DWORD PTR p1$9[rsp]
	lea	rcx, QWORD PTR v1$10[rsp]
	call	?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ; glm::unpackUnorm3x10_1x2

; 201  : 
; 202  : 		Error += glm::all(glm::epsilonEqual(v0, v1, 0.001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR $T17[rsp], xmm0
	lea	r9, QWORD PTR $T17[rsp]
	lea	r8, QWORD PTR v1$10[rsp]
	lea	rdx, QWORD PTR v0$8[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_Unorm
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN7@test_Unorm
$LN6@test_Unorm:
	mov	DWORD PTR tv153[rsp], 1
$LN7@test_Unorm:
	mov	eax, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 203  : 	}

	jmp	$LN2@test_Unorm
$LN3@test_Unorm:

; 204  : 
; 205  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T19[rsp], eax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T19[rsp]

; 206  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_Unorm3x10_1x2@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 336				; 00000150H
	pop	rdi
	ret	0
?test_Unorm3x10_1x2@@YAHXZ ENDP				; test_Unorm3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 228
$T13 = 244
$T14 = 260
$T15 = 276
$T16 = 292
$T17 = 308
$T18 = 312
$T19 = 316
tv153 = 320
?dtor$0@?0??test_Unorm3x10_1x2@@YAHXZ@4HA PROC		; `test_Unorm3x10_1x2'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Tests$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_Unorm3x10_1x2@@YAHXZ@4HA ENDP		; `test_Unorm3x10_1x2'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
tv66 = 80
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec4>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 228
$T13 = 244
$T14 = 260
$T15 = 276
$T16 = 292
$T17 = 308
$T18 = 312
$T19 = 316
tv153 = 320
?test_Snorm3x10_1x2@@YAHXZ PROC				; test_Snorm3x10_1x2

; 159  : {

$LN9:
	push	rdi
	sub	rsp, 336				; 00000150H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 160  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 161  : 
; 162  : 	std::vector<glm::vec4> Tests;

	lea	rcx, QWORD PTR Tests$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 163  : 	Tests.push_back(glm::vec4(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 164  : 	Tests.push_back(glm::vec4(0.0f));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 165  : 	Tests.push_back(glm::vec4(2.0f));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 166  : 	Tests.push_back(glm::vec4(0.1f));

	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 167  : 	Tests.push_back(glm::vec4(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 168  : 	Tests.push_back(glm::vec4(0.9f));

	movss	xmm1, DWORD PTR __real@3f666666
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 169  : 
; 170  : 	for(std::size_t i = 0; i < Tests.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_Snorm
$LN2@test_Snorm:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_Snorm:
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_Snorm

; 171  : 	{
; 172  : 		glm::uint32 p0 = glm::packSnorm3x10_1x2(Tests[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	mov	rcx, rax
	call	?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ; glm::packSnorm3x10_1x2
	mov	DWORD PTR p0$7[rsp], eax

; 173  : 		glm::vec4 v0 = glm::unpackSnorm3x10_1x2(p0);

	mov	edx, DWORD PTR p0$7[rsp]
	lea	rcx, QWORD PTR v0$8[rsp]
	call	?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ; glm::unpackSnorm3x10_1x2

; 174  : 		glm::uint32 p1 = glm::packSnorm3x10_1x2(v0);

	lea	rcx, QWORD PTR v0$8[rsp]
	call	?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ; glm::packSnorm3x10_1x2
	mov	DWORD PTR p1$9[rsp], eax

; 175  : 		glm::vec4 v1 = glm::unpackSnorm3x10_1x2(p1);

	mov	edx, DWORD PTR p1$9[rsp]
	lea	rcx, QWORD PTR v1$10[rsp]
	call	?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ; glm::unpackSnorm3x10_1x2

; 176  : 
; 177  : 		Error += glm::all(glm::epsilonEqual(v0, v1, 0.01f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T17[rsp], xmm0
	lea	r9, QWORD PTR $T17[rsp]
	lea	r8, QWORD PTR v1$10[rsp]
	lea	rdx, QWORD PTR v0$8[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_Snorm
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN7@test_Snorm
$LN6@test_Snorm:
	mov	DWORD PTR tv153[rsp], 1
$LN7@test_Snorm:
	mov	eax, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 178  : 	}

	jmp	$LN2@test_Snorm
$LN3@test_Snorm:

; 179  : 
; 180  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T19[rsp], eax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T19[rsp]

; 181  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_Snorm3x10_1x2@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 336				; 00000150H
	pop	rdi
	ret	0
?test_Snorm3x10_1x2@@YAHXZ ENDP				; test_Snorm3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 228
$T13 = 244
$T14 = 260
$T15 = 276
$T16 = 292
$T17 = 308
$T18 = 312
$T19 = 316
tv153 = 320
?dtor$0@?0??test_Snorm3x10_1x2@@YAHXZ@4HA PROC		; `test_Snorm3x10_1x2'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Tests$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_Snorm3x10_1x2@@YAHXZ@4HA ENDP		; `test_Snorm3x10_1x2'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z PROC ; glm::equal<unsigned int,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec4<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec4<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ENDP ; glm::equal<unsigned int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z@4HA PROC ; `std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z@4HA ENDP ; `std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@I$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<unsigned int,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAXQEAU?$tvec4@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<unsigned int,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@I$0A@@glm@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@I$0A@@glm@@_K1@Z PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<unsigned int,0> > >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAXQEAU?$tvec4@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<unsigned int,0> >::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@I$0A@@glm@@_K1@Z ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@I$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@I$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	imul	rax, QWORD PTR _Pos$[rsp], 16
	mov	rcx, QWORD PTR _My_data$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@I$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 4

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<unsigned int,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::push_back, COMDAT

; 900  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 901  :         // insert by moving into element at end, provide strong guarantee
; 902  :         emplace_back(_STD move(_Val));

	mov	rcx, QWORD PTR _Val$[rsp]
	call	??$move@AEAU?$tvec4@I$0A@@glm@@@std@@YA$$QEAU?$tvec4@I$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<unsigned int,0> &>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$emplace_back@U?$tvec4@I$0A@@glm@@@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@I$0A@@glm@@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::emplace_back<glm::tvec4<unsigned int,0> >

; 903  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S4$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::~vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S4$[rsp]
	call	??$?0U?$tvec4@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<unsigned int,0> >
	lea	rax, QWORD PTR $S4$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::~vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<unsigned int,0> > >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0U?$tvec4@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@I$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<unsigned int,0> >
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<unsigned int,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 1152921504606846975		; 0fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@I$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<unsigned int,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<unsigned int,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAPEAU?$tvec4@I$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<unsigned int,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAXQEAU?$tvec4@I$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAXQEAU?$tvec4@I$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<unsigned int,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAAXQEAU?$tvec4@I$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<unsigned int,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec4<unsigned int,0> >::allocator<glm::tvec4<unsigned int,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec4@I$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec4<unsigned int,0> >::allocator<glm::tvec4<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 228
$T13 = 244
$T14 = 260
$T15 = 276
$T16 = 292
$T17 = 308
$T18 = 312
tv152 = 316
?test_U3x10_1x2@@YAHXZ PROC				; test_U3x10_1x2

; 135  : {

$LN9:
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 136  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 137  : 
; 138  : 	std::vector<glm::uvec4> Tests;

	lea	rcx, QWORD PTR Tests$[rsp]
	call	??0?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >
	npad	1

; 139  : 	Tests.push_back(glm::uvec4(0));

	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::push_back

; 140  : 	Tests.push_back(glm::uvec4(1));

	mov	edx, 1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::push_back

; 141  : 	Tests.push_back(glm::uvec4(2));

	mov	edx, 2
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::push_back

; 142  : 	Tests.push_back(glm::uvec4(3));

	mov	edx, 3
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::push_back

; 143  : 	Tests.push_back(glm::uvec4(4));

	mov	edx, 4
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::push_back

; 144  : 	Tests.push_back(glm::uvec4(5));

	mov	edx, 5
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@I$0A@@glm@@@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::push_back

; 145  : 
; 146  : 	for(std::size_t i = 0; i < Tests.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_U3x10
$LN2@test_U3x10:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_U3x10:
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?size@?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_U3x10

; 147  : 	{
; 148  : 		glm::uint32 p0 = glm::packU3x10_1x2(Tests[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??A?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@I$0A@@glm@@_K@Z ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::operator[]
	mov	rcx, rax
	call	?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z ; glm::packU3x10_1x2
	mov	DWORD PTR p0$7[rsp], eax

; 149  : 		glm::uvec4 v0 = glm::unpackU3x10_1x2(p0);

	mov	edx, DWORD PTR p0$7[rsp]
	lea	rcx, QWORD PTR v0$8[rsp]
	call	?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z ; glm::unpackU3x10_1x2

; 150  : 		glm::uint32 p1 = glm::packU3x10_1x2(v0);

	lea	rcx, QWORD PTR v0$8[rsp]
	call	?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z ; glm::packU3x10_1x2
	mov	DWORD PTR p1$9[rsp], eax

; 151  : 		glm::uvec4 v1 = glm::unpackU3x10_1x2(p1);

	mov	edx, DWORD PTR p1$9[rsp]
	lea	rcx, QWORD PTR v1$10[rsp]
	call	?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z ; glm::unpackU3x10_1x2

; 152  : 		Error += glm::all(glm::equal(v0, v1)) ? 0 : 1;

	lea	r8, QWORD PTR v1$10[rsp]
	lea	rdx, QWORD PTR v0$8[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_U3x10
	mov	DWORD PTR tv152[rsp], 0
	jmp	SHORT $LN7@test_U3x10
$LN6@test_U3x10:
	mov	DWORD PTR tv152[rsp], 1
$LN7@test_U3x10:
	mov	eax, DWORD PTR tv152[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 153  : 	}

	jmp	$LN2@test_U3x10
$LN3@test_U3x10:

; 154  : 
; 155  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T18[rsp], eax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::~vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >
	mov	eax, DWORD PTR $T18[rsp]

; 156  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_U3x10_1x2@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 320				; 00000140H
	pop	rdi
	ret	0
?test_U3x10_1x2@@YAHXZ ENDP				; test_U3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 228
$T13 = 244
$T14 = 260
$T15 = 276
$T16 = 292
$T17 = 308
$T18 = 312
tv152 = 316
?dtor$0@?0??test_U3x10_1x2@@YAHXZ@4HA PROC		; `test_U3x10_1x2'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Tests$[rbp]
	call	??1?$vector@U?$tvec4@I$0A@@glm@@V?$allocator@U?$tvec4@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >::~vector<glm::tvec4<unsigned int,0>,std::allocator<glm::tvec4<unsigned int,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_U3x10_1x2@@YAHXZ@4HA ENDP		; `test_U3x10_1x2'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA PROC ; `std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA ENDP ; `std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	imul	rax, QWORD PTR _Pos$[rsp], 16
	mov	rcx, QWORD PTR _My_data$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 4

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::push_back, COMDAT

; 900  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 901  :         // insert by moving into element at end, provide strong guarantee
; 902  :         emplace_back(_STD move(_Val));

	mov	rcx, QWORD PTR _Val$[rsp]
	call	??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<int,0> &>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$emplace_back@U?$tvec4@H$0A@@glm@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::emplace_back<glm::tvec4<int,0> >

; 903  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S5$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S5$[rsp]
	call	??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<int,0> >
	lea	rax, QWORD PTR $S5$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<int,0> >
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 1152921504606846975		; 0fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<int,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<int,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<int,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<int,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec4<int,0> >::allocator<glm::tvec4<int,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec4<int,0> >::allocator<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 228
$T13 = 244
$T14 = 260
$T15 = 276
$T16 = 292
$T17 = 308
$T18 = 312
tv152 = 316
?test_I3x10_1x2@@YAHXZ PROC				; test_I3x10_1x2

; 111  : {

$LN9:
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 112  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 113  : 
; 114  : 	std::vector<glm::ivec4> Tests;

	lea	rcx, QWORD PTR Tests$[rsp]
	call	??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	npad	1

; 115  : 	Tests.push_back(glm::ivec4(0));

	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::push_back

; 116  : 	Tests.push_back(glm::ivec4(1));

	mov	edx, 1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::push_back

; 117  : 	Tests.push_back(glm::ivec4(-1));

	mov	edx, -1
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::push_back

; 118  : 	Tests.push_back(glm::ivec4(2));

	mov	edx, 2
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::push_back

; 119  : 	Tests.push_back(glm::ivec4(-2));

	mov	edx, -2
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::push_back

; 120  : 	Tests.push_back(glm::ivec4(3));

	mov	edx, 3
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::push_back

; 121  : 
; 122  : 	for(std::size_t i = 0; i < Tests.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_I3x10
$LN2@test_I3x10:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_I3x10:
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_I3x10

; 123  : 	{
; 124  : 		glm::uint32 p0 = glm::packI3x10_1x2(Tests[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::operator[]
	mov	rcx, rax
	call	?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z ; glm::packI3x10_1x2
	mov	DWORD PTR p0$7[rsp], eax

; 125  : 		glm::ivec4 v0 = glm::unpackI3x10_1x2(p0);

	mov	edx, DWORD PTR p0$7[rsp]
	lea	rcx, QWORD PTR v0$8[rsp]
	call	?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z ; glm::unpackI3x10_1x2

; 126  : 		glm::uint32 p1 = glm::packI3x10_1x2(v0);

	lea	rcx, QWORD PTR v0$8[rsp]
	call	?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z ; glm::packI3x10_1x2
	mov	DWORD PTR p1$9[rsp], eax

; 127  : 		glm::ivec4 v1 = glm::unpackI3x10_1x2(p1);

	mov	edx, DWORD PTR p1$9[rsp]
	lea	rcx, QWORD PTR v1$10[rsp]
	call	?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z ; glm::unpackI3x10_1x2

; 128  : 		Error += glm::all(glm::equal(v0, v1)) ? 0 : 1;

	lea	r8, QWORD PTR v1$10[rsp]
	lea	rdx, QWORD PTR v0$8[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_I3x10
	mov	DWORD PTR tv152[rsp], 0
	jmp	SHORT $LN7@test_I3x10
$LN6@test_I3x10:
	mov	DWORD PTR tv152[rsp], 1
$LN7@test_I3x10:
	mov	eax, DWORD PTR tv152[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 129  : 	}

	jmp	$LN2@test_I3x10
$LN3@test_I3x10:

; 130  : 
; 131  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T18[rsp], eax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	mov	eax, DWORD PTR $T18[rsp]

; 132  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_I3x10_1x2@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 320				; 00000140H
	pop	rdi
	ret	0
?test_I3x10_1x2@@YAHXZ ENDP				; test_I3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Tests$ = 56
i$6 = 104
p0$7 = 112
v0$8 = 136
p1$9 = 164
v1$10 = 184
$T11 = 212
$T12 = 228
$T13 = 244
$T14 = 260
$T15 = 276
$T16 = 292
$T17 = 308
$T18 = 312
tv152 = 316
?dtor$0@?0??test_I3x10_1x2@@YAHXZ@4HA PROC		; `test_I3x10_1x2'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Tests$[rbp]
	call	??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_I3x10_1x2@@YAHXZ@4HA ENDP		; `test_I3x10_1x2'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ??$unpackHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$unpackHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z PROC ; glm::unpackHalf<0,glm::tvec4>, COMDAT

; 650  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 651  : 		return detail::compute_half<P, vecType>::unpack(v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?unpack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z ; glm::detail::compute_half<0,glm::tvec4>::unpack
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 652  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$unpackHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z ENDP ; glm::unpackHalf<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ??$packHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$packHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::packHalf<0,glm::tvec4>, COMDAT

; 644  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 645  : 		return detail::compute_half<P, vecType>::pack(v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?pack@?$compute_half@$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_half<0,glm::tvec4>::pack
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 646  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$packHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::packHalf<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA PROC ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA ENDP ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	imul	rax, QWORD PTR _Pos$[rsp], 16
	mov	rcx, QWORD PTR _My_data$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 4

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back, COMDAT

; 900  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 901  :         // insert by moving into element at end, provide strong guarantee
; 902  :         emplace_back(_STD move(_Val));

	mov	rcx, QWORD PTR _Val$[rsp]
	call	??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<float,0> &>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::emplace_back<glm::tvec4<float,0> >

; 903  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S6$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S6$[rsp]
	call	??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
	lea	rax, QWORD PTR $S6$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 1152921504606846975		; 0fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<float,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<float,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<float,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<float,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
Tests$ = 56
i$8 = 104
p0$9 = 112
v0$10 = 136
p1$11 = 168
v1$12 = 184
p2$13 = 232
v2$14 = 264
$T15 = 292
$T16 = 308
$T17 = 324
$T18 = 340
$T19 = 356
$T20 = 372
$T21 = 388
$T22 = 392
$T23 = 396
tv156 = 400
tv166 = 404
?test_Half4x16@@YAHXZ PROC				; test_Half4x16

; 83   : {

$LN11:
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 84   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 85   : 
; 86   : 	std::vector<glm::vec4> Tests;

	lea	rcx, QWORD PTR Tests$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 87   : 	Tests.push_back(glm::vec4(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 88   : 	Tests.push_back(glm::vec4(0.0f));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 89   : 	Tests.push_back(glm::vec4(2.0f));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T17[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 90   : 	Tests.push_back(glm::vec4(0.1f));

	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T18[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 91   : 	Tests.push_back(glm::vec4(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T19[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 92   : 	Tests.push_back(glm::vec4(-0.9f));

	movss	xmm1, DWORD PTR __real@bf666666
	lea	rcx, QWORD PTR $T20[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 93   : 
; 94   : 	for(std::size_t i = 0; i < Tests.size(); ++i)

	mov	QWORD PTR i$8[rsp], 0
	jmp	SHORT $LN4@test_Half4
$LN2@test_Half4:
	mov	rax, QWORD PTR i$8[rsp]
	inc	rax
	mov	QWORD PTR i$8[rsp], rax
$LN4@test_Half4:
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
	cmp	QWORD PTR i$8[rsp], rax
	jae	$LN3@test_Half4

; 95   : 	{
; 96   : 		glm::uint64 p0 = glm::packHalf4x16(Tests[i]);

	mov	rdx, QWORD PTR i$8[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	mov	rcx, rax
	call	?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z ; glm::packHalf4x16
	mov	QWORD PTR p0$9[rsp], rax

; 97   : 		glm::vec4 v0 = glm::unpackHalf4x16(p0);

	mov	rdx, QWORD PTR p0$9[rsp]
	lea	rcx, QWORD PTR v0$10[rsp]
	call	?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z ; glm::unpackHalf4x16

; 98   : 		glm::uint64 p1 = glm::packHalf4x16(v0);

	lea	rcx, QWORD PTR v0$10[rsp]
	call	?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z ; glm::packHalf4x16
	mov	QWORD PTR p1$11[rsp], rax

; 99   : 		glm::vec4 v1 = glm::unpackHalf4x16(p1);

	mov	rdx, QWORD PTR p1$11[rsp]
	lea	rcx, QWORD PTR v1$12[rsp]
	call	?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z ; glm::unpackHalf4x16

; 100  : 		glm::u16vec4 p2 = glm::packHalf(v0);

	lea	rdx, QWORD PTR v0$10[rsp]
	lea	rcx, QWORD PTR p2$13[rsp]
	call	??$packHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::packHalf<0,glm::tvec4>

; 101  : 		glm::vec4 v2 = glm::unpackHalf(p2);

	lea	rdx, QWORD PTR p2$13[rsp]
	lea	rcx, QWORD PTR v2$14[rsp]
	call	??$unpackHalf@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z ; glm::unpackHalf<0,glm::tvec4>

; 102  : 
; 103  : 		Error += glm::all(glm::equal(v0, v1)) ? 0 : 1;

	lea	r8, QWORD PTR v1$12[rsp]
	lea	rdx, QWORD PTR v0$10[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_Half4
	mov	DWORD PTR tv156[rsp], 0
	jmp	SHORT $LN7@test_Half4
$LN6@test_Half4:
	mov	DWORD PTR tv156[rsp], 1
$LN7@test_Half4:
	mov	eax, DWORD PTR tv156[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 104  : 		Error += glm::all(glm::equal(v0, v2)) ? 0 : 1;

	lea	r8, QWORD PTR v2$14[rsp]
	lea	rdx, QWORD PTR v0$10[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@test_Half4
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN9@test_Half4
$LN8@test_Half4:
	mov	DWORD PTR tv166[rsp], 1
$LN9@test_Half4:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 105  : 	}

	jmp	$LN2@test_Half4
$LN3@test_Half4:

; 106  : 
; 107  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T23[rsp], eax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T23[rsp]

; 108  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_Half4x16@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 416				; 000001a0H
	pop	rdi
	ret	0
?test_Half4x16@@YAHXZ ENDP				; test_Half4x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Tests$ = 56
i$8 = 104
p0$9 = 112
v0$10 = 136
p1$11 = 168
v1$12 = 184
p2$13 = 232
v2$14 = 264
$T15 = 292
$T16 = 308
$T17 = 324
$T18 = 340
$T19 = 356
$T20 = 372
$T21 = 388
$T22 = 392
$T23 = 396
tv156 = 400
tv166 = 404
?dtor$0@?0??test_Half4x16@@YAHXZ@4HA PROC		; `test_Half4x16'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Tests$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_Half4x16@@YAHXZ@4HA ENDP		; `test_Half4x16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEBAAEBV?$allocator@M@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEBAAEBV?$allocator@M@2@XZ PROC ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEBAAEBV?$allocator@M@2@XZ ENDP ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAAAEAV?$allocator@M@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAAAEAV?$allocator@M@2@XZ PROC ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAAAEAV?$allocator@M@2@XZ ENDP ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<float> >::_Vector_val<std::_Simple_types<float> >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<float> >::_Vector_val<std::_Simple_types<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEBAAEBV?$allocator@M@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEBAAEBV?$allocator@M@2@XZ PROC ; std::vector<float,std::allocator<float> >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEBAAEBV?$allocator@M@2@XZ ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEBAAEBV?$allocator@M@2@XZ ENDP ; std::vector<float,std::allocator<float> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ PROC ; std::vector<float,std::allocator<float> >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAAAEAV?$allocator@M@2@XZ ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ ENDP ; std::vector<float,std::allocator<float> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z PROC ; std::vector<float,std::allocator<float> >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z ENDP ; std::vector<float,std::allocator<float> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z PROC ; std::vector<float,std::allocator<float> >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z ENDP ; std::vector<float,std::allocator<float> >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z@4HA PROC ; `std::vector<float,std::allocator<float> >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z@4HA ENDP ; `std::vector<float,std::allocator<float> >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z PROC ; std::vector<float,std::allocator<float> >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@AEBAXPEAM0@Z ENDP ; std::vector<float,std::allocator<float> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ PROC ; std::vector<float,std::allocator<float> >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ ENDP ; std::vector<float,std::allocator<float> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ PROC	; std::vector<float,std::allocator<float> >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPEAMQEAMAEAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@M@std@@QEAAXQEAM_K@Z ; std::allocator<float>::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ ENDP	; std::vector<float,std::allocator<float> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AEAAXQEAM_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AEAAXQEAM_K1@Z PROC ; std::vector<float,std::allocator<float> >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPEAMQEAMAEAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@M@std@@QEAAXQEAM_K@Z ; std::allocator<float>::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AEAAXQEAM_K1@Z ENDP ; std::vector<float,std::allocator<float> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@AEBA_K_K@Z PROC ; std::vector<float,std::allocator<float> >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ ; std::vector<float,std::allocator<float> >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ ; std::vector<float,std::allocator<float> >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<float,std::allocator<float> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@MV?$allocator@M@std@@@std@@QEAAAEAM_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@MV?$allocator@M@std@@@std@@QEAAAEAM_K@Z PROC ; std::vector<float,std::allocator<float> >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 2
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@MV?$allocator@M@std@@@std@@QEAAAEAM_K@Z ENDP ; std::vector<float,std::allocator<float> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ PROC ; std::vector<float,std::allocator<float> >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ ENDP ; std::vector<float,std::allocator<float> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ PROC ; std::vector<float,std::allocator<float> >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEBAAEBV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SA_KAEBV?$allocator@M@2@@Z ; std::_Default_allocator_traits<std::allocator<float> >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ ENDP ; std::vector<float,std::allocator<float> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ PROC	; std::vector<float,std::allocator<float> >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 2

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ ENDP	; std::vector<float,std::allocator<float> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z PROC ; std::vector<float,std::allocator<float> >::push_back, COMDAT

; 900  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 901  :         // insert by moving into element at end, provide strong guarantee
; 902  :         emplace_back(_STD move(_Val));

	mov	rcx, QWORD PTR _Val$[rsp]
	call	??$move@AEAM@std@@YA$$QEAMAEAM@Z	; std::move<float &>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$emplace_back@M@?$vector@MV?$allocator@M@std@@@std@@QEAA?A_T$$QEAM@Z ; std::vector<float,std::allocator<float> >::emplace_back<float>

; 903  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z ENDP ; std::vector<float,std::allocator<float> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S7$ = 52
$T4 = 68
this$ = 96
??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ PROC	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AEAAXXZ ; std::vector<float,std::allocator<float> >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S7$[rsp]
	call	??$?0M@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@M@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><float>
	lea	rax, QWORD PTR $S7$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ ENDP	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ PROC	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@M@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><float>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ ENDP	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SA_KAEBV?$allocator@M@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SA_KAEBV?$allocator@M@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<float> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 4611686018427387903		; 3fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SA_KAEBV?$allocator@M@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<float> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@M@std@@QEAAPEAM_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@M@std@@QEAAPEAM_K@Z PROC		; std::allocator<float>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$03@std@@YA_K_K@Z	; std::_Get_size_of_n<4>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@M@std@@QEAAPEAM_K@Z ENDP		; std::allocator<float>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@M@std@@QEAAXQEAM_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@M@std@@QEAAXQEAM_K@Z PROC	; std::allocator<float>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@M@std@@QEAAXQEAM_K@Z ENDP	; std::allocator<float>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@M@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@M@std@@QEAA@XZ PROC			; std::allocator<float>::allocator<float>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@M@std@@QEAA@XZ ENDP			; std::allocator<float>::allocator<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
Error$ = 32
Tests$ = 56
i$4 = 104
p0$5 = 112
v0$6 = 116
p1$7 = 120
v1$8 = 124
$T9 = 128
$T10 = 132
$T11 = 136
$T12 = 140
$T13 = 144
$T14 = 148
$T15 = 152
tv129 = 156
?test_Half1x16@@YAHXZ PROC				; test_Half1x16

; 59   : {

$LN9:
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 60   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 61   : 
; 62   : 	std::vector<float> Tests;

	lea	rcx, QWORD PTR Tests$[rsp]
	call	??0?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
	npad	1

; 63   : 	Tests.push_back(0.0f);

	xorps	xmm0, xmm0
	movss	DWORD PTR $T9[rsp], xmm0
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z ; std::vector<float,std::allocator<float> >::push_back

; 64   : 	Tests.push_back(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T10[rsp], xmm0
	lea	rdx, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z ; std::vector<float,std::allocator<float> >::push_back

; 65   : 	Tests.push_back(-1.0f);

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR $T11[rsp], xmm0
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z ; std::vector<float,std::allocator<float> >::push_back

; 66   : 	Tests.push_back(2.0f);

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T12[rsp], xmm0
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z ; std::vector<float,std::allocator<float> >::push_back

; 67   : 	Tests.push_back(-2.0f);

	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR $T13[rsp], xmm0
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z ; std::vector<float,std::allocator<float> >::push_back

; 68   : 	Tests.push_back(1.9f);

	movss	xmm0, DWORD PTR __real@3ff33333
	movss	DWORD PTR $T14[rsp], xmm0
	lea	rdx, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAX$$QEAM@Z ; std::vector<float,std::allocator<float> >::push_back

; 69   : 
; 70   : 	for(std::size_t i = 0; i < Tests.size(); ++i)

	mov	QWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@test_Half1
$LN2@test_Half1:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@test_Half1:
	lea	rcx, QWORD PTR Tests$[rsp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QEBA_KXZ ; std::vector<float,std::allocator<float> >::size
	cmp	QWORD PTR i$4[rsp], rax
	jae	$LN3@test_Half1

; 71   : 	{
; 72   : 		glm::uint32 p0 = glm::packHalf1x16(Tests[i]);

	mov	rdx, QWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??A?$vector@MV?$allocator@M@std@@@std@@QEAAAEAM_K@Z ; std::vector<float,std::allocator<float> >::operator[]
	movss	xmm0, DWORD PTR [rax]
	call	?packHalf1x16@glm@@YAGM@Z		; glm::packHalf1x16
	movzx	eax, ax
	mov	DWORD PTR p0$5[rsp], eax

; 73   : 		float v0 = glm::unpackHalf1x16(p0);

	movzx	ecx, WORD PTR p0$5[rsp]
	call	?unpackHalf1x16@glm@@YAMG@Z		; glm::unpackHalf1x16
	movss	DWORD PTR v0$6[rsp], xmm0

; 74   : 		glm::uint32 p1 = glm::packHalf1x16(v0);

	movss	xmm0, DWORD PTR v0$6[rsp]
	call	?packHalf1x16@glm@@YAGM@Z		; glm::packHalf1x16
	movzx	eax, ax
	mov	DWORD PTR p1$7[rsp], eax

; 75   : 		float v1 = glm::unpackHalf1x16(p1);

	movzx	ecx, WORD PTR p1$7[rsp]
	call	?unpackHalf1x16@glm@@YAMG@Z		; glm::unpackHalf1x16
	movss	DWORD PTR v1$8[rsp], xmm0

; 76   : 		Error += (v0 == v1) ? 0 : 1;

	movss	xmm0, DWORD PTR v0$6[rsp]
	ucomiss	xmm0, DWORD PTR v1$8[rsp]
	jp	SHORT $LN6@test_Half1
	jne	SHORT $LN6@test_Half1
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN7@test_Half1
$LN6@test_Half1:
	mov	DWORD PTR tv129[rsp], 1
$LN7@test_Half1:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 77   : 	}

	jmp	$LN2@test_Half1
$LN3@test_Half1:

; 78   : 
; 79   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR Tests$[rsp]
	call	??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	mov	eax, DWORD PTR $T15[rsp]

; 80   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_Half1x16@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?test_Half1x16@@YAHXZ ENDP				; test_Half1x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Tests$ = 56
i$4 = 104
p0$5 = 112
v0$6 = 116
p1$7 = 120
v1$8 = 124
$T9 = 128
$T10 = 132
$T11 = 136
$T12 = 140
$T13 = 144
$T14 = 148
$T15 = 152
tv129 = 156
?dtor$0@?0??test_Half1x16@@YAHXZ@4HA PROC		; `test_Half1x16'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Tests$[rbp]
	call	??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_Half1x16@@YAHXZ@4HA ENDP		; `test_Half1x16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
s$ = 48
?print_value@@YAXAEBM@Z PROC				; print_value

; 48   : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 49   : 	printf("%2.5f, ", s);

	mov	rax, QWORD PTR s$[rsp]
	cvtss2sd xmm0, DWORD PTR [rax]
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG58692
	call	printf

; 50   : 	print_bits(s);

	mov	rcx, QWORD PTR s$[rsp]
	call	?print_bits@@YAXAEBM@Z			; print_bits

; 51   : 	printf(", ");

	lea	rcx, OFFSET FLAT:$SG58693
	call	printf

; 52   : //	print_11bits(detail::floatTo11bit(s));
; 53   : //	printf(", ");
; 54   : //	print_10bits(detail::floatTo10bit(s));
; 55   : 	printf("\n");

	lea	rcx, OFFSET FLAT:$SG58694
	call	printf

; 56   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?print_value@@YAXAEBM@Z ENDP				; print_value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
j$1 = 32
tv80 = 40
tv74 = 44
s$ = 64
?print_11bits@@YAXAEBI@Z PROC				; print_11bits

; 37   : {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 38   : 	printf("11b: ");

	lea	rcx, OFFSET FLAT:$SG58685
	call	printf

; 39   : 	for(std::size_t j = 11; j > 0; --j)

	mov	QWORD PTR j$1[rsp], 11
	jmp	SHORT $LN4@print_11bi
$LN2@print_11bi:
	mov	rax, QWORD PTR j$1[rsp]
	dec	rax
	mov	QWORD PTR j$1[rsp], rax
$LN4@print_11bi:
	cmp	QWORD PTR j$1[rsp], 0
	jbe	SHORT $LN3@print_11bi

; 40   : 	{
; 41   : 		if(j == 6)

	cmp	QWORD PTR j$1[rsp], 6
	jne	SHORT $LN5@print_11bi

; 42   : 			printf(" ");

	lea	rcx, OFFSET FLAT:$SG58687
	call	printf
$LN5@print_11bi:

; 43   : 		printf("%d", (s & (1 << (j - 1))) ? 1 : 0);

	mov	rax, QWORD PTR j$1[rsp]
	dec	rax
	mov	ecx, 1
	mov	DWORD PTR tv80[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv80[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN7@print_11bi
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN8@print_11bi
$LN7@print_11bi:
	mov	DWORD PTR tv74[rsp], 0
$LN8@print_11bi:
	mov	edx, DWORD PTR tv74[rsp]
	lea	rcx, OFFSET FLAT:$SG58688
	call	printf

; 44   : 	}

	jmp	SHORT $LN2@print_11bi
$LN3@print_11bi:

; 45   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?print_11bits@@YAXAEBI@Z ENDP				; print_11bits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
j$1 = 32
tv80 = 40
tv74 = 44
s$ = 64
?print_10bits@@YAXAEBI@Z PROC				; print_10bits

; 26   : {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 27   : 	printf("10b: ");

	lea	rcx, OFFSET FLAT:$SG58674
	call	printf

; 28   : 	for(std::size_t j = 10; j > 0; --j)

	mov	QWORD PTR j$1[rsp], 10
	jmp	SHORT $LN4@print_10bi
$LN2@print_10bi:
	mov	rax, QWORD PTR j$1[rsp]
	dec	rax
	mov	QWORD PTR j$1[rsp], rax
$LN4@print_10bi:
	cmp	QWORD PTR j$1[rsp], 0
	jbe	SHORT $LN3@print_10bi

; 29   : 	{
; 30   : 		if(j == 5)

	cmp	QWORD PTR j$1[rsp], 5
	jne	SHORT $LN5@print_10bi

; 31   : 			printf(" ");

	lea	rcx, OFFSET FLAT:$SG58676
	call	printf
$LN5@print_10bi:

; 32   : 		printf("%d", (s & (1 << (j - 1))) ? 1 : 0);

	mov	rax, QWORD PTR j$1[rsp]
	dec	rax
	mov	ecx, 1
	mov	DWORD PTR tv80[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv80[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN7@print_10bi
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN8@print_10bi
$LN7@print_10bi:
	mov	DWORD PTR tv74[rsp], 0
$LN8@print_10bi:
	mov	edx, DWORD PTR tv74[rsp]
	lea	rcx, OFFSET FLAT:$SG58677
	call	printf

; 33   : 	}

	jmp	SHORT $LN2@print_10bi
$LN3@print_10bi:

; 34   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?print_10bits@@YAXAEBI@Z ENDP				; print_10bits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_packing.cpp
_TEXT	SEGMENT
uif$ = 36
j$4 = 56
tv83 = 64
tv75 = 68
s$ = 96
?print_bits@@YAXAEBM@Z PROC				; print_bits

; 7    : {

$LN10:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 8    : 	union
; 9    : 	{
; 10   : 		float f;
; 11   : 		unsigned int i;
; 12   : 	} uif;
; 13   : 
; 14   : 	uif.f = s;

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR uif$[rsp], xmm0

; 15   : 
; 16   : 	printf("f32: ");

	lea	rcx, OFFSET FLAT:$SG58662
	call	printf

; 17   : 	for(std::size_t j = sizeof(s) * 8; j > 0; --j)

	mov	QWORD PTR j$4[rsp], 32			; 00000020H
	jmp	SHORT $LN4@print_bits
$LN2@print_bits:
	mov	rax, QWORD PTR j$4[rsp]
	dec	rax
	mov	QWORD PTR j$4[rsp], rax
$LN4@print_bits:
	cmp	QWORD PTR j$4[rsp], 0
	jbe	SHORT $LN3@print_bits

; 18   : 	{
; 19   : 		if(j == 23 || j == 31)

	cmp	QWORD PTR j$4[rsp], 23
	je	SHORT $LN6@print_bits
	cmp	QWORD PTR j$4[rsp], 31
	jne	SHORT $LN5@print_bits
$LN6@print_bits:

; 20   : 			printf(" ");

	lea	rcx, OFFSET FLAT:$SG58665
	call	printf
$LN5@print_bits:

; 21   : 		printf("%d", (uif.i & (1 << (j - 1))) ? 1 : 0);

	mov	rax, QWORD PTR j$4[rsp]
	dec	rax
	mov	ecx, 1
	mov	DWORD PTR tv83[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv83[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR uif$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN8@print_bits
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN9@print_bits
$LN8@print_bits:
	mov	DWORD PTR tv75[rsp], 0
$LN9@print_bits:
	mov	edx, DWORD PTR tv75[rsp]
	lea	rcx, OFFSET FLAT:$SG58666
	call	printf

; 22   : 	}

	jmp	SHORT $LN2@print_bits
$LN3@print_bits:

; 23   : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?print_bits@@YAXAEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?print_bits@@YAXAEBM@Z ENDP				; print_bits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1078 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1079 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1080 :         _Orphan_all_unlocked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1081 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1219 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1220 :     if (!_Myproxy) { // no proxy, already done

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@Orphan_all

; 1221 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1222 :     }
; 1223 : 
; 1224 :     // proxy allocated, drain it
; 1225 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1226 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1227 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1228 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1229 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1231 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1232 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1233 : #if _HAS_CXX20
; 1234 :     if (_STD is_constant_evaluated()) {
; 1235 :         _Orphan_all_unlocked_v3();
; 1236 :     } else
; 1237 : #endif // _HAS_CXX20
; 1238 :     {
; 1239 :         _Orphan_all_locked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1240 :     }
; 1241 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1242 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1048 : 
; 1049 :     _Container_base12(const _Container_base12&) = delete;
; 1050 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1051 : 
; 1052 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1053 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1054 : 
; 1055 :     template <class _Alloc>
; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1058 :         _Construct_in_place(*_New_proxy, this);
; 1059 :         _Myproxy            = _New_proxy;
; 1060 :         _New_proxy->_Mycont = this;
; 1061 :     }
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1065 :         // pre: no iterators refer to the existing proxy
; 1066 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1067 :         _Construct_in_place(*_New_proxy, this);
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1070 :     }
; 1071 : 
; 1072 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1040 : 
; 1041 :     const _Container_base12* _Mycont       = nullptr;
; 1042 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 154				; 0000009aH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 166  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 80   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 319  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$round@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$round@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::round<float,0,glm::tvec3>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'round' only accept floating-point inputs");
; 362  : 		return detail::compute_round<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_round@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_round<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$round@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::round<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0II@?$tvec2@M$0A@@glm@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0II@?$tvec2@M$0A@@glm@@QEAA@II@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><unsigned int,unsigned int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	mov	eax, DWORD PTR a$[rsp]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	mov	eax, DWORD PTR b$[rsp]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0II@?$tvec2@M$0A@@glm@@QEAA@II@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z PROC ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><float,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+4], eax

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ENDP ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0III@?$tvec3@M$0A@@glm@@QEAA@III@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0III@?$tvec3@M$0A@@glm@@QEAA@III@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><unsigned int,unsigned int,unsigned int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	mov	eax, DWORD PTR a$[rsp]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	mov	eax, DWORD PTR b$[rsp]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	mov	eax, DWORD PTR c$[rsp]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0III@?$tvec3@M$0A@@glm@@QEAA@III@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><unsigned int,unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z PROC ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><float,0>, COMDAT

; 130  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+4], eax

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+8], eax

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ENDP ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec3>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator+<float,0>, COMDAT

; 538  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 539  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	addss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 540  : 			v.x + scalar,
; 541  : 			v.y + scalar,
; 542  : 			v.z + scalar);
; 543  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 673  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	divss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	divss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 675  : 			v.x / scalar,
; 676  : 			v.y / scalar,
; 677  : 			v.z / scalar);
; 678  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log2@M@glm@@YAMM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
x$ = 80
??$log2@M@glm@@YAMM@Z PROC				; glm::log2<float>, COMDAT

; 109  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H

; 110  : 		return log2(tvec1<genType>(x)).x;

	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::log2<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]

; 111  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$log2@M@glm@@YAMM@Z ENDP				; glm::log2<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$max@M@glm@@YAMMM@Z PROC				; glm::max<float>, COMDAT

; 24   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	SHORT $LN3@max
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@max
$LN3@max:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@max:
	movss	xmm0, DWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M@glm@@YAMMM@Z ENDP				; glm::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@MM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
tv66 = 56
__$ReturnUdt$ = 80
x$ = 88
minVal$ = 96
maxVal$ = 104
??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@MM@Z PROC ; glm::clamp<float,0,glm::tvec3>, COMDAT

; 551  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 552  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 553  : 		return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, vecType<T, P>(minVal), vecType<T, P>(maxVal));

	movss	xmm1, DWORD PTR maxVal$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR minVal$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 554  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@MM@Z ENDP ; glm::clamp<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0IIII@?$tvec4@M$0A@@glm@@QEAA@IIII@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0IIII@?$tvec4@M$0A@@glm@@QEAA@IIII@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><unsigned int,unsigned int,unsigned int,unsigned int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	eax, DWORD PTR a$[rsp]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	mov	eax, DWORD PTR b$[rsp]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	mov	eax, DWORD PTR c$[rsp]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	mov	eax, DWORD PTR d$[rsp]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0IIII@?$tvec4@M$0A@@glm@@QEAA@IIII@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><unsigned int,unsigned int,unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><float,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+4], eax

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+8], eax

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si rax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+12], eax

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec4<unsigned int,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec4<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@I$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><short,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<short,0>::tvec4<short,0><float,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+4], ax

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+6], ax

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<short,0>::tvec4<short,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR a$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR b$[rsp]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR c$[rsp]
	mov	WORD PTR [rax+4], cx
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR d$[rsp]
	mov	WORD PTR [rax+6], cx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<short,0>::tvec4<short,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><unsigned short,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><float,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+4], ax

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+6], ax

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0C$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0C$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><signed char,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, BYTE PTR [rax+1]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0C$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z PROC ; glm::tvec2<signed char,0>::tvec2<signed char,0><float,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx], al

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+1], al

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ENDP ; glm::tvec2<signed char,0>::tvec2<signed char,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0E$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0E$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><unsigned char,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0E$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z PROC ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><float,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx], al

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+1], al

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ENDP ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M@glm@@YAMMMM@Z
_TEXT	SEGMENT
x$ = 64
minVal$ = 72
maxVal$ = 80
??$clamp@M@glm@@YAMMMM@Z PROC				; glm::clamp<float>, COMDAT

; 544  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 545  : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 546  : 		return min(max(x, minVal), maxVal);

	movss	xmm1, DWORD PTR minVal$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	??$max@M@glm@@YAMMM@Z			; glm::max<float>
	movss	xmm1, DWORD PTR maxVal$[rsp]
	call	??$min@M@glm@@YAMMM@Z			; glm::min<float>

; 547  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$clamp@M@glm@@YAMMMM@Z ENDP				; glm::clamp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packed10bitToFloat@detail@glm@@YAMI@Z
_TEXT	SEGMENT
Result$ = 52
Temp$ = 84
x$ = 128
?packed10bitToFloat@detail@glm@@YAMI@Z PROC		; glm::detail::packed10bitToFloat, COMDAT

; 161  : 	{

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+128]

; 162  : 		if(x == 0)

	cmp	DWORD PTR x$[rsp], 0
	jne	SHORT $LN2@packed10bi

; 163  : 			return 0.0f;

	xorps	xmm0, xmm0
	jmp	SHORT $LN1@packed10bi
	jmp	SHORT $LN3@packed10bi
$LN2@packed10bi:

; 164  : 		else if(x == ((1 << 10) - 1))

	cmp	DWORD PTR x$[rsp], 1023			; 000003ffH
	jne	SHORT $LN4@packed10bi

; 165  : 			return ~0;//NaN

	movss	xmm0, DWORD PTR __real@bf800000
	jmp	SHORT $LN1@packed10bi
	jmp	SHORT $LN5@packed10bi
$LN4@packed10bi:

; 166  : 		else if(x == (0x1f << 5))

	cmp	DWORD PTR x$[rsp], 992			; 000003e0H
	jne	SHORT $LN6@packed10bi

; 167  : 			return ~0;//Inf

	movss	xmm0, DWORD PTR __real@bf800000
	jmp	SHORT $LN1@packed10bi
$LN6@packed10bi:
$LN5@packed10bi:
$LN3@packed10bi:

; 168  : 
; 169  : 		uint Result = packed10ToFloat(x);

	mov	ecx, DWORD PTR x$[rsp]
	call	?packed10ToFloat@detail@glm@@YAII@Z	; glm::detail::packed10ToFloat
	mov	DWORD PTR Result$[rsp], eax

; 170  : 
; 171  : 		float Temp = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR Temp$[rsp], xmm0

; 172  : 		memcpy(&Temp, &Result, sizeof(Temp));

	mov	r8d, 4
	lea	rdx, QWORD PTR Result$[rsp]
	lea	rcx, QWORD PTR Temp$[rsp]
	call	memcpy

; 173  : 		return Temp;

	movss	xmm0, DWORD PTR Temp$[rsp]
$LN1@packed10bi:

; 174  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packed10bitToFloat@detail@glm@@YAMI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?packed10bitToFloat@detail@glm@@YAMI@Z ENDP		; glm::detail::packed10bitToFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?floatTo10bit@detail@glm@@YAIM@Z
_TEXT	SEGMENT
Pack$ = 36
x$ = 80
?floatTo10bit@detail@glm@@YAIM@Z PROC			; glm::detail::floatTo10bit, COMDAT

; 147  : 	{

$LN8:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 148  : 		if(x == 0.0f)

	movss	xmm0, DWORD PTR x$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@floatTo10b
	jne	SHORT $LN2@floatTo10b

; 149  : 			return 0u;

	xor	eax, eax
	jmp	SHORT $LN1@floatTo10b
	jmp	SHORT $LN3@floatTo10b
$LN2@floatTo10b:

; 150  : 		else if(glm::isnan(x))

	movss	xmm0, DWORD PTR x$[rsp]
	call	??$isnan@M@@YA_NM@Z			; isnan<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@floatTo10b

; 151  : 			return ~0u;

	mov	eax, -1					; ffffffffH
	jmp	SHORT $LN1@floatTo10b
	jmp	SHORT $LN5@floatTo10b
$LN4@floatTo10b:

; 152  : 		else if(glm::isinf(x))

	movss	xmm0, DWORD PTR x$[rsp]
	call	??$isinf@M@@YA_NM@Z			; isinf<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@floatTo10b

; 153  : 			return 0x1Fu << 5u;

	mov	eax, 992				; 000003e0H
	jmp	SHORT $LN1@floatTo10b
$LN6@floatTo10b:
$LN5@floatTo10b:
$LN3@floatTo10b:

; 154  : 
; 155  : 		uint Pack = 0;

	mov	DWORD PTR Pack$[rsp], 0

; 156  : 		memcpy(&Pack, &x, sizeof(Pack));

	mov	r8d, 4
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR Pack$[rsp]
	call	memcpy

; 157  : 		return float2packed10(Pack);

	mov	ecx, DWORD PTR Pack$[rsp]
	call	?float2packed10@detail@glm@@YAII@Z	; glm::detail::float2packed10
$LN1@floatTo10b:

; 158  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?floatTo10bit@detail@glm@@YAIM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?floatTo10bit@detail@glm@@YAIM@Z ENDP			; glm::detail::floatTo10bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packed11bitToFloat@detail@glm@@YAMI@Z
_TEXT	SEGMENT
Result$ = 52
Temp$ = 84
x$ = 128
?packed11bitToFloat@detail@glm@@YAMI@Z PROC		; glm::detail::packed11bitToFloat, COMDAT

; 131  : 	{

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+128]

; 132  : 		if(x == 0)

	cmp	DWORD PTR x$[rsp], 0
	jne	SHORT $LN2@packed11bi

; 133  : 			return 0.0f;

	xorps	xmm0, xmm0
	jmp	SHORT $LN1@packed11bi
	jmp	SHORT $LN3@packed11bi
$LN2@packed11bi:

; 134  : 		else if(x == ((1 << 11) - 1))

	cmp	DWORD PTR x$[rsp], 2047			; 000007ffH
	jne	SHORT $LN4@packed11bi

; 135  : 			return ~0;//NaN

	movss	xmm0, DWORD PTR __real@bf800000
	jmp	SHORT $LN1@packed11bi
	jmp	SHORT $LN5@packed11bi
$LN4@packed11bi:

; 136  : 		else if(x == (0x1f << 6))

	cmp	DWORD PTR x$[rsp], 1984			; 000007c0H
	jne	SHORT $LN6@packed11bi

; 137  : 			return ~0;//Inf

	movss	xmm0, DWORD PTR __real@bf800000
	jmp	SHORT $LN1@packed11bi
$LN6@packed11bi:
$LN5@packed11bi:
$LN3@packed11bi:

; 138  : 
; 139  : 		uint Result = packed11ToFloat(x);

	mov	ecx, DWORD PTR x$[rsp]
	call	?packed11ToFloat@detail@glm@@YAII@Z	; glm::detail::packed11ToFloat
	mov	DWORD PTR Result$[rsp], eax

; 140  : 
; 141  : 		float Temp = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR Temp$[rsp], xmm0

; 142  : 		memcpy(&Temp, &Result, sizeof(Temp));

	mov	r8d, 4
	lea	rdx, QWORD PTR Result$[rsp]
	lea	rcx, QWORD PTR Temp$[rsp]
	call	memcpy

; 143  : 		return Temp;

	movss	xmm0, DWORD PTR Temp$[rsp]
$LN1@packed11bi:

; 144  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packed11bitToFloat@detail@glm@@YAMI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?packed11bitToFloat@detail@glm@@YAMI@Z ENDP		; glm::detail::packed11bitToFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ??$isinf@M@@YA_NM@Z
_TEXT	SEGMENT
tv67 = 32
_X$ = 64
??$isinf@M@@YA_NM@Z PROC				; isinf<float>, COMDAT

; 406  :     {

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 407  :         return fpclassify(_X) == FP_INFINITE;

	movss	xmm0, DWORD PTR _X$[rsp]
	call	?fpclassify@@YAHM@Z			; fpclassify
	cmp	eax, 1
	jne	SHORT $LN3@isinf
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@isinf
$LN3@isinf:
	mov	DWORD PTR tv67[rsp], 0
$LN4@isinf:
	movzx	eax, BYTE PTR tv67[rsp]

; 408  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isinf@M@@YA_NM@Z ENDP				; isinf<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ??$isnan@M@@YA_NM@Z
_TEXT	SEGMENT
tv67 = 32
_X$ = 64
??$isnan@M@@YA_NM@Z PROC				; isnan<float>, COMDAT

; 412  :     {

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 413  :         return fpclassify(_X) == FP_NAN;

	movss	xmm0, DWORD PTR _X$[rsp]
	call	?fpclassify@@YAHM@Z			; fpclassify
	cmp	eax, 2
	jne	SHORT $LN3@isnan
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@isnan
$LN3@isnan:
	mov	DWORD PTR tv67[rsp], 0
$LN4@isnan:
	movzx	eax, BYTE PTR tv67[rsp]

; 414  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isnan@M@@YA_NM@Z ENDP				; isnan<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?floatTo11bit@detail@glm@@YAIM@Z
_TEXT	SEGMENT
Pack$ = 36
x$ = 80
?floatTo11bit@detail@glm@@YAIM@Z PROC			; glm::detail::floatTo11bit, COMDAT

; 117  : 	{

$LN8:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 118  : 		if(x == 0.0f)

	movss	xmm0, DWORD PTR x$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@floatTo11b
	jne	SHORT $LN2@floatTo11b

; 119  : 			return 0u;

	xor	eax, eax
	jmp	SHORT $LN1@floatTo11b
	jmp	SHORT $LN3@floatTo11b
$LN2@floatTo11b:

; 120  : 		else if(glm::isnan(x))

	movss	xmm0, DWORD PTR x$[rsp]
	call	??$isnan@M@@YA_NM@Z			; isnan<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@floatTo11b

; 121  : 			return ~0u;

	mov	eax, -1					; ffffffffH
	jmp	SHORT $LN1@floatTo11b
	jmp	SHORT $LN5@floatTo11b
$LN4@floatTo11b:

; 122  : 		else if(glm::isinf(x))

	movss	xmm0, DWORD PTR x$[rsp]
	call	??$isinf@M@@YA_NM@Z			; isinf<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@floatTo11b

; 123  : 			return 0x1Fu << 6u;

	mov	eax, 1984				; 000007c0H
	jmp	SHORT $LN1@floatTo11b
$LN6@floatTo11b:
$LN5@floatTo11b:
$LN3@floatTo11b:

; 124  : 
; 125  : 		uint Pack = 0u;

	mov	DWORD PTR Pack$[rsp], 0

; 126  : 		memcpy(&Pack, &x, sizeof(Pack));

	mov	r8d, 4
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR Pack$[rsp]
	call	memcpy

; 127  : 		return float2packed11(Pack);

	mov	ecx, DWORD PTR Pack$[rsp]
	call	?float2packed11@detail@glm@@YAII@Z	; glm::detail::float2packed11
$LN1@floatTo11b:

; 128  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?floatTo11bit@detail@glm@@YAIM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?floatTo11bit@detail@glm@@YAIM@Z ENDP			; glm::detail::floatTo11bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packed10ToFloat@detail@glm@@YAII@Z
_TEXT	SEGMENT
p$ = 16
?packed10ToFloat@detail@glm@@YAII@Z PROC		; glm::detail::packed10ToFloat, COMDAT

; 91   : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 92   : 		// 10 bits    =>                         EE EEEFFFFF
; 93   : 		// 11 bits    =>                        EEE EEFFFFFF
; 94   : 		// Half bits  =>                   SEEEEEFF FFFFFFFF
; 95   : 		// Float bits => SEEEEEEE EFFFFFFF FFFFFFFF FFFFFFFF
; 96   : 
; 97   : 		// 0x0000001F => 00000000 00000000 00000000 00011111
; 98   : 		// 0x0000003F => 00000000 00000000 00000000 00111111
; 99   : 		// 0x000003E0 => 00000000 00000000 00000011 11100000
; 100  : 		// 0x000007C0 => 00000000 00000000 00000111 11000000
; 101  : 		// 0x00007C00 => 00000000 00000000 01111100 00000000
; 102  : 		// 0x000003FF => 00000000 00000000 00000011 11111111
; 103  : 		// 0x38000000 => 00111000 00000000 00000000 00000000
; 104  : 		// 0x7f800000 => 01111111 10000000 00000000 00000000
; 105  : 		// 0x00008000 => 00000000 00000000 10000000 00000000
; 106  : 		return

	mov	eax, DWORD PTR p$[rsp]
	and	eax, 992				; 000003e0H
	shl	eax, 18
	add	eax, 939524096				; 38000000H
	and	eax, 2139095040				; 7f800000H
	mov	ecx, DWORD PTR p$[rsp]
	and	ecx, 31
	shl	ecx, 18
	or	eax, ecx

; 107  : 			((((p & 0x03E0) << 18) + 0x38000000) & 0x7f800000) | // exponential
; 108  : 			((p & 0x001f) << 18); // Mantissa
; 109  : 	}

	pop	rdi
	ret	0
?packed10ToFloat@detail@glm@@YAII@Z ENDP		; glm::detail::packed10ToFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?float2packed10@detail@glm@@YAII@Z
_TEXT	SEGMENT
f$ = 16
?float2packed10@detail@glm@@YAII@Z PROC			; glm::detail::float2packed10, COMDAT

; 70   : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 71   : 		// 10 bits    =>                         EE EEEFFFFF
; 72   : 		// 11 bits    =>                        EEE EEFFFFFF
; 73   : 		// Half bits  =>                   SEEEEEFF FFFFFFFF
; 74   : 		// Float bits => SEEEEEEE EFFFFFFF FFFFFFFF FFFFFFFF
; 75   : 
; 76   : 		// 0x0000001F => 00000000 00000000 00000000 00011111
; 77   : 		// 0x0000003F => 00000000 00000000 00000000 00111111
; 78   : 		// 0x000003E0 => 00000000 00000000 00000011 11100000
; 79   : 		// 0x000007C0 => 00000000 00000000 00000111 11000000
; 80   : 		// 0x00007C00 => 00000000 00000000 01111100 00000000
; 81   : 		// 0x000003FF => 00000000 00000000 00000011 11111111
; 82   : 		// 0x38000000 => 00111000 00000000 00000000 00000000
; 83   : 		// 0x7f800000 => 01111111 10000000 00000000 00000000
; 84   : 		// 0x00008000 => 00000000 00000000 10000000 00000000
; 85   : 		return

	mov	eax, DWORD PTR f$[rsp]
	and	eax, 2139095040				; 7f800000H
	sub	eax, 939524096				; 38000000H
	shr	eax, 18
	and	eax, 992				; 000003e0H
	mov	ecx, DWORD PTR f$[rsp]
	shr	ecx, 18
	and	ecx, 31
	or	eax, ecx

; 86   : 			((((f & 0x7f800000) - 0x38000000) >> 18) & 0x03E0) | // exponential
; 87   : 			((f >> 18) & 0x001f); // Mantissa
; 88   : 	}

	pop	rdi
	ret	0
?float2packed10@detail@glm@@YAII@Z ENDP			; glm::detail::float2packed10
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packed11ToFloat@detail@glm@@YAII@Z
_TEXT	SEGMENT
p$ = 16
?packed11ToFloat@detail@glm@@YAII@Z PROC		; glm::detail::packed11ToFloat, COMDAT

; 52   : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 53   : 		// 10 bits    =>                         EE EEEFFFFF
; 54   : 		// 11 bits    =>                        EEE EEFFFFFF
; 55   : 		// Half bits  =>                   SEEEEEFF FFFFFFFF
; 56   : 		// Float bits => SEEEEEEE EFFFFFFF FFFFFFFF FFFFFFFF
; 57   : 
; 58   : 		// 0x000007c0 => 00000000 00000000 00000111 11000000
; 59   : 		// 0x00007c00 => 00000000 00000000 01111100 00000000
; 60   : 		// 0x000003ff => 00000000 00000000 00000011 11111111
; 61   : 		// 0x38000000 => 00111000 00000000 00000000 00000000
; 62   : 		// 0x7f800000 => 01111111 10000000 00000000 00000000
; 63   : 		// 0x00008000 => 00000000 00000000 10000000 00000000
; 64   : 		return

	mov	eax, DWORD PTR p$[rsp]
	and	eax, 1984				; 000007c0H
	shl	eax, 17
	add	eax, 939524096				; 38000000H
	and	eax, 2139095040				; 7f800000H
	mov	ecx, DWORD PTR p$[rsp]
	and	ecx, 63					; 0000003fH
	shl	ecx, 17
	or	eax, ecx

; 65   : 			((((p & 0x07c0) << 17) + 0x38000000) & 0x7f800000) | // exponential
; 66   : 			((p & 0x003f) << 17); // Mantissa
; 67   : 	}

	pop	rdi
	ret	0
?packed11ToFloat@detail@glm@@YAII@Z ENDP		; glm::detail::packed11ToFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?float2packed11@detail@glm@@YAII@Z
_TEXT	SEGMENT
f$ = 16
?float2packed11@detail@glm@@YAII@Z PROC			; glm::detail::float2packed11, COMDAT

; 34   : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 35   : 		// 10 bits    =>                         EE EEEFFFFF
; 36   : 		// 11 bits    =>                        EEE EEFFFFFF
; 37   : 		// Half bits  =>                   SEEEEEFF FFFFFFFF
; 38   : 		// Float bits => SEEEEEEE EFFFFFFF FFFFFFFF FFFFFFFF
; 39   : 
; 40   : 		// 0x000007c0 => 00000000 00000000 00000111 11000000
; 41   : 		// 0x00007c00 => 00000000 00000000 01111100 00000000
; 42   : 		// 0x000003ff => 00000000 00000000 00000011 11111111
; 43   : 		// 0x38000000 => 00111000 00000000 00000000 00000000
; 44   : 		// 0x7f800000 => 01111111 10000000 00000000 00000000
; 45   : 		// 0x00008000 => 00000000 00000000 10000000 00000000
; 46   : 		return

	mov	eax, DWORD PTR f$[rsp]
	and	eax, 2139095040				; 7f800000H
	sub	eax, 939524096				; 38000000H
	shr	eax, 17
	and	eax, 1984				; 000007c0H
	mov	ecx, DWORD PTR f$[rsp]
	shr	ecx, 17
	and	ecx, 63					; 0000003fH
	or	eax, ecx

; 47   : 			((((f & 0x7f800000) - 0x38000000) >> 17) & 0x07c0) | // exponential
; 48   : 			((f >> 17) & 0x003f); // Mantissa
; 49   : 	}

	pop	rdi
	ret	0
?float2packed11@detail@glm@@YAII@Z ENDP			; glm::detail::float2packed11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z
_TEXT	SEGMENT
ScaleFactor$ = 40
Unpack$ = 84
$T5 = 100
__$ReturnUdt$ = 128
v$ = 136
?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z PROC	; glm::unpackUnorm2x3_1x2, COMDAT

; 774  : 	{

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 775  : 		vec3 const ScaleFactor(1.f / 7.f, 1.f / 7.f, 1.f / 3.f);

	movss	xmm3, DWORD PTR __real@3eaaaaab
	movss	xmm2, DWORD PTR __real@3e124925
	movss	xmm1, DWORD PTR __real@3e124925
	lea	rcx, QWORD PTR ScaleFactor$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 776  : 		detail::u3u3u2 Unpack;
; 777  : 		Unpack.pack = v;

	movzx	eax, BYTE PTR v$[rsp]
	mov	BYTE PTR Unpack$[rsp], al

; 778  : 		return vec3(Unpack.data.x, Unpack.data.y, Unpack.data.z) * ScaleFactor;

	mov	eax, DWORD PTR Unpack$[rsp]
	shr	eax, 6
	and	eax, 3
	mov	ecx, DWORD PTR Unpack$[rsp]
	shr	ecx, 3
	and	ecx, 7
	mov	edx, DWORD PTR Unpack$[rsp]
	and	edx, 7
	mov	r9d, eax
	mov	r8d, ecx
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0III@?$tvec3@M$0A@@glm@@QEAA@III@Z	; glm::tvec3<float,0>::tvec3<float,0><unsigned int,unsigned int,unsigned int>
	lea	r8, QWORD PTR ScaleFactor$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 779  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?unpackUnorm2x3_1x2@glm@@YA?AU?$tvec3@M$0A@@1@E@Z ENDP	; glm::unpackUnorm2x3_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
Unpack$ = 40
Result$ = 84
$T5 = 100
$T6 = 112
$T7 = 124
$T8 = 136
tv69 = 152
v$ = 176
?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z PROC	; glm::packUnorm2x3_1x2, COMDAT

; 764  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 765  : 		u32vec3 const Unpack(round(clamp(v, 0.0f, 1.0f) * vec3(7.f, 7.f, 3.f)));

	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40e00000
	movss	xmm1, DWORD PTR __real@40e00000
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv69[rsp], rax
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv69[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$round@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec3>
	mov	rdx, rax
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??$?0M$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><float,0>

; 766  : 		detail::u3u3u2 Result;
; 767  : 		Result.data.x = Unpack.x;

	mov	eax, DWORD PTR Unpack$[rsp]
	and	eax, 7
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -8					; fffffff8H
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 768  : 		Result.data.y = Unpack.y;

	mov	eax, DWORD PTR Unpack$[rsp+4]
	and	eax, 7
	shl	eax, 3
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -57				; ffffffc7H
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 769  : 		Result.data.z = Unpack.z;

	mov	eax, DWORD PTR Unpack$[rsp+8]
	and	eax, 3
	shl	eax, 6
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -193				; ffffff3fH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 770  : 		return Result.pack;

	movzx	eax, BYTE PTR Result$[rsp]

; 771  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?packUnorm2x3_1x2@glm@@YAEAEBU?$tvec3@M$0A@@1@@Z ENDP	; glm::packUnorm2x3_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z
_TEXT	SEGMENT
ScaleFactor$ = 56
Unpack$ = 100
$T5 = 116
tv82 = 132
__$ReturnUdt$ = 160
v$ = 168
?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z PROC	; glm::unpackUnorm3x5_1x1, COMDAT

; 756  : 	{

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 757  : 		vec4 const ScaleFactor(1.f / 31.f, 1.f / 31.f, 1.f / 31.f, 1.f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3d042108
	movss	xmm2, DWORD PTR __real@3d042108
	movss	xmm1, DWORD PTR __real@3d042108
	lea	rcx, QWORD PTR ScaleFactor$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 758  : 		detail::u5u5u5u1 Unpack;
; 759  : 		Unpack.pack = v;

	movzx	eax, WORD PTR v$[rsp]
	mov	WORD PTR Unpack$[rsp], ax

; 760  : 		return vec4(Unpack.data.x, Unpack.data.y, Unpack.data.z, Unpack.data.w) * ScaleFactor;

	mov	eax, DWORD PTR Unpack$[rsp]
	shr	eax, 15
	and	eax, 1
	mov	ecx, DWORD PTR Unpack$[rsp]
	shr	ecx, 10
	and	ecx, 31
	mov	edx, DWORD PTR Unpack$[rsp]
	shr	edx, 5
	and	edx, 31
	mov	r8d, DWORD PTR Unpack$[rsp]
	and	r8d, 31
	mov	DWORD PTR tv82[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv82[rsp]
	mov	edx, eax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0IIII@?$tvec4@M$0A@@glm@@QEAA@IIII@Z ; glm::tvec4<float,0>::tvec4<float,0><unsigned int,unsigned int,unsigned int,unsigned int>
	lea	r8, QWORD PTR ScaleFactor$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 761  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?unpackUnorm3x5_1x1@glm@@YA?AU?$tvec4@M$0A@@1@G@Z ENDP	; glm::unpackUnorm3x5_1x1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
Unpack$ = 56
Result$ = 100
$T5 = 116
$T6 = 132
$T7 = 148
$T8 = 164
tv69 = 184
v$ = 208
?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z PROC	; glm::packUnorm3x5_1x1, COMDAT

; 745  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+208]

; 746  : 		u32vec4 const Unpack(round(clamp(v, 0.0f, 1.0f) * vec4(31.f, 31.f, 31.f, 1.f)));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@41f80000
	movss	xmm2, DWORD PTR __real@41f80000
	movss	xmm1, DWORD PTR __real@41f80000
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv69[rsp], rax
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv69[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??$?0M$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><float,0>

; 747  : 		detail::u5u5u5u1 Result;
; 748  : 		Result.data.x = Unpack.x;

	mov	eax, DWORD PTR Unpack$[rsp]
	and	eax, 31
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -32				; ffffffe0H
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 749  : 		Result.data.y = Unpack.y;

	mov	eax, DWORD PTR Unpack$[rsp+4]
	and	eax, 31
	shl	eax, 5
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -993				; fffffc1fH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 750  : 		Result.data.z = Unpack.z;

	mov	eax, DWORD PTR Unpack$[rsp+8]
	and	eax, 31
	shl	eax, 10
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -31745				; ffff83ffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 751  : 		Result.data.w = Unpack.w;

	mov	eax, DWORD PTR Unpack$[rsp+12]
	and	eax, 1
	shl	eax, 15
	mov	ecx, DWORD PTR Result$[rsp]
	btr	ecx, 15
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 752  : 		return Result.pack;

	movzx	eax, WORD PTR Result$[rsp]

; 753  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?packUnorm3x5_1x1@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z ENDP	; glm::packUnorm3x5_1x1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z
_TEXT	SEGMENT
ScaleFactor$ = 40
Unpack$ = 84
$T5 = 100
__$ReturnUdt$ = 128
v$ = 136
?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z PROC ; glm::unpackUnorm1x5_1x6_1x5, COMDAT

; 737  : 	{

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 738  : 		vec3 const ScaleFactor(1.f / 31.f, 1.f / 63.f, 1.f / 31.f);

	movss	xmm3, DWORD PTR __real@3d042108
	movss	xmm2, DWORD PTR __real@3c820821
	movss	xmm1, DWORD PTR __real@3d042108
	lea	rcx, QWORD PTR ScaleFactor$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 739  : 		detail::u5u6u5 Unpack;
; 740  : 		Unpack.pack = v;

	movzx	eax, WORD PTR v$[rsp]
	mov	WORD PTR Unpack$[rsp], ax

; 741  : 		return vec3(Unpack.data.x, Unpack.data.y, Unpack.data.z) * ScaleFactor;

	mov	eax, DWORD PTR Unpack$[rsp]
	shr	eax, 11
	and	eax, 31
	mov	ecx, DWORD PTR Unpack$[rsp]
	shr	ecx, 5
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR Unpack$[rsp]
	and	edx, 31
	mov	r9d, eax
	mov	r8d, ecx
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0III@?$tvec3@M$0A@@glm@@QEAA@III@Z	; glm::tvec3<float,0>::tvec3<float,0><unsigned int,unsigned int,unsigned int>
	lea	r8, QWORD PTR ScaleFactor$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 742  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?unpackUnorm1x5_1x6_1x5@glm@@YA?AU?$tvec3@M$0A@@1@G@Z ENDP ; glm::unpackUnorm1x5_1x6_1x5
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
Unpack$ = 40
Result$ = 84
$T5 = 100
$T6 = 112
$T7 = 124
$T8 = 136
tv69 = 152
v$ = 176
?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z PROC ; glm::packUnorm1x5_1x6_1x5, COMDAT

; 727  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 728  : 		u32vec3 const Unpack(round(clamp(v, 0.0f, 1.0f) * vec3(31.f, 63.f, 31.f)));

	movss	xmm3, DWORD PTR __real@41f80000
	movss	xmm2, DWORD PTR __real@427c0000
	movss	xmm1, DWORD PTR __real@41f80000
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv69[rsp], rax
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv69[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$round@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec3>
	mov	rdx, rax
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??$?0M$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><float,0>

; 729  : 		detail::u5u6u5 Result;
; 730  : 		Result.data.x = Unpack.x;

	mov	eax, DWORD PTR Unpack$[rsp]
	and	eax, 31
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -32				; ffffffe0H
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 731  : 		Result.data.y = Unpack.y;

	mov	eax, DWORD PTR Unpack$[rsp+4]
	and	eax, 63					; 0000003fH
	shl	eax, 5
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -2017				; fffff81fH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 732  : 		Result.data.z = Unpack.z;

	mov	eax, DWORD PTR Unpack$[rsp+8]
	and	eax, 31
	shl	eax, 11
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -63489				; ffff07ffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 733  : 		return Result.pack;

	movzx	eax, WORD PTR Result$[rsp]

; 734  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?packUnorm1x5_1x6_1x5@glm@@YAGAEBU?$tvec3@M$0A@@1@@Z ENDP ; glm::packUnorm1x5_1x6_1x5
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z
_TEXT	SEGMENT
ScaleFactor$ = 48
Unpack$ = 68
$T4 = 84
tv77 = 100
__$ReturnUdt$ = 128
v$ = 136
?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z PROC	; glm::unpackUnorm4x4, COMDAT

; 719  : 	{

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 720  : 		float const ScaleFactor(1.f / 15.f);

	movss	xmm0, DWORD PTR __real@3d888889
	movss	DWORD PTR ScaleFactor$[rsp], xmm0

; 721  : 		detail::u4u4u4u4 Unpack;
; 722  : 		Unpack.pack = v;

	movzx	eax, WORD PTR v$[rsp]
	mov	WORD PTR Unpack$[rsp], ax

; 723  : 		return vec4(Unpack.data.x, Unpack.data.y, Unpack.data.z, Unpack.data.w) * ScaleFactor;

	mov	eax, DWORD PTR Unpack$[rsp]
	shr	eax, 12
	and	eax, 15
	mov	ecx, DWORD PTR Unpack$[rsp]
	shr	ecx, 8
	and	ecx, 15
	mov	edx, DWORD PTR Unpack$[rsp]
	shr	edx, 4
	and	edx, 15
	mov	r8d, DWORD PTR Unpack$[rsp]
	and	r8d, 15
	mov	DWORD PTR tv77[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv77[rsp]
	mov	edx, eax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0IIII@?$tvec4@M$0A@@glm@@QEAA@IIII@Z ; glm::tvec4<float,0>::tvec4<float,0><unsigned int,unsigned int,unsigned int,unsigned int>
	movss	xmm2, DWORD PTR __real@3d888889
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 724  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?unpackUnorm4x4@glm@@YA?AU?$tvec4@M$0A@@1@G@Z ENDP	; glm::unpackUnorm4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
Unpack$ = 40
Result$ = 84
$T5 = 100
$T6 = 116
$T7 = 132
v$ = 176
?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z PROC	; glm::packUnorm4x4, COMDAT

; 708  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 709  : 		u32vec4 const Unpack(round(clamp(v, 0.0f, 1.0f) * 15.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@41700000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??$?0M$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><float,0>

; 710  : 		detail::u4u4u4u4 Result;
; 711  : 		Result.data.x = Unpack.x;

	mov	eax, DWORD PTR Unpack$[rsp]
	and	eax, 15
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -16				; fffffff0H
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 712  : 		Result.data.y = Unpack.y;

	mov	eax, DWORD PTR Unpack$[rsp+4]
	and	eax, 15
	shl	eax, 4
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -241				; ffffff0fH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 713  : 		Result.data.z = Unpack.z;

	mov	eax, DWORD PTR Unpack$[rsp+8]
	and	eax, 15
	shl	eax, 8
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -3841				; fffff0ffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 714  : 		Result.data.w = Unpack.w;

	mov	eax, DWORD PTR Unpack$[rsp+12]
	and	eax, 15
	shl	eax, 12
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -61441				; ffff0fffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 715  : 		return Result.pack;

	movzx	eax, WORD PTR Result$[rsp]

; 716  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?packUnorm4x4@glm@@YAGAEBU?$tvec4@M$0A@@1@@Z ENDP	; glm::packUnorm4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z
_TEXT	SEGMENT
ScaleFactor$ = 32
Unpack$ = 52
$T4 = 68
__$ReturnUdt$ = 96
v$ = 104
?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z PROC	; glm::unpackUnorm2x4, COMDAT

; 700  : 	{

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 701  : 		float const ScaleFactor(1.f / 15.f);

	movss	xmm0, DWORD PTR __real@3d888889
	movss	DWORD PTR ScaleFactor$[rsp], xmm0

; 702  : 		detail::u4u4 Unpack;
; 703  : 		Unpack.pack = v;

	movzx	eax, BYTE PTR v$[rsp]
	mov	BYTE PTR Unpack$[rsp], al

; 704  : 		return vec2(Unpack.data.x, Unpack.data.y) * ScaleFactor;

	mov	eax, DWORD PTR Unpack$[rsp]
	shr	eax, 4
	and	eax, 15
	mov	ecx, DWORD PTR Unpack$[rsp]
	and	ecx, 15
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0II@?$tvec2@M$0A@@glm@@QEAA@II@Z	; glm::tvec2<float,0>::tvec2<float,0><unsigned int,unsigned int>
	movss	xmm2, DWORD PTR __real@3d888889
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 705  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackUnorm2x4@glm@@YA?AU?$tvec2@M$0A@@1@E@Z ENDP	; glm::unpackUnorm2x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
Unpack$ = 40
Result$ = 68
$T5 = 84
$T6 = 92
$T7 = 100
v$ = 128
?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z PROC	; glm::packUnorm2x4, COMDAT

; 691  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 692  : 		u32vec2 const Unpack(round(clamp(v, 0.0f, 1.0f) * 15.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	movss	xmm2, DWORD PTR __real@41700000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec2>
	mov	rdx, rax
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??$?0M$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><float,0>

; 693  : 		detail::u4u4 Result;
; 694  : 		Result.data.x = Unpack.x;

	mov	eax, DWORD PTR Unpack$[rsp]
	and	eax, 15
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -16				; fffffff0H
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 695  : 		Result.data.y = Unpack.y;

	mov	eax, DWORD PTR Unpack$[rsp+4]
	and	eax, 15
	shl	eax, 4
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -241				; ffffff0fH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 696  : 		return Result.pack;

	movzx	eax, BYTE PTR Result$[rsp]

; 697  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?packUnorm2x4@glm@@YAEAEBU?$tvec2@M$0A@@1@@Z ENDP	; glm::packUnorm2x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z
_TEXT	SEGMENT
Unpack$ = 36
$T4 = 52
tv65 = 64
__$ReturnUdt$ = 96
v$ = 104
?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z PROC	; glm::unpackF3x9_E1x5, COMDAT

; 635  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 636  : 		detail::u9u9u9e5 Unpack;
; 637  : 		Unpack.pack = v;

	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR Unpack$[rsp], eax

; 638  : 
; 639  : 		return vec3(Unpack.data.x, Unpack.data.y, Unpack.data.z) * pow(2.0f, Unpack.data.w - 15.f - 9.f);

	mov	eax, DWORD PTR Unpack$[rsp]
	shr	eax, 27
	and	eax, 31
	mov	eax, eax
	cvtsi2ss xmm0, rax
	subss	xmm0, DWORD PTR __real@41700000
	subss	xmm0, DWORD PTR __real@41100000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@40000000
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR tv65[rsp], xmm0
	mov	eax, DWORD PTR Unpack$[rsp]
	shr	eax, 18
	and	eax, 511				; 000001ffH
	mov	ecx, DWORD PTR Unpack$[rsp]
	shr	ecx, 9
	and	ecx, 511				; 000001ffH
	mov	edx, DWORD PTR Unpack$[rsp]
	and	edx, 511				; 000001ffH
	mov	r9d, eax
	mov	r8d, ecx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0III@?$tvec3@M$0A@@glm@@QEAA@III@Z	; glm::tvec3<float,0>::tvec3<float,0><unsigned int,unsigned int,unsigned int>
	movss	xmm0, DWORD PTR tv65[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 640  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackF3x9_E1x5@glm@@YA?AU?$tvec3@M$0A@@1@I@Z ENDP	; glm::unpackF3x9_E1x5
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
SharedExpMax$ = 32
Color$ = 56
MaxColor$ = 84
ExpSharedP$ = 88
MaxShared$ = 92
ExpShared$ = 96
ColorComp$ = 120
Unpack$ = 164
$T6 = 180
$T7 = 192
$T8 = 204
tv64 = 216
tv70 = 220
tv141 = 224
v$ = 256
?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z PROC	; glm::packF3x9_E1x5, COMDAT

; 615  : 	{

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 240				; 000000f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+256]

; 616  : 		float const SharedExpMax = (pow(2.0f, 9.0f - 1.0f) / pow(2.0f, 9.0f)) * pow(2.0f, 31.f - 15.f);

	movss	xmm1, DWORD PTR __real@41000000
	movss	xmm0, DWORD PTR __real@40000000
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR tv64[rsp], xmm0
	movss	xmm1, DWORD PTR __real@41100000
	movss	xmm0, DWORD PTR __real@40000000
	call	?pow@@YAMMM@Z				; pow
	movss	xmm1, DWORD PTR tv64[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv70[rsp], xmm0
	movss	xmm1, DWORD PTR __real@41800000
	movss	xmm0, DWORD PTR __real@40000000
	call	?pow@@YAMMM@Z				; pow
	movss	xmm1, DWORD PTR tv70[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR SharedExpMax$[rsp], xmm0

; 617  : 		vec3 const Color = clamp(v, 0.0f, SharedExpMax);

	movss	xmm3, DWORD PTR SharedExpMax$[rsp]
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR Color$[rsp]
	call	??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec3>

; 618  : 		float const MaxColor = max(Color.x, max(Color.y, Color.z));

	movss	xmm1, DWORD PTR Color$[rsp+8]
	movss	xmm0, DWORD PTR Color$[rsp+4]
	call	??$max@M@glm@@YAMMM@Z			; glm::max<float>
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR Color$[rsp]
	call	??$max@M@glm@@YAMMM@Z			; glm::max<float>
	movss	DWORD PTR MaxColor$[rsp], xmm0

; 619  : 
; 620  : 		float const ExpSharedP = max(-15.f - 1.f, floor(log2(MaxColor))) + 1.0f + 15.f;

	movss	xmm0, DWORD PTR MaxColor$[rsp]
	call	??$log2@M@glm@@YAMM@Z			; glm::log2<float>
	call	?floor@@YAMM@Z				; floor
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@c1800000
	call	??$max@M@glm@@YAMMM@Z			; glm::max<float>
	addss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR ExpSharedP$[rsp], xmm0

; 621  : 		float const MaxShared = floor(MaxColor / pow(2.0f, (ExpSharedP - 15.f - 9.f)) + 0.5f);

	movss	xmm0, DWORD PTR ExpSharedP$[rsp]
	subss	xmm0, DWORD PTR __real@41700000
	subss	xmm0, DWORD PTR __real@41100000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@40000000
	call	?pow@@YAMMM@Z				; pow
	movss	xmm1, DWORD PTR MaxColor$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f000000
	call	?floor@@YAMM@Z				; floor
	movss	DWORD PTR MaxShared$[rsp], xmm0

; 622  : 		float const ExpShared = MaxShared == pow(2.0f, 9.0f) ? ExpSharedP + 1.0f : ExpSharedP;

	movss	xmm1, DWORD PTR __real@41100000
	movss	xmm0, DWORD PTR __real@40000000
	call	?pow@@YAMMM@Z				; pow
	movss	xmm1, DWORD PTR MaxShared$[rsp]
	ucomiss	xmm1, xmm0
	jp	SHORT $LN3@packF3x9_E
	jne	SHORT $LN3@packF3x9_E
	movss	xmm0, DWORD PTR ExpSharedP$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv141[rsp], xmm0
	jmp	SHORT $LN4@packF3x9_E
$LN3@packF3x9_E:
	movss	xmm0, DWORD PTR ExpSharedP$[rsp]
	movss	DWORD PTR tv141[rsp], xmm0
$LN4@packF3x9_E:
	movss	xmm0, DWORD PTR tv141[rsp]
	movss	DWORD PTR ExpShared$[rsp], xmm0

; 623  : 
; 624  : 		uvec3 const ColorComp(floor(Color / pow(2.f, (ExpShared - 15.f - 9.f)) + 0.5f));

	movss	xmm0, DWORD PTR ExpShared$[rsp]
	subss	xmm0, DWORD PTR __real@41700000
	subss	xmm0, DWORD PTR __real@41100000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@40000000
	call	?pow@@YAMMM@Z				; pow
	movaps	xmm2, xmm0
	lea	rdx, QWORD PTR Color$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
	mov	rdx, rax
	lea	rcx, QWORD PTR ColorComp$[rsp]
	call	??$?0M$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><float,0>

; 625  : 
; 626  : 		detail::u9u9u9e5 Unpack;
; 627  : 		Unpack.data.x = ColorComp.x;

	mov	eax, DWORD PTR ColorComp$[rsp]
	and	eax, 511				; 000001ffH
	mov	ecx, DWORD PTR Unpack$[rsp]
	and	ecx, -512				; fffffe00H
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Unpack$[rsp], eax

; 628  : 		Unpack.data.y = ColorComp.y;

	mov	eax, DWORD PTR ColorComp$[rsp+4]
	and	eax, 511				; 000001ffH
	shl	eax, 9
	mov	ecx, DWORD PTR Unpack$[rsp]
	and	ecx, -261633				; fffc01ffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Unpack$[rsp], eax

; 629  : 		Unpack.data.z = ColorComp.z;

	mov	eax, DWORD PTR ColorComp$[rsp+8]
	and	eax, 511				; 000001ffH
	shl	eax, 18
	mov	ecx, DWORD PTR Unpack$[rsp]
	and	ecx, -133955585				; f803ffffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Unpack$[rsp], eax

; 630  : 		Unpack.data.w = uint(ExpShared);

	cvttss2si rax, DWORD PTR ExpShared$[rsp]
	and	eax, 31
	shl	eax, 27
	mov	ecx, DWORD PTR Unpack$[rsp]
	and	ecx, 134217727				; 07ffffffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Unpack$[rsp], eax

; 631  : 		return Unpack.pack;

	mov	eax, DWORD PTR Unpack$[rsp]

; 632  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
?packF3x9_E1x5@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z ENDP	; glm::packF3x9_E1x5
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackF2x11_1x10@glm@@YA?AU?$tvec3@M$0A@@1@I@Z
_TEXT	SEGMENT
tv66 = 32
tv70 = 36
__$ReturnUdt$ = 64
v$ = 72
?unpackF2x11_1x10@glm@@YA?AU?$tvec3@M$0A@@1@I@Z PROC	; glm::unpackF2x11_1x10, COMDAT

; 607  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 608  : 		return vec3(

	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 22
	mov	ecx, eax
	call	?packed10bitToFloat@detail@glm@@YAMI@Z	; glm::detail::packed10bitToFloat
	movss	DWORD PTR tv66[rsp], xmm0
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 11
	mov	ecx, eax
	call	?packed11bitToFloat@detail@glm@@YAMI@Z	; glm::detail::packed11bitToFloat
	movss	DWORD PTR tv70[rsp], xmm0
	mov	ecx, DWORD PTR v$[rsp]
	call	?packed11bitToFloat@detail@glm@@YAMI@Z	; glm::detail::packed11bitToFloat
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 609  : 			detail::packed11bitToFloat(v >> 0),
; 610  : 			detail::packed11bitToFloat(v >> 11),
; 611  : 			detail::packed10bitToFloat(v >> 22));
; 612  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?unpackF2x11_1x10@glm@@YA?AU?$tvec3@M$0A@@1@I@Z ENDP	; glm::unpackF2x11_1x10
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packF2x11_1x10@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
tv67 = 32
tv73 = 36
v$ = 64
?packF2x11_1x10@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z PROC	; glm::packF2x11_1x10, COMDAT

; 599  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 600  : 		return

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?floatTo11bit@detail@glm@@YAIM@Z	; glm::detail::floatTo11bit
	and	eax, 2047				; 000007ffH
	mov	DWORD PTR tv67[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	call	?floatTo11bit@detail@glm@@YAIM@Z	; glm::detail::floatTo11bit
	and	eax, 2047				; 000007ffH
	shl	eax, 11
	mov	ecx, DWORD PTR tv67[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv73[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	call	?floatTo10bit@detail@glm@@YAIM@Z	; glm::detail::floatTo10bit
	and	eax, 1023				; 000003ffH
	shl	eax, 22
	mov	ecx, DWORD PTR tv73[rsp]
	or	ecx, eax
	mov	eax, ecx

; 601  : 			((detail::floatTo11bit(v.x) & ((1 << 11) - 1)) <<  0) |
; 602  : 			((detail::floatTo11bit(v.y) & ((1 << 11) - 1)) << 11) |
; 603  : 			((detail::floatTo10bit(v.z) & ((1 << 10) - 1)) << 22);
; 604  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?packF2x11_1x10@glm@@YAIAEBU?$tvec3@M$0A@@1@@Z ENDP	; glm::packF2x11_1x10
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
_TEXT	SEGMENT
ScaleFactors$ = 56
Unpack$ = 100
$T5 = 116
tv82 = 132
__$ReturnUdt$ = 160
v$ = 168
?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z PROC	; glm::unpackUnorm3x10_1x2, COMDAT

; 590  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 591  : 		vec4 const ScaleFactors(1.0f / 1023.f, 1.0f / 1023.f, 1.0f / 1023.f, 1.0f / 3.f);

	movss	xmm0, DWORD PTR __real@3eaaaaab
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3a802008
	movss	xmm2, DWORD PTR __real@3a802008
	movss	xmm1, DWORD PTR __real@3a802008
	lea	rcx, QWORD PTR ScaleFactors$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 592  : 
; 593  : 		detail::u10u10u10u2 Unpack;
; 594  : 		Unpack.pack = v;

	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR Unpack$[rsp], eax

; 595  : 		return vec4(Unpack.data.x, Unpack.data.y, Unpack.data.z, Unpack.data.w) * ScaleFactors;

	mov	eax, DWORD PTR Unpack$[rsp]
	shr	eax, 30
	and	eax, 3
	mov	ecx, DWORD PTR Unpack$[rsp]
	shr	ecx, 20
	and	ecx, 1023				; 000003ffH
	mov	edx, DWORD PTR Unpack$[rsp]
	shr	edx, 10
	and	edx, 1023				; 000003ffH
	mov	r8d, DWORD PTR Unpack$[rsp]
	and	r8d, 1023				; 000003ffH
	mov	DWORD PTR tv82[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv82[rsp]
	mov	edx, eax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0IIII@?$tvec4@M$0A@@glm@@QEAA@IIII@Z ; glm::tvec4<float,0>::tvec4<float,0><unsigned int,unsigned int,unsigned int,unsigned int>
	lea	r8, QWORD PTR ScaleFactors$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 596  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?unpackUnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ENDP	; glm::unpackUnorm3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
Unpack$ = 56
Result$ = 100
$T5 = 116
$T6 = 132
$T7 = 148
$T8 = 164
tv69 = 184
v$ = 208
?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z PROC	; glm::packUnorm3x10_1x2, COMDAT

; 578  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+208]

; 579  : 		uvec4 const Unpack(round(clamp(v, 0.0f, 1.0f) * vec4(1023.f, 1023.f, 1023.f, 3.f)));

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@447fc000
	movss	xmm2, DWORD PTR __real@447fc000
	movss	xmm1, DWORD PTR __real@447fc000
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv69[rsp], rax
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv69[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??$?0M$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><float,0>

; 580  : 
; 581  : 		detail::u10u10u10u2 Result;
; 582  : 		Result.data.x = Unpack.x;

	mov	eax, DWORD PTR Unpack$[rsp]
	and	eax, 1023				; 000003ffH
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1024				; fffffc00H
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 583  : 		Result.data.y = Unpack.y;

	mov	eax, DWORD PTR Unpack$[rsp+4]
	and	eax, 1023				; 000003ffH
	shl	eax, 10
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1047553				; fff003ffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 584  : 		Result.data.z = Unpack.z;

	mov	eax, DWORD PTR Unpack$[rsp+8]
	and	eax, 1023				; 000003ffH
	shl	eax, 20
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1072693249			; c00fffffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 585  : 		Result.data.w = Unpack.w;

	mov	eax, DWORD PTR Unpack$[rsp+12]
	and	eax, 3
	shl	eax, 30
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, 1073741823				; 3fffffffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 586  : 		return Result.pack;

	mov	eax, DWORD PTR Result$[rsp]

; 587  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?packUnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ENDP	; glm::packUnorm3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
_TEXT	SEGMENT
Unpack$ = 36
Result$ = 72
__$ReturnUdt$ = 144
v$ = 152
?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z PROC	; glm::unpackSnorm3x10_1x2, COMDAT

; 566  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 567  : 		detail::i10i10i10i2 Unpack;
; 568  : 		Unpack.pack = v;

	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR Unpack$[rsp], eax

; 569  : 		vec4 Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@XZ		; glm::tvec4<float,0>::tvec4<float,0>

; 570  : 		Result.x = clamp(float(Unpack.data.x) / 511.f, -1.0f, 1.0f);

	mov	eax, DWORD PTR Unpack$[rsp]
	shl	eax, 22
	sar	eax, 22
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@43ff8000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	movss	DWORD PTR Result$[rsp], xmm0

; 571  : 		Result.y = clamp(float(Unpack.data.y) / 511.f, -1.0f, 1.0f);

	mov	eax, DWORD PTR Unpack$[rsp]
	shl	eax, 12
	sar	eax, 22
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@43ff8000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	movss	DWORD PTR Result$[rsp+4], xmm0

; 572  : 		Result.z = clamp(float(Unpack.data.z) / 511.f, -1.0f, 1.0f);

	mov	eax, DWORD PTR Unpack$[rsp]
	shl	eax, 2
	sar	eax, 22
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@43ff8000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	movss	DWORD PTR Result$[rsp+8], xmm0

; 573  : 		Result.w = clamp(float(Unpack.data.w) /   1.f, -1.0f, 1.0f);

	mov	eax, DWORD PTR Unpack$[rsp]
	shl	eax, 0
	sar	eax, 30
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	movss	DWORD PTR Result$[rsp+12], xmm0

; 574  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?unpackSnorm3x10_1x2@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ENDP	; glm::unpackSnorm3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
Result$ = 36
tv73 = 52
tv86 = 56
tv132 = 60
tv146 = 64
v$ = 96
?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z PROC	; glm::packSnorm3x10_1x2, COMDAT

; 556  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 557  : 		detail::i10i10i10i2 Result;
; 558  : 		Result.data.x = int(round(clamp(v.x,-1.0f, 1.0f) * 511.f));

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	mulss	xmm0, DWORD PTR __real@43ff8000
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR tv73[rsp], xmm0
	cvttss2si eax, DWORD PTR tv73[rsp]
	and	eax, 1023				; 000003ffH
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1024				; fffffffffffffc00H
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 559  : 		Result.data.y = int(round(clamp(v.y,-1.0f, 1.0f) * 511.f));

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	mulss	xmm0, DWORD PTR __real@43ff8000
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR tv86[rsp], xmm0
	cvttss2si eax, DWORD PTR tv86[rsp]
	and	eax, 1023				; 000003ffH
	shl	eax, 10
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1047553				; fffffffffff003ffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 560  : 		Result.data.z = int(round(clamp(v.z,-1.0f, 1.0f) * 511.f));

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	mulss	xmm0, DWORD PTR __real@43ff8000
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR tv132[rsp], xmm0
	cvttss2si eax, DWORD PTR tv132[rsp]
	and	eax, 1023				; 000003ffH
	shl	eax, 20
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1072693249			; ffffffffc00fffffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 561  : 		Result.data.w = int(round(clamp(v.w,-1.0f, 1.0f) *   1.f));

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	mulss	xmm0, DWORD PTR __real@3f800000
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR tv146[rsp], xmm0
	cvttss2si eax, DWORD PTR tv146[rsp]
	and	eax, 3
	shl	eax, 30
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, 1073741823				; 3fffffffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 562  : 		return Result.pack;

	mov	eax, DWORD PTR Result$[rsp]

; 563  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?packSnorm3x10_1x2@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ENDP	; glm::packSnorm3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z
_TEXT	SEGMENT
Unpack$ = 52
tv75 = 68
__$ReturnUdt$ = 96
v$ = 104
?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z PROC	; glm::unpackU3x10_1x2, COMDAT

; 545  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 546  : 		detail::u10u10u10u2 Unpack;
; 547  : 		Unpack.pack = v;

	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR Unpack$[rsp], eax

; 548  : 		return uvec4(

	mov	eax, DWORD PTR Unpack$[rsp]
	shr	eax, 30
	and	eax, 3
	mov	ecx, DWORD PTR Unpack$[rsp]
	shr	ecx, 20
	and	ecx, 1023				; 000003ffH
	mov	edx, DWORD PTR Unpack$[rsp]
	shr	edx, 10
	and	edx, 1023				; 000003ffH
	mov	r8d, DWORD PTR Unpack$[rsp]
	and	r8d, 1023				; 000003ffH
	mov	DWORD PTR tv75[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv75[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z	; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 549  : 			Unpack.data.x,
; 550  : 			Unpack.data.y,
; 551  : 			Unpack.data.z,
; 552  : 			Unpack.data.w);
; 553  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackU3x10_1x2@glm@@YA?AU?$tvec4@I$0A@@1@I@Z ENDP	; glm::unpackU3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z
_TEXT	SEGMENT
Result$ = 36
v$ = 80
?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z PROC	; glm::packU3x10_1x2, COMDAT

; 535  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 536  : 		detail::u10u10u10u2 Result;
; 537  : 		Result.data.x = v.x;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1023				; 000003ffH
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1024				; fffffc00H
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 538  : 		Result.data.y = v.y;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1023				; 000003ffH
	shl	eax, 10
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1047553				; fff003ffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 539  : 		Result.data.z = v.z;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 1023				; 000003ffH
	shl	eax, 20
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1072693249			; c00fffffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 540  : 		Result.data.w = v.w;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 3
	shl	eax, 30
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, 1073741823				; 3fffffffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 541  : 		return Result.pack; 

	mov	eax, DWORD PTR Result$[rsp]

; 542  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?packU3x10_1x2@glm@@YAIAEBU?$tvec4@I$0A@@1@@Z ENDP	; glm::packU3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z
_TEXT	SEGMENT
Unpack$ = 52
tv76 = 68
__$ReturnUdt$ = 96
v$ = 104
?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z PROC	; glm::unpackI3x10_1x2, COMDAT

; 524  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 525  : 		detail::i10i10i10i2 Unpack;
; 526  : 		Unpack.pack = v;

	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR Unpack$[rsp], eax

; 527  : 		return ivec4(

	mov	eax, DWORD PTR Unpack$[rsp]
	shl	eax, 0
	sar	eax, 30
	mov	ecx, DWORD PTR Unpack$[rsp]
	shl	ecx, 2
	sar	ecx, 22
	mov	edx, DWORD PTR Unpack$[rsp]
	shl	edx, 12
	sar	edx, 22
	mov	r8d, DWORD PTR Unpack$[rsp]
	shl	r8d, 22
	sar	r8d, 22
	mov	DWORD PTR tv76[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv76[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 528  : 			Unpack.data.x,
; 529  : 			Unpack.data.y,
; 530  : 			Unpack.data.z,
; 531  : 			Unpack.data.w);
; 532  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackI3x10_1x2@glm@@YA?AU?$tvec4@H$0A@@1@I@Z ENDP	; glm::unpackI3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z
_TEXT	SEGMENT
Result$ = 36
v$ = 80
?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z PROC	; glm::packI3x10_1x2, COMDAT

; 514  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 515  : 		detail::i10i10i10i2 Result;
; 516  : 		Result.data.x = v.x;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1023				; 000003ffH
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1024				; fffffffffffffc00H
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 517  : 		Result.data.y = v.y;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1023				; 000003ffH
	shl	eax, 10
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1047553				; fffffffffff003ffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 518  : 		Result.data.z = v.z;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 1023				; 000003ffH
	shl	eax, 20
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, -1072693249			; ffffffffc00fffffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 519  : 		Result.data.w = v.w;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 3
	shl	eax, 30
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, 1073741823				; 3fffffffH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax

; 520  : 		return Result.pack; 

	mov	eax, DWORD PTR Result$[rsp]

; 521  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?packI3x10_1x2@glm@@YAIAEBU?$tvec4@H$0A@@1@@Z ENDP	; glm::packI3x10_1x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z
_TEXT	SEGMENT
Unpack$ = 56
tv71 = 68
tv74 = 72
tv77 = 76
__$ReturnUdt$ = 96
v$ = 104
?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z PROC	; glm::unpackHalf4x16, COMDAT

; 503  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 504  : 		i16vec4 Unpack(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<short,0>::tvec4<short,0>

; 505  : 		memcpy(&Unpack, &v, sizeof(Unpack));

	mov	r8d, 8
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	memcpy

; 506  : 		return vec4(

	movzx	ecx, WORD PTR Unpack$[rsp+6]
	call	?toFloat32@detail@glm@@YAMF@Z		; glm::detail::toFloat32
	movss	DWORD PTR tv71[rsp], xmm0
	movzx	ecx, WORD PTR Unpack$[rsp+4]
	call	?toFloat32@detail@glm@@YAMF@Z		; glm::detail::toFloat32
	movss	DWORD PTR tv74[rsp], xmm0
	movzx	ecx, WORD PTR Unpack$[rsp+2]
	call	?toFloat32@detail@glm@@YAMF@Z		; glm::detail::toFloat32
	movss	DWORD PTR tv77[rsp], xmm0
	movzx	ecx, WORD PTR Unpack$[rsp]
	call	?toFloat32@detail@glm@@YAMF@Z		; glm::detail::toFloat32
	movss	xmm1, DWORD PTR tv71[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv77[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 507  : 			detail::toFloat32(Unpack.x),
; 508  : 			detail::toFloat32(Unpack.y),
; 509  : 			detail::toFloat32(Unpack.z),
; 510  : 			detail::toFloat32(Unpack.w));
; 511  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackHalf4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z ENDP	; glm::unpackHalf4x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
Unpack$ = 56
Packed$ = 88
tv69 = 100
tv95 = 102
tv129 = 104
v$ = 128
?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z PROC	; glm::packHalf4x16, COMDAT

; 491  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 492  : 		i16vec4 const Unpack(

	mov	rax, QWORD PTR v$[rsp]
	add	rax, 12
	mov	rcx, rax
	call	?toFloat16@detail@glm@@YAFAEBM@Z	; glm::detail::toFloat16
	mov	WORD PTR tv69[rsp], ax
	mov	rcx, QWORD PTR v$[rsp]
	add	rcx, 8
	call	?toFloat16@detail@glm@@YAFAEBM@Z	; glm::detail::toFloat16
	mov	WORD PTR tv95[rsp], ax
	mov	rcx, QWORD PTR v$[rsp]
	add	rcx, 4
	call	?toFloat16@detail@glm@@YAFAEBM@Z	; glm::detail::toFloat16
	mov	WORD PTR tv129[rsp], ax
	mov	rcx, QWORD PTR v$[rsp]
	call	?toFloat16@detail@glm@@YAFAEBM@Z	; glm::detail::toFloat16
	movzx	ecx, WORD PTR tv69[rsp]
	mov	WORD PTR [rsp+32], cx
	movzx	ecx, WORD PTR tv95[rsp]
	movzx	r9d, cx
	movzx	ecx, WORD PTR tv129[rsp]
	movzx	r8d, cx
	movzx	edx, ax
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z	; glm::tvec4<short,0>::tvec4<short,0>

; 493  : 			detail::toFloat16(v.x),
; 494  : 			detail::toFloat16(v.y),
; 495  : 			detail::toFloat16(v.z),
; 496  : 			detail::toFloat16(v.w));
; 497  : 		uint64 Packed = 0;

	mov	QWORD PTR Packed$[rsp], 0

; 498  : 		memcpy(&Packed, &Unpack, sizeof(Packed));

	mov	r8d, 8
	lea	rdx, QWORD PTR Unpack$[rsp]
	lea	rcx, QWORD PTR Packed$[rsp]
	call	memcpy

; 499  : 		return Packed;

	mov	rax, QWORD PTR Packed$[rsp]

; 500  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?packHalf4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z ENDP	; glm::packHalf4x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackHalf1x16@glm@@YAMG@Z
_TEXT	SEGMENT
Unpack$ = 52
v$ = 96
?unpackHalf1x16@glm@@YAMG@Z PROC			; glm::unpackHalf1x16, COMDAT

; 484  : 	{

$LN3:
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+96]

; 485  : 		int16 Unpack = 0;

	xor	eax, eax
	mov	WORD PTR Unpack$[rsp], ax

; 486  : 		memcpy(&Unpack, &v, sizeof(Unpack));

	mov	r8d, 2
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	memcpy

; 487  : 		return detail::toFloat32(Unpack);

	movzx	ecx, WORD PTR Unpack$[rsp]
	call	?toFloat32@detail@glm@@YAMF@Z		; glm::detail::toFloat32

; 488  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackHalf1x16@glm@@YAMG@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackHalf1x16@glm@@YAMG@Z ENDP			; glm::unpackHalf1x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packHalf1x16@glm@@YAGM@Z
_TEXT	SEGMENT
Topack$ = 36
Packed$ = 68
v$ = 112
?packHalf1x16@glm@@YAGM@Z PROC				; glm::packHalf1x16, COMDAT

; 476  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 477  : 		int16 const Topack(detail::toFloat16(v));

	lea	rcx, QWORD PTR v$[rsp]
	call	?toFloat16@detail@glm@@YAFAEBM@Z	; glm::detail::toFloat16
	mov	WORD PTR Topack$[rsp], ax

; 478  : 		uint16 Packed = 0;

	xor	eax, eax
	mov	WORD PTR Packed$[rsp], ax

; 479  : 		memcpy(&Packed, &Topack, sizeof(Packed));

	mov	r8d, 2
	lea	rdx, QWORD PTR Topack$[rsp]
	lea	rcx, QWORD PTR Packed$[rsp]
	call	memcpy

; 480  : 		return Packed;

	movzx	eax, WORD PTR Packed$[rsp]

; 481  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packHalf1x16@glm@@YAGM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?packHalf1x16@glm@@YAGM@Z ENDP				; glm::packHalf1x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z
_TEXT	SEGMENT
Unpack$ = 40
$T4 = 52
$T5 = 68
__$ReturnUdt$ = 112
p$ = 120
?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z PROC	; glm::unpackSnorm4x16, COMDAT

; 467  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 468  : 		i16vec4 Unpack(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??0?$tvec4@F$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<short,0>::tvec4<short,0>

; 469  : 		memcpy(&Unpack, &p, sizeof(Unpack));

	mov	r8d, 8
	lea	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	memcpy

; 470  : 		return clamp(

	lea	rdx, QWORD PTR Unpack$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><short,0>
	movss	xmm2, DWORD PTR __real@38000100
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 471  : 			vec4(Unpack) * 3.0518509475997192297128208258309e-5f, //1.0f / 32767.0f,
; 472  : 			-1.0f, 1.0f);
; 473  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?unpackSnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z ENDP	; glm::unpackSnorm4x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
Topack$ = 40
Packed$ = 72
$T5 = 84
$T6 = 100
$T7 = 116
v$ = 160
?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z PROC	; glm::packSnorm4x16, COMDAT

; 459  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 460  : 		i16vec4 const Topack(round(clamp(v ,-1.0f, 1.0f) * 32767.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@46fffe00
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR Topack$[rsp]
	call	??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<short,0>::tvec4<short,0><float,0>

; 461  : 		uint64 Packed = 0;

	mov	QWORD PTR Packed$[rsp], 0

; 462  : 		memcpy(&Packed, &Topack, sizeof(Packed));

	mov	r8d, 8
	lea	rdx, QWORD PTR Topack$[rsp]
	lea	rcx, QWORD PTR Packed$[rsp]
	call	memcpy

; 463  : 		return Packed;

	mov	rax, QWORD PTR Packed$[rsp]

; 464  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?packSnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z ENDP	; glm::packSnorm4x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackSnorm1x16@glm@@YAMG@Z
_TEXT	SEGMENT
Unpack$ = 52
p$ = 96
?unpackSnorm1x16@glm@@YAMG@Z PROC			; glm::unpackSnorm1x16, COMDAT

; 450  : 	{

$LN3:
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+96]

; 451  : 		int16 Unpack = 0;

	xor	eax, eax
	mov	WORD PTR Unpack$[rsp], ax

; 452  : 		memcpy(&Unpack, &p, sizeof(Unpack));

	mov	r8d, 2
	lea	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	memcpy

; 453  : 		return clamp(

	movsx	eax, WORD PTR Unpack$[rsp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@38000100
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>

; 454  : 			static_cast<float>(Unpack) * 3.0518509475997192297128208258309e-5f, //1.0f / 32767.0f, 
; 455  : 			-1.0f, 1.0f);
; 456  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackSnorm1x16@glm@@YAMG@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackSnorm1x16@glm@@YAMG@Z ENDP			; glm::unpackSnorm1x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packSnorm1x16@glm@@YAGM@Z
_TEXT	SEGMENT
Topack$ = 36
Packed$ = 68
v$ = 112
?packSnorm1x16@glm@@YAGM@Z PROC				; glm::packSnorm1x16, COMDAT

; 442  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 443  : 		int16 const Topack = static_cast<int16>(round(clamp(v ,-1.0f, 1.0f) * 32767.0f));

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	movss	xmm0, DWORD PTR v$[rsp]
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	mulss	xmm0, DWORD PTR __real@46fffe00
	call	?round@@YAMM@Z				; round
	cvttss2si eax, xmm0
	mov	WORD PTR Topack$[rsp], ax

; 444  : 		uint16 Packed = 0;

	xor	eax, eax
	mov	WORD PTR Packed$[rsp], ax

; 445  : 		memcpy(&Packed, &Topack, sizeof(Packed));

	mov	r8d, 2
	lea	rdx, QWORD PTR Topack$[rsp]
	lea	rcx, QWORD PTR Packed$[rsp]
	call	memcpy

; 446  : 		return Packed;

	movzx	eax, WORD PTR Packed$[rsp]

; 447  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packSnorm1x16@glm@@YAGM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?packSnorm1x16@glm@@YAGM@Z ENDP				; glm::packSnorm1x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z
_TEXT	SEGMENT
Unpack$ = 40
$T4 = 52
__$ReturnUdt$ = 96
p$ = 104
?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z PROC	; glm::unpackUnorm4x16, COMDAT

; 435  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 436  : 		u16vec4 Unpack(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??0?$tvec4@G$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>

; 437  : 		memcpy(&Unpack, &p, sizeof(Unpack));

	mov	r8d, 8
	lea	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	memcpy

; 438  : 		return vec4(Unpack) * 1.5259021896696421759365224689097e-5f; // 1.0 / 65535.0

	lea	rdx, QWORD PTR Unpack$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><unsigned short,0>
	movss	xmm2, DWORD PTR __real@37800080
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 439  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackUnorm4x16@glm@@YA?AU?$tvec4@M$0A@@1@_K@Z ENDP	; glm::unpackUnorm4x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
Topack$ = 40
Packed$ = 72
$T5 = 84
$T6 = 100
$T7 = 116
v$ = 160
?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z PROC	; glm::packUnorm4x16, COMDAT

; 427  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 428  : 		u16vec4 const Topack(round(clamp(v , 0.0f, 1.0f) * 65535.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@477fff00
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR Topack$[rsp]
	call	??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><float,0>

; 429  : 		uint64 Packed = 0;

	mov	QWORD PTR Packed$[rsp], 0

; 430  : 		memcpy(&Packed, &Topack, sizeof(Packed));

	mov	r8d, 8
	lea	rdx, QWORD PTR Topack$[rsp]
	lea	rcx, QWORD PTR Packed$[rsp]
	call	memcpy

; 431  : 		return Packed;

	mov	rax, QWORD PTR Packed$[rsp]

; 432  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?packUnorm4x16@glm@@YA_KAEBU?$tvec4@M$0A@@1@@Z ENDP	; glm::packUnorm4x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackUnorm1x16@glm@@YAMG@Z
_TEXT	SEGMENT
Unpack$ = 16
p$ = 48
?unpackUnorm1x16@glm@@YAMG@Z PROC			; glm::unpackUnorm1x16, COMDAT

; 421  : 	{

$LN3:
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 32					; 00000020H

; 422  : 		float const Unpack(p);

	movzx	eax, WORD PTR p$[rsp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR Unpack$[rsp], xmm0

; 423  : 		return Unpack * 1.5259021896696421759365224689097e-5f; // 1.0 / 65535.0

	movss	xmm0, DWORD PTR Unpack$[rsp]
	mulss	xmm0, DWORD PTR __real@37800080

; 424  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?unpackUnorm1x16@glm@@YAMG@Z ENDP			; glm::unpackUnorm1x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packUnorm1x16@glm@@YAGM@Z
_TEXT	SEGMENT
s$ = 48
?packUnorm1x16@glm@@YAGM@Z PROC				; glm::packUnorm1x16, COMDAT

; 416  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 417  : 		return static_cast<uint16>(round(clamp(s, 0.0f, 1.0f) * 65535.0f));

	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	movss	xmm0, DWORD PTR s$[rsp]
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	mulss	xmm0, DWORD PTR __real@477fff00
	call	?round@@YAMM@Z				; round
	cvttss2si eax, xmm0

; 418  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?packUnorm1x16@glm@@YAGM@Z ENDP				; glm::packUnorm1x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z
_TEXT	SEGMENT
Unpack$ = 36
$T4 = 52
$T5 = 60
__$ReturnUdt$ = 96
p$ = 104
?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z PROC	; glm::unpackSnorm2x8, COMDAT

; 407  : 	{

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 408  : 		i8vec2 Unpack(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??0?$tvec2@C$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<signed char,0>::tvec2<signed char,0>

; 409  : 		memcpy(&Unpack, &p, sizeof(Unpack));

	mov	r8d, 2
	lea	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	memcpy

; 410  : 		return clamp(

	lea	rdx, QWORD PTR Unpack$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0C$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><signed char,0>
	movss	xmm2, DWORD PTR __real@3c010204
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 411  : 			vec2(Unpack) * 0.00787401574803149606299212598425f, // 1.0f / 127.0f
; 412  : 			-1.0f, 1.0f);
; 413  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackSnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z ENDP	; glm::unpackSnorm2x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
Topack$ = 36
Packed$ = 68
$T5 = 84
$T6 = 92
$T7 = 100
v$ = 128
?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z PROC	; glm::packSnorm2x8, COMDAT

; 399  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 400  : 		i8vec2 const Topack(round(clamp(v, -1.0f, 1.0f) * 127.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	movss	xmm2, DWORD PTR __real@42fe0000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec2>
	mov	rdx, rax
	lea	rcx, QWORD PTR Topack$[rsp]
	call	??$?0M$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<signed char,0>::tvec2<signed char,0><float,0>

; 401  : 		uint16 Packed = 0;

	xor	eax, eax
	mov	WORD PTR Packed$[rsp], ax

; 402  : 		memcpy(&Packed, &Topack, sizeof(Packed));

	mov	r8d, 2
	lea	rdx, QWORD PTR Topack$[rsp]
	lea	rcx, QWORD PTR Packed$[rsp]
	call	memcpy

; 403  : 		return Packed;

	movzx	eax, WORD PTR Packed$[rsp]

; 404  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?packSnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z ENDP	; glm::packSnorm2x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackSnorm1x8@glm@@YAME@Z
_TEXT	SEGMENT
Unpack$ = 52
p$ = 96
?unpackSnorm1x8@glm@@YAME@Z PROC			; glm::unpackSnorm1x8, COMDAT

; 390  : 	{

$LN3:
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+96]

; 391  : 		int8 Unpack = 0;

	mov	BYTE PTR Unpack$[rsp], 0

; 392  : 		memcpy(&Unpack, &p, sizeof(Unpack));

	mov	r8d, 1
	lea	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	memcpy

; 393  : 		return clamp(

	movsx	eax, BYTE PTR Unpack$[rsp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c010204
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>

; 394  : 			static_cast<float>(Unpack) * 0.00787401574803149606299212598425f, // 1.0f / 127.0f
; 395  : 			-1.0f, 1.0f);
; 396  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackSnorm1x8@glm@@YAME@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackSnorm1x8@glm@@YAME@Z ENDP			; glm::unpackSnorm1x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packSnorm1x8@glm@@YAEM@Z
_TEXT	SEGMENT
Topack$ = 36
Packed$ = 68
v$ = 112
?packSnorm1x8@glm@@YAEM@Z PROC				; glm::packSnorm1x8, COMDAT

; 382  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 383  : 		int8 const Topack(static_cast<int8>(round(clamp(v ,-1.0f, 1.0f) * 127.0f)));

	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	movss	xmm0, DWORD PTR v$[rsp]
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	mulss	xmm0, DWORD PTR __real@42fe0000
	call	?round@@YAMM@Z				; round
	cvttss2si eax, xmm0
	mov	BYTE PTR Topack$[rsp], al

; 384  : 		uint8 Packed = 0;

	mov	BYTE PTR Packed$[rsp], 0

; 385  : 		memcpy(&Packed, &Topack, sizeof(Packed));

	mov	r8d, 1
	lea	rdx, QWORD PTR Topack$[rsp]
	lea	rcx, QWORD PTR Packed$[rsp]
	call	memcpy

; 386  : 		return Packed;

	movzx	eax, BYTE PTR Packed$[rsp]

; 387  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packSnorm1x8@glm@@YAEM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?packSnorm1x8@glm@@YAEM@Z ENDP				; glm::packSnorm1x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z
_TEXT	SEGMENT
Unpack$ = 36
$T4 = 52
__$ReturnUdt$ = 80
p$ = 88
?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z PROC	; glm::unpackUnorm2x8, COMDAT

; 375  : 	{

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 376  : 		u8vec2 Unpack(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	??0?$tvec2@E$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>

; 377  : 		memcpy(&Unpack, &p, sizeof(Unpack));

	mov	r8d, 2
	lea	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	memcpy

; 378  : 		return vec2(Unpack) * float(0.0039215686274509803921568627451); // 1 / 255

	lea	rdx, QWORD PTR Unpack$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0E$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><unsigned char,0>
	movss	xmm2, DWORD PTR __real@3b808081
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 379  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?unpackUnorm2x8@glm@@YA?AU?$tvec2@M$0A@@1@G@Z ENDP	; glm::unpackUnorm2x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
Topack$ = 36
Unpack$ = 68
$T5 = 84
$T6 = 92
$T7 = 100
v$ = 128
?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z PROC	; glm::packUnorm2x8, COMDAT

; 366  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 367  : 		u8vec2 const Topack(round(clamp(v, 0.0f, 1.0f) * 255.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	movss	xmm2, DWORD PTR __real@437f0000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec2>
	mov	rdx, rax
	lea	rcx, QWORD PTR Topack$[rsp]
	call	??$?0M$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><float,0>

; 368  : 
; 369  : 		uint16 Unpack = 0;

	xor	eax, eax
	mov	WORD PTR Unpack$[rsp], ax

; 370  : 		memcpy(&Unpack, &Topack, sizeof(Unpack));

	mov	r8d, 2
	lea	rdx, QWORD PTR Topack$[rsp]
	lea	rcx, QWORD PTR Unpack$[rsp]
	call	memcpy

; 371  : 		return Unpack;

	movzx	eax, WORD PTR Unpack$[rsp]

; 372  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?packUnorm2x8@glm@@YAGAEBU?$tvec2@M$0A@@1@@Z ENDP	; glm::packUnorm2x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?unpackUnorm1x8@glm@@YAME@Z
_TEXT	SEGMENT
Unpack$ = 16
p$ = 48
?unpackUnorm1x8@glm@@YAME@Z PROC			; glm::unpackUnorm1x8, COMDAT

; 360  : 	{

$LN3:
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		float const Unpack(p);

	movzx	eax, BYTE PTR p$[rsp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR Unpack$[rsp], xmm0

; 362  : 		return Unpack * static_cast<float>(0.0039215686274509803921568627451); // 1 / 255

	movss	xmm0, DWORD PTR Unpack$[rsp]
	mulss	xmm0, DWORD PTR __real@3b808081

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?unpackUnorm1x8@glm@@YAME@Z ENDP			; glm::unpackUnorm1x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\packing.inl
;	COMDAT ?packUnorm1x8@glm@@YAEM@Z
_TEXT	SEGMENT
v$ = 48
?packUnorm1x8@glm@@YAEM@Z PROC				; glm::packUnorm1x8, COMDAT

; 355  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 356  : 		return static_cast<uint8>(round(clamp(v, 0.0f, 1.0f) * 255.0f));

	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	movss	xmm0, DWORD PTR v$[rsp]
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	mulss	xmm0, DWORD PTR __real@437f0000
	call	?round@@YAMM@Z				; round
	cvttss2si eax, xmm0

; 357  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?packUnorm1x8@glm@@YAEM@Z ENDP				; glm::packUnorm1x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><signed char,signed char,signed char,signed char>, COMDAT

; 204  : 	{}

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	movsx	eax, BYTE PTR a$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	movsx	eax, BYTE PTR b$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	movsx	eax, BYTE PTR c$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	movsx	eax, BYTE PTR d$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><signed char,signed char,signed char,signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx], al

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+1], al

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2], al

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+3], al

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z PROC			; glm::tvec4<signed char,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@C$0A@@glm@@SAHXZ	; glm::tvec4<signed char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z ENDP			; glm::tvec4<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$0A@@glm@@SAHXZ PROC			; glm::tvec4<signed char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@C$0A@@glm@@SAHXZ ENDP			; glm::tvec4<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><unsigned char,unsigned char,unsigned char,unsigned char>, COMDAT

; 204  : 	{}

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	movzx	eax, BYTE PTR a$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	movzx	eax, BYTE PTR b$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	movzx	eax, BYTE PTR c$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	movzx	eax, BYTE PTR d$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><unsigned char,unsigned char,unsigned char,unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx], al

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+1], al

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2], al

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+3], al

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z PROC			; glm::tvec4<unsigned char,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@E$0A@@glm@@SAHXZ	; glm::tvec4<unsigned char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z ENDP			; glm::tvec4<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@E$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::round<float,0,glm::tvec4>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'round' only accept floating-point inputs");
; 362  : 		return detail::compute_round<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_round<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::round<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
tv66 = 64
__$ReturnUdt$ = 96
x$ = 104
minVal$ = 112
maxVal$ = 120
??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z PROC ; glm::clamp<float,0,glm::tvec4>, COMDAT

; 551  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 552  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 553  : 		return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, vecType<T, P>(minVal), vecType<T, P>(maxVal));

	movss	xmm1, DWORD PTR maxVal$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR minVal$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 554  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ENDP ; glm::clamp<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><short,short>, COMDAT

; 66   : 	{}

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	movsx	eax, WORD PTR a$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	movsx	eax, WORD PTR b$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><short,short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z PROC ; glm::tvec2<short,0>::tvec2<short,0><float,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ENDP ; glm::tvec2<short,0>::tvec2<short,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z PROC			; glm::tvec2<short,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z ENDP			; glm::tvec2<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$0A@@glm@@SAHXZ PROC			; glm::tvec2<short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@F$0A@@glm@@SAHXZ ENDP			; glm::tvec2<short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><unsigned short,unsigned short>, COMDAT

; 66   : 	{}

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	movzx	eax, WORD PTR a$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	movzx	eax, WORD PTR b$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><unsigned short,unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z PROC ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><float,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ENDP ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z PROC			; glm::tvec2<unsigned short,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z ENDP			; glm::tvec2<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@G$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::round<float,0,glm::tvec2>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'round' only accept floating-point inputs");
; 362  : 		return detail::compute_round<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_round<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::round<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 541  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 542  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 543  : 			v.x * scalar,
; 544  : 			v.y * scalar);
; 545  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv66 = 48
__$ReturnUdt$ = 80
x$ = 88
minVal$ = 96
maxVal$ = 104
??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z PROC ; glm::clamp<float,0,glm::tvec2>, COMDAT

; 551  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 552  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 553  : 		return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, vecType<T, P>(minVal), vecType<T, P>(maxVal));

	movss	xmm1, DWORD PTR maxVal$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR minVal$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 554  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ENDP ; glm::clamp<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_half.inl
;	COMDAT ??0uif32@detail@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0uif32@detail@glm@@QEAA@XZ PROC			; glm::detail::uif32::uif32, COMDAT

; 20   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 19   : 			i(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0

; 20   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0uif32@detail@glm@@QEAA@XZ ENDP			; glm::detail::uif32::uif32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_half.inl
;	COMDAT ?overflow@detail@glm@@YAMXZ
_TEXT	SEGMENT
f$ = 16
i$1 = 20
?overflow@detail@glm@@YAMXZ PROC			; glm::detail::overflow, COMDAT

; 8    : 	{

$LN6:
	push	rdi
	sub	rsp, 32					; 00000020H

; 9    : 		volatile float f = 1e10;

	movss	xmm0, DWORD PTR __real@501502f9
	movss	DWORD PTR f$[rsp], xmm0

; 10   : 
; 11   : 		for(int i = 0; i < 10; ++i)	

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@overflow
$LN2@overflow:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@overflow:
	cmp	DWORD PTR i$1[rsp], 10
	jge	SHORT $LN3@overflow

; 12   : 			f *= f; // this will overflow before the for loop terminates

	movss	xmm0, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR f$[rsp]
	mulss	xmm0, xmm1
	movss	DWORD PTR f$[rsp], xmm0
	jmp	SHORT $LN2@overflow
$LN3@overflow:

; 13   : 		return f;

	movss	xmm0, DWORD PTR f$[rsp]

; 14   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?overflow@detail@glm@@YAMXZ ENDP			; glm::detail::overflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_half.inl
;	COMDAT ?toFloat16@detail@glm@@YAFAEBM@Z
_TEXT	SEGMENT
Entry$ = 36
i$ = 52
s$ = 56
e$ = 60
m$ = 64
tv90 = 68
f$ = 96
?toFloat16@detail@glm@@YAFAEBM@Z PROC			; glm::detail::toFloat16, COMDAT

; 109  : 	{

$LN16:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 110  : 		uif32 Entry;

	lea	rcx, QWORD PTR Entry$[rsp]
	call	??0uif32@detail@glm@@QEAA@XZ		; glm::detail::uif32::uif32

; 111  : 		Entry.f = f;

	mov	rax, QWORD PTR f$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR Entry$[rsp], xmm0

; 112  : 		int i = (int)Entry.i;

	mov	eax, DWORD PTR Entry$[rsp]
	mov	DWORD PTR i$[rsp], eax

; 113  : 
; 114  : 		//
; 115  : 		// Our floating point number, f, is represented by the bit
; 116  : 		// pattern in integer i.  Disassemble that bit pattern into
; 117  : 		// the sign, s, the exponent, e, and the significand, m.
; 118  : 		// Shift s into the position where it will go in in the
; 119  : 		// resulting half number.
; 120  : 		// Adjust e, accounting for the different exponent bias
; 121  : 		// of float and half (127 versus 15).
; 122  : 		//
; 123  : 
; 124  : 		int s =  (i >> 16) & 0x00008000;

	mov	eax, DWORD PTR i$[rsp]
	sar	eax, 16
	and	eax, 32768				; 00008000H
	mov	DWORD PTR s$[rsp], eax

; 125  : 		int e = ((i >> 23) & 0x000000ff) - (127 - 15);

	mov	eax, DWORD PTR i$[rsp]
	sar	eax, 23
	and	eax, 255				; 000000ffH
	sub	eax, 112				; 00000070H
	mov	DWORD PTR e$[rsp], eax

; 126  : 		int m =   i        & 0x007fffff;

	mov	eax, DWORD PTR i$[rsp]
	and	eax, 8388607				; 007fffffH
	mov	DWORD PTR m$[rsp], eax

; 127  : 
; 128  : 		//
; 129  : 		// Now reassemble s, e and m into a half:
; 130  : 		//
; 131  : 
; 132  : 		if(e <= 0)

	cmp	DWORD PTR e$[rsp], 0
	jg	SHORT $LN2@toFloat16

; 133  : 		{
; 134  : 			if(e < -10)

	cmp	DWORD PTR e$[rsp], -10
	jge	SHORT $LN4@toFloat16

; 135  : 			{
; 136  : 				//
; 137  : 				// E is less than -10.  The absolute value of f is
; 138  : 				// less than half_MIN (f may be a small normalized
; 139  : 				// float, a denormalized float or a zero).
; 140  : 				//
; 141  : 				// We convert f to a half zero.
; 142  : 				//
; 143  : 
; 144  : 				return hdata(s);

	movzx	eax, WORD PTR s$[rsp]
	jmp	$LN1@toFloat16
$LN4@toFloat16:

; 145  : 			}
; 146  : 
; 147  : 			//
; 148  : 			// E is between -10 and 0.  F is a normalized float,
; 149  : 			// whose magnitude is less than __half_NRM_MIN.
; 150  : 			//
; 151  : 			// We convert f to a denormalized half.
; 152  : 			// 
; 153  : 
; 154  : 			m = (m | 0x00800000) >> (1 - e);

	mov	eax, DWORD PTR m$[rsp]
	bts	eax, 23
	mov	ecx, 1
	sub	ecx, DWORD PTR e$[rsp]
	sar	eax, cl
	mov	DWORD PTR m$[rsp], eax

; 155  : 
; 156  : 			//
; 157  : 			// Round to nearest, round "0.5" up.
; 158  : 			//
; 159  : 			// Rounding may cause the significand to overflow and make
; 160  : 			// our number normalized.  Because of the way a half's bits
; 161  : 			// are laid out, we don't have to treat this case separately;
; 162  : 			// the code below will handle it correctly.
; 163  : 			// 
; 164  : 
; 165  : 			if(m & 0x00001000) 

	mov	eax, DWORD PTR m$[rsp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	je	SHORT $LN5@toFloat16

; 166  : 				m += 0x00002000;

	mov	eax, DWORD PTR m$[rsp]
	add	eax, 8192				; 00002000H
	mov	DWORD PTR m$[rsp], eax
$LN5@toFloat16:

; 167  : 
; 168  : 			//
; 169  : 			// Assemble the half from s, e (zero) and m.
; 170  : 			//
; 171  : 
; 172  : 			return hdata(s | (m >> 13));

	mov	eax, DWORD PTR m$[rsp]
	sar	eax, 13
	mov	ecx, DWORD PTR s$[rsp]
	or	ecx, eax
	mov	eax, ecx
	jmp	$LN1@toFloat16

; 173  : 		}

	jmp	$LN3@toFloat16
$LN2@toFloat16:

; 174  : 		else if(e == 0xff - (127 - 15))

	cmp	DWORD PTR e$[rsp], 143			; 0000008fH
	jne	SHORT $LN6@toFloat16

; 175  : 		{
; 176  : 			if(m == 0)

	cmp	DWORD PTR m$[rsp], 0
	jne	SHORT $LN8@toFloat16

; 177  : 			{
; 178  : 				//
; 179  : 				// F is an infinity; convert f to a half
; 180  : 				// infinity with the same sign as f.
; 181  : 				//
; 182  : 
; 183  : 				return hdata(s | 0x7c00);

	mov	eax, DWORD PTR s$[rsp]
	or	eax, 31744				; 00007c00H
	jmp	$LN1@toFloat16

; 184  : 			}

	jmp	SHORT $LN9@toFloat16
$LN8@toFloat16:

; 185  : 			else
; 186  : 			{
; 187  : 				//
; 188  : 				// F is a NAN; we produce a half NAN that preserves
; 189  : 				// the sign bit and the 10 leftmost bits of the
; 190  : 				// significand of f, with one exception: If the 10
; 191  : 				// leftmost bits are all zero, the NAN would turn 
; 192  : 				// into an infinity, so we have to set at least one
; 193  : 				// bit in the significand.
; 194  : 				//
; 195  : 
; 196  : 				m >>= 13;

	mov	eax, DWORD PTR m$[rsp]
	sar	eax, 13
	mov	DWORD PTR m$[rsp], eax

; 197  : 
; 198  : 				return hdata(s | 0x7c00 | m | (m == 0));

	cmp	DWORD PTR m$[rsp], 0
	jne	SHORT $LN14@toFloat16
	mov	DWORD PTR tv90[rsp], 1
	jmp	SHORT $LN15@toFloat16
$LN14@toFloat16:
	mov	DWORD PTR tv90[rsp], 0
$LN15@toFloat16:
	mov	eax, DWORD PTR s$[rsp]
	or	eax, 31744				; 00007c00H
	or	eax, DWORD PTR m$[rsp]
	or	eax, DWORD PTR tv90[rsp]
	jmp	SHORT $LN1@toFloat16
$LN9@toFloat16:

; 199  : 			}
; 200  : 		}

	jmp	SHORT $LN7@toFloat16
$LN6@toFloat16:

; 201  : 		else
; 202  : 		{
; 203  : 			//
; 204  : 			// E is greater than zero.  F is a normalized float.
; 205  : 			// We try to convert f to a normalized half.
; 206  : 			//
; 207  : 
; 208  : 			//
; 209  : 			// Round to nearest, round "0.5" up
; 210  : 			//
; 211  : 
; 212  : 			if(m &  0x00001000)

	mov	eax, DWORD PTR m$[rsp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	je	SHORT $LN10@toFloat16

; 213  : 			{
; 214  : 				m += 0x00002000;

	mov	eax, DWORD PTR m$[rsp]
	add	eax, 8192				; 00002000H
	mov	DWORD PTR m$[rsp], eax

; 215  : 
; 216  : 				if(m & 0x00800000)

	mov	eax, DWORD PTR m$[rsp]
	and	eax, 8388608				; 00800000H
	test	eax, eax
	je	SHORT $LN11@toFloat16

; 217  : 				{
; 218  : 					m =  0;     // overflow in significand,

	mov	DWORD PTR m$[rsp], 0

; 219  : 					e += 1;     // adjust exponent

	mov	eax, DWORD PTR e$[rsp]
	inc	eax
	mov	DWORD PTR e$[rsp], eax
$LN11@toFloat16:
$LN10@toFloat16:

; 220  : 				}
; 221  : 			}
; 222  : 
; 223  : 			//
; 224  : 			// Handle exponent overflow
; 225  : 			//
; 226  : 
; 227  : 			if (e > 30)

	cmp	DWORD PTR e$[rsp], 30
	jle	SHORT $LN12@toFloat16

; 228  : 			{
; 229  : 				overflow();        // Cause a hardware floating point overflow;

	call	?overflow@detail@glm@@YAMXZ		; glm::detail::overflow

; 230  : 
; 231  : 				return hdata(s | 0x7c00);

	mov	eax, DWORD PTR s$[rsp]
	or	eax, 31744				; 00007c00H
	jmp	SHORT $LN1@toFloat16
$LN12@toFloat16:

; 232  : 				// if this returns, the half becomes an
; 233  : 			}   // infinity with the same sign as f.
; 234  : 
; 235  : 			//
; 236  : 			// Assemble the half from s, e and m.
; 237  : 			//
; 238  : 
; 239  : 			return hdata(s | (e << 10) | (m >> 13));

	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 10
	mov	ecx, DWORD PTR s$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR m$[rsp]
	sar	ecx, 13
	or	eax, ecx
$LN7@toFloat16:
$LN3@toFloat16:
$LN1@toFloat16:

; 240  : 		}
; 241  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?toFloat16@detail@glm@@YAFAEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?toFloat16@detail@glm@@YAFAEBM@Z ENDP			; glm::detail::toFloat16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_half.inl
;	COMDAT ?toFloat32@detail@glm@@YAMF@Z
_TEXT	SEGMENT
s$ = 48
e$ = 52
m$ = 56
result$7 = 68
result$8 = 100
result$9 = 132
Result$ = 164
value$ = 208
?toFloat32@detail@glm@@YAMF@Z PROC			; glm::detail::toFloat32, COMDAT

; 35   : 	{

$LN12:
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+208]

; 36   : 		int s = (value >> 15) & 0x00000001;

	movsx	eax, WORD PTR value$[rsp]
	sar	eax, 15
	and	eax, 1
	mov	DWORD PTR s$[rsp], eax

; 37   : 		int e = (value >> 10) & 0x0000001f;

	movsx	eax, WORD PTR value$[rsp]
	sar	eax, 10
	and	eax, 31
	mov	DWORD PTR e$[rsp], eax

; 38   : 		int m =  value        & 0x000003ff;

	movsx	eax, WORD PTR value$[rsp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR m$[rsp], eax

; 39   : 
; 40   : 		if(e == 0)

	cmp	DWORD PTR e$[rsp], 0
	jne	SHORT $LN4@toFloat32

; 41   : 		{
; 42   : 			if(m == 0)

	cmp	DWORD PTR m$[rsp], 0
	jne	SHORT $LN6@toFloat32

; 43   : 			{
; 44   : 				//
; 45   : 				// Plus or minus zero
; 46   : 				//
; 47   : 
; 48   : 				detail::uif32 result;

	lea	rcx, QWORD PTR result$7[rsp]
	call	??0uif32@detail@glm@@QEAA@XZ		; glm::detail::uif32::uif32

; 49   : 				result.i = (unsigned int)(s << 31);

	mov	eax, DWORD PTR s$[rsp]
	shl	eax, 31
	mov	DWORD PTR result$7[rsp], eax

; 50   : 				return result.f;

	movss	xmm0, DWORD PTR result$7[rsp]
	jmp	$LN1@toFloat32

; 51   : 			}

	jmp	SHORT $LN7@toFloat32
$LN6@toFloat32:
$LN2@toFloat32:

; 52   : 			else
; 53   : 			{
; 54   : 				//
; 55   : 				// Denormalized number -- renormalize it
; 56   : 				//
; 57   : 
; 58   : 				while(!(m & 0x00000400))

	mov	eax, DWORD PTR m$[rsp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	jne	SHORT $LN3@toFloat32

; 59   : 				{
; 60   : 					m <<= 1;

	mov	eax, DWORD PTR m$[rsp]
	shl	eax, 1
	mov	DWORD PTR m$[rsp], eax

; 61   : 					e -=  1;

	mov	eax, DWORD PTR e$[rsp]
	dec	eax
	mov	DWORD PTR e$[rsp], eax

; 62   : 				}

	jmp	SHORT $LN2@toFloat32
$LN3@toFloat32:

; 63   : 
; 64   : 				e += 1;

	mov	eax, DWORD PTR e$[rsp]
	inc	eax
	mov	DWORD PTR e$[rsp], eax

; 65   : 				m &= ~0x00000400;

	mov	eax, DWORD PTR m$[rsp]
	btr	eax, 10
	mov	DWORD PTR m$[rsp], eax
$LN7@toFloat32:

; 66   : 			}
; 67   : 		}

	jmp	SHORT $LN5@toFloat32
$LN4@toFloat32:

; 68   : 		else if(e == 31)

	cmp	DWORD PTR e$[rsp], 31
	jne	SHORT $LN8@toFloat32

; 69   : 		{
; 70   : 			if(m == 0)

	cmp	DWORD PTR m$[rsp], 0
	jne	SHORT $LN9@toFloat32

; 71   : 			{
; 72   : 				//
; 73   : 				// Positive or negative infinity
; 74   : 				//
; 75   : 
; 76   : 				uif32 result;

	lea	rcx, QWORD PTR result$8[rsp]
	call	??0uif32@detail@glm@@QEAA@XZ		; glm::detail::uif32::uif32

; 77   : 				result.i = (unsigned int)((s << 31) | 0x7f800000);

	mov	eax, DWORD PTR s$[rsp]
	shl	eax, 31
	or	eax, 2139095040				; 7f800000H
	mov	DWORD PTR result$8[rsp], eax

; 78   : 				return result.f;

	movss	xmm0, DWORD PTR result$8[rsp]
	jmp	SHORT $LN1@toFloat32

; 79   : 			}

	jmp	SHORT $LN10@toFloat32
$LN9@toFloat32:

; 80   : 			else
; 81   : 			{
; 82   : 				//
; 83   : 				// Nan -- preserve sign and significand bits
; 84   : 				//
; 85   : 
; 86   : 				uif32 result;

	lea	rcx, QWORD PTR result$9[rsp]
	call	??0uif32@detail@glm@@QEAA@XZ		; glm::detail::uif32::uif32

; 87   : 				result.i = (unsigned int)((s << 31) | 0x7f800000 | (m << 13));

	mov	eax, DWORD PTR s$[rsp]
	shl	eax, 31
	or	eax, 2139095040				; 7f800000H
	mov	ecx, DWORD PTR m$[rsp]
	shl	ecx, 13
	or	eax, ecx
	mov	DWORD PTR result$9[rsp], eax

; 88   : 				return result.f;

	movss	xmm0, DWORD PTR result$9[rsp]
	jmp	SHORT $LN1@toFloat32
$LN10@toFloat32:
$LN8@toFloat32:
$LN5@toFloat32:

; 89   : 			}
; 90   : 		}
; 91   : 
; 92   : 		//
; 93   : 		// Normalized number
; 94   : 		//
; 95   : 
; 96   : 		e = e + (127 - 15);

	mov	eax, DWORD PTR e$[rsp]
	add	eax, 112				; 00000070H
	mov	DWORD PTR e$[rsp], eax

; 97   : 		m = m << 13;

	mov	eax, DWORD PTR m$[rsp]
	shl	eax, 13
	mov	DWORD PTR m$[rsp], eax

; 98   : 
; 99   : 		//
; 100  : 		// Assemble s, e and m.
; 101  : 		//
; 102  : 
; 103  : 		uif32 Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0uif32@detail@glm@@QEAA@XZ		; glm::detail::uif32::uif32

; 104  : 		Result.i = (unsigned int)((s << 31) | (e << 23) | m);

	mov	eax, DWORD PTR s$[rsp]
	shl	eax, 31
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 23
	or	eax, ecx
	or	eax, DWORD PTR m$[rsp]
	mov	DWORD PTR Result$[rsp], eax

; 105  : 		return Result.f;

	movss	xmm0, DWORD PTR Result$[rsp]
$LN1@toFloat32:

; 106  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?toFloat32@detail@glm@@YAMF@Z ENDP			; glm::detail::toFloat32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
_TEXT	SEGMENT
u$ = 52
$T4 = 68
$T5 = 84
tv80 = 104
__$ReturnUdt$ = 128
p$ = 136
?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z PROC	; glm::unpackSnorm4x8, COMDAT

; 118  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 119  : 		union
; 120  : 		{
; 121  : 			uint in;
; 122  : 			i8   out[4];
; 123  : 		} u;
; 124  : 
; 125  : 		u.in = p;

	mov	eax, DWORD PTR p$[rsp]
	mov	DWORD PTR u$[rsp], eax

; 126  : 
; 127  : 		return clamp(vec4(u.out[0], u.out[1], u.out[2], u.out[3]) * 0.0078740157480315f, -1.0f, 1.0f);

	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8d, 1
	imul	r8, r8, 0
	mov	QWORD PTR tv80[rsp], r8
	movzx	eax, BYTE PTR u$[rsp+rax]
	mov	BYTE PTR [rsp+32], al
	movzx	r9d, BYTE PTR u$[rsp+rcx]
	movzx	r8d, BYTE PTR u$[rsp+rdx]
	mov	rax, QWORD PTR tv80[rsp]
	movzx	edx, BYTE PTR u$[rsp+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z ; glm::tvec4<float,0>::tvec4<float,0><signed char,signed char,signed char,signed char>
	movss	xmm2, DWORD PTR __real@3c010204
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 128  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ENDP	; glm::unpackSnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
_TEXT	SEGMENT
u$ = 52
$T4 = 68
tv77 = 88
__$ReturnUdt$ = 112
p$ = 120
?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z PROC	; glm::unpackUnorm4x8, COMDAT

; 87   : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 88   : 		union
; 89   : 		{
; 90   : 			uint in;
; 91   : 			u8   out[4];
; 92   : 		} u;
; 93   : 
; 94   : 		u.in = p;

	mov	eax, DWORD PTR p$[rsp]
	mov	DWORD PTR u$[rsp], eax

; 95   : 
; 96   : 		return vec4(u.out[0], u.out[1], u.out[2], u.out[3]) * 0.0039215686274509803921568627451f;

	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8d, 1
	imul	r8, r8, 0
	mov	QWORD PTR tv77[rsp], r8
	movzx	eax, BYTE PTR u$[rsp+rax]
	mov	BYTE PTR [rsp+32], al
	movzx	r9d, BYTE PTR u$[rsp+rcx]
	movzx	r8d, BYTE PTR u$[rsp+rdx]
	mov	rax, QWORD PTR tv77[rsp]
	movzx	edx, BYTE PTR u$[rsp+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z ; glm::tvec4<float,0>::tvec4<float,0><unsigned char,unsigned char,unsigned char,unsigned char>
	movss	xmm2, DWORD PTR __real@3b808081
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 97   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ENDP	; glm::unpackUnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z
_TEXT	SEGMENT
u$ = 36
$T4 = 52
$T5 = 60
__$ReturnUdt$ = 96
p$ = 104
?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z PROC	; glm::unpackSnorm2x16, COMDAT

; 56   : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 57   : 		union
; 58   : 		{
; 59   : 			uint in;
; 60   : 			i16  out[2];
; 61   : 		} u;
; 62   : 
; 63   : 		u.in = p;

	mov	eax, DWORD PTR p$[rsp]
	mov	DWORD PTR u$[rsp], eax

; 64   : 
; 65   : 		return clamp(vec2(u.out[0], u.out[1]) * 3.0518509475997192297128208258309e-5f, -1.0f, 1.0f);

	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	r8d, WORD PTR u$[rsp+rax]
	movzx	edx, WORD PTR u$[rsp+rcx]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z	; glm::tvec2<float,0>::tvec2<float,0><short,short>
	movss	xmm2, DWORD PTR __real@38000100
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 66   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z ENDP	; glm::unpackSnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z
_TEXT	SEGMENT
u$ = 36
$T4 = 52
__$ReturnUdt$ = 80
p$ = 88
?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z PROC	; glm::unpackUnorm2x16, COMDAT

; 27   : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 28   : 		union
; 29   : 		{
; 30   : 			uint in;
; 31   : 			u16  out[2];
; 32   : 		} u;
; 33   : 
; 34   : 		u.in = p;

	mov	eax, DWORD PTR p$[rsp]
	mov	DWORD PTR u$[rsp], eax

; 35   : 
; 36   : 		return vec2(u.out[0], u.out[1]) * 1.5259021896696421759365224689097e-5f;

	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	r8d, WORD PTR u$[rsp+rax]
	movzx	edx, WORD PTR u$[rsp+rcx]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z	; glm::tvec2<float,0>::tvec2<float,0><unsigned short,unsigned short>
	movss	xmm2, DWORD PTR __real@37800080
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 37   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z ENDP	; glm::unpackUnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
u$ = 36
result$ = 68
$T5 = 84
$T6 = 100
$T7 = 116
v$ = 160
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z PROC	; glm::packSnorm4x8, COMDAT

; 100  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 101  : 		union
; 102  : 		{
; 103  : 			i8   in[4];
; 104  : 			uint out;
; 105  : 		} u;
; 106  : 
; 107  : 		i8vec4 result(round(clamp(v, -1.0f, 1.0f) * 127.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@42fe0000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR result$[rsp]
	call	??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>

; 108  : 
; 109  : 		u.in[0] = result[0];

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z	; glm::tvec4<signed char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 110  : 		u.in[1] = result[1];

	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z	; glm::tvec4<signed char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 111  : 		u.in[2] = result[2];

	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z	; glm::tvec4<signed char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 112  : 		u.in[3] = result[3];

	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z	; glm::tvec4<signed char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 113  : 
; 114  : 		return u.out;

	mov	eax, DWORD PTR u$[rsp]

; 115  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ENDP	; glm::packSnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
u$ = 36
result$ = 68
$T5 = 84
$T6 = 100
$T7 = 116
v$ = 160
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z PROC	; glm::packUnorm4x8, COMDAT

; 69   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 70   : 		union
; 71   : 		{
; 72   : 			u8   in[4];
; 73   : 			uint out;
; 74   : 		} u;
; 75   : 
; 76   : 		u8vec4 result(round(clamp(v, 0.0f, 1.0f) * 255.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@437f0000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR result$[rsp]
	call	??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>

; 77   : 
; 78   : 		u.in[0] = result[0];

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z	; glm::tvec4<unsigned char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 79   : 		u.in[1] = result[1];

	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z	; glm::tvec4<unsigned char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 80   : 		u.in[2] = result[2];

	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z	; glm::tvec4<unsigned char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 81   : 		u.in[3] = result[3];

	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z	; glm::tvec4<unsigned char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 82   : 
; 83   : 		return u.out;

	mov	eax, DWORD PTR u$[rsp]

; 84   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ENDP	; glm::packUnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
u$ = 36
result$ = 68
$T5 = 84
$T6 = 92
$T7 = 100
v$ = 128
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z PROC	; glm::packSnorm2x16, COMDAT

; 40   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 41   : 		union
; 42   : 		{
; 43   : 			i16  in[2];
; 44   : 			uint out;
; 45   : 		} u;
; 46   : 
; 47   : 		i16vec2 result(round(clamp(v, -1.0f, 1.0f) * 32767.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	movss	xmm2, DWORD PTR __real@46fffe00
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec2>
	mov	rdx, rax
	lea	rcx, QWORD PTR result$[rsp]
	call	??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<short,0>::tvec2<short,0><float,0>

; 48   : 
; 49   : 		u.in[0] = result[0];

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z	; glm::tvec2<short,0>::operator[]
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR u$[rsp+rcx], ax

; 50   : 		u.in[1] = result[1];

	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z	; glm::tvec2<short,0>::operator[]
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR u$[rsp+rcx], ax

; 51   : 
; 52   : 		return u.out;

	mov	eax, DWORD PTR u$[rsp]

; 53   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z ENDP	; glm::packSnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
u$ = 36
result$ = 68
$T5 = 84
$T6 = 92
$T7 = 100
v$ = 128
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z PROC	; glm::packUnorm2x16, COMDAT

; 11   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 12   : 		union
; 13   : 		{
; 14   : 			u16  in[2];
; 15   : 			uint out;
; 16   : 		} u;
; 17   : 
; 18   : 		u16vec2 result(round(clamp(v, 0.0f, 1.0f) * 65535.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	movss	xmm2, DWORD PTR __real@477fff00
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec2>
	mov	rdx, rax
	lea	rcx, QWORD PTR result$[rsp]
	call	??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><float,0>

; 19   : 
; 20   : 		u.in[0] = result[0];

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR u$[rsp+rcx], ax

; 21   : 		u.in[1] = result[1];

	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR u$[rsp+rcx], ax

; 22   : 
; 23   : 		return u.out;

	mov	eax, DWORD PTR u$[rsp]

; 24   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z ENDP	; glm::packUnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?round@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?round@@YAMM@Z PROC					; round, COMDAT

; 238  : _NODISCARD _Check_return_ inline float round(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 239  : #if _HAS_CMATH_INTRINSICS
; 240  :     return __roundf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	roundf

; 241  : #elif defined(__clang__)
; 242  :     return __builtin_roundf(_Xx);
; 243  : #else // ^^^ defined(__clang__) ^^^ / vvv intrinsics unavailable vvv
; 244  :     return _CSTD roundf(_Xx);
; 245  : #endif // ^^^ intrinsics unavailable ^^^
; 246  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?round@@YAMM@Z ENDP					; round
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?pow@@YAMMM@Z
_TEXT	SEGMENT
_Xx$ = 64
_Yx$ = 72
?pow@@YAMMM@Z PROC					; pow, COMDAT

; 222  : _NODISCARD _Check_return_ inline float pow(_In_ float _Xx, _In_ float _Yx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 223  :     return _CSTD powf(_Xx, _Yx);

	movss	xmm1, DWORD PTR _Yx$[rsp]
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_powf

; 224  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?pow@@YAMMM@Z ENDP					; pow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?log2@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?log2@@YAMM@Z PROC					; log2, COMDAT

; 190  : _NODISCARD _Check_return_ inline float log2(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 191  :     return _CSTD log2f(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_log2f

; 192  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?log2@@YAMM@Z ENDP					; log2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?floor@@YAMM@Z PROC					; floor, COMDAT

; 124  : _NODISCARD _Check_return_ inline float floor(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 125  : #if _HAS_CMATH_INTRINSICS
; 126  :     return __floorf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	floorf

; 127  : #elif defined(__clang__)
; 128  :     return __builtin_floorf(_Xx);
; 129  : #else // ^^^ defined(__clang__) ^^^ / vvv intrinsics unavailable vvv
; 130  :     return _CSTD floorf(_Xx);
; 131  : #endif // ^^^ intrinsics unavailable ^^^
; 132  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@G@std@@SAGXZ
_TEXT	SEGMENT
?max@?$numeric_limits@G@std@@SAGXZ PROC			; std::numeric_limits<unsigned short>::max, COMDAT

; 686  :     _NODISCARD static constexpr unsigned short(max)() noexcept {

$LN3:
	push	rdi

; 687  :         return USHRT_MAX;

	mov	eax, 65535				; 0000ffffH

; 688  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@G@std@@SAGXZ ENDP			; std::numeric_limits<unsigned short>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@F@std@@SAFXZ
_TEXT	SEGMENT
?max@?$numeric_limits@F@std@@SAFXZ PROC			; std::numeric_limits<short>::max, COMDAT

; 508  :     _NODISCARD static constexpr short(max)() noexcept {

$LN3:
	push	rdi

; 509  :         return SHRT_MAX;

	mov	eax, 32767				; 00007fffH

; 510  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@F@std@@SAFXZ ENDP			; std::numeric_limits<short>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ?fpclassify@@YAHM@Z
_TEXT	SEGMENT
_X$ = 48
?fpclassify@@YAHM@Z PROC				; fpclassify, COMDAT

; 289  :     {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 290  :         return _fdtest(&_X);

	lea	rcx, QWORD PTR _X$[rsp]
	call	QWORD PTR __imp__fdtest
	cwde

; 291  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?fpclassify@@YAHM@Z ENDP				; fpclassify
_TEXT	ENDS
END
