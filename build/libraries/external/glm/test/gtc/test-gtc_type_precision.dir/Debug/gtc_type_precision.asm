; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG82366 DB	'invalid argument', 00H
	ORG $+3
$SG82367 DB	'%s', 00H
	ORG $+1
$SG82371 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82368 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+2
$SG82370 DB	00H, 00H
	ORG $+10
$SG82369 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
CONST	ENDS
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@XZ			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	?length@?$tvec2@G$0A@@glm@@SAHXZ		; glm::tvec2<unsigned short,0>::length
PUBLIC	??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z		; glm::tvec2<unsigned short,0>::operator[]
PUBLIC	??0?$tvec2@G$0A@@glm@@QEAA@XZ			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	?length@?$tvec2@F$0A@@glm@@SAHXZ		; glm::tvec2<short,0>::length
PUBLIC	??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z		; glm::tvec2<short,0>::operator[]
PUBLIC	??0?$tvec2@F$0A@@glm@@QEAA@XZ			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	?length@?$tvec4@E$0A@@glm@@SAHXZ		; glm::tvec4<unsigned char,0>::length
PUBLIC	??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z		; glm::tvec4<unsigned char,0>::operator[]
PUBLIC	??0?$tvec4@E$0A@@glm@@QEAA@XZ			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
PUBLIC	?length@?$tvec4@C$0A@@glm@@SAHXZ		; glm::tvec4<signed char,0>::length
PUBLIC	??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z		; glm::tvec4<signed char,0>::operator[]
PUBLIC	??0?$tvec4@C$0A@@glm@@QEAA@XZ			; glm::tvec4<signed char,0>::tvec4<signed char,0>
PUBLIC	?length@?$tvec2@I$0A@@glm@@SAHXZ		; glm::tvec2<unsigned int,0>::length
PUBLIC	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@XZ			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	?length@?$tvec2@N$0A@@glm@@SAHXZ		; glm::tvec2<double,0>::length
PUBLIC	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec2<double,0>::operator[]
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@XZ			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	?length@?$tvec3@N$0A@@glm@@SAHXZ		; glm::tvec3<double,0>::length
PUBLIC	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec3<double,0>::operator[]
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@XZ			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	?length@?$tvec4@N$0A@@glm@@SAHXZ		; glm::tvec4<double,0>::length
PUBLIC	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec4<double,0>::operator[]
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@XZ			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	?length@?$tvec4@M$00@glm@@SAHXZ			; glm::tvec4<float,1>::length
PUBLIC	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z		; glm::tvec4<float,1>::operator[]
PUBLIC	??$?0$0A@@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><0>
PUBLIC	??$?0$0A@@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><0>
PUBLIC	??$?0$01@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$01@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><2>
PUBLIC	??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec2>
PUBLIC	?length@?$tvec2@_N$0A@@glm@@SAHXZ		; glm::tvec2<bool,0>::length
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
PUBLIC	??$?0$00@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$00@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><1>
PUBLIC	??$?0$0A@@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><0>
PUBLIC	??$?0$0A@@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><0>
PUBLIC	??$?0$01@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><2>
PUBLIC	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
PUBLIC	?length@?$tvec3@_N$0A@@glm@@SAHXZ		; glm::tvec3<bool,0>::length
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
PUBLIC	??$?0$00@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><1>
PUBLIC	??$?0$0A@@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<float,2>::tvec4<float,2><0>
PUBLIC	??$?0$0A@@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<float,1>::tvec4<float,1><0>
PUBLIC	??$?0$01@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><2>
PUBLIC	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	??$?0$00@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><1>
PUBLIC	??$?0$0A@@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><0>
PUBLIC	??$?0$0A@@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><0>
PUBLIC	??$?0$01@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$01@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><2>
PUBLIC	??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec2>
PUBLIC	??$?0$00@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$00@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><1>
PUBLIC	??$?0$0A@@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><0>
PUBLIC	??$?0$0A@@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><0>
PUBLIC	??$?0$01@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><2>
PUBLIC	??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec3>
PUBLIC	??$?0$00@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><1>
PUBLIC	??$?0$0A@@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec4<double,2>::tvec4<double,2><0>
PUBLIC	??$?0$0A@@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec4<double,1>::tvec4<double,1><0>
PUBLIC	??$?0$01@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec4<double,0>::tvec4<double,0><2>
PUBLIC	??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec4>
PUBLIC	??$?0$00@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec4<double,0>::tvec4<double,0><1>
PUBLIC	?length@?$tvec2@C$0A@@glm@@SAHXZ		; glm::tvec2<signed char,0>::length
PUBLIC	??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z		; glm::tvec2<signed char,0>::operator[]
PUBLIC	??0?$tvec2@C$0A@@glm@@QEAA@XZ			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	?length@?$tvec3@C$0A@@glm@@SAHXZ		; glm::tvec3<signed char,0>::length
PUBLIC	??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z		; glm::tvec3<signed char,0>::operator[]
PUBLIC	??0?$tvec3@C$0A@@glm@@QEAA@XZ			; glm::tvec3<signed char,0>::tvec3<signed char,0>
PUBLIC	?length@?$tvec3@F$0A@@glm@@SAHXZ		; glm::tvec3<short,0>::length
PUBLIC	??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z		; glm::tvec3<short,0>::operator[]
PUBLIC	??0?$tvec3@F$0A@@glm@@QEAA@XZ			; glm::tvec3<short,0>::tvec3<short,0>
PUBLIC	?length@?$tvec4@F$0A@@glm@@SAHXZ		; glm::tvec4<short,0>::length
PUBLIC	??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z		; glm::tvec4<short,0>::operator[]
PUBLIC	??0?$tvec4@F$0A@@glm@@QEAA@XZ			; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	?length@?$tvec2@H$0A@@glm@@SAHXZ		; glm::tvec2<int,0>::length
PUBLIC	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec2<int,0>::operator[]
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@XZ			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	?length@?$tvec3@H$0A@@glm@@SAHXZ		; glm::tvec3<int,0>::length
PUBLIC	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec3<int,0>::operator[]
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@XZ			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec4<int,0>::operator[]
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@XZ			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	?length@?$tvec2@_J$0A@@glm@@SAHXZ		; glm::tvec2<__int64,0>::length
PUBLIC	??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z		; glm::tvec2<__int64,0>::operator[]
PUBLIC	??0?$tvec2@_J$0A@@glm@@QEAA@XZ			; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	?length@?$tvec3@_J$0A@@glm@@SAHXZ		; glm::tvec3<__int64,0>::length
PUBLIC	??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z		; glm::tvec3<__int64,0>::operator[]
PUBLIC	??0?$tvec3@_J$0A@@glm@@QEAA@XZ			; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	?length@?$tvec4@_J$0A@@glm@@SAHXZ		; glm::tvec4<__int64,0>::length
PUBLIC	??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z		; glm::tvec4<__int64,0>::operator[]
PUBLIC	??0?$tvec4@_J$0A@@glm@@QEAA@XZ			; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??$?0$0A@@?$tvec2@C$01@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ; glm::tvec2<signed char,2>::tvec2<signed char,2><0>
PUBLIC	??$?0$0A@@?$tvec2@C$00@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ; glm::tvec2<signed char,1>::tvec2<signed char,1><0>
PUBLIC	??$?0$01@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$01@1@@Z ; glm::tvec2<signed char,0>::tvec2<signed char,0><2>
PUBLIC	??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec2>
PUBLIC	??$?0$00@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$00@1@@Z ; glm::tvec2<signed char,0>::tvec2<signed char,0><1>
PUBLIC	??$?0$0A@@?$tvec3@C$01@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z ; glm::tvec3<signed char,2>::tvec3<signed char,2><0>
PUBLIC	??$?0$0A@@?$tvec3@C$00@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z ; glm::tvec3<signed char,1>::tvec3<signed char,1><0>
PUBLIC	??$?0$01@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$01@1@@Z ; glm::tvec3<signed char,0>::tvec3<signed char,0><2>
PUBLIC	??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec3>
PUBLIC	??$?0$00@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$00@1@@Z ; glm::tvec3<signed char,0>::tvec3<signed char,0><1>
PUBLIC	??$?0$0A@@?$tvec4@C$01@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z ; glm::tvec4<signed char,2>::tvec4<signed char,2><0>
PUBLIC	??$?0$0A@@?$tvec4@C$00@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z ; glm::tvec4<signed char,1>::tvec4<signed char,1><0>
PUBLIC	??$?0$01@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$01@1@@Z ; glm::tvec4<signed char,0>::tvec4<signed char,0><2>
PUBLIC	??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec4>
PUBLIC	??$?0$00@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$00@1@@Z ; glm::tvec4<signed char,0>::tvec4<signed char,0><1>
PUBLIC	??$?0$0A@@?$tvec2@F$01@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ; glm::tvec2<short,2>::tvec2<short,2><0>
PUBLIC	??$?0$0A@@?$tvec2@F$00@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ; glm::tvec2<short,1>::tvec2<short,1><0>
PUBLIC	??$?0$01@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$01@1@@Z ; glm::tvec2<short,0>::tvec2<short,0><2>
PUBLIC	??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec2>
PUBLIC	??$?0$00@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$00@1@@Z ; glm::tvec2<short,0>::tvec2<short,0><1>
PUBLIC	??$?0$0A@@?$tvec3@F$01@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z ; glm::tvec3<short,2>::tvec3<short,2><0>
PUBLIC	??$?0$0A@@?$tvec3@F$00@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z ; glm::tvec3<short,1>::tvec3<short,1><0>
PUBLIC	??$?0$01@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$01@1@@Z ; glm::tvec3<short,0>::tvec3<short,0><2>
PUBLIC	??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec3>
PUBLIC	??$?0$00@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$00@1@@Z ; glm::tvec3<short,0>::tvec3<short,0><1>
PUBLIC	??$?0$0A@@?$tvec4@F$01@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ; glm::tvec4<short,2>::tvec4<short,2><0>
PUBLIC	??$?0$0A@@?$tvec4@F$00@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ; glm::tvec4<short,1>::tvec4<short,1><0>
PUBLIC	??$?0$01@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$01@1@@Z ; glm::tvec4<short,0>::tvec4<short,0><2>
PUBLIC	??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec4>
PUBLIC	??$?0$00@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$00@1@@Z ; glm::tvec4<short,0>::tvec4<short,0><1>
PUBLIC	??$?0$0A@@?$tvec2@H$01@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ; glm::tvec2<int,2>::tvec2<int,2><0>
PUBLIC	??$?0$0A@@?$tvec2@H$00@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ; glm::tvec2<int,1>::tvec2<int,1><0>
PUBLIC	??$?0$01@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$01@1@@Z ; glm::tvec2<int,0>::tvec2<int,0><2>
PUBLIC	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
PUBLIC	??$?0$00@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$00@1@@Z ; glm::tvec2<int,0>::tvec2<int,0><1>
PUBLIC	??$?0$0A@@?$tvec3@H$01@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z ; glm::tvec3<int,2>::tvec3<int,2><0>
PUBLIC	??$?0$0A@@?$tvec3@H$00@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z ; glm::tvec3<int,1>::tvec3<int,1><0>
PUBLIC	??$?0$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$01@1@@Z ; glm::tvec3<int,0>::tvec3<int,0><2>
PUBLIC	??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec3>
PUBLIC	??$?0$00@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$00@1@@Z ; glm::tvec3<int,0>::tvec3<int,0><1>
PUBLIC	??$?0$0A@@?$tvec4@H$01@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z ; glm::tvec4<int,2>::tvec4<int,2><0>
PUBLIC	??$?0$0A@@?$tvec4@H$00@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z ; glm::tvec4<int,1>::tvec4<int,1><0>
PUBLIC	??$?0$01@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><2>
PUBLIC	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
PUBLIC	??$?0$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$00@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><1>
PUBLIC	??$?0$0A@@?$tvec2@_J$01@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ; glm::tvec2<__int64,2>::tvec2<__int64,2><0>
PUBLIC	??$?0$0A@@?$tvec2@_J$00@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ; glm::tvec2<__int64,1>::tvec2<__int64,1><0>
PUBLIC	??$?0$01@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$01@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><2>
PUBLIC	??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec2>
PUBLIC	??$?0$00@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$00@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><1>
PUBLIC	??$?0$0A@@?$tvec3@_J$01@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ; glm::tvec3<__int64,2>::tvec3<__int64,2><0>
PUBLIC	??$?0$0A@@?$tvec3@_J$00@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ; glm::tvec3<__int64,1>::tvec3<__int64,1><0>
PUBLIC	??$?0$01@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$01@1@@Z ; glm::tvec3<__int64,0>::tvec3<__int64,0><2>
PUBLIC	??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec3>
PUBLIC	??$?0$00@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$00@1@@Z ; glm::tvec3<__int64,0>::tvec3<__int64,0><1>
PUBLIC	??$?0$0A@@?$tvec4@_J$01@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ; glm::tvec4<__int64,2>::tvec4<__int64,2><0>
PUBLIC	??$?0$0A@@?$tvec4@_J$00@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ; glm::tvec4<__int64,1>::tvec4<__int64,1><0>
PUBLIC	??$?0$01@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$01@1@@Z ; glm::tvec4<__int64,0>::tvec4<__int64,0><2>
PUBLIC	??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec4>
PUBLIC	??$?0$00@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$00@1@@Z ; glm::tvec4<__int64,0>::tvec4<__int64,0><1>
PUBLIC	?length@?$tvec2@E$0A@@glm@@SAHXZ		; glm::tvec2<unsigned char,0>::length
PUBLIC	??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z		; glm::tvec2<unsigned char,0>::operator[]
PUBLIC	??0?$tvec2@E$0A@@glm@@QEAA@XZ			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	?length@?$tvec3@E$0A@@glm@@SAHXZ		; glm::tvec3<unsigned char,0>::length
PUBLIC	??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z		; glm::tvec3<unsigned char,0>::operator[]
PUBLIC	??0?$tvec3@E$0A@@glm@@QEAA@XZ			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
PUBLIC	?length@?$tvec3@G$0A@@glm@@SAHXZ		; glm::tvec3<unsigned short,0>::length
PUBLIC	??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z		; glm::tvec3<unsigned short,0>::operator[]
PUBLIC	??0?$tvec3@G$0A@@glm@@QEAA@XZ			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
PUBLIC	?length@?$tvec4@G$0A@@glm@@SAHXZ		; glm::tvec4<unsigned short,0>::length
PUBLIC	??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z		; glm::tvec4<unsigned short,0>::operator[]
PUBLIC	??0?$tvec4@G$0A@@glm@@QEAA@XZ			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
PUBLIC	?length@?$tvec3@I$0A@@glm@@SAHXZ		; glm::tvec3<unsigned int,0>::length
PUBLIC	??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec3<unsigned int,0>::operator[]
PUBLIC	??0?$tvec3@I$0A@@glm@@QEAA@XZ			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	?length@?$tvec4@I$0A@@glm@@SAHXZ		; glm::tvec4<unsigned int,0>::length
PUBLIC	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec4<unsigned int,0>::operator[]
PUBLIC	??0?$tvec4@I$0A@@glm@@QEAA@XZ			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	?length@?$tvec2@_K$0A@@glm@@SAHXZ		; glm::tvec2<unsigned __int64,0>::length
PUBLIC	??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z		; glm::tvec2<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec2@_K$0A@@glm@@QEAA@XZ			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	?length@?$tvec3@_K$0A@@glm@@SAHXZ		; glm::tvec3<unsigned __int64,0>::length
PUBLIC	??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z		; glm::tvec3<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec3@_K$0A@@glm@@QEAA@XZ			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	?length@?$tvec4@_K$0A@@glm@@SAHXZ		; glm::tvec4<unsigned __int64,0>::length
PUBLIC	??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z		; glm::tvec4<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec4@_K$0A@@glm@@QEAA@XZ			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??$?0$0A@@?$tvec2@E$01@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2><0>
PUBLIC	??$?0$0A@@?$tvec2@E$00@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1><0>
PUBLIC	??$?0$01@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$01@1@@Z ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><2>
PUBLIC	??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec2>
PUBLIC	??$?0$00@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$00@1@@Z ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><1>
PUBLIC	??$?0$0A@@?$tvec3@E$01@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z ; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2><0>
PUBLIC	??$?0$0A@@?$tvec3@E$00@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z ; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1><0>
PUBLIC	??$?0$01@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$01@1@@Z ; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><2>
PUBLIC	??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec3>
PUBLIC	??$?0$00@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$00@1@@Z ; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><1>
PUBLIC	??$?0$0A@@?$tvec4@E$01@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z ; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2><0>
PUBLIC	??$?0$0A@@?$tvec4@E$00@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z ; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1><0>
PUBLIC	??$?0$01@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$01@1@@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><2>
PUBLIC	??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec4>
PUBLIC	??$?0$00@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$00@1@@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><1>
PUBLIC	??$?0$0A@@?$tvec2@G$01@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2><0>
PUBLIC	??$?0$0A@@?$tvec2@G$00@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1><0>
PUBLIC	??$?0$01@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$01@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><2>
PUBLIC	??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec2>
PUBLIC	??$?0$00@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$00@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><1>
PUBLIC	??$?0$0A@@?$tvec3@G$01@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z ; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2><0>
PUBLIC	??$?0$0A@@?$tvec3@G$00@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z ; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1><0>
PUBLIC	??$?0$01@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$01@1@@Z ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><2>
PUBLIC	??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec3>
PUBLIC	??$?0$00@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$00@1@@Z ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><1>
PUBLIC	??$?0$0A@@?$tvec4@G$01@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2><0>
PUBLIC	??$?0$0A@@?$tvec4@G$00@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1><0>
PUBLIC	??$?0$01@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$01@1@@Z ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><2>
PUBLIC	??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec4>
PUBLIC	??$?0$00@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$00@1@@Z ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><1>
PUBLIC	??$?0$0A@@?$tvec2@I$01@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2><0>
PUBLIC	??$?0$0A@@?$tvec2@I$00@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1><0>
PUBLIC	??$?0$01@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$01@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><2>
PUBLIC	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
PUBLIC	??$?0$00@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$00@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><1>
PUBLIC	??$?0$0A@@?$tvec3@I$01@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2><0>
PUBLIC	??$?0$0A@@?$tvec3@I$00@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1><0>
PUBLIC	??$?0$01@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$01@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><2>
PUBLIC	??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec3>
PUBLIC	??$?0$00@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$00@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><1>
PUBLIC	??$?0$0A@@?$tvec4@I$01@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2><0>
PUBLIC	??$?0$0A@@?$tvec4@I$00@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1><0>
PUBLIC	??$?0$01@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$01@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><2>
PUBLIC	??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec4>
PUBLIC	??$?0$00@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$00@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><1>
PUBLIC	??$?0$0A@@?$tvec2@_K$01@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2><0>
PUBLIC	??$?0$0A@@?$tvec2@_K$00@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1><0>
PUBLIC	??$?0$01@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$01@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><2>
PUBLIC	??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec2>
PUBLIC	??$?0$00@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$00@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><1>
PUBLIC	??$?0$0A@@?$tvec3@_K$01@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2><0>
PUBLIC	??$?0$0A@@?$tvec3@_K$00@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1><0>
PUBLIC	??$?0$01@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$01@1@@Z ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><2>
PUBLIC	??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec3>
PUBLIC	??$?0$00@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$00@1@@Z ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><1>
PUBLIC	??$?0$0A@@?$tvec4@_K$01@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z ; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2><0>
PUBLIC	??$?0$0A@@?$tvec4@_K$00@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z ; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1><0>
PUBLIC	??$?0$01@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$01@1@@Z ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><2>
PUBLIC	??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec4>
PUBLIC	??$?0$00@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$00@1@@Z ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><1>
PUBLIC	?length@?$tquat@M$0A@@glm@@SAHXZ		; glm::tquat<float,0>::length
PUBLIC	??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z		; glm::tquat<float,0>::operator[]
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@XZ			; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??$?0$0A@@?$tquat@M$01@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z ; glm::tquat<float,2>::tquat<float,2><0>
PUBLIC	??$?0$0A@@?$tquat@M$00@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z ; glm::tquat<float,1>::tquat<float,1><0>
PUBLIC	??$?0$01@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$01@1@@Z ; glm::tquat<float,0>::tquat<float,0><2>
PUBLIC	??$?0$00@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$00@1@@Z ; glm::tquat<float,0>::tquat<float,0><1>
PUBLIC	??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z ; glm::equal<float,0>
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$?0$00@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec4<float,2>::tvec4<float,2><1>
PUBLIC	??$?0$01@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec4<float,1>::tvec4<float,1><2>
PUBLIC	??$?0M$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><float,1>
PUBLIC	??$?0H$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z ; glm::tvec3<int,0>::tvec3<int,0><int,2>
PUBLIC	??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z ; glm::equal<float,1,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$00@glm@@SAHXZ		; glm::tvec4<bool,1>::length
PUBLIC	??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,1>::operator[]
PUBLIC	??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,1>::operator[]
PUBLIC	??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,1>::tvec4<bool,1>
PUBLIC	??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z ; glm::all<1,glm::tvec4>
PUBLIC	??0?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec3<unsigned char,0> >::allocator<glm::tvec3<unsigned char,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAXQEAU?$tvec3@E$0A@@glm@@_K@Z ; std::allocator<glm::tvec3<unsigned char,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@_K@Z ; std::allocator<glm::tvec3<unsigned char,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec3<unsigned char,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
PUBLIC	??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
PUBLIC	?size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::size
PUBLIC	?max_size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::max_size
PUBLIC	??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::operator[]
PUBLIC	?_Buy_raw@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Xlength
PUBLIC	?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Get_first
PUBLIC	??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><int,int,int>
PUBLIC	??$?HE$0A@@glm@@YA?AU?$tvec3@E$0A@@0@AEBU10@0@Z	; glm::operator+<unsigned char,0>
PUBLIC	main
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0U?$tvec3@E$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec3<unsigned char,0> >
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1><std::allocator<glm::tvec3<unsigned char,0> > const &>
PUBLIC	??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@E$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec3<unsigned char,0> > >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@0@AEBV10@@Z ; std::forward<std::allocator<glm::tvec3<unsigned char,0> > const &>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Tidy_guard@V?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > > >::~_Tidy_guard<std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > > >
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec3<unsigned char,0> > >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$02@std@@YA_K_K@Z		; std::_Get_size_of_n<3>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@E$0A@@glm@@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Emplace_back<>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Unfancy@U?$tvec3@E$0A@@glm@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec3<unsigned char,0> >
PUBLIC	??$construct@U?$tvec3@E$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@QEAU?$tvec3@E$0A@@glm@@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec3<unsigned char,0> > >::construct<glm::tvec3<unsigned char,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec3@E$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@E$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec3<unsigned char,0> *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LC@KEKMINFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@G$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@G$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@G$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec2@G$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@F$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@F$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@F$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec2@F$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@E$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@E$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@E$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$tvec4@E$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@C$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@C$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@C$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$tvec4@C$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_scalar_size@@YAHXZ DD imagerel ?test_scalar_size@@YAHXZ
	DD	imagerel ?test_scalar_size@@YAHXZ+262
	DD	imagerel $unwind$?test_scalar_size@@YAHXZ
$pdata$?test_fvec_size@@YAHXZ DD imagerel ?test_fvec_size@@YAHXZ
	DD	imagerel ?test_fvec_size@@YAHXZ+166
	DD	imagerel $unwind$?test_fvec_size@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$tvec2@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$00@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$00@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$00@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$00@glm@@QEBAAEBMH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_fvec_precision@@YAHXZ DD imagerel ?test_fvec_precision@@YAHXZ
	DD	imagerel ?test_fvec_precision@@YAHXZ+1227
	DD	imagerel $unwind$?test_fvec_precision@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0$01@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+270
	DD	imagerel $unwind$??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0$00@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0$01@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+282
	DD	imagerel $unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0$00@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$01@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$00@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_dvec_precision@@YAHXZ DD imagerel ?test_dvec_precision@@YAHXZ
	DD	imagerel ?test_dvec_precision@@YAHXZ+1259
	DD	imagerel $unwind$?test_dvec_precision@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0$01@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0$00@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0$01@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+283
	DD	imagerel $unwind$??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0$00@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$01@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+269
	DD	imagerel $unwind$??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$00@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ivec_size@@YAHXZ DD imagerel ?test_ivec_size@@YAHXZ
	DD	imagerel ?test_ivec_size@@YAHXZ+310
	DD	imagerel $unwind$?test_ivec_size@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@C$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@C$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@C$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$??0?$tvec2@C$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@C$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@C$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@C$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??0?$tvec3@C$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@F$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@F$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@F$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec3@F$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@F$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@F$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@F$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec4@F$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@H$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??0?$tvec2@H$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@H$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$tvec3@H$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_J$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_J$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_J$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$tvec2@_J$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_J$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_J$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_J$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@_J$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_J$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_J$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_J$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@_J$0A@@glm@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ivec_precision@@YAHXZ DD imagerel ?test_ivec_precision@@YAHXZ
	DD	imagerel ?test_ivec_precision@@YAHXZ+4769
	DD	imagerel $unwind$?test_ivec_precision@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@C$01@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@C$01@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@C$00@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@C$00@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0$01@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0$00@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@C$01@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@C$01@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@C$00@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@C$00@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0$01@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+279
	DD	imagerel $unwind$??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0$00@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@C$01@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@C$01@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@C$00@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@C$00@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0$01@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0$00@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@F$01@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@F$01@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@F$00@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@F$00@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$01@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$00@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@F$01@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@F$01@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@F$00@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@F$00@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$01@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+279
	DD	imagerel $unwind$??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$00@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@F$01@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@F$01@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@F$00@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@F$00@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$01@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$00@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@H$01@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@H$01@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@H$00@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@H$00@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$01@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$00@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@H$01@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@H$01@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@H$00@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@H$00@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+277
	DD	imagerel $unwind$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0$00@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@H$01@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@H$01@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@H$00@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@H$00@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0$01@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@_J$01@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@_J$01@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@_J$00@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@_J$00@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$01@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$00@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@_J$01@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@_J$01@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@_J$00@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@_J$00@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$01@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+279
	DD	imagerel $unwind$??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$00@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@_J$01@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@_J$01@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@_J$00@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@_J$00@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$01@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$00@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$00@1@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_uvec_size@@YAHXZ DD imagerel ?test_uvec_size@@YAHXZ
	DD	imagerel ?test_uvec_size@@YAHXZ+310
	DD	imagerel $unwind$?test_uvec_size@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@E$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@E$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@E$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$??0?$tvec2@E$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@E$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@E$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@E$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??0?$tvec3@E$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@G$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@G$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@G$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec3@G$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@G$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@G$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@G$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec4@G$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@I$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$tvec3@I$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@I$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0?$tvec4@I$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_K$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_K$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_K$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$tvec2@_K$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_K$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_K$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_K$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@_K$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_K$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_K$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_K$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@_K$0A@@glm@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_uvec_precision@@YAHXZ DD imagerel ?test_uvec_precision@@YAHXZ
	DD	imagerel ?test_uvec_precision@@YAHXZ+4769
	DD	imagerel $unwind$?test_uvec_precision@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@E$01@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@E$01@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@E$00@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@E$00@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0$01@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0$00@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@E$01@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@E$01@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@E$00@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@E$00@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0$01@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+279
	DD	imagerel $unwind$??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0$00@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@E$01@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@E$01@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@E$00@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@E$00@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0$01@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0$00@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@G$01@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@G$01@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@G$00@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@G$00@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$01@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$00@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@G$01@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@G$01@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@G$00@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@G$00@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$01@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+279
	DD	imagerel $unwind$??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$00@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@G$01@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@G$01@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@G$00@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@G$00@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$01@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$00@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@I$01@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@I$01@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@I$00@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@I$00@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$01@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$00@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@I$01@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@I$01@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@I$00@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@I$00@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0$01@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+277
	DD	imagerel $unwind$??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0$00@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@I$01@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@I$01@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@I$00@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@I$00@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0$01@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0$00@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@_K$01@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@_K$01@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec2@_K$00@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$0A@@?$tvec2@_K$00@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$01@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0$00@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@_K$01@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@_K$01@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec3@_K$00@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$0A@@?$tvec3@_K$00@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$01@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+279
	DD	imagerel $unwind$??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0$00@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@_K$01@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@_K$01@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tvec4@_K$00@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$0A@@?$tvec4@_K$00@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$01@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0$00@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$00@1@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_fmat_size@@YAHXZ DD imagerel ?test_fmat_size@@YAHXZ
	DD	imagerel ?test_fmat_size@@YAHXZ+886
	DD	imagerel $unwind$?test_fmat_size@@YAHXZ
$pdata$?test_dmat_size@@YAHXZ DD imagerel ?test_dmat_size@@YAHXZ
	DD	imagerel ?test_dmat_size@@YAHXZ+310
	DD	imagerel $unwind$?test_dmat_size@@YAHXZ
$pdata$?test_quat_size@@YAHXZ DD imagerel ?test_quat_size@@YAHXZ
	DD	imagerel ?test_quat_size@@YAHXZ+70
	DD	imagerel $unwind$?test_quat_size@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tquat@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tquat@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_quat_precision@@YAHXZ DD imagerel ?test_quat_precision@@YAHXZ
	DD	imagerel ?test_quat_precision@@YAHXZ+457
	DD	imagerel $unwind$?test_quat_precision@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tquat@M$01@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$0A@@?$tquat@M$01@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$0A@@?$tquat@M$00@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$0A@@?$tquat@M$00@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$01@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$00@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z DD imagerel $LN8
	DD	imagerel $LN8+218
	DD	imagerel $unwind$??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_fvec_conversion@@YAHXZ DD imagerel ?test_fvec_conversion@@YAHXZ
	DD	imagerel ?test_fvec_conversion@@YAHXZ+349
	DD	imagerel $unwind$?test_fvec_conversion@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$00@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$00@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$01@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?0$01@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0M$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0H$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$00@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$00@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_openmp@@YAHXZ DD imagerel ?test_openmp@@YAHXZ
	DD	imagerel ?test_openmp@@YAHXZ+634
	DD	imagerel $unwind$?test_openmp@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_openmp@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_openmp@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_openmp@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_openmp@@YAHXZ@4HA
$pdata$?dtor$1@?0??test_openmp@@YAHXZ@4HA DD imagerel ?dtor$1@?0??test_openmp@@YAHXZ@4HA
	DD	imagerel ?dtor$1@?0??test_openmp@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$1@?0??test_openmp@@YAHXZ@4HA
$pdata$?dtor$2@?0??test_openmp@@YAHXZ@4HA DD imagerel ?dtor$2@?0??test_openmp@@YAHXZ@4HA
	DD	imagerel ?dtor$2@?0??test_openmp@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$2@?0??test_openmp@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAXQEAU?$tvec3@E$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAXQEAU?$tvec3@E$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+203
	DD	imagerel $unwind$??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_raw@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+152
	DD	imagerel $unwind$?_Buy_raw@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_nonzero@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+58
	DD	imagerel $unwind$?_Buy_nonzero@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+216
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HE$0A@@glm@@YA?AU?$tvec3@E$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$??$?HE$0A@@glm@@YA?AU?$tvec3@E$0A@@0@AEBU10@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+262
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec3@E$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec3@E$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z DD imagerel $LN6
	DD	imagerel $LN6+274
	DD	imagerel $unwind$??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA DD imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA DD imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
	DD	imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@E$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@E$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tidy_guard@V?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$??1?$_Tidy_guard@V?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$02@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$02@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@E$0A@@glm@@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@E$0A@@glm@@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec3@E$0A@@glm@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec3@E$0A@@glm@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec3@E$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@QEAU?$tvec3@E$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$construct@U?$tvec3@E$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@QEAU?$tvec3@E$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec3@E$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@E$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec3@E$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@E$0A@@glm@@@Z
pdata	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1LC@KEKMINFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LC@KEKMINFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'g', 00H, 't', 00H
	DB	'c', 00H, '\', 00H, 'q', 00H, 'u', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'n', 00H, 'i', 00H, 'o', 00H, 'n', 00H, '.', 00H
	DB	'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec3@E$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@E$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec3@E$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@QEAU?$tvec3@E$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec3@E$0A@@glm@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@E$0A@@glm@@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$02@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z DB 06H
	DB	00H
	DB	00H
	DB	'~'
	DB	02H
	DB	'd'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z DD 022a11H
	DD	070109214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec3<unsigned char,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z$rtcVarDesc DD 028H ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec3<unsigned char,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec3<unsigned char,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tidy_guard@V?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@0@AEBV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@E$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	0f0H
	DB	02H
	DB	'`'
	DB	04H
	DB	'`'
	DB	02H
	DB	'0'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z
	DD	imagerel $ip2state$??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z DD 032b11H
	DD	0140112H
	DD	0700bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$0 DB 024H ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>
	DB	053H
	DB	032H
	DB	00H
??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$1 DB 05fH ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$2 DB 05fH ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>
	DB	047H
	DB	075H
	DB	061H
	DB	072H
	DB	064H
	DB	00H
	ORG $+13
??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcVarDesc DD 088H ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>
	DD	08H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$0
	ORG $+144
??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcFrameData DD 03H ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>
	DD	00H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z DD 021301H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec3@E$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HE$0A@@glm@@YA?AU?$tvec3@E$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_nonzero@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_raw@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAXQEAU?$tvec3@E$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$2@?0??test_openmp@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??test_openmp@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_openmp@@YAHXZ@4HA
	DD	00H
	DD	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$00@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,1,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,1,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,1,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0>
	DD	04H
	DQ	FLAT:??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0>
	DD	00H
	DQ	FLAT:??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tquat@M$00@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tquat@M$01@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tquat@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned __int64,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned __int64,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned __int64,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@_K$00@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@_K$01@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned __int64,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned __int64,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned __int64,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@_K$00@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@_K$01@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned __int64,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned __int64,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned __int64,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@_K$00@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@_K$01@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@I$00@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@I$01@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned int,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned int,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned int,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@I$00@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@I$01@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@I$00@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@I$01@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned short,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned short,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned short,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@G$00@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@G$01@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned short,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned short,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned short,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@G$00@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@G$01@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned short,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned short,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned short,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@G$00@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@G$01@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned char,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned char,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned char,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@E$00@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@E$01@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned char,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned char,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned char,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@E$00@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@E$01@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned char,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned char,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned char,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@E$00@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@E$01@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_K$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_K$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_K$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_K$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_K$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_K$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@I$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@I$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@G$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@G$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@G$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@G$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@E$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@E$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@E$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@E$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<__int64,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<__int64,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<__int64,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@_J$00@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@_J$01@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<__int64,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<__int64,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<__int64,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@_J$00@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@_J$01@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<__int64,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<__int64,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<__int64,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@_J$00@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@_J$01@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@H$00@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@H$01@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@H$00@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@H$01@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@H$00@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@H$01@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<short,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<short,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<short,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@F$00@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@F$01@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<short,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<short,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<short,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@F$00@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@F$01@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<short,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<short,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<short,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@F$00@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@F$01@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<signed char,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<signed char,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<signed char,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@C$00@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@C$01@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<signed char,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<signed char,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<signed char,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@C$00@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@C$01@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<signed char,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<signed char,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<signed char,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@C$00@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@C$01@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_J$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_J$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_J$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_J$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_J$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_J$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@H$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@H$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@F$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@F$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@F$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@F$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@C$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@C$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@C$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@C$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<double,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<double,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<double,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<double,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<double,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<double,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<double,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<double,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<double,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$00@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$00@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$01@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$01@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$0A@@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
CONST	SEGMENT
?test_fvec_precision@@YAHXZ$rtcName$0 DB 076H		; test_fvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_fvec_precision@@YAHXZ$rtcName$1 DB 076H		; test_fvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_fvec_precision@@YAHXZ$rtcName$2 DB 076H		; test_fvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_fvec_precision@@YAHXZ$rtcName$3 DB 076H		; test_fvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_fvec_precision@@YAHXZ$rtcName$4 DB 076H		; test_fvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_fvec_precision@@YAHXZ$rtcName$5 DB 076H		; test_fvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_fvec_precision@@YAHXZ$rtcName$6 DB 076H		; test_fvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_fvec_precision@@YAHXZ$rtcName$7 DB 076H		; test_fvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_fvec_precision@@YAHXZ$rtcName$8 DB 076H		; test_fvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_fvec_precision@@YAHXZ$rtcName$9 DB 076H		; test_fvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_fvec_precision@@YAHXZ$rtcName$10 DB 076H		; test_fvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_fvec_precision@@YAHXZ$rtcName$11 DB 076H		; test_fvec_precision
	DB	034H
	DB	00H
	ORG $+5
?test_fvec_precision@@YAHXZ$rtcFrameData DD 0cH		; test_fvec_precision
	DD	00H
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcVarDesc
?test_dvec_precision@@YAHXZ$rtcName$0 DB 076H		; test_dvec_precision
	DB	031H
	DB	00H
	ORG $+5
?test_fvec_precision@@YAHXZ$rtcVarDesc DD 0208H		; test_fvec_precision
	DD	010H
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$11
	DD	01d8H
	DD	010H
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$10
	DD	01a8H
	DD	010H
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$9
	DD	0178H
	DD	010H
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$8
	DD	0148H
	DD	0cH
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$7
	DD	0118H
	DD	0cH
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$6
	DD	0e8H
	DD	0cH
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$5
	DD	0b8H
	DD	0cH
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$4
	DD	098H
	DD	08H
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$3
	DD	078H
	DD	08H
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?test_fvec_precision@@YAHXZ$rtcName$0
	ORG $+576
?test_dvec_precision@@YAHXZ$rtcName$1 DB 076H		; test_dvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_dvec_precision@@YAHXZ$rtcName$2 DB 076H		; test_dvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_dvec_precision@@YAHXZ$rtcName$3 DB 076H		; test_dvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_dvec_precision@@YAHXZ$rtcName$4 DB 076H		; test_dvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_dvec_precision@@YAHXZ$rtcName$5 DB 076H		; test_dvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_dvec_precision@@YAHXZ$rtcName$6 DB 076H		; test_dvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_dvec_precision@@YAHXZ$rtcName$7 DB 076H		; test_dvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_dvec_precision@@YAHXZ$rtcName$8 DB 076H		; test_dvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_dvec_precision@@YAHXZ$rtcName$9 DB 076H		; test_dvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_dvec_precision@@YAHXZ$rtcName$10 DB 076H		; test_dvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_dvec_precision@@YAHXZ$rtcName$11 DB 076H		; test_dvec_precision
	DB	034H
	DB	00H
	ORG $+5
?test_dvec_precision@@YAHXZ$rtcVarDesc DD 0278H		; test_dvec_precision
	DD	020H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$11
	DD	0238H
	DD	020H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$10
	DD	01f8H
	DD	020H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$9
	DD	01b8H
	DD	020H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$8
	DD	0188H
	DD	018H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$7
	DD	0158H
	DD	018H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$6
	DD	0128H
	DD	018H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$5
	DD	0f8H
	DD	018H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$4
	DD	0c8H
	DD	010H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$3
	DD	098H
	DD	010H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$2
	DD	068H
	DD	010H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcName$0
	ORG $+576
?test_dvec_precision@@YAHXZ$rtcFrameData DD 0cH		; test_dvec_precision
	DD	00H
	DQ	FLAT:?test_dvec_precision@@YAHXZ$rtcVarDesc
?test_ivec_precision@@YAHXZ$rtcName$0 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$1 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$2 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$3 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$4 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$5 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$6 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$7 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$8 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$9 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$10 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$11 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$12 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$13 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$14 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$15 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$16 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$17 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$18 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$19 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$20 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$21 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$22 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$23 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$24 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$25 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$26 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$27 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$28 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$29 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$30 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$31 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$32 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$33 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$34 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$35 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$36 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$37 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$38 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$39 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$40 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$41 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$42 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$43 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$44 DB 076H		; test_ivec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$45 DB 076H		; test_ivec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$46 DB 076H		; test_ivec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcName$47 DB 076H		; test_ivec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_ivec_precision@@YAHXZ$rtcVarDesc DD 0778H		; test_ivec_precision
	DD	020H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$47
	DD	0738H
	DD	020H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$46
	DD	06f8H
	DD	020H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$45
	DD	06b8H
	DD	020H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$44
	DD	0688H
	DD	018H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$43
	DD	0658H
	DD	018H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$42
	DD	0628H
	DD	018H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$41
	DD	05f8H
	DD	018H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$40
	DD	05c8H
	DD	010H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$39
	DD	0598H
	DD	010H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$38
	DD	0568H
	DD	010H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$37
	DD	0538H
	DD	010H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$36
	DD	0508H
	DD	010H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$35
	DD	04d8H
	DD	010H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$34
	DD	04a8H
	DD	010H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$33
	DD	0478H
	DD	010H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$32
	DD	0448H
	DD	0cH
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$31
	DD	0418H
	DD	0cH
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$30
	DD	03e8H
	DD	0cH
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$29
	DD	03b8H
	DD	0cH
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$28
	DD	0398H
	DD	08H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$27
	DD	0378H
	DD	08H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$26
	DD	0358H
	DD	08H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$25
	DD	0338H
	DD	08H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$24
	DD	0318H
	DD	08H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$23
	DD	02f8H
	DD	08H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$22
	DD	02d8H
	DD	08H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$21
	DD	02b8H
	DD	08H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$20
	DD	0294H
	DD	06H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$19
	DD	0274H
	DD	06H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$18
	DD	0254H
	DD	06H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$17
	DD	0234H
	DD	06H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$16
	DD	0214H
	DD	04H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$15
	DD	01f4H
	DD	04H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$14
	DD	01d4H
	DD	04H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$13
	DD	01b4H
	DD	04H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$12
	DD	0194H
	DD	04H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$11
	DD	0174H
	DD	04H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$10
	DD	0154H
	DD	04H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$9
	DD	0134H
	DD	04H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$8
	DD	0114H
	DD	03H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$7
	DD	0f4H
	DD	03H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$6
	DD	0d4H
	DD	03H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$5
	DD	0b4H
	DD	03H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$4
	DD	094H
	DD	02H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$3
	DD	074H
	DD	02H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$2
	DD	054H
	DD	02H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$1
	DD	034H
	DD	02H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcName$0
	ORG $+2304
?test_ivec_precision@@YAHXZ$rtcFrameData DD 030H	; test_ivec_precision
	DD	00H
	DQ	FLAT:?test_ivec_precision@@YAHXZ$rtcVarDesc
?test_uvec_precision@@YAHXZ$rtcName$0 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$1 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$2 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$3 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$4 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$5 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$6 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$7 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$8 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$9 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$10 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$11 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$12 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$13 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$14 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$15 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$16 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$17 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$18 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$19 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$20 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$21 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$22 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$23 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$24 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$25 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$26 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$27 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$28 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$29 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$30 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$31 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$32 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$33 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$34 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$35 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$36 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$37 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$38 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$39 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$40 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$41 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$42 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$43 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$44 DB 076H		; test_uvec_precision
	DB	031H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$45 DB 076H		; test_uvec_precision
	DB	032H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$46 DB 076H		; test_uvec_precision
	DB	033H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcName$47 DB 076H		; test_uvec_precision
	DB	034H
	DB	00H
	ORG $+1
?test_uvec_precision@@YAHXZ$rtcVarDesc DD 0778H		; test_uvec_precision
	DD	020H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$47
	DD	0738H
	DD	020H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$46
	DD	06f8H
	DD	020H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$45
	DD	06b8H
	DD	020H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$44
	DD	0688H
	DD	018H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$43
	DD	0658H
	DD	018H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$42
	DD	0628H
	DD	018H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$41
	DD	05f8H
	DD	018H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$40
	DD	05c8H
	DD	010H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$39
	DD	0598H
	DD	010H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$38
	DD	0568H
	DD	010H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$37
	DD	0538H
	DD	010H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$36
	DD	0508H
	DD	010H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$35
	DD	04d8H
	DD	010H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$34
	DD	04a8H
	DD	010H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$33
	DD	0478H
	DD	010H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$32
	DD	0448H
	DD	0cH
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$31
	DD	0418H
	DD	0cH
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$30
	DD	03e8H
	DD	0cH
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$29
	DD	03b8H
	DD	0cH
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$28
	DD	0398H
	DD	08H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$27
	DD	0378H
	DD	08H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$26
	DD	0358H
	DD	08H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$25
	DD	0338H
	DD	08H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$24
	DD	0318H
	DD	08H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$23
	DD	02f8H
	DD	08H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$22
	DD	02d8H
	DD	08H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$21
	DD	02b8H
	DD	08H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$20
	DD	0294H
	DD	06H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$19
	DD	0274H
	DD	06H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$18
	DD	0254H
	DD	06H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$17
	DD	0234H
	DD	06H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$16
	DD	0214H
	DD	04H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$15
	DD	01f4H
	DD	04H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$14
	DD	01d4H
	DD	04H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$13
	DD	01b4H
	DD	04H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$12
	DD	0194H
	DD	04H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$11
	DD	0174H
	DD	04H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$10
	DD	0154H
	DD	04H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$9
	DD	0134H
	DD	04H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$8
	DD	0114H
	DD	03H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$7
	DD	0f4H
	DD	03H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$6
	DD	0d4H
	DD	03H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$5
	DD	0b4H
	DD	03H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$4
	DD	094H
	DD	02H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$3
	DD	074H
	DD	02H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$2
	DD	054H
	DD	02H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$1
	DD	034H
	DD	02H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcName$0
	ORG $+2304
?test_uvec_precision@@YAHXZ$rtcFrameData DD 030H	; test_uvec_precision
	DD	00H
	DQ	FLAT:?test_uvec_precision@@YAHXZ$rtcVarDesc
?test_quat_precision@@YAHXZ$rtcName$0 DB 071H		; test_quat_precision
	DB	031H
	DB	00H
	ORG $+1
?test_quat_precision@@YAHXZ$rtcName$1 DB 071H		; test_quat_precision
	DB	041H
	DB	00H
	ORG $+1
?test_quat_precision@@YAHXZ$rtcName$2 DB 071H		; test_quat_precision
	DB	042H
	DB	00H
	ORG $+1
?test_quat_precision@@YAHXZ$rtcName$3 DB 071H		; test_quat_precision
	DB	043H
	DB	00H
	ORG $+1
?test_quat_precision@@YAHXZ$rtcName$4 DB 071H		; test_quat_precision
	DB	032H
	DB	00H
	ORG $+1
?test_quat_precision@@YAHXZ$rtcName$5 DB 071H		; test_quat_precision
	DB	033H
	DB	00H
	ORG $+1
?test_quat_precision@@YAHXZ$rtcName$6 DB 071H		; test_quat_precision
	DB	034H
	DB	00H
	ORG $+5
?test_quat_precision@@YAHXZ$rtcVarDesc DD 0158H		; test_quat_precision
	DD	010H
	DQ	FLAT:?test_quat_precision@@YAHXZ$rtcName$6
	DD	0128H
	DD	010H
	DQ	FLAT:?test_quat_precision@@YAHXZ$rtcName$5
	DD	0f8H
	DD	010H
	DQ	FLAT:?test_quat_precision@@YAHXZ$rtcName$4
	DD	0c8H
	DD	010H
	DQ	FLAT:?test_quat_precision@@YAHXZ$rtcName$3
	DD	098H
	DD	010H
	DQ	FLAT:?test_quat_precision@@YAHXZ$rtcName$2
	DD	068H
	DD	010H
	DQ	FLAT:?test_quat_precision@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test_quat_precision@@YAHXZ$rtcName$0
	ORG $+336
?test_quat_precision@@YAHXZ$rtcFrameData DD 07H		; test_quat_precision
	DD	00H
	DQ	FLAT:?test_quat_precision@@YAHXZ$rtcVarDesc
?test_fvec_conversion@@YAHXZ$rtcName$0 DB 061H		; test_fvec_conversion
	DB	00H
	ORG $+2
?test_fvec_conversion@@YAHXZ$rtcName$1 DB 062H		; test_fvec_conversion
	DB	00H
	ORG $+2
?test_fvec_conversion@@YAHXZ$rtcName$2 DB 063H		; test_fvec_conversion
	DB	00H
	ORG $+2
?test_fvec_conversion@@YAHXZ$rtcName$3 DB 064H		; test_fvec_conversion
	DB	00H
	ORG $+2
?test_fvec_conversion@@YAHXZ$rtcName$4 DB 065H		; test_fvec_conversion
	DB	00H
	ORG $+2
?test_fvec_conversion@@YAHXZ$rtcName$5 DB 066H		; test_fvec_conversion
	DB	00H
	ORG $+2
?test_fvec_conversion@@YAHXZ$rtcFrameData DD 06H	; test_fvec_conversion
	DD	00H
	DQ	FLAT:?test_fvec_conversion@@YAHXZ$rtcVarDesc
?test_openmp@@YAHXZ$rtcName$0 DB 056H			; test_openmp
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	041H
	DB	00H
?test_fvec_conversion@@YAHXZ$rtcVarDesc DD 0138H	; test_fvec_conversion
	DD	0cH
	DQ	FLAT:?test_fvec_conversion@@YAHXZ$rtcName$5
	DD	0108H
	DD	010H
	DQ	FLAT:?test_fvec_conversion@@YAHXZ$rtcName$4
	DD	0d8H
	DD	010H
	DQ	FLAT:?test_fvec_conversion@@YAHXZ$rtcName$3
	DD	0a8H
	DD	010H
	DQ	FLAT:?test_fvec_conversion@@YAHXZ$rtcName$2
	DD	078H
	DD	010H
	DQ	FLAT:?test_fvec_conversion@@YAHXZ$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:?test_fvec_conversion@@YAHXZ$rtcName$0
	ORG $+288
?test_openmp@@YAHXZ$rtcName$1 DB 056H			; test_openmp
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	042H
	DB	00H
?test_openmp@@YAHXZ$rtcName$2 DB 056H			; test_openmp
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	043H
	DB	00H
?test_openmp@@YAHXZ$rtcVarDesc DD 0a8H			; test_openmp
	DD	020H
	DQ	FLAT:?test_openmp@@YAHXZ$rtcName$2
	DD	068H
	DD	020H
	DQ	FLAT:?test_openmp@@YAHXZ$rtcName$1
	DD	028H
	DD	020H
	DQ	FLAT:?test_openmp@@YAHXZ$rtcName$0
	ORG $+144
?test_openmp@@YAHXZ$rtcFrameData DD 03H			; test_openmp
	DD	00H
	DQ	FLAT:?test_openmp@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$00@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$00@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@N$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@N$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@N$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
xdata	SEGMENT
$unwind$?test_scalar_size@@YAHXZ DD 020601H
	DD	070021206H
$unwind$?test_fvec_size@@YAHXZ DD 020601H
	DD	070021206H
$unwind$?test_fvec_precision@@YAHXZ DD 041b01H
	DD	05d010aH
	DD	060027003H
$unwind$?test_dvec_precision@@YAHXZ DD 041b01H
	DD	07f010aH
	DD	060027003H
$unwind$?test_ivec_size@@YAHXZ DD 020601H
	DD	070021206H
$unwind$?test_ivec_precision@@YAHXZ DD 041b01H
	DD	014f010aH
	DD	060027003H
$unwind$?test_uvec_size@@YAHXZ DD 020601H
	DD	070021206H
$unwind$?test_uvec_precision@@YAHXZ DD 041b01H
	DD	014f010aH
	DD	060027003H
$unwind$?test_fmat_size@@YAHXZ DD 020601H
	DD	070021206H
$unwind$?test_dmat_size@@YAHXZ DD 020601H
	DD	070021206H
$unwind$?test_quat_size@@YAHXZ DD 020601H
	DD	070021206H
$unwind$?test_quat_precision@@YAHXZ DD 041b01H
	DD	033010aH
	DD	060027003H
$unwind$?test_fvec_conversion@@YAHXZ DD 031a01H
	DD	0320109H
	DD	07002H
$unwind$?test_openmp@@YAHXZ DD 041b11H
	DD	025010aH
	DD	060027003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_openmp@@YAHXZ
$cppxdata$?test_openmp@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_openmp@@YAHXZ
	DD	imagerel $ip2state$?test_openmp@@YAHXZ
$stateUnwindMap$?test_openmp@@YAHXZ DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_openmp@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??test_openmp@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0??test_openmp@@YAHXZ@4HA
$ip2state$?test_openmp@@YAHXZ DB 0eH
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'@'
	DB	04H
	DB	'F'
	DB	06H
	DB	0d5H, 06H
	DB	04H
	DB	01cH
	DB	02H
	DB	016H
	DB	00H
	ORG $+3
$unwind$?dtor$0@?0??test_openmp@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??test_openmp@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0??test_openmp@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@C$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@C$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@E$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@E$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@F$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@F$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@G$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@G$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec3@E$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@E$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec3@E$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@E$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec3<unsigned char,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec3@E$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@E$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec3<unsigned char,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec3@E$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@QEAU?$tvec3@E$0A@@glm@@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
??$construct@U?$tvec3@E$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@QEAU?$tvec3@E$0A@@glm@@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec3<unsigned char,0> > >::construct<glm::tvec3<unsigned char,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec3@E$0A@@glm@@@std@@YAPEAXPEAU?$tvec3@E$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec3<unsigned char,0> *>
	mov	rdx, rax
	mov	ecx, 3
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@E$0A@@glm@@QEAA@XZ		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@U?$tvec3@E$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@QEAU?$tvec3@E$0A@@glm@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec3<unsigned char,0> > >::construct<glm::tvec3<unsigned char,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec3@E$0A@@glm@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec3@E$0A@@glm@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec3<unsigned char,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec3@E$0A@@glm@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec3<unsigned char,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 130  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG82366
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG82367
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 135				; 00000087H
	lea	rdx, OFFSET FLAT:$SG82368
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG82369
	lea	rdx, OFFSET FLAT:$SG82370
	lea	rcx, OFFSET FLAT:$SG82371
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 143  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@U?$tvec3@E$0A@@glm@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec3<unsigned char,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec3@E$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@QEAU?$tvec3@E$0A@@glm@@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec3<unsigned char,0> > >::construct<glm::tvec3<unsigned char,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@E$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec3<unsigned char,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@E$0A@@glm@@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@E$0A@@glm@@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@E$0A@@glm@@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 669  :         }
; 670  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$02@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$02@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<3>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 6148914691236517205		; 5555555555555555H
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 6148914691236517205		; 5555555555555555H
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 3
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$02@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 67   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec3<unsigned char,0> > >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);
; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1843 :             return _First + _Count;
; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec3@E$0A@@glm@@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >
	npad	1

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >
	mov	rax, QWORD PTR $T4[rsp]

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec3<unsigned char,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<glm::tvec3<unsigned char,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec3<unsigned char,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<glm::tvec3<unsigned char,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tidy_guard@V?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tidy_guard<std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > > >::~_Tidy_guard<std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > > >, COMDAT

; 33   :     _CONSTEXPR20 ~_Tidy_guard() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 34   :         if (_Target) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy_guard

; 35   :             _Target->_Tidy();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Tidy
$LN2@Tidy_guard:

; 36   :         }
; 37   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Tidy_guard@V?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tidy_guard<std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > > >::~_Tidy_guard<std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1334 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1335 :         if (_Ptr) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Container_

; 1336 :             _Delete_plain_internal(_Al, _Ptr);

	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
$LN2@Container_:

; 1337 :         }
; 1338 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Al_$ = 72
_Mycont$ = 80
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1320 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 1321 :         // create a new _Container_proxy pointing at _Mycont
; 1322 :         _Ptr = _Unfancy(_Al_.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al_$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 1323 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

	mov	rcx, QWORD PTR _Mycont$[rsp]
	call	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1324 :         _Mycont._Myproxy = _Ptr;

	mov	rax, QWORD PTR _Mycont$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 1325 :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@0@AEBV10@@Z PROC ; std::forward<std::allocator<glm::tvec3<unsigned char,0> > const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@0@AEBV10@@Z ENDP ; std::forward<std::allocator<glm::tvec3<unsigned char,0> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 972  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 973  :     // deallocate a plain pointer using an allocator
; 974  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 975  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 976  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 977  :     } else {
; 978  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 979  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 980  :     }
; 981  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 256  :     }
; 257  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@E$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@E$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec3<unsigned char,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@E$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec3<unsigned char,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S2$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>, COMDAT

; 1902 :     _CONSTEXPR20 void _Construct_n(_CRT_GUARDOVERFLOW const size_type _Count, _Valty&&... _Val) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 1903 :         // Dispatches between the three sized constructions.
; 1904 :         // 1-arg -> value-construction, e.g. vector(5)
; 1905 :         // 2-arg -> fill, e.g. vector(5, "meow")
; 1906 :         // 3-arg -> sized range construction, e.g. vector{"Hello", "Fluffy", "World"}
; 1907 :         auto& _Al       = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1908 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

	mov	rdx, QWORD PTR _Al$[rsp]
	lea	rcx, QWORD PTR $S2$[rsp]
	call	??$?0U?$tvec3@E$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec3<unsigned char,0> >
	lea	rax, QWORD PTR $S2$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 1909 :         auto& _My_data  = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1910 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	r8, QWORD PTR _My_data$[rsp]
	mov	rdx, QWORD PTR _Alproxy$[rsp]
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1

; 1911 :         if (_Count != 0) {

	cmp	QWORD PTR _Count$[rsp], 0
	je	SHORT $LN2@Construct_

; 1912 :             _Buy_nonzero(_Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_nonzero@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Buy_nonzero

; 1913 :             _Tidy_guard<vector> _Guard{this};

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _Guard$6[rsp], rax

; 1914 :             if constexpr (sizeof...(_Val) == 0) {
; 1915 :                 _My_data._Mylast = _Uninitialized_value_construct_n(_My_data._Myfirst, _Count, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAPEAU?$tvec3@E$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec3<unsigned char,0> > >
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 1916 :             } else if constexpr (sizeof...(_Val) == 1) {
; 1917 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Valty..., const _Ty&>);
; 1918 :                 _My_data._Mylast = _Uninitialized_fill_n(_My_data._Myfirst, _Count, _Val..., _Al);
; 1919 :             } else if constexpr (sizeof...(_Val) == 2) {
; 1920 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);
; 1921 :             } else {
; 1922 :                 static_assert(_Always_false<_Ty>, "Should be unreachable");
; 1923 :             }
; 1924 :             _ASAN_VECTOR_CREATE;
; 1925 :             _Guard._Target = nullptr;

	mov	QWORD PTR _Guard$6[rsp], 0

; 1926 :         }

	lea	rcx, QWORD PTR _Guard$6[rsp]
	call	??1?$_Tidy_guard@V?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > > >::~_Tidy_guard<std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > > >
$LN2@Construct_:

; 1927 : 
; 1928 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 1929 :     }

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S2$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA PROC ; `std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Proxy$[rbp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA ENDP ; `std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S2$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA PROC ; `std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Guard$6[rbp]
	call	??1?$_Tidy_guard@V?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > > >::~_Tidy_guard<std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA ENDP ; `std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1><std::allocator<glm::tvec3<unsigned char,0> > const &>, COMDAT

; 1375 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR _Val1$[rsp]
	call	??$forward@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@0@AEBV10@@Z ; std::forward<std::allocator<glm::tvec3<unsigned char,0> > const &>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1><std::allocator<glm::tvec3<unsigned char,0> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 984  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 985  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 986  :     using _Ty = typename _Alloc::value_type;
; 987  :     _Ptr->~_Ty();
; 988  :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 989  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 609  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 610  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec3@E$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec3@E$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec3<unsigned char,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec3@E$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec3<unsigned char,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 873  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 874  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 875  : 	Error += test_openmp();

	call	?test_openmp@@YAHXZ			; test_openmp
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 876  : 	Error += test_scalar_size();

	call	?test_scalar_size@@YAHXZ		; test_scalar_size
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 877  : 	Error += test_fvec_size();

	call	?test_fvec_size@@YAHXZ			; test_fvec_size
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 878  : 	Error += test_fvec_precision();

	call	?test_fvec_precision@@YAHXZ		; test_fvec_precision
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 879  : 	Error += test_fvec_conversion();

	call	?test_fvec_conversion@@YAHXZ		; test_fvec_conversion
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 880  : 	Error += test_dvec_precision();

	call	?test_dvec_precision@@YAHXZ		; test_dvec_precision
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 881  : 	Error += test_ivec_size();

	call	?test_ivec_size@@YAHXZ			; test_ivec_size
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 882  : 	Error += test_ivec_precision();

	call	?test_ivec_precision@@YAHXZ		; test_ivec_precision
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 883  : 	Error += test_uvec_size();

	call	?test_uvec_size@@YAHXZ			; test_uvec_size
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 884  : 	Error += test_uvec_precision();

	call	?test_uvec_precision@@YAHXZ		; test_uvec_precision
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 885  : 	Error += test_fmat_size();

	call	?test_fmat_size@@YAHXZ			; test_fmat_size
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 886  : 	Error += test_dmat_size();

	call	?test_dmat_size@@YAHXZ			; test_dmat_size
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 887  : 	Error += test_quat_size();

	call	?test_quat_size@@YAHXZ			; test_quat_size
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 888  : 	Error += test_quat_precision();

	call	?test_quat_precision@@YAHXZ		; test_quat_precision
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 889  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 890  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?HE$0A@@glm@@YA?AU?$tvec3@E$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HE$0A@@glm@@YA?AU?$tvec3@E$0A@@0@AEBU10@0@Z PROC	; glm::operator+<unsigned char,0>, COMDAT

; 574  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 575  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	rcx, QWORD PTR v2$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	add	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	rdx, QWORD PTR v2$[rsp]
	movzx	edx, BYTE PTR [rdx+1]
	add	ecx, edx
	mov	rdx, QWORD PTR v1$[rsp]
	movzx	edx, BYTE PTR [rdx]
	mov	r8, QWORD PTR v2$[rsp]
	movzx	r8d, BYTE PTR [r8]
	add	edx, r8d
	mov	r9d, eax
	mov	r8d, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><int,int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 576  : 			v1.x + v2.x,
; 577  : 			v1.y + v2.y,
; 578  : 			v1.z + v2.z);
; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HE$0A@@glm@@YA?AU?$tvec3@E$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl

; 78   : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl

; 79   : 		z(static_cast<T>(c))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rax+2], cl

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@YAXPEAU?$tvec3@E$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec3@E$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec3<unsigned char,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	cdq
	mov	ecx, 3
	idiv	rcx
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAXQEAU?$tvec3@E$0A@@glm@@_K@Z ; std::allocator<glm::tvec3<unsigned char,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newcapacity$ = 56
?_Buy_nonzero@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Buy_nonzero, COMDAT

; 1841 :     _CONSTEXPR20 void _Buy_nonzero(const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1842 :         // allocate array with _Newcapacity elements
; 1843 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1844 :         auto& _My_data    = _Mypair._Myval2;
; 1845 :         pointer& _Myfirst = _My_data._Myfirst;
; 1846 :         pointer& _Mylast  = _My_data._Mylast;
; 1847 :         pointer& _Myend   = _My_data._Myend;
; 1848 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1849 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1850 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1851 : 
; 1852 :         if (_Newcapacity > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::max_size
	cmp	QWORD PTR _Newcapacity$[rsp], rax
	jbe	SHORT $LN2@Buy_nonzer

; 1853 :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Xlength
$LN2@Buy_nonzer:

; 1854 :         }
; 1855 : 
; 1856 :         _Buy_raw(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_raw@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Buy_raw
$LN3@Buy_nonzer:

; 1857 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Buy_nonzero@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_raw@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Myend$ = 56
_Newvec$ = 64
this$ = 96
_Newcapacity$ = 104
?_Buy_raw@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Buy_raw, COMDAT

; 1825 :     _CONSTEXPR20 void _Buy_raw(const size_type _Newcapacity) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1826 :         // allocate array with _Newcapacity elements
; 1827 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1828 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1829 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1830 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1831 : 
; 1832 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1833 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1834 : 
; 1835 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Getal
	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, rax
	call	?allocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@_K@Z ; std::allocator<glm::tvec3<unsigned char,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1836 :         _Myfirst           = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1837 :         _Mylast            = _Newvec;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1838 :         _Myend             = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 3
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1839 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Buy_raw@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	cdq
	mov	ecx, 3
	idiv	rcx
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	imul	rax, QWORD PTR _Pos$[rsp], 3
	mov	rcx, QWORD PTR _My_data$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec3<unsigned char,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	cdq
	mov	ecx, 3
	idiv	rcx

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S1$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec3@E$0A@@glm@@@2@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S1$[rsp]
	call	??$?0U?$tvec3@E$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec3<unsigned char,0> >
	lea	rax, QWORD PTR $S1$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Count$ = 72
_Al$ = 80
??0?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z PROC ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >, COMDAT

; 668  :         : _Mypair(_One_then_variadic_args_t{}, _Al) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR _Al$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0AEBV?$allocator@U?$tvec3@E$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec3@E$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec3<unsigned char,0> >,std::_Vector_val<std::_Simple_types<glm::tvec3<unsigned char,0> > >,1><std::allocator<glm::tvec3<unsigned char,0> > const &>

; 669  :         _Construct_n(_Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Construct_n@$$V@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::_Construct_n<>

; 670  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ENDP ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec3<unsigned char,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 6148914691236517205		; 5555555555555555H

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec3<unsigned char,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec3<unsigned char,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$02@std@@YA_K_K@Z	; std::_Get_size_of_n<3>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAPEAU?$tvec3@E$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec3<unsigned char,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAXQEAU?$tvec3@E$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAXQEAU?$tvec3@E$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec3<unsigned char,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 3
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAAXQEAU?$tvec3@E$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec3<unsigned char,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec3<unsigned char,0> >::allocator<glm::tvec3<unsigned char,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec3<unsigned char,0> >::allocator<glm::tvec3<unsigned char,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
VectorA$ = 40
VectorB$ = 104
VectorC$ = 168
i$6 = 216
i$7 = 224
$T8 = 228
$T9 = 229
$T10 = 230
$T11 = 231
$T12 = 234
$T13 = 237
$T14 = 240
tv93 = 248
tv134 = 256
tv140 = 264
tv150 = 272
tv148 = 280
?test_openmp@@YAHXZ PROC				; test_openmp

; 852  : {

	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 853  : 	std::vector<glm::u8vec3> VectorA(1000);

	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec3<unsigned char,0> >::allocator<glm::tvec3<unsigned char,0> >
	mov	r8, rax
	mov	edx, 1000				; 000003e8H
	lea	rcx, QWORD PTR VectorA$[rsp]
	call	??0?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	npad	1

; 854  : 	std::vector<glm::u8vec3> VectorB(1000);

	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec3<unsigned char,0> >::allocator<glm::tvec3<unsigned char,0> >
	mov	r8, rax
	mov	edx, 1000				; 000003e8H
	lea	rcx, QWORD PTR VectorB$[rsp]
	call	??0?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	npad	1

; 855  : 	std::vector<glm::u8vec3> VectorC(1000);

	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$allocator@U?$tvec3@E$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec3<unsigned char,0> >::allocator<glm::tvec3<unsigned char,0> >
	mov	r8, rax
	mov	edx, 1000				; 000003e8H
	lea	rcx, QWORD PTR VectorC$[rsp]
	call	??0?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec3@E$0A@@glm@@@1@@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	npad	1

; 856  : 
; 857  : 	for (std::size_t i = 0; i < VectorA.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_openm
$LN2@test_openm:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_openm:
	lea	rcx, QWORD PTR VectorA$[rsp]
	call	?size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_openm

; 858  : 	{
; 859  : 		VectorA[i] = glm::u8vec3(1, 1, 1);

	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><int,int,int>
	mov	QWORD PTR tv93[rsp], rax
	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR VectorA$[rsp]
	call	??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv93[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb

; 860  : 		VectorB[i] = glm::u8vec3(1, 1, 1);

	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><int,int,int>
	mov	QWORD PTR tv134[rsp], rax
	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR VectorB$[rsp]
	call	??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv134[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb

; 861  : 	}

	jmp	$LN2@test_openm
$LN3@test_openm:

; 862  : 
; 863  : 	#pragma omp parallel for default(none) shared(VectorA, VectorB, VectorC)
; 864  : 	for (int i = 0; i < VectorC.size(); ++i)

	mov	DWORD PTR i$7[rsp], 0
	jmp	SHORT $LN7@test_openm
$LN5@test_openm:
	mov	eax, DWORD PTR i$7[rsp]
	inc	eax
	mov	DWORD PTR i$7[rsp], eax
$LN7@test_openm:
	movsxd	rax, DWORD PTR i$7[rsp]
	mov	QWORD PTR tv140[rsp], rax
	lea	rcx, QWORD PTR VectorC$[rsp]
	call	?size@?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::size
	mov	rcx, QWORD PTR tv140[rsp]
	cmp	rcx, rax
	jae	$LN6@test_openm

; 865  : 	{
; 866  : 		VectorC[i] = VectorA[i] + VectorB[i];

	movsxd	rax, DWORD PTR i$7[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR VectorB$[rsp]
	call	??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::operator[]
	mov	QWORD PTR tv150[rsp], rax
	movsxd	rcx, DWORD PTR i$7[rsp]
	mov	rdx, rcx
	lea	rcx, QWORD PTR VectorA$[rsp]
	call	??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::operator[]
	mov	rcx, QWORD PTR tv150[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?HE$0A@@glm@@YA?AU?$tvec3@E$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned char,0>
	mov	QWORD PTR tv148[rsp], rax
	movsxd	rcx, DWORD PTR i$7[rsp]
	mov	rdx, rcx
	lea	rcx, QWORD PTR VectorC$[rsp]
	call	??A?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec3@E$0A@@glm@@_K@Z ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv148[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb

; 867  : 	}

	jmp	$LN5@test_openm
$LN6@test_openm:

; 868  : 
; 869  : 	return 0;

	mov	DWORD PTR $T14[rsp], 0
	lea	rcx, QWORD PTR VectorC$[rsp]
	call	??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	npad	1
	lea	rcx, QWORD PTR VectorB$[rsp]
	call	??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	npad	1
	lea	rcx, QWORD PTR VectorA$[rsp]
	call	??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	mov	eax, DWORD PTR $T14[rsp]

; 870  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_openmp@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
?test_openmp@@YAHXZ ENDP				; test_openmp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
VectorA$ = 40
VectorB$ = 104
VectorC$ = 168
i$6 = 216
i$7 = 224
$T8 = 228
$T9 = 229
$T10 = 230
$T11 = 231
$T12 = 234
$T13 = 237
$T14 = 240
tv93 = 248
tv134 = 256
tv140 = 264
tv150 = 272
tv148 = 280
?dtor$0@?0??test_openmp@@YAHXZ@4HA PROC			; `test_openmp'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR VectorA$[rbp]
	call	??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_openmp@@YAHXZ@4HA ENDP			; `test_openmp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
VectorA$ = 40
VectorB$ = 104
VectorC$ = 168
i$6 = 216
i$7 = 224
$T8 = 228
$T9 = 229
$T10 = 230
$T11 = 231
$T12 = 234
$T13 = 237
$T14 = 240
tv93 = 248
tv134 = 256
tv140 = 264
tv150 = 272
tv148 = 280
?dtor$1@?0??test_openmp@@YAHXZ@4HA PROC			; `test_openmp'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR VectorB$[rbp]
	call	??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??test_openmp@@YAHXZ@4HA ENDP			; `test_openmp'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
VectorA$ = 40
VectorB$ = 104
VectorC$ = 168
i$6 = 216
i$7 = 224
$T8 = 228
$T9 = 229
$T10 = 230
$T11 = 231
$T12 = 234
$T13 = 237
$T14 = 240
tv93 = 248
tv134 = 256
tv140 = 264
tv150 = 272
tv148 = 280
?dtor$2@?0??test_openmp@@YAHXZ@4HA PROC			; `test_openmp'::`1'::dtor$2
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR VectorC$[rbp]
	call	??1?$vector@U?$tvec3@E$0A@@glm@@V?$allocator@U?$tvec3@E$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >::~vector<glm::tvec3<unsigned char,0>,std::allocator<glm::tvec3<unsigned char,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$2@?0??test_openmp@@YAHXZ@4HA ENDP			; `test_openmp'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z PROC ; glm::all<1,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$00@glm@@SAHXZ	; glm::tvec4<bool,1>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,1>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z ENDP ; glm::all<1,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,1>::tvec4<bool,1>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,1>::tvec4<bool,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z PROC			; glm::tvec4<bool,1>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$00@glm@@SAHXZ	; glm::tvec4<bool,1>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z ENDP			; glm::tvec4<bool,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z PROC			; glm::tvec4<bool,1>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$00@glm@@SAHXZ	; glm::tvec4<bool,1>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z ENDP			; glm::tvec4<bool,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$00@glm@@SAHXZ PROC			; glm::tvec4<bool,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$00@glm@@SAHXZ ENDP			; glm::tvec4<bool,1>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z PROC ; glm::equal<float,1,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$00@glm@@SAHXZ		; glm::tvec4<float,1>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$00@glm@@SAHXZ		; glm::tvec4<float,1>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,1>::tvec4<bool,1>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@M$00@glm@@SAHXZ		; glm::tvec4<float,1>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,1>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z ENDP ; glm::equal<float,1,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0H$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0H$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z PROC ; glm::tvec3<int,0>::tvec3<int,0><int,2>, COMDAT

; 138  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 135  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 136  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 137  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx

; 138  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0H$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z ENDP ; glm::tvec3<int,0>::tvec3<int,0><int,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z PROC ; glm::tvec4<int,0>::tvec4<int,0><float,1>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+4], eax

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+8], eax

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+12], eax

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ENDP ; glm::tvec4<int,0>::tvec4<int,0><float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$01@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z PROC ; glm::tvec4<float,1>::tvec4<float,1><2>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ENDP ; glm::tvec4<float,1>::tvec4<float,1><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$00@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z PROC ; glm::tvec4<float,2>::tvec4<float,2><1>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ENDP ; glm::tvec4<float,2>::tvec4<float,2><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 48
a$9 = 72
b$10 = 120
c$11 = 168
d$12 = 216
e$13 = 264
f$14 = 312
$T15 = 340
$T16 = 356
$T17 = 372
$T18 = 384
tv131 = 388
?test_fvec_conversion@@YAHXZ PROC			; test_fvec_conversion

; 834  : {

	push	rdi
	sub	rsp, 400				; 00000190H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 835  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 836  : 
; 837  : 	{
; 838  : 		glm::highp_vec4 a = glm::vec4(1, 2, 3, 4);

	mov	DWORD PTR [rsp+32], 4
	mov	r9d, 3
	mov	r8d, 2
	mov	edx, 1
	lea	rcx, QWORD PTR a$9[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 839  : 		glm::mediump_vec4 b = glm::vec4(1, 2, 3, 4);

	mov	DWORD PTR [rsp+32], 4
	mov	r9d, 3
	mov	r8d, 2
	mov	edx, 1
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR b$10[rsp]
	call	??$?0$0A@@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<float,1>::tvec4<float,1><0>

; 840  : 		glm::lowp_vec4 c = b;

	lea	rdx, QWORD PTR b$10[rsp]
	lea	rcx, QWORD PTR c$11[rsp]
	call	??$?0$00@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec4<float,2>::tvec4<float,2><1>

; 841  : 		glm::mediump_vec4 d = c;

	lea	rdx, QWORD PTR c$11[rsp]
	lea	rcx, QWORD PTR d$12[rsp]
	call	??$?0$01@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec4<float,1>::tvec4<float,1><2>

; 842  : 		glm::lowp_ivec4 e = glm::ivec4(d);

	lea	rdx, QWORD PTR d$12[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?0M$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><float,1>
	mov	rdx, rax
	lea	rcx, QWORD PTR e$13[rsp]
	call	??$?0$0A@@?$tvec4@H$01@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z ; glm::tvec4<int,2>::tvec4<int,2><0>

; 843  : 		glm::lowp_ivec3 f = glm::ivec3(e);

	lea	rdx, QWORD PTR e$13[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?0H$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z ; glm::tvec3<int,0>::tvec3<int,0><int,2>
	mov	rdx, rax
	lea	rcx, QWORD PTR f$14[rsp]
	call	??$?0$0A@@?$tvec3@H$01@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z ; glm::tvec3<int,2>::tvec3<int,2><0>

; 844  : 
; 845  : 		Error += glm::all(glm::equal(b, d)) ? 0 : 1;

	lea	r8, QWORD PTR d$12[rsp]
	lea	rdx, QWORD PTR b$10[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$equal@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z ; glm::equal<float,1,glm::tvec4>
	mov	rcx, rax
	call	??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z ; glm::all<1,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_fvec_
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN4@test_fvec_
$LN3@test_fvec_:
	mov	DWORD PTR tv131[rsp], 1
$LN4@test_fvec_:
	mov	eax, DWORD PTR tv131[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 846  : 	}
; 847  : 
; 848  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 849  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_fvec_conversion@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 400				; 00000190H
	pop	rdi
	ret	0
?test_fvec_conversion@@YAHXZ ENDP			; test_fvec_conversion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv73 = 56
tv79 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z PROC ; glm::equal<float,0>, COMDAT

; 759  : 	{

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 760  : 		tvec4<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 761  : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tquat@M$0A@@glm@@SAHXZ	; glm::tquat<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 762  : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z	; glm::tquat<float,0>::operator[]
	mov	QWORD PTR tv73[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z	; glm::tquat<float,0>::operator[]
	mov	rcx, QWORD PTR tv73[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN6@equal
	jne	SHORT $LN6@equal
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN7@equal
$LN6@equal:
	mov	DWORD PTR tv79[rsp], 0
$LN7@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv79[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 763  : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 764  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z ENDP ; glm::equal<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?0$00@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$00@1@@Z
_TEXT	SEGMENT
this$ = 16
q$ = 24
??$?0$00@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$00@1@@Z PROC ; glm::tquat<float,0>::tquat<float,0><1>, COMDAT

; 106  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 105  : 		: x(q.x), y(q.y), z(q.z), w(q.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0

; 106  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$00@1@@Z ENDP ; glm::tquat<float,0>::tquat<float,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?0$01@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$01@1@@Z
_TEXT	SEGMENT
this$ = 16
q$ = 24
??$?0$01@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$01@1@@Z PROC ; glm::tquat<float,0>::tquat<float,0><2>, COMDAT

; 106  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 105  : 		: x(q.x), y(q.y), z(q.z), w(q.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0

; 106  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$01@1@@Z ENDP ; glm::tquat<float,0>::tquat<float,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?0$0A@@?$tquat@M$00@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
q$ = 24
??$?0$0A@@?$tquat@M$00@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z PROC ; glm::tquat<float,1>::tquat<float,1><0>, COMDAT

; 106  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 105  : 		: x(q.x), y(q.y), z(q.z), w(q.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0

; 106  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tquat@M$00@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z ENDP ; glm::tquat<float,1>::tquat<float,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?0$0A@@?$tquat@M$01@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
q$ = 24
??$?0$0A@@?$tquat@M$01@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z PROC ; glm::tquat<float,2>::tquat<float,2><0>, COMDAT

; 106  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 105  : 		: x(q.x), y(q.y), z(q.z), w(q.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0

; 106  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tquat@M$01@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z ENDP ; glm::tquat<float,2>::tquat<float,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 32
q1$10 = 56
qA$11 = 104
qB$12 = 152
qC$13 = 200
q2$14 = 248
q3$15 = 296
q4$16 = 344
$T17 = 372
$T18 = 376
$T19 = 380
tv81 = 384
tv91 = 388
tv133 = 392
?test_quat_precision@@YAHXZ PROC			; test_quat_precision

; 813  : {

	push	rsi
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 814  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 815  : 	
; 816  : 	{
; 817  : 		glm::f32quat q1;

	lea	rcx, QWORD PTR q1$10[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@XZ		; glm::tquat<float,0>::tquat<float,0>

; 818  : 		glm::lowp_f32quat qA(q1);

	lea	rdx, QWORD PTR q1$10[rsp]
	lea	rcx, QWORD PTR qA$11[rsp]
	call	??$?0$0A@@?$tquat@M$01@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z ; glm::tquat<float,2>::tquat<float,2><0>

; 819  : 		glm::mediump_f32quat qB(q1);

	lea	rdx, QWORD PTR q1$10[rsp]
	lea	rcx, QWORD PTR qB$12[rsp]
	call	??$?0$0A@@?$tquat@M$00@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z ; glm::tquat<float,1>::tquat<float,1><0>

; 820  : 		glm::highp_f32quat qC(q1);

	lea	rax, QWORD PTR qC$13[rsp]
	lea	rcx, QWORD PTR q1$10[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb

; 821  : 		glm::f32quat q2(qA);

	lea	rdx, QWORD PTR qA$11[rsp]
	lea	rcx, QWORD PTR q2$14[rsp]
	call	??$?0$01@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$01@1@@Z ; glm::tquat<float,0>::tquat<float,0><2>

; 822  : 		glm::f32quat q3(qB);

	lea	rdx, QWORD PTR qB$12[rsp]
	lea	rcx, QWORD PTR q3$15[rsp]
	call	??$?0$00@?$tquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$00@1@@Z ; glm::tquat<float,0>::tquat<float,0><1>

; 823  : 		glm::f32quat q4(qC);

	lea	rax, QWORD PTR q4$16[rsp]
	lea	rcx, QWORD PTR qC$13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb

; 824  : 		
; 825  : 		Error += glm::all(glm::equal(q1, q2)) ? 0 : 1;

	lea	r8, QWORD PTR q2$14[rsp]
	lea	rdx, QWORD PTR q1$10[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z ; glm::equal<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_quat_
	mov	DWORD PTR tv81[rsp], 0
	jmp	SHORT $LN4@test_quat_
$LN3@test_quat_:
	mov	DWORD PTR tv81[rsp], 1
$LN4@test_quat_:
	mov	eax, DWORD PTR tv81[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 826  : 		Error += glm::all(glm::equal(q1, q3)) ? 0 : 1;

	lea	r8, QWORD PTR q3$15[rsp]
	lea	rdx, QWORD PTR q1$10[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z ; glm::equal<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_quat_
	mov	DWORD PTR tv91[rsp], 0
	jmp	SHORT $LN6@test_quat_
$LN5@test_quat_:
	mov	DWORD PTR tv91[rsp], 1
$LN6@test_quat_:
	mov	eax, DWORD PTR tv91[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 827  : 		Error += glm::all(glm::equal(q1, q4)) ? 0 : 1;

	lea	r8, QWORD PTR q4$16[rsp]
	lea	rdx, QWORD PTR q1$10[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$equal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0@Z ; glm::equal<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_quat_
	mov	DWORD PTR tv133[rsp], 0
	jmp	SHORT $LN8@test_quat_
$LN7@test_quat_:
	mov	DWORD PTR tv133[rsp], 1
$LN8@test_quat_:
	mov	eax, DWORD PTR tv133[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 828  : 	}
; 829  : 
; 830  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 831  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_quat_precision@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rsi
	ret	0
?test_quat_precision@@YAHXZ ENDP			; test_quat_precision
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tquat@M$0A@@glm@@QEAA@XZ PROC			; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 92   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 90   : 				: x(0), y(0), z(0), w(1)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+12], xmm0

; 92   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@XZ ENDP			; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tquat<float,0>::operator[], COMDAT

; 79   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 80   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tquat@M$0A@@glm@@SAHXZ	; glm::tquat<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 80					; 00000050H
	lea	rdx, OFFSET FLAT:??_C@_1LC@KEKMINFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 81   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 82   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tquat@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tquat<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.hpp
;	COMDAT ?length@?$tquat@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tquat@M$0A@@glm@@SAHXZ PROC			; glm::tquat<float,0>::length, COMDAT

; 74   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tquat@M$0A@@glm@@SAHXZ ENDP			; glm::tquat<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 0
?test_quat_size@@YAHXZ PROC				; test_quat_size

; 796  : {

	push	rdi
	sub	rsp, 16

; 797  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 798  : 	Error += sizeof(glm::f32quat) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 799  : 	Error += sizeof(glm::f64quat) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 800  : 	
; 801  : 	Error += sizeof(glm::lowp_f32quat) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 802  : 	Error += sizeof(glm::lowp_f64quat) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 803  : 	
; 804  : 	Error += sizeof(glm::mediump_f32quat) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 805  : 	Error += sizeof(glm::mediump_f64quat) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 806  : 	
; 807  : 	Error += sizeof(glm::highp_f32quat) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 808  : 	Error += sizeof(glm::highp_f64quat) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 809  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 810  : }

	add	rsp, 16
	pop	rdi
	ret	0
?test_quat_size@@YAHXZ ENDP				; test_quat_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 0
?test_dmat_size@@YAHXZ PROC				; test_dmat_size

; 738  : {

	push	rdi
	sub	rsp, 16

; 739  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 740  : 	Error += sizeof(glm::f64mat2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 741  : 	Error += sizeof(glm::f64mat3) != 72;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 742  : 	Error += sizeof(glm::f64mat4) != 128;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 743  : 	Error += sizeof(glm::f64mat2x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 744  : 	Error += sizeof(glm::f64mat2x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 745  : 	Error += sizeof(glm::f64mat2x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 746  : 	Error += sizeof(glm::f64mat3x2) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 747  : 	Error += sizeof(glm::f64mat3x3) != 72;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 748  : 	Error += sizeof(glm::f64mat3x4) != 96;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 749  : 	Error += sizeof(glm::f64mat4x2) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 750  : 	Error += sizeof(glm::f64mat4x3) != 96;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 751  : 	Error += sizeof(glm::f64mat4x4) != 128;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 752  : 
; 753  : 	Error += sizeof(glm::lowp_f64mat2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 754  : 	Error += sizeof(glm::lowp_f64mat3) != 72;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 755  : 	Error += sizeof(glm::lowp_f64mat4) != 128;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 756  : 	Error += sizeof(glm::lowp_f64mat2x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 757  : 	Error += sizeof(glm::lowp_f64mat2x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 758  : 	Error += sizeof(glm::lowp_f64mat2x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 759  : 	Error += sizeof(glm::lowp_f64mat3x2) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 760  : 	Error += sizeof(glm::lowp_f64mat3x3) != 72;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 761  : 	Error += sizeof(glm::lowp_f64mat3x4) != 96;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 762  : 	Error += sizeof(glm::lowp_f64mat4x2) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 763  : 	Error += sizeof(glm::lowp_f64mat4x3) != 96;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 764  : 	Error += sizeof(glm::lowp_f64mat4x4) != 128;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 765  : 	
; 766  : 	Error += sizeof(glm::mediump_f64mat2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 767  : 	Error += sizeof(glm::mediump_f64mat3) != 72;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 768  : 	Error += sizeof(glm::mediump_f64mat4) != 128;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 769  : 	Error += sizeof(glm::mediump_f64mat2x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 770  : 	Error += sizeof(glm::mediump_f64mat2x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 771  : 	Error += sizeof(glm::mediump_f64mat2x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 772  : 	Error += sizeof(glm::mediump_f64mat3x2) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 773  : 	Error += sizeof(glm::mediump_f64mat3x3) != 72;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 774  : 	Error += sizeof(glm::mediump_f64mat3x4) != 96;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 775  : 	Error += sizeof(glm::mediump_f64mat4x2) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 776  : 	Error += sizeof(glm::mediump_f64mat4x3) != 96;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 777  : 	Error += sizeof(glm::mediump_f64mat4x4) != 128;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 778  : 	
; 779  : 	Error += sizeof(glm::highp_f64mat2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 780  : 	Error += sizeof(glm::highp_f64mat3) != 72;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 781  : 	Error += sizeof(glm::highp_f64mat4) != 128;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 782  : 	Error += sizeof(glm::highp_f64mat2x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 783  : 	Error += sizeof(glm::highp_f64mat2x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 784  : 	Error += sizeof(glm::highp_f64mat2x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 785  : 	Error += sizeof(glm::highp_f64mat3x2) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 786  : 	Error += sizeof(glm::highp_f64mat3x3) != 72;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 787  : 	Error += sizeof(glm::highp_f64mat3x4) != 96;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 788  : 	Error += sizeof(glm::highp_f64mat4x2) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 789  : 	Error += sizeof(glm::highp_f64mat4x3) != 96;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 790  : 	Error += sizeof(glm::highp_f64mat4x4) != 128;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 791  : 
; 792  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 793  : }

	add	rsp, 16
	pop	rdi
	ret	0
?test_dmat_size@@YAHXZ ENDP				; test_dmat_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 0
?test_fmat_size@@YAHXZ PROC				; test_fmat_size

; 574  : {

	push	rdi
	sub	rsp, 16

; 575  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 576  : 	Error += sizeof(glm::mat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 577  : 	Error += sizeof(glm::mat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 578  : 	Error += sizeof(glm::mat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 579  : 	Error += sizeof(glm::mat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 580  : 	Error += sizeof(glm::mat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 581  : 	Error += sizeof(glm::mat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 582  : 	Error += sizeof(glm::mat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 583  : 	Error += sizeof(glm::mat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 584  : 	Error += sizeof(glm::mat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 585  : 	Error += sizeof(glm::mat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 586  : 	Error += sizeof(glm::mat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 587  : 	Error += sizeof(glm::mat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 588  : 
; 589  : 	Error += sizeof(glm::fmat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 590  : 	Error += sizeof(glm::fmat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 591  : 	Error += sizeof(glm::fmat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 592  : 	Error += sizeof(glm::fmat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 593  : 	Error += sizeof(glm::fmat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 594  : 	Error += sizeof(glm::fmat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 595  : 	Error += sizeof(glm::fmat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 596  : 	Error += sizeof(glm::fmat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 597  : 	Error += sizeof(glm::fmat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 598  : 	Error += sizeof(glm::fmat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 599  : 	Error += sizeof(glm::fmat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 600  : 	Error += sizeof(glm::fmat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 601  : 
; 602  : 	Error += sizeof(glm::f32mat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 603  : 	Error += sizeof(glm::f32mat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 604  : 	Error += sizeof(glm::f32mat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 605  : 	Error += sizeof(glm::f32mat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 606  : 	Error += sizeof(glm::f32mat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 607  : 	Error += sizeof(glm::f32mat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 608  : 	Error += sizeof(glm::f32mat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 609  : 	Error += sizeof(glm::f32mat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 610  : 	Error += sizeof(glm::f32mat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 611  : 	Error += sizeof(glm::f32mat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 612  : 	Error += sizeof(glm::f32mat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 613  : 	Error += sizeof(glm::f32mat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 614  : 	
; 615  : 	
; 616  : 	Error += sizeof(glm::lowp_mat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 617  : 	Error += sizeof(glm::lowp_mat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 618  : 	Error += sizeof(glm::lowp_mat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 619  : 	Error += sizeof(glm::lowp_mat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 620  : 	Error += sizeof(glm::lowp_mat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 621  : 	Error += sizeof(glm::lowp_mat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 622  : 	Error += sizeof(glm::lowp_mat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 623  : 	Error += sizeof(glm::lowp_mat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 624  : 	Error += sizeof(glm::lowp_mat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 625  : 	Error += sizeof(glm::lowp_mat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 626  : 	Error += sizeof(glm::lowp_mat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 627  : 	Error += sizeof(glm::lowp_mat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 628  : 
; 629  : 	Error += sizeof(glm::lowp_fmat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 630  : 	Error += sizeof(glm::lowp_fmat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 631  : 	Error += sizeof(glm::lowp_fmat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 632  : 	Error += sizeof(glm::lowp_fmat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 633  : 	Error += sizeof(glm::lowp_fmat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 634  : 	Error += sizeof(glm::lowp_fmat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 635  : 	Error += sizeof(glm::lowp_fmat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 636  : 	Error += sizeof(glm::lowp_fmat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 637  : 	Error += sizeof(glm::lowp_fmat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 638  : 	Error += sizeof(glm::lowp_fmat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 639  : 	Error += sizeof(glm::lowp_fmat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 640  : 	Error += sizeof(glm::lowp_fmat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 641  : 
; 642  : 	Error += sizeof(glm::lowp_f32mat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 643  : 	Error += sizeof(glm::lowp_f32mat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 644  : 	Error += sizeof(glm::lowp_f32mat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 645  : 	Error += sizeof(glm::lowp_f32mat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 646  : 	Error += sizeof(glm::lowp_f32mat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 647  : 	Error += sizeof(glm::lowp_f32mat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 648  : 	Error += sizeof(glm::lowp_f32mat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 649  : 	Error += sizeof(glm::lowp_f32mat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 650  : 	Error += sizeof(glm::lowp_f32mat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 651  : 	Error += sizeof(glm::lowp_f32mat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 652  : 	Error += sizeof(glm::lowp_f32mat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 653  : 	Error += sizeof(glm::lowp_f32mat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 654  : 	
; 655  : 	
; 656  : 	Error += sizeof(glm::mediump_mat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 657  : 	Error += sizeof(glm::mediump_mat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 658  : 	Error += sizeof(glm::mediump_mat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 659  : 	Error += sizeof(glm::mediump_mat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 660  : 	Error += sizeof(glm::mediump_mat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 661  : 	Error += sizeof(glm::mediump_mat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 662  : 	Error += sizeof(glm::mediump_mat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 663  : 	Error += sizeof(glm::mediump_mat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 664  : 	Error += sizeof(glm::mediump_mat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 665  : 	Error += sizeof(glm::mediump_mat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 666  : 	Error += sizeof(glm::mediump_mat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 667  : 	Error += sizeof(glm::mediump_mat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 668  : 
; 669  : 	Error += sizeof(glm::mediump_fmat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 670  : 	Error += sizeof(glm::mediump_fmat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 671  : 	Error += sizeof(glm::mediump_fmat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 672  : 	Error += sizeof(glm::mediump_fmat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 673  : 	Error += sizeof(glm::mediump_fmat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 674  : 	Error += sizeof(glm::mediump_fmat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 675  : 	Error += sizeof(glm::mediump_fmat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 676  : 	Error += sizeof(glm::mediump_fmat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 677  : 	Error += sizeof(glm::mediump_fmat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 678  : 	Error += sizeof(glm::mediump_fmat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 679  : 	Error += sizeof(glm::mediump_fmat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 680  : 	Error += sizeof(glm::mediump_fmat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 681  : 
; 682  : 	Error += sizeof(glm::mediump_f32mat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 683  : 	Error += sizeof(glm::mediump_f32mat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 684  : 	Error += sizeof(glm::mediump_f32mat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 685  : 	Error += sizeof(glm::mediump_f32mat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 686  : 	Error += sizeof(glm::mediump_f32mat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 687  : 	Error += sizeof(glm::mediump_f32mat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 688  : 	Error += sizeof(glm::mediump_f32mat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 689  : 	Error += sizeof(glm::mediump_f32mat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 690  : 	Error += sizeof(glm::mediump_f32mat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 691  : 	Error += sizeof(glm::mediump_f32mat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 692  : 	Error += sizeof(glm::mediump_f32mat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 693  : 	Error += sizeof(glm::mediump_f32mat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 694  : 	
; 695  : 	
; 696  : 	Error += sizeof(glm::highp_mat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 697  : 	Error += sizeof(glm::highp_mat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 698  : 	Error += sizeof(glm::highp_mat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 699  : 	Error += sizeof(glm::highp_mat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 700  : 	Error += sizeof(glm::highp_mat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 701  : 	Error += sizeof(glm::highp_mat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 702  : 	Error += sizeof(glm::highp_mat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 703  : 	Error += sizeof(glm::highp_mat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 704  : 	Error += sizeof(glm::highp_mat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 705  : 	Error += sizeof(glm::highp_mat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 706  : 	Error += sizeof(glm::highp_mat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 707  : 	Error += sizeof(glm::highp_mat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 708  : 
; 709  : 	Error += sizeof(glm::highp_fmat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 710  : 	Error += sizeof(glm::highp_fmat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 711  : 	Error += sizeof(glm::highp_fmat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 712  : 	Error += sizeof(glm::highp_fmat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 713  : 	Error += sizeof(glm::highp_fmat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 714  : 	Error += sizeof(glm::highp_fmat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 715  : 	Error += sizeof(glm::highp_fmat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 716  : 	Error += sizeof(glm::highp_fmat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 717  : 	Error += sizeof(glm::highp_fmat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 718  : 	Error += sizeof(glm::highp_fmat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 719  : 	Error += sizeof(glm::highp_fmat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 720  : 	Error += sizeof(glm::highp_fmat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 721  : 
; 722  : 	Error += sizeof(glm::highp_f32mat2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 723  : 	Error += sizeof(glm::highp_f32mat3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 724  : 	Error += sizeof(glm::highp_f32mat4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 725  : 	Error += sizeof(glm::highp_f32mat2x2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 726  : 	Error += sizeof(glm::highp_f32mat2x3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 727  : 	Error += sizeof(glm::highp_f32mat2x4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 728  : 	Error += sizeof(glm::highp_f32mat3x2) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 729  : 	Error += sizeof(glm::highp_f32mat3x3) != 36;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 730  : 	Error += sizeof(glm::highp_f32mat3x4) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 731  : 	Error += sizeof(glm::highp_f32mat4x2) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 732  : 	Error += sizeof(glm::highp_f32mat4x3) != 48;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 733  : 	Error += sizeof(glm::highp_f32mat4x4) != 64;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 734  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 735  : }

	add	rsp, 16
	pop	rdi
	ret	0
?test_fmat_size@@YAHXZ ENDP				; test_fmat_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$00@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$00@1@@Z PROC ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><1>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$00@1@@Z ENDP ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z PROC ; glm::equal<unsigned __int64,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@_K$0A@@glm@@SAHXZ	; glm::tvec4<unsigned __int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@_K$0A@@glm@@SAHXZ	; glm::tvec4<unsigned __int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@_K$0A@@glm@@SAHXZ	; glm::tvec4<unsigned __int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec4<unsigned __int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec4<unsigned __int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z ENDP ; glm::equal<unsigned __int64,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$01@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$01@1@@Z PROC ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><2>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$01@1@@Z ENDP ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@_K$00@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@_K$00@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z PROC ; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@_K$00@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z ENDP ; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@_K$01@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@_K$01@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z PROC ; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@_K$01@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z ENDP ; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$00@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$00@1@@Z PROC ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><1>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$00@1@@Z ENDP ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z PROC ; glm::equal<unsigned __int64,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@_K$0A@@glm@@SAHXZ	; glm::tvec3<unsigned __int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@_K$0A@@glm@@SAHXZ	; glm::tvec3<unsigned __int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@_K$0A@@glm@@SAHXZ	; glm::tvec3<unsigned __int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec3<unsigned __int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec3<unsigned __int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z ENDP ; glm::equal<unsigned __int64,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$01@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$01@1@@Z PROC ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><2>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$01@1@@Z ENDP ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@_K$00@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@_K$00@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z PROC ; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@_K$00@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ENDP ; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@_K$01@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@_K$01@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z PROC ; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@_K$01@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ENDP ; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$00@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$00@1@@Z PROC ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><1>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$00@1@@Z ENDP ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z PROC ; glm::equal<unsigned __int64,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec2<unsigned __int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec2<unsigned __int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ENDP ; glm::equal<unsigned __int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$01@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$01@1@@Z PROC ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><2>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$01@1@@Z ENDP ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@_K$00@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@_K$00@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z PROC ; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@_K$00@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ENDP ; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@_K$01@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@_K$01@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z PROC ; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@_K$01@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ENDP ; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$00@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$00@1@@Z PROC ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><1>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+12], ecx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$00@1@@Z ENDP ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z PROC ; glm::equal<unsigned int,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec4<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec4<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ENDP ; glm::equal<unsigned int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$01@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$01@1@@Z PROC ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><2>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+12], ecx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$01@1@@Z ENDP ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@I$00@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@I$00@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z PROC ; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+12], ecx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@I$00@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ENDP ; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@I$01@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@I$01@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z PROC ; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+12], ecx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@I$01@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ENDP ; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$00@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$00@1@@Z PROC ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><1>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$00@1@@Z ENDP ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z PROC ; glm::equal<unsigned int,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec3<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec3<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ENDP ; glm::equal<unsigned int,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$01@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$01@1@@Z PROC ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><2>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$01@1@@Z ENDP ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@I$00@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@I$00@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z PROC ; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@I$00@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ENDP ; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@I$01@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@I$01@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z PROC ; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@I$01@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ENDP ; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$00@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$00@1@@Z PROC ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><1>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$00@1@@Z ENDP ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z PROC ; glm::equal<unsigned int,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ENDP ; glm::equal<unsigned int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$01@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$01@1@@Z PROC ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><2>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$01@1@@Z ENDP ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@I$00@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@I$00@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z PROC ; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@I$00@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ENDP ; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@I$01@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@I$01@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z PROC ; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@I$01@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ENDP ; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$00@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$00@1@@Z PROC ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><1>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+6], cx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$00@1@@Z ENDP ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z PROC ; glm::equal<unsigned short,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@G$0A@@glm@@SAHXZ	; glm::tvec4<unsigned short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@G$0A@@glm@@SAHXZ	; glm::tvec4<unsigned short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@G$0A@@glm@@SAHXZ	; glm::tvec4<unsigned short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec4<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec4<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z ENDP ; glm::equal<unsigned short,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$01@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$01@1@@Z PROC ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><2>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+6], cx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$01@1@@Z ENDP ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@G$00@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@G$00@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z PROC ; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+6], cx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@G$00@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ENDP ; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@G$01@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@G$01@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z PROC ; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+6], cx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@G$01@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ENDP ; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$00@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$00@1@@Z PROC ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><1>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$00@1@@Z ENDP ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z PROC ; glm::equal<unsigned short,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@G$0A@@glm@@SAHXZ	; glm::tvec3<unsigned short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@G$0A@@glm@@SAHXZ	; glm::tvec3<unsigned short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@G$0A@@glm@@SAHXZ	; glm::tvec3<unsigned short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec3<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec3<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z ENDP ; glm::equal<unsigned short,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$01@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$01@1@@Z PROC ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><2>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$01@1@@Z ENDP ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@G$00@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@G$00@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z PROC ; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@G$00@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z ENDP ; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@G$01@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@G$01@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z PROC ; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@G$01@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z ENDP ; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$00@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$00@1@@Z PROC ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><1>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$00@1@@Z ENDP ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z PROC ; glm::equal<unsigned short,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ENDP ; glm::equal<unsigned short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$01@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$01@1@@Z PROC ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><2>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$01@1@@Z ENDP ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@G$00@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@G$00@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z PROC ; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@G$00@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ENDP ; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@G$01@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@G$01@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z PROC ; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@G$01@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ENDP ; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$00@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$00@1@@Z PROC ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><1>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+3]
	mov	BYTE PTR [rax+3], cl

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$00@1@@Z ENDP ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z PROC ; glm::equal<unsigned char,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@E$0A@@glm@@SAHXZ	; glm::tvec4<unsigned char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@E$0A@@glm@@SAHXZ	; glm::tvec4<unsigned char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@E$0A@@glm@@SAHXZ	; glm::tvec4<unsigned char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec4<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec4<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z ENDP ; glm::equal<unsigned char,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$01@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$01@1@@Z PROC ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><2>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+3]
	mov	BYTE PTR [rax+3], cl

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$01@1@@Z ENDP ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@E$00@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@E$00@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z PROC ; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+3]
	mov	BYTE PTR [rax+3], cl

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@E$00@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z ENDP ; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@E$01@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@E$01@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z PROC ; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+3]
	mov	BYTE PTR [rax+3], cl

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@E$01@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z ENDP ; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$00@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$00@1@@Z PROC ; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><1>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$00@1@@Z ENDP ; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z PROC ; glm::equal<unsigned char,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@E$0A@@glm@@SAHXZ	; glm::tvec3<unsigned char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@E$0A@@glm@@SAHXZ	; glm::tvec3<unsigned char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@E$0A@@glm@@SAHXZ	; glm::tvec3<unsigned char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec3<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec3<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z ENDP ; glm::equal<unsigned char,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$01@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$01@1@@Z PROC ; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><2>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$01@1@@Z ENDP ; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@E$00@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@E$00@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z PROC ; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@E$00@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z ENDP ; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@E$01@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@E$01@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z PROC ; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@E$01@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z ENDP ; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$00@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$00@1@@Z PROC ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><1>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$00@1@@Z ENDP ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z PROC ; glm::equal<unsigned char,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec2<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec2<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ENDP ; glm::equal<unsigned char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$01@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$01@1@@Z PROC ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><2>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$01@1@@Z ENDP ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@E$00@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@E$00@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z PROC ; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@E$00@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ENDP ; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@E$01@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@E$01@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z PROC ; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@E$01@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ENDP ; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 32
v1$51 = 52
v2$52 = 84
v3$53 = 116
v4$54 = 148
v1$55 = 180
v2$56 = 212
v3$57 = 244
v4$58 = 276
v1$59 = 308
v2$60 = 340
v3$61 = 372
v4$62 = 404
v1$63 = 436
v2$64 = 468
v3$65 = 500
v4$66 = 532
v1$67 = 564
v2$68 = 596
v3$69 = 628
v4$70 = 660
v1$71 = 696
v2$72 = 728
v3$73 = 760
v4$74 = 792
v1$75 = 824
v2$76 = 856
v3$77 = 888
v4$78 = 920
v1$79 = 952
v2$80 = 1000
v3$81 = 1048
v4$82 = 1096
v1$83 = 1144
v2$84 = 1192
v3$85 = 1240
v4$86 = 1288
v1$87 = 1336
v2$88 = 1384
v3$89 = 1432
v4$90 = 1480
v1$91 = 1528
v2$92 = 1576
v3$93 = 1624
v4$94 = 1672
v1$95 = 1720
v2$96 = 1784
v3$97 = 1848
v4$98 = 1912
$T99 = 1956
$T100 = 1958
$T101 = 1960
$T102 = 1962
$T103 = 1964
$T104 = 1966
$T105 = 1968
$T106 = 1971
$T107 = 1974
$T108 = 1977
$T109 = 1980
$T110 = 1983
$T111 = 1986
$T112 = 1990
$T113 = 1994
$T114 = 1998
$T115 = 2002
$T116 = 2006
$T117 = 2010
$T118 = 2014
$T119 = 2016
$T120 = 2020
$T121 = 2022
$T122 = 2026
$T123 = 2028
$T124 = 2034
$T125 = 2038
$T126 = 2044
$T127 = 2048
$T128 = 2054
$T129 = 2058
$T130 = 2066
$T131 = 2070
$T132 = 2078
$T133 = 2082
$T134 = 2090
$T135 = 2096
$T136 = 2104
$T137 = 2108
$T138 = 2116
$T139 = 2120
$T140 = 2128
$T141 = 2132
$T142 = 2144
$T143 = 2148
$T144 = 2160
$T145 = 2164
$T146 = 2176
$T147 = 2180
$T148 = 2196
$T149 = 2200
$T150 = 2216
$T151 = 2220
$T152 = 2236
$T153 = 2240
$T154 = 2256
$T155 = 2264
$T156 = 2280
$T157 = 2288
$T158 = 2304
$T159 = 2312
$T160 = 2336
$T161 = 2344
$T162 = 2368
$T163 = 2376
$T164 = 2400
$T165 = 2408
$T166 = 2440
$T167 = 2448
$T168 = 2480
$T169 = 2488
$T170 = 2520
tv80 = 2524
tv93 = 2528
tv135 = 2532
tv153 = 2536
tv166 = 2540
tv176 = 2544
tv194 = 2548
tv207 = 2552
tv217 = 2556
tv267 = 2560
tv280 = 2564
tv290 = 2568
tv308 = 2572
tv321 = 2576
tv331 = 2580
tv349 = 2584
tv362 = 2588
tv372 = 2592
tv422 = 2596
tv435 = 2600
tv445 = 2604
tv463 = 2608
tv476 = 2612
tv486 = 2616
tv504 = 2620
tv517 = 2624
tv527 = 2628
tv577 = 2632
tv590 = 2636
tv600 = 2640
tv618 = 2644
tv631 = 2648
tv641 = 2652
tv659 = 2656
tv672 = 2660
tv682 = 2664
?test_uvec_precision@@YAHXZ PROC			; test_uvec_precision

; 435  : {

	push	rsi
	push	rdi
	sub	rsp, 2680				; 00000a78H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 662				; 00000296H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 436  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 437  : 
; 438  : 	{
; 439  : 		glm::u8vec2 v1;

	lea	rcx, QWORD PTR v1$51[rsp]
	call	??0?$tvec2@E$0A@@glm@@QEAA@XZ		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>

; 440  : 		glm::lowp_u8vec2 v2(v1);

	lea	rdx, QWORD PTR v1$51[rsp]
	lea	rcx, QWORD PTR v2$52[rsp]
	call	??$?0$0A@@?$tvec2@E$01@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ; glm::tvec2<unsigned char,2>::tvec2<unsigned char,2><0>

; 441  : 		glm::mediump_u8vec2 v3(v1);

	lea	rdx, QWORD PTR v1$51[rsp]
	lea	rcx, QWORD PTR v3$53[rsp]
	call	??$?0$0A@@?$tvec2@E$00@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ; glm::tvec2<unsigned char,1>::tvec2<unsigned char,1><0>

; 442  : 		glm::highp_u8vec2 v4(v1);

	movzx	eax, WORD PTR v1$51[rsp]
	mov	WORD PTR v4$54[rsp], ax

; 443  : 
; 444  : 		Error += glm::all(glm::equal(v1, glm::u8vec2(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$52[rsp]
	lea	rcx, QWORD PTR $T99[rsp]
	call	??$?0$01@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$01@1@@Z ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$51[rsp]
	lea	rcx, QWORD PTR $T100[rsp]
	call	??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_uvec_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN4@test_uvec_
$LN3@test_uvec_:
	mov	DWORD PTR tv80[rsp], 1
$LN4@test_uvec_:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 445  : 		Error += glm::all(glm::equal(v1, glm::u8vec2(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$53[rsp]
	lea	rcx, QWORD PTR $T101[rsp]
	call	??$?0$00@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@E$00@1@@Z ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$51[rsp]
	lea	rcx, QWORD PTR $T102[rsp]
	call	??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_uvec_
	mov	DWORD PTR tv93[rsp], 0
	jmp	SHORT $LN6@test_uvec_
$LN5@test_uvec_:
	mov	DWORD PTR tv93[rsp], 1
$LN6@test_uvec_:
	mov	eax, DWORD PTR tv93[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 446  : 		Error += glm::all(glm::equal(v1, glm::u8vec2(v4))) ? 0 : 1;

	movzx	eax, WORD PTR v4$54[rsp]
	mov	WORD PTR $T103[rsp], ax
	lea	r8, QWORD PTR $T103[rsp]
	lea	rdx, QWORD PTR v1$51[rsp]
	lea	rcx, QWORD PTR $T104[rsp]
	call	??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_uvec_
	mov	DWORD PTR tv135[rsp], 0
	jmp	SHORT $LN8@test_uvec_
$LN7@test_uvec_:
	mov	DWORD PTR tv135[rsp], 1
$LN8@test_uvec_:
	mov	eax, DWORD PTR tv135[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 447  : 	}
; 448  : 
; 449  : 	{
; 450  : 		glm::u8vec3 v1;

	lea	rcx, QWORD PTR v1$55[rsp]
	call	??0?$tvec3@E$0A@@glm@@QEAA@XZ		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>

; 451  : 		glm::lowp_u8vec3 v2(v1);

	lea	rdx, QWORD PTR v1$55[rsp]
	lea	rcx, QWORD PTR v2$56[rsp]
	call	??$?0$0A@@?$tvec3@E$01@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z ; glm::tvec3<unsigned char,2>::tvec3<unsigned char,2><0>

; 452  : 		glm::mediump_u8vec3 v3(v1);

	lea	rdx, QWORD PTR v1$55[rsp]
	lea	rcx, QWORD PTR v3$57[rsp]
	call	??$?0$0A@@?$tvec3@E$00@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z ; glm::tvec3<unsigned char,1>::tvec3<unsigned char,1><0>

; 453  : 		glm::highp_u8vec3 v4(v1);

	lea	rax, QWORD PTR v4$58[rsp]
	lea	rcx, QWORD PTR v1$55[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 3
	rep movsb

; 454  : 
; 455  : 		Error += glm::all(glm::equal(v1, glm::u8vec3(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$56[rsp]
	lea	rcx, QWORD PTR $T105[rsp]
	call	??$?0$01@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$01@1@@Z ; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$55[rsp]
	lea	rcx, QWORD PTR $T106[rsp]
	call	??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_uvec_
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN10@test_uvec_
$LN9@test_uvec_:
	mov	DWORD PTR tv153[rsp], 1
$LN10@test_uvec_:
	mov	eax, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 456  : 		Error += glm::all(glm::equal(v1, glm::u8vec3(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$57[rsp]
	lea	rcx, QWORD PTR $T107[rsp]
	call	??$?0$00@?$tvec3@E$0A@@glm@@QEAA@AEBU?$tvec3@E$00@1@@Z ; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$55[rsp]
	lea	rcx, QWORD PTR $T108[rsp]
	call	??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_uvec_
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN12@test_uvec_
$LN11@test_uvec_:
	mov	DWORD PTR tv166[rsp], 1
$LN12@test_uvec_:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 457  : 		Error += glm::all(glm::equal(v1, glm::u8vec3(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T109[rsp]
	lea	rcx, QWORD PTR v4$58[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 3
	rep movsb
	lea	r8, QWORD PTR $T109[rsp]
	lea	rdx, QWORD PTR v1$55[rsp]
	lea	rcx, QWORD PTR $T110[rsp]
	call	??$equal@E$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_uvec_
	mov	DWORD PTR tv176[rsp], 0
	jmp	SHORT $LN14@test_uvec_
$LN13@test_uvec_:
	mov	DWORD PTR tv176[rsp], 1
$LN14@test_uvec_:
	mov	eax, DWORD PTR tv176[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 458  : 	}
; 459  : 	
; 460  : 	{
; 461  : 		glm::u8vec4 v1;

	lea	rcx, QWORD PTR v1$59[rsp]
	call	??0?$tvec4@E$0A@@glm@@QEAA@XZ		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>

; 462  : 		glm::lowp_u8vec4 v2(v1);

	lea	rdx, QWORD PTR v1$59[rsp]
	lea	rcx, QWORD PTR v2$60[rsp]
	call	??$?0$0A@@?$tvec4@E$01@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z ; glm::tvec4<unsigned char,2>::tvec4<unsigned char,2><0>

; 463  : 		glm::mediump_u8vec4 v3(v1);

	lea	rdx, QWORD PTR v1$59[rsp]
	lea	rcx, QWORD PTR v3$61[rsp]
	call	??$?0$0A@@?$tvec4@E$00@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z ; glm::tvec4<unsigned char,1>::tvec4<unsigned char,1><0>

; 464  : 		glm::highp_u8vec4 v4(v1);

	mov	eax, DWORD PTR v1$59[rsp]
	mov	DWORD PTR v4$62[rsp], eax

; 465  : 
; 466  : 		Error += glm::all(glm::equal(v1, glm::u8vec4(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$60[rsp]
	lea	rcx, QWORD PTR $T111[rsp]
	call	??$?0$01@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$01@1@@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$59[rsp]
	lea	rcx, QWORD PTR $T112[rsp]
	call	??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_uvec_
	mov	DWORD PTR tv194[rsp], 0
	jmp	SHORT $LN16@test_uvec_
$LN15@test_uvec_:
	mov	DWORD PTR tv194[rsp], 1
$LN16@test_uvec_:
	mov	eax, DWORD PTR tv194[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 467  : 		Error += glm::all(glm::equal(v1, glm::u8vec4(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$61[rsp]
	lea	rcx, QWORD PTR $T113[rsp]
	call	??$?0$00@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@E$00@1@@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$59[rsp]
	lea	rcx, QWORD PTR $T114[rsp]
	call	??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_uvec_
	mov	DWORD PTR tv207[rsp], 0
	jmp	SHORT $LN18@test_uvec_
$LN17@test_uvec_:
	mov	DWORD PTR tv207[rsp], 1
$LN18@test_uvec_:
	mov	eax, DWORD PTR tv207[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 468  : 		Error += glm::all(glm::equal(v1, glm::u8vec4(v4))) ? 0 : 1;

	mov	eax, DWORD PTR v4$62[rsp]
	mov	DWORD PTR $T115[rsp], eax
	lea	r8, QWORD PTR $T115[rsp]
	lea	rdx, QWORD PTR v1$59[rsp]
	lea	rcx, QWORD PTR $T116[rsp]
	call	??$equal@E$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_uvec_
	mov	DWORD PTR tv217[rsp], 0
	jmp	SHORT $LN20@test_uvec_
$LN19@test_uvec_:
	mov	DWORD PTR tv217[rsp], 1
$LN20@test_uvec_:
	mov	eax, DWORD PTR tv217[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 469  : 	}
; 470  : 
; 471  : 	{
; 472  : 		glm::u16vec2 v1;

	lea	rcx, QWORD PTR v1$63[rsp]
	call	??0?$tvec2@G$0A@@glm@@QEAA@XZ		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>

; 473  : 		glm::lowp_u16vec2 v2(v1);

	lea	rdx, QWORD PTR v1$63[rsp]
	lea	rcx, QWORD PTR v2$64[rsp]
	call	??$?0$0A@@?$tvec2@G$01@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ; glm::tvec2<unsigned short,2>::tvec2<unsigned short,2><0>

; 474  : 		glm::mediump_u16vec2 v3(v1);

	lea	rdx, QWORD PTR v1$63[rsp]
	lea	rcx, QWORD PTR v3$65[rsp]
	call	??$?0$0A@@?$tvec2@G$00@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ; glm::tvec2<unsigned short,1>::tvec2<unsigned short,1><0>

; 475  : 		glm::highp_u16vec2 v4(v1);

	mov	eax, DWORD PTR v1$63[rsp]
	mov	DWORD PTR v4$66[rsp], eax

; 476  : 
; 477  : 		Error += glm::all(glm::equal(v1, glm::u16vec2(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$64[rsp]
	lea	rcx, QWORD PTR $T117[rsp]
	call	??$?0$01@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$01@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$63[rsp]
	lea	rcx, QWORD PTR $T118[rsp]
	call	??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test_uvec_
	mov	DWORD PTR tv267[rsp], 0
	jmp	SHORT $LN22@test_uvec_
$LN21@test_uvec_:
	mov	DWORD PTR tv267[rsp], 1
$LN22@test_uvec_:
	mov	eax, DWORD PTR tv267[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 478  : 		Error += glm::all(glm::equal(v1, glm::u16vec2(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$65[rsp]
	lea	rcx, QWORD PTR $T119[rsp]
	call	??$?0$00@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@G$00@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$63[rsp]
	lea	rcx, QWORD PTR $T120[rsp]
	call	??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test_uvec_
	mov	DWORD PTR tv280[rsp], 0
	jmp	SHORT $LN24@test_uvec_
$LN23@test_uvec_:
	mov	DWORD PTR tv280[rsp], 1
$LN24@test_uvec_:
	mov	eax, DWORD PTR tv280[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 479  : 		Error += glm::all(glm::equal(v1, glm::u16vec2(v4))) ? 0 : 1;

	mov	eax, DWORD PTR v4$66[rsp]
	mov	DWORD PTR $T121[rsp], eax
	lea	r8, QWORD PTR $T121[rsp]
	lea	rdx, QWORD PTR v1$63[rsp]
	lea	rcx, QWORD PTR $T122[rsp]
	call	??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test_uvec_
	mov	DWORD PTR tv290[rsp], 0
	jmp	SHORT $LN26@test_uvec_
$LN25@test_uvec_:
	mov	DWORD PTR tv290[rsp], 1
$LN26@test_uvec_:
	mov	eax, DWORD PTR tv290[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 480  : 	}
; 481  : 
; 482  : 	{
; 483  : 		glm::u16vec3 v1;

	lea	rcx, QWORD PTR v1$67[rsp]
	call	??0?$tvec3@G$0A@@glm@@QEAA@XZ		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>

; 484  : 		glm::lowp_u16vec3 v2(v1);

	lea	rdx, QWORD PTR v1$67[rsp]
	lea	rcx, QWORD PTR v2$68[rsp]
	call	??$?0$0A@@?$tvec3@G$01@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z ; glm::tvec3<unsigned short,2>::tvec3<unsigned short,2><0>

; 485  : 		glm::mediump_u16vec3 v3(v1);

	lea	rdx, QWORD PTR v1$67[rsp]
	lea	rcx, QWORD PTR v3$69[rsp]
	call	??$?0$0A@@?$tvec3@G$00@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z ; glm::tvec3<unsigned short,1>::tvec3<unsigned short,1><0>

; 486  : 		glm::highp_u16vec3 v4(v1);

	lea	rax, QWORD PTR v4$70[rsp]
	lea	rcx, QWORD PTR v1$67[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 6
	rep movsb

; 487  : 
; 488  : 		Error += glm::all(glm::equal(v1, glm::u16vec3(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$68[rsp]
	lea	rcx, QWORD PTR $T123[rsp]
	call	??$?0$01@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$01@1@@Z ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$67[rsp]
	lea	rcx, QWORD PTR $T124[rsp]
	call	??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@test_uvec_
	mov	DWORD PTR tv308[rsp], 0
	jmp	SHORT $LN28@test_uvec_
$LN27@test_uvec_:
	mov	DWORD PTR tv308[rsp], 1
$LN28@test_uvec_:
	mov	eax, DWORD PTR tv308[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 489  : 		Error += glm::all(glm::equal(v1, glm::u16vec3(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$69[rsp]
	lea	rcx, QWORD PTR $T125[rsp]
	call	??$?0$00@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@G$00@1@@Z ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$67[rsp]
	lea	rcx, QWORD PTR $T126[rsp]
	call	??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@test_uvec_
	mov	DWORD PTR tv321[rsp], 0
	jmp	SHORT $LN30@test_uvec_
$LN29@test_uvec_:
	mov	DWORD PTR tv321[rsp], 1
$LN30@test_uvec_:
	mov	eax, DWORD PTR tv321[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 490  : 		Error += glm::all(glm::equal(v1, glm::u16vec3(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T127[rsp]
	lea	rcx, QWORD PTR v4$70[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 6
	rep movsb
	lea	r8, QWORD PTR $T127[rsp]
	lea	rdx, QWORD PTR v1$67[rsp]
	lea	rcx, QWORD PTR $T128[rsp]
	call	??$equal@G$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@test_uvec_
	mov	DWORD PTR tv331[rsp], 0
	jmp	SHORT $LN32@test_uvec_
$LN31@test_uvec_:
	mov	DWORD PTR tv331[rsp], 1
$LN32@test_uvec_:
	mov	eax, DWORD PTR tv331[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 491  : 	}
; 492  : 	
; 493  : 	{
; 494  : 		glm::u16vec4 v1;

	lea	rcx, QWORD PTR v1$71[rsp]
	call	??0?$tvec4@G$0A@@glm@@QEAA@XZ		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>

; 495  : 		glm::lowp_u16vec4 v2(v1);

	lea	rdx, QWORD PTR v1$71[rsp]
	lea	rcx, QWORD PTR v2$72[rsp]
	call	??$?0$0A@@?$tvec4@G$01@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ; glm::tvec4<unsigned short,2>::tvec4<unsigned short,2><0>

; 496  : 		glm::mediump_u16vec4 v3(v1);

	lea	rdx, QWORD PTR v1$71[rsp]
	lea	rcx, QWORD PTR v3$73[rsp]
	call	??$?0$0A@@?$tvec4@G$00@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ; glm::tvec4<unsigned short,1>::tvec4<unsigned short,1><0>

; 497  : 		glm::highp_u16vec4 v4(v1);

	mov	rax, QWORD PTR v1$71[rsp]
	mov	QWORD PTR v4$74[rsp], rax

; 498  : 
; 499  : 		Error += glm::all(glm::equal(v1, glm::u16vec4(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$72[rsp]
	lea	rcx, QWORD PTR $T129[rsp]
	call	??$?0$01@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$01@1@@Z ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$71[rsp]
	lea	rcx, QWORD PTR $T130[rsp]
	call	??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@test_uvec_
	mov	DWORD PTR tv349[rsp], 0
	jmp	SHORT $LN34@test_uvec_
$LN33@test_uvec_:
	mov	DWORD PTR tv349[rsp], 1
$LN34@test_uvec_:
	mov	eax, DWORD PTR tv349[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 500  : 		Error += glm::all(glm::equal(v1, glm::u16vec4(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$73[rsp]
	lea	rcx, QWORD PTR $T131[rsp]
	call	??$?0$00@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@G$00@1@@Z ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$71[rsp]
	lea	rcx, QWORD PTR $T132[rsp]
	call	??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN35@test_uvec_
	mov	DWORD PTR tv362[rsp], 0
	jmp	SHORT $LN36@test_uvec_
$LN35@test_uvec_:
	mov	DWORD PTR tv362[rsp], 1
$LN36@test_uvec_:
	mov	eax, DWORD PTR tv362[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 501  : 		Error += glm::all(glm::equal(v1, glm::u16vec4(v4))) ? 0 : 1;

	mov	rax, QWORD PTR v4$74[rsp]
	mov	QWORD PTR $T133[rsp], rax
	lea	r8, QWORD PTR $T133[rsp]
	lea	rdx, QWORD PTR v1$71[rsp]
	lea	rcx, QWORD PTR $T134[rsp]
	call	??$equal@G$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN37@test_uvec_
	mov	DWORD PTR tv372[rsp], 0
	jmp	SHORT $LN38@test_uvec_
$LN37@test_uvec_:
	mov	DWORD PTR tv372[rsp], 1
$LN38@test_uvec_:
	mov	eax, DWORD PTR tv372[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 502  : 	}
; 503  : 
; 504  : 	{
; 505  : 		glm::u32vec2 v1;

	lea	rcx, QWORD PTR v1$75[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@XZ		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 506  : 		glm::lowp_u32vec2 v2(v1);

	lea	rdx, QWORD PTR v1$75[rsp]
	lea	rcx, QWORD PTR v2$76[rsp]
	call	??$?0$0A@@?$tvec2@I$01@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<unsigned int,2>::tvec2<unsigned int,2><0>

; 507  : 		glm::mediump_u32vec2 v3(v1);

	lea	rdx, QWORD PTR v1$75[rsp]
	lea	rcx, QWORD PTR v3$77[rsp]
	call	??$?0$0A@@?$tvec2@I$00@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<unsigned int,1>::tvec2<unsigned int,1><0>

; 508  : 		glm::highp_u32vec2 v4(v1);

	mov	rax, QWORD PTR v1$75[rsp]
	mov	QWORD PTR v4$78[rsp], rax

; 509  : 
; 510  : 		Error += glm::all(glm::equal(v1, glm::u32vec2(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$76[rsp]
	lea	rcx, QWORD PTR $T135[rsp]
	call	??$?0$01@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$01@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$75[rsp]
	lea	rcx, QWORD PTR $T136[rsp]
	call	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN39@test_uvec_
	mov	DWORD PTR tv422[rsp], 0
	jmp	SHORT $LN40@test_uvec_
$LN39@test_uvec_:
	mov	DWORD PTR tv422[rsp], 1
$LN40@test_uvec_:
	mov	eax, DWORD PTR tv422[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 511  : 		Error += glm::all(glm::equal(v1, glm::u32vec2(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$77[rsp]
	lea	rcx, QWORD PTR $T137[rsp]
	call	??$?0$00@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@I$00@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$75[rsp]
	lea	rcx, QWORD PTR $T138[rsp]
	call	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN41@test_uvec_
	mov	DWORD PTR tv435[rsp], 0
	jmp	SHORT $LN42@test_uvec_
$LN41@test_uvec_:
	mov	DWORD PTR tv435[rsp], 1
$LN42@test_uvec_:
	mov	eax, DWORD PTR tv435[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 512  : 		Error += glm::all(glm::equal(v1, glm::u32vec2(v4))) ? 0 : 1;

	mov	rax, QWORD PTR v4$78[rsp]
	mov	QWORD PTR $T139[rsp], rax
	lea	r8, QWORD PTR $T139[rsp]
	lea	rdx, QWORD PTR v1$75[rsp]
	lea	rcx, QWORD PTR $T140[rsp]
	call	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN43@test_uvec_
	mov	DWORD PTR tv445[rsp], 0
	jmp	SHORT $LN44@test_uvec_
$LN43@test_uvec_:
	mov	DWORD PTR tv445[rsp], 1
$LN44@test_uvec_:
	mov	eax, DWORD PTR tv445[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 513  : 	}
; 514  : 
; 515  : 	{
; 516  : 		glm::u32vec3 v1;

	lea	rcx, QWORD PTR v1$79[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@XZ		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>

; 517  : 		glm::lowp_u32vec3 v2(v1);

	lea	rdx, QWORD PTR v1$79[rsp]
	lea	rcx, QWORD PTR v2$80[rsp]
	call	??$?0$0A@@?$tvec3@I$01@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<unsigned int,2>::tvec3<unsigned int,2><0>

; 518  : 		glm::mediump_u32vec3 v3(v1);

	lea	rdx, QWORD PTR v1$79[rsp]
	lea	rcx, QWORD PTR v3$81[rsp]
	call	??$?0$0A@@?$tvec3@I$00@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<unsigned int,1>::tvec3<unsigned int,1><0>

; 519  : 		glm::highp_u32vec3 v4(v1);

	lea	rax, QWORD PTR v4$82[rsp]
	lea	rcx, QWORD PTR v1$79[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb

; 520  : 
; 521  : 		Error += glm::all(glm::equal(v1, glm::u32vec3(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$80[rsp]
	lea	rcx, QWORD PTR $T141[rsp]
	call	??$?0$01@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$01@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$79[rsp]
	lea	rcx, QWORD PTR $T142[rsp]
	call	??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN45@test_uvec_
	mov	DWORD PTR tv463[rsp], 0
	jmp	SHORT $LN46@test_uvec_
$LN45@test_uvec_:
	mov	DWORD PTR tv463[rsp], 1
$LN46@test_uvec_:
	mov	eax, DWORD PTR tv463[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 522  : 		Error += glm::all(glm::equal(v1, glm::u32vec3(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$81[rsp]
	lea	rcx, QWORD PTR $T143[rsp]
	call	??$?0$00@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@I$00@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$79[rsp]
	lea	rcx, QWORD PTR $T144[rsp]
	call	??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN47@test_uvec_
	mov	DWORD PTR tv476[rsp], 0
	jmp	SHORT $LN48@test_uvec_
$LN47@test_uvec_:
	mov	DWORD PTR tv476[rsp], 1
$LN48@test_uvec_:
	mov	eax, DWORD PTR tv476[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 523  : 		Error += glm::all(glm::equal(v1, glm::u32vec3(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T145[rsp]
	lea	rcx, QWORD PTR v4$82[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T145[rsp]
	lea	rdx, QWORD PTR v1$79[rsp]
	lea	rcx, QWORD PTR $T146[rsp]
	call	??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN49@test_uvec_
	mov	DWORD PTR tv486[rsp], 0
	jmp	SHORT $LN50@test_uvec_
$LN49@test_uvec_:
	mov	DWORD PTR tv486[rsp], 1
$LN50@test_uvec_:
	mov	eax, DWORD PTR tv486[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 524  : 	}
; 525  : 	
; 526  : 	{
; 527  : 		glm::u32vec4 v1;

	lea	rcx, QWORD PTR v1$83[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@XZ		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>

; 528  : 		glm::lowp_u32vec4 v2(v1);

	lea	rdx, QWORD PTR v1$83[rsp]
	lea	rcx, QWORD PTR v2$84[rsp]
	call	??$?0$0A@@?$tvec4@I$01@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<unsigned int,2>::tvec4<unsigned int,2><0>

; 529  : 		glm::mediump_u32vec4 v3(v1);

	lea	rdx, QWORD PTR v1$83[rsp]
	lea	rcx, QWORD PTR v3$85[rsp]
	call	??$?0$0A@@?$tvec4@I$00@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<unsigned int,1>::tvec4<unsigned int,1><0>

; 530  : 		glm::highp_u32vec4 v4(v1);

	lea	rax, QWORD PTR v4$86[rsp]
	lea	rcx, QWORD PTR v1$83[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb

; 531  : 
; 532  : 		Error += glm::all(glm::equal(v1, glm::u32vec4(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$84[rsp]
	lea	rcx, QWORD PTR $T147[rsp]
	call	??$?0$01@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$01@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$83[rsp]
	lea	rcx, QWORD PTR $T148[rsp]
	call	??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN51@test_uvec_
	mov	DWORD PTR tv504[rsp], 0
	jmp	SHORT $LN52@test_uvec_
$LN51@test_uvec_:
	mov	DWORD PTR tv504[rsp], 1
$LN52@test_uvec_:
	mov	eax, DWORD PTR tv504[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 533  : 		Error += glm::all(glm::equal(v1, glm::u32vec4(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$85[rsp]
	lea	rcx, QWORD PTR $T149[rsp]
	call	??$?0$00@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@I$00@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$83[rsp]
	lea	rcx, QWORD PTR $T150[rsp]
	call	??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN53@test_uvec_
	mov	DWORD PTR tv517[rsp], 0
	jmp	SHORT $LN54@test_uvec_
$LN53@test_uvec_:
	mov	DWORD PTR tv517[rsp], 1
$LN54@test_uvec_:
	mov	eax, DWORD PTR tv517[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 534  : 		Error += glm::all(glm::equal(v1, glm::u32vec4(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T151[rsp]
	lea	rcx, QWORD PTR v4$86[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T151[rsp]
	lea	rdx, QWORD PTR v1$83[rsp]
	lea	rcx, QWORD PTR $T152[rsp]
	call	??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN55@test_uvec_
	mov	DWORD PTR tv527[rsp], 0
	jmp	SHORT $LN56@test_uvec_
$LN55@test_uvec_:
	mov	DWORD PTR tv527[rsp], 1
$LN56@test_uvec_:
	mov	eax, DWORD PTR tv527[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 535  : 	}
; 536  : 	
; 537  : 	{
; 538  : 		glm::u64vec2 v1;

	lea	rcx, QWORD PTR v1$87[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@XZ		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>

; 539  : 		glm::lowp_u64vec2 v2(v1);

	lea	rdx, QWORD PTR v1$87[rsp]
	lea	rcx, QWORD PTR v2$88[rsp]
	call	??$?0$0A@@?$tvec2@_K$01@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ; glm::tvec2<unsigned __int64,2>::tvec2<unsigned __int64,2><0>

; 540  : 		glm::mediump_u64vec2 v3(v1);

	lea	rdx, QWORD PTR v1$87[rsp]
	lea	rcx, QWORD PTR v3$89[rsp]
	call	??$?0$0A@@?$tvec2@_K$00@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ; glm::tvec2<unsigned __int64,1>::tvec2<unsigned __int64,1><0>

; 541  : 		glm::highp_u64vec2 v4(v1);

	lea	rax, QWORD PTR v4$90[rsp]
	lea	rcx, QWORD PTR v1$87[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb

; 542  : 
; 543  : 		Error += glm::all(glm::equal(v1, glm::u64vec2(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$88[rsp]
	lea	rcx, QWORD PTR $T153[rsp]
	call	??$?0$01@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$01@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$87[rsp]
	lea	rcx, QWORD PTR $T154[rsp]
	call	??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN57@test_uvec_
	mov	DWORD PTR tv577[rsp], 0
	jmp	SHORT $LN58@test_uvec_
$LN57@test_uvec_:
	mov	DWORD PTR tv577[rsp], 1
$LN58@test_uvec_:
	mov	eax, DWORD PTR tv577[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 544  : 		Error += glm::all(glm::equal(v1, glm::u64vec2(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$89[rsp]
	lea	rcx, QWORD PTR $T155[rsp]
	call	??$?0$00@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_K$00@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$87[rsp]
	lea	rcx, QWORD PTR $T156[rsp]
	call	??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN59@test_uvec_
	mov	DWORD PTR tv590[rsp], 0
	jmp	SHORT $LN60@test_uvec_
$LN59@test_uvec_:
	mov	DWORD PTR tv590[rsp], 1
$LN60@test_uvec_:
	mov	eax, DWORD PTR tv590[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 545  : 		Error += glm::all(glm::equal(v1, glm::u64vec2(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T157[rsp]
	lea	rcx, QWORD PTR v4$90[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T157[rsp]
	lea	rdx, QWORD PTR v1$87[rsp]
	lea	rcx, QWORD PTR $T158[rsp]
	call	??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN61@test_uvec_
	mov	DWORD PTR tv600[rsp], 0
	jmp	SHORT $LN62@test_uvec_
$LN61@test_uvec_:
	mov	DWORD PTR tv600[rsp], 1
$LN62@test_uvec_:
	mov	eax, DWORD PTR tv600[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 546  : 	}
; 547  : 
; 548  : 	{
; 549  : 		glm::u64vec3 v1;

	lea	rcx, QWORD PTR v1$91[rsp]
	call	??0?$tvec3@_K$0A@@glm@@QEAA@XZ		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>

; 550  : 		glm::lowp_u64vec3 v2(v1);

	lea	rdx, QWORD PTR v1$91[rsp]
	lea	rcx, QWORD PTR v2$92[rsp]
	call	??$?0$0A@@?$tvec3@_K$01@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ; glm::tvec3<unsigned __int64,2>::tvec3<unsigned __int64,2><0>

; 551  : 		glm::mediump_u64vec3 v3(v1);

	lea	rdx, QWORD PTR v1$91[rsp]
	lea	rcx, QWORD PTR v3$93[rsp]
	call	??$?0$0A@@?$tvec3@_K$00@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ; glm::tvec3<unsigned __int64,1>::tvec3<unsigned __int64,1><0>

; 552  : 		glm::highp_u64vec3 v4(v1);

	lea	rax, QWORD PTR v4$94[rsp]
	lea	rcx, QWORD PTR v1$91[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb

; 553  : 
; 554  : 		Error += glm::all(glm::equal(v1, glm::u64vec3(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$92[rsp]
	lea	rcx, QWORD PTR $T159[rsp]
	call	??$?0$01@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$01@1@@Z ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$91[rsp]
	lea	rcx, QWORD PTR $T160[rsp]
	call	??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN63@test_uvec_
	mov	DWORD PTR tv618[rsp], 0
	jmp	SHORT $LN64@test_uvec_
$LN63@test_uvec_:
	mov	DWORD PTR tv618[rsp], 1
$LN64@test_uvec_:
	mov	eax, DWORD PTR tv618[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 555  : 		Error += glm::all(glm::equal(v1, glm::u64vec3(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$93[rsp]
	lea	rcx, QWORD PTR $T161[rsp]
	call	??$?0$00@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@_K$00@1@@Z ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$91[rsp]
	lea	rcx, QWORD PTR $T162[rsp]
	call	??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN65@test_uvec_
	mov	DWORD PTR tv631[rsp], 0
	jmp	SHORT $LN66@test_uvec_
$LN65@test_uvec_:
	mov	DWORD PTR tv631[rsp], 1
$LN66@test_uvec_:
	mov	eax, DWORD PTR tv631[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 556  : 		Error += glm::all(glm::equal(v1, glm::u64vec3(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T163[rsp]
	lea	rcx, QWORD PTR v4$94[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, QWORD PTR $T163[rsp]
	lea	rdx, QWORD PTR v1$91[rsp]
	lea	rcx, QWORD PTR $T164[rsp]
	call	??$equal@_K$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN67@test_uvec_
	mov	DWORD PTR tv641[rsp], 0
	jmp	SHORT $LN68@test_uvec_
$LN67@test_uvec_:
	mov	DWORD PTR tv641[rsp], 1
$LN68@test_uvec_:
	mov	eax, DWORD PTR tv641[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 557  : 	}
; 558  : 	
; 559  : 	{
; 560  : 		glm::u64vec4 v1;

	lea	rcx, QWORD PTR v1$95[rsp]
	call	??0?$tvec4@_K$0A@@glm@@QEAA@XZ		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>

; 561  : 		glm::lowp_u64vec4 v2(v1);

	lea	rdx, QWORD PTR v1$95[rsp]
	lea	rcx, QWORD PTR v2$96[rsp]
	call	??$?0$0A@@?$tvec4@_K$01@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z ; glm::tvec4<unsigned __int64,2>::tvec4<unsigned __int64,2><0>

; 562  : 		glm::mediump_u64vec4 v3(v1);

	lea	rdx, QWORD PTR v1$95[rsp]
	lea	rcx, QWORD PTR v3$97[rsp]
	call	??$?0$0A@@?$tvec4@_K$00@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z ; glm::tvec4<unsigned __int64,1>::tvec4<unsigned __int64,1><0>

; 563  : 		glm::highp_u64vec4 v4(v1);

	lea	rax, QWORD PTR v4$98[rsp]
	lea	rcx, QWORD PTR v1$95[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb

; 564  : 
; 565  : 		Error += glm::all(glm::equal(v1, glm::u64vec4(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$96[rsp]
	lea	rcx, QWORD PTR $T165[rsp]
	call	??$?0$01@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$01@1@@Z ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$95[rsp]
	lea	rcx, QWORD PTR $T166[rsp]
	call	??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN69@test_uvec_
	mov	DWORD PTR tv659[rsp], 0
	jmp	SHORT $LN70@test_uvec_
$LN69@test_uvec_:
	mov	DWORD PTR tv659[rsp], 1
$LN70@test_uvec_:
	mov	eax, DWORD PTR tv659[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 566  : 		Error += glm::all(glm::equal(v1, glm::u64vec4(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$97[rsp]
	lea	rcx, QWORD PTR $T167[rsp]
	call	??$?0$00@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@_K$00@1@@Z ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$95[rsp]
	lea	rcx, QWORD PTR $T168[rsp]
	call	??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN71@test_uvec_
	mov	DWORD PTR tv672[rsp], 0
	jmp	SHORT $LN72@test_uvec_
$LN71@test_uvec_:
	mov	DWORD PTR tv672[rsp], 1
$LN72@test_uvec_:
	mov	eax, DWORD PTR tv672[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 567  : 		Error += glm::all(glm::equal(v1, glm::u64vec4(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T169[rsp]
	lea	rcx, QWORD PTR v4$98[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T169[rsp]
	lea	rdx, QWORD PTR v1$95[rsp]
	lea	rcx, QWORD PTR $T170[rsp]
	call	??$equal@_K$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN73@test_uvec_
	mov	DWORD PTR tv682[rsp], 0
	jmp	SHORT $LN74@test_uvec_
$LN73@test_uvec_:
	mov	DWORD PTR tv682[rsp], 1
$LN74@test_uvec_:
	mov	eax, DWORD PTR tv682[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 568  : 	}
; 569  : 	
; 570  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 571  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_uvec_precision@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 2680				; 00000a78H
	pop	rdi
	pop	rsi
	ret	0
?test_uvec_precision@@YAHXZ ENDP			; test_uvec_precision
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@_K$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_K$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z PROC		; glm::tvec4<unsigned __int64,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_K$0A@@glm@@SAHXZ	; glm::tvec4<unsigned __int64,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_K$0A@@glm@@QEBAAEB_KH@Z ENDP		; glm::tvec4<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_K$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned __int64,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@_K$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_K$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z PROC		; glm::tvec3<unsigned __int64,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_K$0A@@glm@@SAHXZ	; glm::tvec3<unsigned __int64,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_K$0A@@glm@@QEBAAEB_KH@Z ENDP		; glm::tvec3<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_K$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned __int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@_K$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_K$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z PROC		; glm::tvec2<unsigned __int64,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z ENDP		; glm::tvec2<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_K$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned __int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@I$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+12], 0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@I$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec4<unsigned int,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec4<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@I$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@I$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+8], 0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@I$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec3<unsigned int,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec3<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@I$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@G$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@G$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+4], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+6], ax

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@G$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z PROC			; glm::tvec4<unsigned short,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@G$0A@@glm@@SAHXZ	; glm::tvec4<unsigned short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@G$0A@@glm@@QEBAAEBGH@Z ENDP			; glm::tvec4<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@G$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned short,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@G$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@G$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@G$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+4], ax

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@G$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z PROC			; glm::tvec3<unsigned short,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@G$0A@@glm@@SAHXZ	; glm::tvec3<unsigned short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@G$0A@@glm@@QEBAAEBGH@Z ENDP			; glm::tvec3<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@G$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@G$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@E$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@E$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+1], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2], 0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@E$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z PROC			; glm::tvec3<unsigned char,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@E$0A@@glm@@SAHXZ	; glm::tvec3<unsigned char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@E$0A@@glm@@QEBAAEBEH@Z ENDP			; glm::tvec3<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@E$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@E$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@E$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+1], 0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@E$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z PROC			; glm::tvec2<unsigned char,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z ENDP			; glm::tvec2<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@E$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@E$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 0
?test_uvec_size@@YAHXZ PROC				; test_uvec_size

; 378  : {

	push	rdi
	sub	rsp, 16

; 379  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 380  : 	Error += sizeof(glm::u8vec2) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 381  : 	Error += sizeof(glm::u8vec3) != 3;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 382  : 	Error += sizeof(glm::u8vec4) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 383  : 	Error += sizeof(glm::u16vec2) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 384  : 	Error += sizeof(glm::u16vec3) != 6;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 385  : 	Error += sizeof(glm::u16vec4) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 386  : 	Error += sizeof(glm::u32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 387  : 	Error += sizeof(glm::u32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 388  : 	Error += sizeof(glm::u32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 389  : 	Error += sizeof(glm::u64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 390  : 	Error += sizeof(glm::u64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 391  : 	Error += sizeof(glm::u64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 392  : 	
; 393  : 	Error += sizeof(glm::lowp_u8vec2) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 394  : 	Error += sizeof(glm::lowp_u8vec3) != 3;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 395  : 	Error += sizeof(glm::lowp_u8vec4) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 396  : 	Error += sizeof(glm::lowp_u16vec2) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 397  : 	Error += sizeof(glm::lowp_u16vec3) != 6;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 398  : 	Error += sizeof(glm::lowp_u16vec4) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 399  : 	Error += sizeof(glm::lowp_u32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 400  : 	Error += sizeof(glm::lowp_u32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 401  : 	Error += sizeof(glm::lowp_u32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 402  : 	Error += sizeof(glm::lowp_u64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 403  : 	Error += sizeof(glm::lowp_u64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 404  : 	Error += sizeof(glm::lowp_u64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 405  : 	
; 406  : 	Error += sizeof(glm::mediump_u8vec2) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 407  : 	Error += sizeof(glm::mediump_u8vec3) != 3;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 408  : 	Error += sizeof(glm::mediump_u8vec4) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 409  : 	Error += sizeof(glm::mediump_u16vec2) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 410  : 	Error += sizeof(glm::mediump_u16vec3) != 6;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 411  : 	Error += sizeof(glm::mediump_u16vec4) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 412  : 	Error += sizeof(glm::mediump_u32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 413  : 	Error += sizeof(glm::mediump_u32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 414  : 	Error += sizeof(glm::mediump_u32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 415  : 	Error += sizeof(glm::mediump_u64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 416  : 	Error += sizeof(glm::mediump_u64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 417  : 	Error += sizeof(glm::mediump_u64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 418  : 	
; 419  : 	Error += sizeof(glm::highp_u8vec2) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 420  : 	Error += sizeof(glm::highp_u8vec3) != 3;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 421  : 	Error += sizeof(glm::highp_u8vec4) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 422  : 	Error += sizeof(glm::highp_u16vec2) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 423  : 	Error += sizeof(glm::highp_u16vec3) != 6;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 424  : 	Error += sizeof(glm::highp_u16vec4) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 425  : 	Error += sizeof(glm::highp_u32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 426  : 	Error += sizeof(glm::highp_u32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 427  : 	Error += sizeof(glm::highp_u32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 428  : 	Error += sizeof(glm::highp_u64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 429  : 	Error += sizeof(glm::highp_u64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 430  : 	Error += sizeof(glm::highp_u64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 431  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 432  : }

	add	rsp, 16
	pop	rdi
	ret	0
?test_uvec_size@@YAHXZ ENDP				; test_uvec_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$00@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$00@1@@Z PROC ; glm::tvec4<__int64,0>::tvec4<__int64,0><1>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$00@1@@Z ENDP ; glm::tvec4<__int64,0>::tvec4<__int64,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z PROC ; glm::equal<__int64,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@_J$0A@@glm@@SAHXZ	; glm::tvec4<__int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@_J$0A@@glm@@SAHXZ	; glm::tvec4<__int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@_J$0A@@glm@@SAHXZ	; glm::tvec4<__int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec4<__int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec4<__int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z ENDP ; glm::equal<__int64,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$01@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$01@1@@Z PROC ; glm::tvec4<__int64,0>::tvec4<__int64,0><2>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$01@1@@Z ENDP ; glm::tvec4<__int64,0>::tvec4<__int64,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@_J$00@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@_J$00@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z PROC ; glm::tvec4<__int64,1>::tvec4<__int64,1><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@_J$00@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ENDP ; glm::tvec4<__int64,1>::tvec4<__int64,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@_J$01@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@_J$01@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z PROC ; glm::tvec4<__int64,2>::tvec4<__int64,2><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+24], rcx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@_J$01@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ENDP ; glm::tvec4<__int64,2>::tvec4<__int64,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$00@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$00@1@@Z PROC ; glm::tvec3<__int64,0>::tvec3<__int64,0><1>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$00@1@@Z ENDP ; glm::tvec3<__int64,0>::tvec3<__int64,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z PROC ; glm::equal<__int64,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@_J$0A@@glm@@SAHXZ	; glm::tvec3<__int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@_J$0A@@glm@@SAHXZ	; glm::tvec3<__int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@_J$0A@@glm@@SAHXZ	; glm::tvec3<__int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec3<__int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec3<__int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z ENDP ; glm::equal<__int64,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$01@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$01@1@@Z PROC ; glm::tvec3<__int64,0>::tvec3<__int64,0><2>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$01@1@@Z ENDP ; glm::tvec3<__int64,0>::tvec3<__int64,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@_J$00@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@_J$00@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z PROC ; glm::tvec3<__int64,1>::tvec3<__int64,1><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@_J$00@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ENDP ; glm::tvec3<__int64,1>::tvec3<__int64,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@_J$01@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@_J$01@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z PROC ; glm::tvec3<__int64,2>::tvec3<__int64,2><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+16], rcx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@_J$01@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ENDP ; glm::tvec3<__int64,2>::tvec3<__int64,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$00@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$00@1@@Z PROC ; glm::tvec2<__int64,0>::tvec2<__int64,0><1>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$00@1@@Z ENDP ; glm::tvec2<__int64,0>::tvec2<__int64,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z PROC ; glm::equal<__int64,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec2<__int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec2<__int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ENDP ; glm::equal<__int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$01@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$01@1@@Z PROC ; glm::tvec2<__int64,0>::tvec2<__int64,0><2>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$01@1@@Z ENDP ; glm::tvec2<__int64,0>::tvec2<__int64,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@_J$00@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@_J$00@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z PROC ; glm::tvec2<__int64,1>::tvec2<__int64,1><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@_J$00@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ENDP ; glm::tvec2<__int64,1>::tvec2<__int64,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@_J$01@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@_J$01@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z PROC ; glm::tvec2<__int64,2>::tvec2<__int64,2><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@_J$01@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ENDP ; glm::tvec2<__int64,2>::tvec2<__int64,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$00@1@@Z PROC ; glm::tvec4<int,0>::tvec4<int,0><1>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+12], ecx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$00@1@@Z ENDP ; glm::tvec4<int,0>::tvec4<int,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$01@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z PROC ; glm::tvec4<int,0>::tvec4<int,0><2>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+12], ecx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z ENDP ; glm::tvec4<int,0>::tvec4<int,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@H$00@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@H$00@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z PROC ; glm::tvec4<int,1>::tvec4<int,1><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+12], ecx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@H$00@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z ENDP ; glm::tvec4<int,1>::tvec4<int,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@H$01@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@H$01@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z PROC ; glm::tvec4<int,2>::tvec4<int,2><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+12], ecx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@H$01@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z ENDP ; glm::tvec4<int,2>::tvec4<int,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$00@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$00@1@@Z PROC ; glm::tvec3<int,0>::tvec3<int,0><1>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$00@1@@Z ENDP ; glm::tvec3<int,0>::tvec3<int,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec3<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec3<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$01@1@@Z PROC ; glm::tvec3<int,0>::tvec3<int,0><2>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$01@1@@Z ENDP ; glm::tvec3<int,0>::tvec3<int,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@H$00@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@H$00@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z PROC ; glm::tvec3<int,1>::tvec3<int,1><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@H$00@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z ENDP ; glm::tvec3<int,1>::tvec3<int,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@H$01@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@H$01@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z PROC ; glm::tvec3<int,2>::tvec3<int,2><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@H$01@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z ENDP ; glm::tvec3<int,2>::tvec3<int,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$00@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$00@1@@Z PROC ; glm::tvec2<int,0>::tvec2<int,0><1>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$00@1@@Z ENDP ; glm::tvec2<int,0>::tvec2<int,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$01@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$01@1@@Z PROC ; glm::tvec2<int,0>::tvec2<int,0><2>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$01@1@@Z ENDP ; glm::tvec2<int,0>::tvec2<int,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@H$00@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@H$00@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z PROC ; glm::tvec2<int,1>::tvec2<int,1><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@H$00@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ENDP ; glm::tvec2<int,1>::tvec2<int,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@H$01@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@H$01@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z PROC ; glm::tvec2<int,2>::tvec2<int,2><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@H$01@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ENDP ; glm::tvec2<int,2>::tvec2<int,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$00@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$00@1@@Z PROC ; glm::tvec4<short,0>::tvec4<short,0><1>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+6], cx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$00@1@@Z ENDP ; glm::tvec4<short,0>::tvec4<short,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z PROC ; glm::equal<short,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@F$0A@@glm@@SAHXZ	; glm::tvec4<short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@F$0A@@glm@@SAHXZ	; glm::tvec4<short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@F$0A@@glm@@SAHXZ	; glm::tvec4<short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec4<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec4<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z ENDP ; glm::equal<short,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$01@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$01@1@@Z PROC ; glm::tvec4<short,0>::tvec4<short,0><2>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+6], cx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$01@1@@Z ENDP ; glm::tvec4<short,0>::tvec4<short,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@F$00@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@F$00@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z PROC ; glm::tvec4<short,1>::tvec4<short,1><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+6], cx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@F$00@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ENDP ; glm::tvec4<short,1>::tvec4<short,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@F$01@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@F$01@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z PROC ; glm::tvec4<short,2>::tvec4<short,2><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+6], cx

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@F$01@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ENDP ; glm::tvec4<short,2>::tvec4<short,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$00@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$00@1@@Z PROC ; glm::tvec3<short,0>::tvec3<short,0><1>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$00@1@@Z ENDP ; glm::tvec3<short,0>::tvec3<short,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z PROC ; glm::equal<short,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@F$0A@@glm@@SAHXZ	; glm::tvec3<short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@F$0A@@glm@@SAHXZ	; glm::tvec3<short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@F$0A@@glm@@SAHXZ	; glm::tvec3<short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec3<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec3<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z ENDP ; glm::equal<short,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$01@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$01@1@@Z PROC ; glm::tvec3<short,0>::tvec3<short,0><2>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$01@1@@Z ENDP ; glm::tvec3<short,0>::tvec3<short,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@F$00@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@F$00@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z PROC ; glm::tvec3<short,1>::tvec3<short,1><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@F$00@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z ENDP ; glm::tvec3<short,1>::tvec3<short,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@F$01@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@F$01@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z PROC ; glm::tvec3<short,2>::tvec3<short,2><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+4], cx

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@F$01@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z ENDP ; glm::tvec3<short,2>::tvec3<short,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$00@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$00@1@@Z PROC ; glm::tvec2<short,0>::tvec2<short,0><1>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$00@1@@Z ENDP ; glm::tvec2<short,0>::tvec2<short,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z PROC ; glm::equal<short,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec2<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec2<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ENDP ; glm::equal<short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$01@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$01@1@@Z PROC ; glm::tvec2<short,0>::tvec2<short,0><2>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$01@1@@Z ENDP ; glm::tvec2<short,0>::tvec2<short,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@F$00@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@F$00@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z PROC ; glm::tvec2<short,1>::tvec2<short,1><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@F$00@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ENDP ; glm::tvec2<short,1>::tvec2<short,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@F$01@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@F$01@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z PROC ; glm::tvec2<short,2>::tvec2<short,2><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@F$01@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ENDP ; glm::tvec2<short,2>::tvec2<short,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$00@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$00@1@@Z PROC ; glm::tvec4<signed char,0>::tvec4<signed char,0><1>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+3]
	mov	BYTE PTR [rax+3], cl

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$00@1@@Z ENDP ; glm::tvec4<signed char,0>::tvec4<signed char,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z PROC ; glm::equal<signed char,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@C$0A@@glm@@SAHXZ	; glm::tvec4<signed char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@C$0A@@glm@@SAHXZ	; glm::tvec4<signed char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@C$0A@@glm@@SAHXZ	; glm::tvec4<signed char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec4<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec4<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z ENDP ; glm::equal<signed char,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$01@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$01@1@@Z PROC ; glm::tvec4<signed char,0>::tvec4<signed char,0><2>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+3]
	mov	BYTE PTR [rax+3], cl

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$01@1@@Z ENDP ; glm::tvec4<signed char,0>::tvec4<signed char,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@C$00@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@C$00@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z PROC ; glm::tvec4<signed char,1>::tvec4<signed char,1><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+3]
	mov	BYTE PTR [rax+3], cl

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@C$00@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z ENDP ; glm::tvec4<signed char,1>::tvec4<signed char,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@C$01@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@C$01@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z PROC ; glm::tvec4<signed char,2>::tvec4<signed char,2><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+3]
	mov	BYTE PTR [rax+3], cl

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@C$01@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z ENDP ; glm::tvec4<signed char,2>::tvec4<signed char,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$00@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$00@1@@Z PROC ; glm::tvec3<signed char,0>::tvec3<signed char,0><1>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$00@1@@Z ENDP ; glm::tvec3<signed char,0>::tvec3<signed char,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z PROC ; glm::equal<signed char,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@C$0A@@glm@@SAHXZ	; glm::tvec3<signed char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@C$0A@@glm@@SAHXZ	; glm::tvec3<signed char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@C$0A@@glm@@SAHXZ	; glm::tvec3<signed char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec3<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec3<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z ENDP ; glm::equal<signed char,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$01@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$01@1@@Z PROC ; glm::tvec3<signed char,0>::tvec3<signed char,0><2>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$01@1@@Z ENDP ; glm::tvec3<signed char,0>::tvec3<signed char,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@C$00@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@C$00@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z PROC ; glm::tvec3<signed char,1>::tvec3<signed char,1><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@C$00@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z ENDP ; glm::tvec3<signed char,1>::tvec3<signed char,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@C$01@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@C$01@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z PROC ; glm::tvec3<signed char,2>::tvec3<signed char,2><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+2]
	mov	BYTE PTR [rax+2], cl

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@C$01@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z ENDP ; glm::tvec3<signed char,2>::tvec3<signed char,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$00@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$00@1@@Z PROC ; glm::tvec2<signed char,0>::tvec2<signed char,0><1>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$00@1@@Z ENDP ; glm::tvec2<signed char,0>::tvec2<signed char,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z PROC ; glm::equal<signed char,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec2<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec2<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ENDP ; glm::equal<signed char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$01@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$01@1@@Z PROC ; glm::tvec2<signed char,0>::tvec2<signed char,0><2>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$01@1@@Z ENDP ; glm::tvec2<signed char,0>::tvec2<signed char,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@C$00@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@C$00@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z PROC ; glm::tvec2<signed char,1>::tvec2<signed char,1><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@C$00@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ENDP ; glm::tvec2<signed char,1>::tvec2<signed char,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@C$01@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@C$01@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z PROC ; glm::tvec2<signed char,2>::tvec2<signed char,2><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@C$01@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ENDP ; glm::tvec2<signed char,2>::tvec2<signed char,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 32
v1$51 = 52
v2$52 = 84
v3$53 = 116
v4$54 = 148
v1$55 = 180
v2$56 = 212
v3$57 = 244
v4$58 = 276
v1$59 = 308
v2$60 = 340
v3$61 = 372
v4$62 = 404
v1$63 = 436
v2$64 = 468
v3$65 = 500
v4$66 = 532
v1$67 = 564
v2$68 = 596
v3$69 = 628
v4$70 = 660
v1$71 = 696
v2$72 = 728
v3$73 = 760
v4$74 = 792
v1$75 = 824
v2$76 = 856
v3$77 = 888
v4$78 = 920
v1$79 = 952
v2$80 = 1000
v3$81 = 1048
v4$82 = 1096
v1$83 = 1144
v2$84 = 1192
v3$85 = 1240
v4$86 = 1288
v1$87 = 1336
v2$88 = 1384
v3$89 = 1432
v4$90 = 1480
v1$91 = 1528
v2$92 = 1576
v3$93 = 1624
v4$94 = 1672
v1$95 = 1720
v2$96 = 1784
v3$97 = 1848
v4$98 = 1912
$T99 = 1956
$T100 = 1958
$T101 = 1960
$T102 = 1962
$T103 = 1964
$T104 = 1966
$T105 = 1968
$T106 = 1971
$T107 = 1974
$T108 = 1977
$T109 = 1980
$T110 = 1983
$T111 = 1986
$T112 = 1990
$T113 = 1994
$T114 = 1998
$T115 = 2002
$T116 = 2006
$T117 = 2010
$T118 = 2014
$T119 = 2016
$T120 = 2020
$T121 = 2022
$T122 = 2026
$T123 = 2028
$T124 = 2034
$T125 = 2038
$T126 = 2044
$T127 = 2048
$T128 = 2054
$T129 = 2058
$T130 = 2066
$T131 = 2070
$T132 = 2078
$T133 = 2082
$T134 = 2090
$T135 = 2096
$T136 = 2104
$T137 = 2108
$T138 = 2116
$T139 = 2120
$T140 = 2128
$T141 = 2132
$T142 = 2144
$T143 = 2148
$T144 = 2160
$T145 = 2164
$T146 = 2176
$T147 = 2180
$T148 = 2196
$T149 = 2200
$T150 = 2216
$T151 = 2220
$T152 = 2236
$T153 = 2240
$T154 = 2256
$T155 = 2264
$T156 = 2280
$T157 = 2288
$T158 = 2304
$T159 = 2312
$T160 = 2336
$T161 = 2344
$T162 = 2368
$T163 = 2376
$T164 = 2400
$T165 = 2408
$T166 = 2440
$T167 = 2448
$T168 = 2480
$T169 = 2488
$T170 = 2520
tv80 = 2524
tv93 = 2528
tv135 = 2532
tv153 = 2536
tv166 = 2540
tv176 = 2544
tv194 = 2548
tv207 = 2552
tv217 = 2556
tv267 = 2560
tv280 = 2564
tv290 = 2568
tv308 = 2572
tv321 = 2576
tv331 = 2580
tv349 = 2584
tv362 = 2588
tv372 = 2592
tv422 = 2596
tv435 = 2600
tv445 = 2604
tv463 = 2608
tv476 = 2612
tv486 = 2616
tv504 = 2620
tv517 = 2624
tv527 = 2628
tv577 = 2632
tv590 = 2636
tv600 = 2640
tv618 = 2644
tv631 = 2648
tv641 = 2652
tv659 = 2656
tv672 = 2660
tv682 = 2664
?test_ivec_precision@@YAHXZ PROC			; test_ivec_precision

; 239  : {

	push	rsi
	push	rdi
	sub	rsp, 2680				; 00000a78H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 662				; 00000296H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 240  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 241  : 
; 242  : 	{
; 243  : 		glm::i8vec2 v1;

	lea	rcx, QWORD PTR v1$51[rsp]
	call	??0?$tvec2@C$0A@@glm@@QEAA@XZ		; glm::tvec2<signed char,0>::tvec2<signed char,0>

; 244  : 		glm::lowp_i8vec2 v2(v1);

	lea	rdx, QWORD PTR v1$51[rsp]
	lea	rcx, QWORD PTR v2$52[rsp]
	call	??$?0$0A@@?$tvec2@C$01@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ; glm::tvec2<signed char,2>::tvec2<signed char,2><0>

; 245  : 		glm::mediump_i8vec2 v3(v1);

	lea	rdx, QWORD PTR v1$51[rsp]
	lea	rcx, QWORD PTR v3$53[rsp]
	call	??$?0$0A@@?$tvec2@C$00@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ; glm::tvec2<signed char,1>::tvec2<signed char,1><0>

; 246  : 		glm::highp_i8vec2 v4(v1);

	movzx	eax, WORD PTR v1$51[rsp]
	mov	WORD PTR v4$54[rsp], ax

; 247  : 
; 248  : 		Error += glm::all(glm::equal(v1, glm::i8vec2(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$52[rsp]
	lea	rcx, QWORD PTR $T99[rsp]
	call	??$?0$01@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$01@1@@Z ; glm::tvec2<signed char,0>::tvec2<signed char,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$51[rsp]
	lea	rcx, QWORD PTR $T100[rsp]
	call	??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_ivec_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN4@test_ivec_
$LN3@test_ivec_:
	mov	DWORD PTR tv80[rsp], 1
$LN4@test_ivec_:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 249  : 		Error += glm::all(glm::equal(v1, glm::i8vec2(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$53[rsp]
	lea	rcx, QWORD PTR $T101[rsp]
	call	??$?0$00@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@C$00@1@@Z ; glm::tvec2<signed char,0>::tvec2<signed char,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$51[rsp]
	lea	rcx, QWORD PTR $T102[rsp]
	call	??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_ivec_
	mov	DWORD PTR tv93[rsp], 0
	jmp	SHORT $LN6@test_ivec_
$LN5@test_ivec_:
	mov	DWORD PTR tv93[rsp], 1
$LN6@test_ivec_:
	mov	eax, DWORD PTR tv93[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 250  : 		Error += glm::all(glm::equal(v1, glm::i8vec2(v4))) ? 0 : 1;

	movzx	eax, WORD PTR v4$54[rsp]
	mov	WORD PTR $T103[rsp], ax
	lea	r8, QWORD PTR $T103[rsp]
	lea	rdx, QWORD PTR v1$51[rsp]
	lea	rcx, QWORD PTR $T104[rsp]
	call	??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_ivec_
	mov	DWORD PTR tv135[rsp], 0
	jmp	SHORT $LN8@test_ivec_
$LN7@test_ivec_:
	mov	DWORD PTR tv135[rsp], 1
$LN8@test_ivec_:
	mov	eax, DWORD PTR tv135[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 251  : 	}
; 252  : 
; 253  : 	{
; 254  : 		glm::i8vec3 v1;

	lea	rcx, QWORD PTR v1$55[rsp]
	call	??0?$tvec3@C$0A@@glm@@QEAA@XZ		; glm::tvec3<signed char,0>::tvec3<signed char,0>

; 255  : 		glm::lowp_i8vec3 v2(v1);

	lea	rdx, QWORD PTR v1$55[rsp]
	lea	rcx, QWORD PTR v2$56[rsp]
	call	??$?0$0A@@?$tvec3@C$01@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z ; glm::tvec3<signed char,2>::tvec3<signed char,2><0>

; 256  : 		glm::mediump_i8vec3 v3(v1);

	lea	rdx, QWORD PTR v1$55[rsp]
	lea	rcx, QWORD PTR v3$57[rsp]
	call	??$?0$0A@@?$tvec3@C$00@glm@@QEAA@AEBU?$tvec3@C$0A@@1@@Z ; glm::tvec3<signed char,1>::tvec3<signed char,1><0>

; 257  : 		glm::highp_i8vec3 v4(v1);

	lea	rax, QWORD PTR v4$58[rsp]
	lea	rcx, QWORD PTR v1$55[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 3
	rep movsb

; 258  : 
; 259  : 		Error += glm::all(glm::equal(v1, glm::i8vec3(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$56[rsp]
	lea	rcx, QWORD PTR $T105[rsp]
	call	??$?0$01@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$01@1@@Z ; glm::tvec3<signed char,0>::tvec3<signed char,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$55[rsp]
	lea	rcx, QWORD PTR $T106[rsp]
	call	??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_ivec_
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN10@test_ivec_
$LN9@test_ivec_:
	mov	DWORD PTR tv153[rsp], 1
$LN10@test_ivec_:
	mov	eax, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 260  : 		Error += glm::all(glm::equal(v1, glm::i8vec3(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$57[rsp]
	lea	rcx, QWORD PTR $T107[rsp]
	call	??$?0$00@?$tvec3@C$0A@@glm@@QEAA@AEBU?$tvec3@C$00@1@@Z ; glm::tvec3<signed char,0>::tvec3<signed char,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$55[rsp]
	lea	rcx, QWORD PTR $T108[rsp]
	call	??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_ivec_
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN12@test_ivec_
$LN11@test_ivec_:
	mov	DWORD PTR tv166[rsp], 1
$LN12@test_ivec_:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 261  : 		Error += glm::all(glm::equal(v1, glm::i8vec3(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T109[rsp]
	lea	rcx, QWORD PTR v4$58[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 3
	rep movsb
	lea	r8, QWORD PTR $T109[rsp]
	lea	rdx, QWORD PTR v1$55[rsp]
	lea	rcx, QWORD PTR $T110[rsp]
	call	??$equal@C$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_ivec_
	mov	DWORD PTR tv176[rsp], 0
	jmp	SHORT $LN14@test_ivec_
$LN13@test_ivec_:
	mov	DWORD PTR tv176[rsp], 1
$LN14@test_ivec_:
	mov	eax, DWORD PTR tv176[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 262  : 	}
; 263  : 	
; 264  : 	{
; 265  : 		glm::i8vec4 v1;

	lea	rcx, QWORD PTR v1$59[rsp]
	call	??0?$tvec4@C$0A@@glm@@QEAA@XZ		; glm::tvec4<signed char,0>::tvec4<signed char,0>

; 266  : 		glm::lowp_i8vec4 v2(v1);

	lea	rdx, QWORD PTR v1$59[rsp]
	lea	rcx, QWORD PTR v2$60[rsp]
	call	??$?0$0A@@?$tvec4@C$01@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z ; glm::tvec4<signed char,2>::tvec4<signed char,2><0>

; 267  : 		glm::mediump_i8vec4 v3(v1);

	lea	rdx, QWORD PTR v1$59[rsp]
	lea	rcx, QWORD PTR v3$61[rsp]
	call	??$?0$0A@@?$tvec4@C$00@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z ; glm::tvec4<signed char,1>::tvec4<signed char,1><0>

; 268  : 		glm::highp_i8vec4 v4(v1);

	mov	eax, DWORD PTR v1$59[rsp]
	mov	DWORD PTR v4$62[rsp], eax

; 269  : 
; 270  : 		Error += glm::all(glm::equal(v1, glm::i8vec4(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$60[rsp]
	lea	rcx, QWORD PTR $T111[rsp]
	call	??$?0$01@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$01@1@@Z ; glm::tvec4<signed char,0>::tvec4<signed char,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$59[rsp]
	lea	rcx, QWORD PTR $T112[rsp]
	call	??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_ivec_
	mov	DWORD PTR tv194[rsp], 0
	jmp	SHORT $LN16@test_ivec_
$LN15@test_ivec_:
	mov	DWORD PTR tv194[rsp], 1
$LN16@test_ivec_:
	mov	eax, DWORD PTR tv194[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 271  : 		Error += glm::all(glm::equal(v1, glm::i8vec4(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$61[rsp]
	lea	rcx, QWORD PTR $T113[rsp]
	call	??$?0$00@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@C$00@1@@Z ; glm::tvec4<signed char,0>::tvec4<signed char,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$59[rsp]
	lea	rcx, QWORD PTR $T114[rsp]
	call	??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_ivec_
	mov	DWORD PTR tv207[rsp], 0
	jmp	SHORT $LN18@test_ivec_
$LN17@test_ivec_:
	mov	DWORD PTR tv207[rsp], 1
$LN18@test_ivec_:
	mov	eax, DWORD PTR tv207[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 272  : 		Error += glm::all(glm::equal(v1, glm::i8vec4(v4))) ? 0 : 1;

	mov	eax, DWORD PTR v4$62[rsp]
	mov	DWORD PTR $T115[rsp], eax
	lea	r8, QWORD PTR $T115[rsp]
	lea	rdx, QWORD PTR v1$59[rsp]
	lea	rcx, QWORD PTR $T116[rsp]
	call	??$equal@C$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_ivec_
	mov	DWORD PTR tv217[rsp], 0
	jmp	SHORT $LN20@test_ivec_
$LN19@test_ivec_:
	mov	DWORD PTR tv217[rsp], 1
$LN20@test_ivec_:
	mov	eax, DWORD PTR tv217[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 273  : 	}
; 274  : 
; 275  : 	{
; 276  : 		glm::i16vec2 v1;

	lea	rcx, QWORD PTR v1$63[rsp]
	call	??0?$tvec2@F$0A@@glm@@QEAA@XZ		; glm::tvec2<short,0>::tvec2<short,0>

; 277  : 		glm::lowp_i16vec2 v2(v1);

	lea	rdx, QWORD PTR v1$63[rsp]
	lea	rcx, QWORD PTR v2$64[rsp]
	call	??$?0$0A@@?$tvec2@F$01@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ; glm::tvec2<short,2>::tvec2<short,2><0>

; 278  : 		glm::mediump_i16vec2 v3(v1);

	lea	rdx, QWORD PTR v1$63[rsp]
	lea	rcx, QWORD PTR v3$65[rsp]
	call	??$?0$0A@@?$tvec2@F$00@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ; glm::tvec2<short,1>::tvec2<short,1><0>

; 279  : 		glm::highp_i16vec2 v4(v1);

	mov	eax, DWORD PTR v1$63[rsp]
	mov	DWORD PTR v4$66[rsp], eax

; 280  : 
; 281  : 		Error += glm::all(glm::equal(v1, glm::i16vec2(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$64[rsp]
	lea	rcx, QWORD PTR $T117[rsp]
	call	??$?0$01@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$01@1@@Z ; glm::tvec2<short,0>::tvec2<short,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$63[rsp]
	lea	rcx, QWORD PTR $T118[rsp]
	call	??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test_ivec_
	mov	DWORD PTR tv267[rsp], 0
	jmp	SHORT $LN22@test_ivec_
$LN21@test_ivec_:
	mov	DWORD PTR tv267[rsp], 1
$LN22@test_ivec_:
	mov	eax, DWORD PTR tv267[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 282  : 		Error += glm::all(glm::equal(v1, glm::i16vec2(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$65[rsp]
	lea	rcx, QWORD PTR $T119[rsp]
	call	??$?0$00@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@F$00@1@@Z ; glm::tvec2<short,0>::tvec2<short,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$63[rsp]
	lea	rcx, QWORD PTR $T120[rsp]
	call	??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test_ivec_
	mov	DWORD PTR tv280[rsp], 0
	jmp	SHORT $LN24@test_ivec_
$LN23@test_ivec_:
	mov	DWORD PTR tv280[rsp], 1
$LN24@test_ivec_:
	mov	eax, DWORD PTR tv280[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 283  : 		Error += glm::all(glm::equal(v1, glm::i16vec2(v4))) ? 0 : 1;

	mov	eax, DWORD PTR v4$66[rsp]
	mov	DWORD PTR $T121[rsp], eax
	lea	r8, QWORD PTR $T121[rsp]
	lea	rdx, QWORD PTR v1$63[rsp]
	lea	rcx, QWORD PTR $T122[rsp]
	call	??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test_ivec_
	mov	DWORD PTR tv290[rsp], 0
	jmp	SHORT $LN26@test_ivec_
$LN25@test_ivec_:
	mov	DWORD PTR tv290[rsp], 1
$LN26@test_ivec_:
	mov	eax, DWORD PTR tv290[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 284  : 	}
; 285  : 
; 286  : 	{
; 287  : 		glm::i16vec3 v1;

	lea	rcx, QWORD PTR v1$67[rsp]
	call	??0?$tvec3@F$0A@@glm@@QEAA@XZ		; glm::tvec3<short,0>::tvec3<short,0>

; 288  : 		glm::lowp_i16vec3 v2(v1);

	lea	rdx, QWORD PTR v1$67[rsp]
	lea	rcx, QWORD PTR v2$68[rsp]
	call	??$?0$0A@@?$tvec3@F$01@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z ; glm::tvec3<short,2>::tvec3<short,2><0>

; 289  : 		glm::mediump_i16vec3 v3(v1);

	lea	rdx, QWORD PTR v1$67[rsp]
	lea	rcx, QWORD PTR v3$69[rsp]
	call	??$?0$0A@@?$tvec3@F$00@glm@@QEAA@AEBU?$tvec3@F$0A@@1@@Z ; glm::tvec3<short,1>::tvec3<short,1><0>

; 290  : 		glm::highp_i16vec3 v4(v1);

	lea	rax, QWORD PTR v4$70[rsp]
	lea	rcx, QWORD PTR v1$67[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 6
	rep movsb

; 291  : 
; 292  : 		Error += glm::all(glm::equal(v1, glm::i16vec3(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$68[rsp]
	lea	rcx, QWORD PTR $T123[rsp]
	call	??$?0$01@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$01@1@@Z ; glm::tvec3<short,0>::tvec3<short,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$67[rsp]
	lea	rcx, QWORD PTR $T124[rsp]
	call	??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@test_ivec_
	mov	DWORD PTR tv308[rsp], 0
	jmp	SHORT $LN28@test_ivec_
$LN27@test_ivec_:
	mov	DWORD PTR tv308[rsp], 1
$LN28@test_ivec_:
	mov	eax, DWORD PTR tv308[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 293  : 		Error += glm::all(glm::equal(v1, glm::i16vec3(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$69[rsp]
	lea	rcx, QWORD PTR $T125[rsp]
	call	??$?0$00@?$tvec3@F$0A@@glm@@QEAA@AEBU?$tvec3@F$00@1@@Z ; glm::tvec3<short,0>::tvec3<short,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$67[rsp]
	lea	rcx, QWORD PTR $T126[rsp]
	call	??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@test_ivec_
	mov	DWORD PTR tv321[rsp], 0
	jmp	SHORT $LN30@test_ivec_
$LN29@test_ivec_:
	mov	DWORD PTR tv321[rsp], 1
$LN30@test_ivec_:
	mov	eax, DWORD PTR tv321[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 294  : 		Error += glm::all(glm::equal(v1, glm::i16vec3(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T127[rsp]
	lea	rcx, QWORD PTR v4$70[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 6
	rep movsb
	lea	r8, QWORD PTR $T127[rsp]
	lea	rdx, QWORD PTR v1$67[rsp]
	lea	rcx, QWORD PTR $T128[rsp]
	call	??$equal@F$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@test_ivec_
	mov	DWORD PTR tv331[rsp], 0
	jmp	SHORT $LN32@test_ivec_
$LN31@test_ivec_:
	mov	DWORD PTR tv331[rsp], 1
$LN32@test_ivec_:
	mov	eax, DWORD PTR tv331[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 295  : 	}
; 296  : 	
; 297  : 	{
; 298  : 		glm::i16vec4 v1;

	lea	rcx, QWORD PTR v1$71[rsp]
	call	??0?$tvec4@F$0A@@glm@@QEAA@XZ		; glm::tvec4<short,0>::tvec4<short,0>

; 299  : 		glm::lowp_i16vec4 v2(v1);

	lea	rdx, QWORD PTR v1$71[rsp]
	lea	rcx, QWORD PTR v2$72[rsp]
	call	??$?0$0A@@?$tvec4@F$01@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ; glm::tvec4<short,2>::tvec4<short,2><0>

; 300  : 		glm::mediump_i16vec4 v3(v1);

	lea	rdx, QWORD PTR v1$71[rsp]
	lea	rcx, QWORD PTR v3$73[rsp]
	call	??$?0$0A@@?$tvec4@F$00@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ; glm::tvec4<short,1>::tvec4<short,1><0>

; 301  : 		glm::highp_i16vec4 v4(v1);

	mov	rax, QWORD PTR v1$71[rsp]
	mov	QWORD PTR v4$74[rsp], rax

; 302  : 
; 303  : 		Error += glm::all(glm::equal(v1, glm::i16vec4(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$72[rsp]
	lea	rcx, QWORD PTR $T129[rsp]
	call	??$?0$01@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$01@1@@Z ; glm::tvec4<short,0>::tvec4<short,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$71[rsp]
	lea	rcx, QWORD PTR $T130[rsp]
	call	??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@test_ivec_
	mov	DWORD PTR tv349[rsp], 0
	jmp	SHORT $LN34@test_ivec_
$LN33@test_ivec_:
	mov	DWORD PTR tv349[rsp], 1
$LN34@test_ivec_:
	mov	eax, DWORD PTR tv349[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 304  : 		Error += glm::all(glm::equal(v1, glm::i16vec4(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$73[rsp]
	lea	rcx, QWORD PTR $T131[rsp]
	call	??$?0$00@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@F$00@1@@Z ; glm::tvec4<short,0>::tvec4<short,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$71[rsp]
	lea	rcx, QWORD PTR $T132[rsp]
	call	??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN35@test_ivec_
	mov	DWORD PTR tv362[rsp], 0
	jmp	SHORT $LN36@test_ivec_
$LN35@test_ivec_:
	mov	DWORD PTR tv362[rsp], 1
$LN36@test_ivec_:
	mov	eax, DWORD PTR tv362[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 305  : 		Error += glm::all(glm::equal(v1, glm::i16vec4(v4))) ? 0 : 1;

	mov	rax, QWORD PTR v4$74[rsp]
	mov	QWORD PTR $T133[rsp], rax
	lea	r8, QWORD PTR $T133[rsp]
	lea	rdx, QWORD PTR v1$71[rsp]
	lea	rcx, QWORD PTR $T134[rsp]
	call	??$equal@F$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN37@test_ivec_
	mov	DWORD PTR tv372[rsp], 0
	jmp	SHORT $LN38@test_ivec_
$LN37@test_ivec_:
	mov	DWORD PTR tv372[rsp], 1
$LN38@test_ivec_:
	mov	eax, DWORD PTR tv372[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 306  : 	}
; 307  : 
; 308  : 	{
; 309  : 		glm::i32vec2 v1;

	lea	rcx, QWORD PTR v1$75[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@XZ		; glm::tvec2<int,0>::tvec2<int,0>

; 310  : 		glm::lowp_i32vec2 v2(v1);

	lea	rdx, QWORD PTR v1$75[rsp]
	lea	rcx, QWORD PTR v2$76[rsp]
	call	??$?0$0A@@?$tvec2@H$01@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ; glm::tvec2<int,2>::tvec2<int,2><0>

; 311  : 		glm::mediump_i32vec2 v3(v1);

	lea	rdx, QWORD PTR v1$75[rsp]
	lea	rcx, QWORD PTR v3$77[rsp]
	call	??$?0$0A@@?$tvec2@H$00@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ; glm::tvec2<int,1>::tvec2<int,1><0>

; 312  : 		glm::highp_i32vec2 v4(v1);

	mov	rax, QWORD PTR v1$75[rsp]
	mov	QWORD PTR v4$78[rsp], rax

; 313  : 
; 314  : 		Error += glm::all(glm::equal(v1, glm::i32vec2(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$76[rsp]
	lea	rcx, QWORD PTR $T135[rsp]
	call	??$?0$01@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$01@1@@Z ; glm::tvec2<int,0>::tvec2<int,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$75[rsp]
	lea	rcx, QWORD PTR $T136[rsp]
	call	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN39@test_ivec_
	mov	DWORD PTR tv422[rsp], 0
	jmp	SHORT $LN40@test_ivec_
$LN39@test_ivec_:
	mov	DWORD PTR tv422[rsp], 1
$LN40@test_ivec_:
	mov	eax, DWORD PTR tv422[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 315  : 		Error += glm::all(glm::equal(v1, glm::i32vec2(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$77[rsp]
	lea	rcx, QWORD PTR $T137[rsp]
	call	??$?0$00@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@H$00@1@@Z ; glm::tvec2<int,0>::tvec2<int,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$75[rsp]
	lea	rcx, QWORD PTR $T138[rsp]
	call	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN41@test_ivec_
	mov	DWORD PTR tv435[rsp], 0
	jmp	SHORT $LN42@test_ivec_
$LN41@test_ivec_:
	mov	DWORD PTR tv435[rsp], 1
$LN42@test_ivec_:
	mov	eax, DWORD PTR tv435[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 316  : 		Error += glm::all(glm::equal(v1, glm::i32vec2(v4))) ? 0 : 1;

	mov	rax, QWORD PTR v4$78[rsp]
	mov	QWORD PTR $T139[rsp], rax
	lea	r8, QWORD PTR $T139[rsp]
	lea	rdx, QWORD PTR v1$75[rsp]
	lea	rcx, QWORD PTR $T140[rsp]
	call	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN43@test_ivec_
	mov	DWORD PTR tv445[rsp], 0
	jmp	SHORT $LN44@test_ivec_
$LN43@test_ivec_:
	mov	DWORD PTR tv445[rsp], 1
$LN44@test_ivec_:
	mov	eax, DWORD PTR tv445[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 317  : 	}
; 318  : 
; 319  : 	{
; 320  : 		glm::i32vec3 v1;

	lea	rcx, QWORD PTR v1$79[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@XZ		; glm::tvec3<int,0>::tvec3<int,0>

; 321  : 		glm::lowp_i32vec3 v2(v1);

	lea	rdx, QWORD PTR v1$79[rsp]
	lea	rcx, QWORD PTR v2$80[rsp]
	call	??$?0$0A@@?$tvec3@H$01@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z ; glm::tvec3<int,2>::tvec3<int,2><0>

; 322  : 		glm::mediump_i32vec3 v3(v1);

	lea	rdx, QWORD PTR v1$79[rsp]
	lea	rcx, QWORD PTR v3$81[rsp]
	call	??$?0$0A@@?$tvec3@H$00@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z ; glm::tvec3<int,1>::tvec3<int,1><0>

; 323  : 		glm::highp_i32vec3 v4(v1);

	lea	rax, QWORD PTR v4$82[rsp]
	lea	rcx, QWORD PTR v1$79[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb

; 324  : 
; 325  : 		Error += glm::all(glm::equal(v1, glm::i32vec3(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$80[rsp]
	lea	rcx, QWORD PTR $T141[rsp]
	call	??$?0$01@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$01@1@@Z ; glm::tvec3<int,0>::tvec3<int,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$79[rsp]
	lea	rcx, QWORD PTR $T142[rsp]
	call	??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN45@test_ivec_
	mov	DWORD PTR tv463[rsp], 0
	jmp	SHORT $LN46@test_ivec_
$LN45@test_ivec_:
	mov	DWORD PTR tv463[rsp], 1
$LN46@test_ivec_:
	mov	eax, DWORD PTR tv463[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 326  : 		Error += glm::all(glm::equal(v1, glm::i32vec3(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$81[rsp]
	lea	rcx, QWORD PTR $T143[rsp]
	call	??$?0$00@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@H$00@1@@Z ; glm::tvec3<int,0>::tvec3<int,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$79[rsp]
	lea	rcx, QWORD PTR $T144[rsp]
	call	??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN47@test_ivec_
	mov	DWORD PTR tv476[rsp], 0
	jmp	SHORT $LN48@test_ivec_
$LN47@test_ivec_:
	mov	DWORD PTR tv476[rsp], 1
$LN48@test_ivec_:
	mov	eax, DWORD PTR tv476[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 327  : 		Error += glm::all(glm::equal(v1, glm::i32vec3(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T145[rsp]
	lea	rcx, QWORD PTR v4$82[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T145[rsp]
	lea	rdx, QWORD PTR v1$79[rsp]
	lea	rcx, QWORD PTR $T146[rsp]
	call	??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN49@test_ivec_
	mov	DWORD PTR tv486[rsp], 0
	jmp	SHORT $LN50@test_ivec_
$LN49@test_ivec_:
	mov	DWORD PTR tv486[rsp], 1
$LN50@test_ivec_:
	mov	eax, DWORD PTR tv486[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 328  : 	}
; 329  : 	
; 330  : 	{
; 331  : 		glm::i32vec4 v1;

	lea	rcx, QWORD PTR v1$83[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@XZ		; glm::tvec4<int,0>::tvec4<int,0>

; 332  : 		glm::lowp_i32vec4 v2(v1);

	lea	rdx, QWORD PTR v1$83[rsp]
	lea	rcx, QWORD PTR v2$84[rsp]
	call	??$?0$0A@@?$tvec4@H$01@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z ; glm::tvec4<int,2>::tvec4<int,2><0>

; 333  : 		glm::mediump_i32vec4 v3(v1);

	lea	rdx, QWORD PTR v1$83[rsp]
	lea	rcx, QWORD PTR v3$85[rsp]
	call	??$?0$0A@@?$tvec4@H$00@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z ; glm::tvec4<int,1>::tvec4<int,1><0>

; 334  : 		glm::highp_i32vec4 v4(v1);

	lea	rax, QWORD PTR v4$86[rsp]
	lea	rcx, QWORD PTR v1$83[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb

; 335  : 
; 336  : 		Error += glm::all(glm::equal(v1, glm::i32vec4(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$84[rsp]
	lea	rcx, QWORD PTR $T147[rsp]
	call	??$?0$01@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$01@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$83[rsp]
	lea	rcx, QWORD PTR $T148[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN51@test_ivec_
	mov	DWORD PTR tv504[rsp], 0
	jmp	SHORT $LN52@test_ivec_
$LN51@test_ivec_:
	mov	DWORD PTR tv504[rsp], 1
$LN52@test_ivec_:
	mov	eax, DWORD PTR tv504[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 337  : 		Error += glm::all(glm::equal(v1, glm::i32vec4(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$85[rsp]
	lea	rcx, QWORD PTR $T149[rsp]
	call	??$?0$00@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@H$00@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$83[rsp]
	lea	rcx, QWORD PTR $T150[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN53@test_ivec_
	mov	DWORD PTR tv517[rsp], 0
	jmp	SHORT $LN54@test_ivec_
$LN53@test_ivec_:
	mov	DWORD PTR tv517[rsp], 1
$LN54@test_ivec_:
	mov	eax, DWORD PTR tv517[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 338  : 		Error += glm::all(glm::equal(v1, glm::i32vec4(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T151[rsp]
	lea	rcx, QWORD PTR v4$86[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T151[rsp]
	lea	rdx, QWORD PTR v1$83[rsp]
	lea	rcx, QWORD PTR $T152[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN55@test_ivec_
	mov	DWORD PTR tv527[rsp], 0
	jmp	SHORT $LN56@test_ivec_
$LN55@test_ivec_:
	mov	DWORD PTR tv527[rsp], 1
$LN56@test_ivec_:
	mov	eax, DWORD PTR tv527[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 339  : 	}
; 340  : 	
; 341  : 	{
; 342  : 		glm::i64vec2 v1;

	lea	rcx, QWORD PTR v1$87[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@XZ		; glm::tvec2<__int64,0>::tvec2<__int64,0>

; 343  : 		glm::lowp_i64vec2 v2(v1);

	lea	rdx, QWORD PTR v1$87[rsp]
	lea	rcx, QWORD PTR v2$88[rsp]
	call	??$?0$0A@@?$tvec2@_J$01@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ; glm::tvec2<__int64,2>::tvec2<__int64,2><0>

; 344  : 		glm::mediump_i64vec2 v3(v1);

	lea	rdx, QWORD PTR v1$87[rsp]
	lea	rcx, QWORD PTR v3$89[rsp]
	call	??$?0$0A@@?$tvec2@_J$00@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ; glm::tvec2<__int64,1>::tvec2<__int64,1><0>

; 345  : 		glm::highp_i64vec2 v4(v1);

	lea	rax, QWORD PTR v4$90[rsp]
	lea	rcx, QWORD PTR v1$87[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb

; 346  : 
; 347  : 		Error += glm::all(glm::equal(v1, glm::i64vec2(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$88[rsp]
	lea	rcx, QWORD PTR $T153[rsp]
	call	??$?0$01@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$01@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$87[rsp]
	lea	rcx, QWORD PTR $T154[rsp]
	call	??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN57@test_ivec_
	mov	DWORD PTR tv577[rsp], 0
	jmp	SHORT $LN58@test_ivec_
$LN57@test_ivec_:
	mov	DWORD PTR tv577[rsp], 1
$LN58@test_ivec_:
	mov	eax, DWORD PTR tv577[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 348  : 		Error += glm::all(glm::equal(v1, glm::i64vec2(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$89[rsp]
	lea	rcx, QWORD PTR $T155[rsp]
	call	??$?0$00@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_J$00@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$87[rsp]
	lea	rcx, QWORD PTR $T156[rsp]
	call	??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN59@test_ivec_
	mov	DWORD PTR tv590[rsp], 0
	jmp	SHORT $LN60@test_ivec_
$LN59@test_ivec_:
	mov	DWORD PTR tv590[rsp], 1
$LN60@test_ivec_:
	mov	eax, DWORD PTR tv590[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 349  : 		Error += glm::all(glm::equal(v1, glm::i64vec2(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T157[rsp]
	lea	rcx, QWORD PTR v4$90[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T157[rsp]
	lea	rdx, QWORD PTR v1$87[rsp]
	lea	rcx, QWORD PTR $T158[rsp]
	call	??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN61@test_ivec_
	mov	DWORD PTR tv600[rsp], 0
	jmp	SHORT $LN62@test_ivec_
$LN61@test_ivec_:
	mov	DWORD PTR tv600[rsp], 1
$LN62@test_ivec_:
	mov	eax, DWORD PTR tv600[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 350  : 	}
; 351  : 
; 352  : 	{
; 353  : 		glm::i64vec3 v1;

	lea	rcx, QWORD PTR v1$91[rsp]
	call	??0?$tvec3@_J$0A@@glm@@QEAA@XZ		; glm::tvec3<__int64,0>::tvec3<__int64,0>

; 354  : 		glm::lowp_i64vec3 v2(v1);

	lea	rdx, QWORD PTR v1$91[rsp]
	lea	rcx, QWORD PTR v2$92[rsp]
	call	??$?0$0A@@?$tvec3@_J$01@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ; glm::tvec3<__int64,2>::tvec3<__int64,2><0>

; 355  : 		glm::mediump_i64vec3 v3(v1);

	lea	rdx, QWORD PTR v1$91[rsp]
	lea	rcx, QWORD PTR v3$93[rsp]
	call	??$?0$0A@@?$tvec3@_J$00@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ; glm::tvec3<__int64,1>::tvec3<__int64,1><0>

; 356  : 		glm::highp_i64vec3 v4(v1);

	lea	rax, QWORD PTR v4$94[rsp]
	lea	rcx, QWORD PTR v1$91[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb

; 357  : 
; 358  : 		Error += glm::all(glm::equal(v1, glm::i64vec3(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$92[rsp]
	lea	rcx, QWORD PTR $T159[rsp]
	call	??$?0$01@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$01@1@@Z ; glm::tvec3<__int64,0>::tvec3<__int64,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$91[rsp]
	lea	rcx, QWORD PTR $T160[rsp]
	call	??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN63@test_ivec_
	mov	DWORD PTR tv618[rsp], 0
	jmp	SHORT $LN64@test_ivec_
$LN63@test_ivec_:
	mov	DWORD PTR tv618[rsp], 1
$LN64@test_ivec_:
	mov	eax, DWORD PTR tv618[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 359  : 		Error += glm::all(glm::equal(v1, glm::i64vec3(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$93[rsp]
	lea	rcx, QWORD PTR $T161[rsp]
	call	??$?0$00@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@_J$00@1@@Z ; glm::tvec3<__int64,0>::tvec3<__int64,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$91[rsp]
	lea	rcx, QWORD PTR $T162[rsp]
	call	??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN65@test_ivec_
	mov	DWORD PTR tv631[rsp], 0
	jmp	SHORT $LN66@test_ivec_
$LN65@test_ivec_:
	mov	DWORD PTR tv631[rsp], 1
$LN66@test_ivec_:
	mov	eax, DWORD PTR tv631[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 360  : 		Error += glm::all(glm::equal(v1, glm::i64vec3(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T163[rsp]
	lea	rcx, QWORD PTR v4$94[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, QWORD PTR $T163[rsp]
	lea	rdx, QWORD PTR v1$91[rsp]
	lea	rcx, QWORD PTR $T164[rsp]
	call	??$equal@_J$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN67@test_ivec_
	mov	DWORD PTR tv641[rsp], 0
	jmp	SHORT $LN68@test_ivec_
$LN67@test_ivec_:
	mov	DWORD PTR tv641[rsp], 1
$LN68@test_ivec_:
	mov	eax, DWORD PTR tv641[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 361  : 	}
; 362  : 	
; 363  : 	{
; 364  : 		glm::i64vec4 v1;

	lea	rcx, QWORD PTR v1$95[rsp]
	call	??0?$tvec4@_J$0A@@glm@@QEAA@XZ		; glm::tvec4<__int64,0>::tvec4<__int64,0>

; 365  : 		glm::lowp_i64vec4 v2(v1);

	lea	rdx, QWORD PTR v1$95[rsp]
	lea	rcx, QWORD PTR v2$96[rsp]
	call	??$?0$0A@@?$tvec4@_J$01@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ; glm::tvec4<__int64,2>::tvec4<__int64,2><0>

; 366  : 		glm::mediump_i64vec4 v3(v1);

	lea	rdx, QWORD PTR v1$95[rsp]
	lea	rcx, QWORD PTR v3$97[rsp]
	call	??$?0$0A@@?$tvec4@_J$00@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ; glm::tvec4<__int64,1>::tvec4<__int64,1><0>

; 367  : 		glm::highp_i64vec4 v4(v1);

	lea	rax, QWORD PTR v4$98[rsp]
	lea	rcx, QWORD PTR v1$95[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb

; 368  : 
; 369  : 		Error += glm::all(glm::equal(v1, glm::i64vec4(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$96[rsp]
	lea	rcx, QWORD PTR $T165[rsp]
	call	??$?0$01@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$01@1@@Z ; glm::tvec4<__int64,0>::tvec4<__int64,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$95[rsp]
	lea	rcx, QWORD PTR $T166[rsp]
	call	??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN69@test_ivec_
	mov	DWORD PTR tv659[rsp], 0
	jmp	SHORT $LN70@test_ivec_
$LN69@test_ivec_:
	mov	DWORD PTR tv659[rsp], 1
$LN70@test_ivec_:
	mov	eax, DWORD PTR tv659[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 370  : 		Error += glm::all(glm::equal(v1, glm::i64vec4(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$97[rsp]
	lea	rcx, QWORD PTR $T167[rsp]
	call	??$?0$00@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@_J$00@1@@Z ; glm::tvec4<__int64,0>::tvec4<__int64,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$95[rsp]
	lea	rcx, QWORD PTR $T168[rsp]
	call	??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN71@test_ivec_
	mov	DWORD PTR tv672[rsp], 0
	jmp	SHORT $LN72@test_ivec_
$LN71@test_ivec_:
	mov	DWORD PTR tv672[rsp], 1
$LN72@test_ivec_:
	mov	eax, DWORD PTR tv672[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 371  : 		Error += glm::all(glm::equal(v1, glm::i64vec4(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T169[rsp]
	lea	rcx, QWORD PTR v4$98[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T169[rsp]
	lea	rdx, QWORD PTR v1$95[rsp]
	lea	rcx, QWORD PTR $T170[rsp]
	call	??$equal@_J$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN73@test_ivec_
	mov	DWORD PTR tv682[rsp], 0
	jmp	SHORT $LN74@test_ivec_
$LN73@test_ivec_:
	mov	DWORD PTR tv682[rsp], 1
$LN74@test_ivec_:
	mov	eax, DWORD PTR tv682[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 372  : 	}
; 373  : 	
; 374  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 375  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_ivec_precision@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 2680				; 00000a78H
	pop	rdi
	pop	rsi
	ret	0
?test_ivec_precision@@YAHXZ ENDP			; test_ivec_precision
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@_J$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_J$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z PROC		; glm::tvec4<__int64,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_J$0A@@glm@@SAHXZ	; glm::tvec4<__int64,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_J$0A@@glm@@QEBAAEB_JH@Z ENDP		; glm::tvec4<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_J$0A@@glm@@SAHXZ PROC			; glm::tvec4<__int64,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec4<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@_J$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_J$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z PROC		; glm::tvec3<__int64,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_J$0A@@glm@@SAHXZ	; glm::tvec3<__int64,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_J$0A@@glm@@QEBAAEB_JH@Z ENDP		; glm::tvec3<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_J$0A@@glm@@SAHXZ PROC			; glm::tvec3<__int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec3<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@_J$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_J$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z PROC		; glm::tvec2<__int64,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z ENDP		; glm::tvec2<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_J$0A@@glm@@SAHXZ PROC			; glm::tvec2<__int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec2<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+12], 0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+8], 0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec3<int,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec3<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$0A@@glm@@SAHXZ PROC			; glm::tvec3<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@H$0A@@glm@@SAHXZ ENDP			; glm::tvec3<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec2<int,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec2<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$0A@@glm@@SAHXZ PROC			; glm::tvec2<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@H$0A@@glm@@SAHXZ ENDP			; glm::tvec2<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@F$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+4], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+6], ax

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@F$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z PROC			; glm::tvec4<short,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@F$0A@@glm@@SAHXZ	; glm::tvec4<short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@F$0A@@glm@@QEBAAEBFH@Z ENDP			; glm::tvec4<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@F$0A@@glm@@SAHXZ PROC			; glm::tvec4<short,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@F$0A@@glm@@SAHXZ ENDP			; glm::tvec4<short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@F$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@F$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<short,0>::tvec3<short,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+4], ax

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@F$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<short,0>::tvec3<short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z PROC			; glm::tvec3<short,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@F$0A@@glm@@SAHXZ	; glm::tvec3<short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@F$0A@@glm@@QEBAAEBFH@Z ENDP			; glm::tvec3<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@F$0A@@glm@@SAHXZ PROC			; glm::tvec3<short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@F$0A@@glm@@SAHXZ ENDP			; glm::tvec3<short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@C$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@C$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<signed char,0>::tvec3<signed char,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+1], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2], 0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@C$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<signed char,0>::tvec3<signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z PROC			; glm::tvec3<signed char,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@C$0A@@glm@@SAHXZ	; glm::tvec3<signed char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@C$0A@@glm@@QEBAAEBCH@Z ENDP			; glm::tvec3<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@C$0A@@glm@@SAHXZ PROC			; glm::tvec3<signed char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@C$0A@@glm@@SAHXZ ENDP			; glm::tvec3<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@C$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+1], 0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@C$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z PROC			; glm::tvec2<signed char,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z ENDP			; glm::tvec2<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@C$0A@@glm@@SAHXZ PROC			; glm::tvec2<signed char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@C$0A@@glm@@SAHXZ ENDP			; glm::tvec2<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 0
?test_ivec_size@@YAHXZ PROC				; test_ivec_size

; 182  : {

	push	rdi
	sub	rsp, 16

; 183  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 184  : 	Error += sizeof(glm::i8vec2) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 185  : 	Error += sizeof(glm::i8vec3) != 3;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 186  : 	Error += sizeof(glm::i8vec4) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 187  : 	Error += sizeof(glm::i16vec2) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 188  : 	Error += sizeof(glm::i16vec3) != 6;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 189  : 	Error += sizeof(glm::i16vec4) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 190  : 	Error += sizeof(glm::i32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 191  : 	Error += sizeof(glm::i32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 192  : 	Error += sizeof(glm::i32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 193  : 	Error += sizeof(glm::i64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 194  : 	Error += sizeof(glm::i64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 195  : 	Error += sizeof(glm::i64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 196  : 	
; 197  : 	Error += sizeof(glm::lowp_i8vec2) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 198  : 	Error += sizeof(glm::lowp_i8vec3) != 3;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 199  : 	Error += sizeof(glm::lowp_i8vec4) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 200  : 	Error += sizeof(glm::lowp_i16vec2) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 201  : 	Error += sizeof(glm::lowp_i16vec3) != 6;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 202  : 	Error += sizeof(glm::lowp_i16vec4) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 203  : 	Error += sizeof(glm::lowp_i32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 204  : 	Error += sizeof(glm::lowp_i32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 205  : 	Error += sizeof(glm::lowp_i32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 206  : 	Error += sizeof(glm::lowp_i64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 207  : 	Error += sizeof(glm::lowp_i64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 208  : 	Error += sizeof(glm::lowp_i64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 209  : 	
; 210  : 	Error += sizeof(glm::mediump_i8vec2) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 211  : 	Error += sizeof(glm::mediump_i8vec3) != 3;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 212  : 	Error += sizeof(glm::mediump_i8vec4) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 213  : 	Error += sizeof(glm::mediump_i16vec2) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 214  : 	Error += sizeof(glm::mediump_i16vec3) != 6;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 215  : 	Error += sizeof(glm::mediump_i16vec4) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 216  : 	Error += sizeof(glm::mediump_i32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 217  : 	Error += sizeof(glm::mediump_i32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 218  : 	Error += sizeof(glm::mediump_i32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 219  : 	Error += sizeof(glm::mediump_i64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 220  : 	Error += sizeof(glm::mediump_i64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 221  : 	Error += sizeof(glm::mediump_i64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 222  : 	
; 223  : 	Error += sizeof(glm::highp_i8vec2) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 224  : 	Error += sizeof(glm::highp_i8vec3) != 3;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 225  : 	Error += sizeof(glm::highp_i8vec4) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 226  : 	Error += sizeof(glm::highp_i16vec2) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 227  : 	Error += sizeof(glm::highp_i16vec3) != 6;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 228  : 	Error += sizeof(glm::highp_i16vec4) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 229  : 	Error += sizeof(glm::highp_i32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 230  : 	Error += sizeof(glm::highp_i32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 231  : 	Error += sizeof(glm::highp_i32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 232  : 	Error += sizeof(glm::highp_i64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 233  : 	Error += sizeof(glm::highp_i64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 234  : 	Error += sizeof(glm::highp_i64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 235  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 236  : }

	add	rsp, 16
	pop	rdi
	ret	0
?test_ivec_size@@YAHXZ ENDP				; test_ivec_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$00@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z PROC ; glm::tvec4<double,0>::tvec4<double,0><1>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+16]
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+24]
	movsd	QWORD PTR [rax+24], xmm0

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ENDP ; glm::tvec4<double,0>::tvec4<double,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z PROC ; glm::equal<double,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@N$0A@@glm@@SAHXZ	; glm::tvec4<double,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@N$0A@@glm@@SAHXZ	; glm::tvec4<double,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@N$0A@@glm@@SAHXZ	; glm::tvec4<double,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	ucomisd	xmm0, QWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z ENDP ; glm::equal<double,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$01@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z PROC ; glm::tvec4<double,0>::tvec4<double,0><2>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+16]
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+24]
	movsd	QWORD PTR [rax+24], xmm0

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ENDP ; glm::tvec4<double,0>::tvec4<double,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z PROC ; glm::tvec4<double,1>::tvec4<double,1><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+16]
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+24]
	movsd	QWORD PTR [rax+24], xmm0

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ENDP ; glm::tvec4<double,1>::tvec4<double,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z PROC ; glm::tvec4<double,2>::tvec4<double,2><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+16]
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+24]
	movsd	QWORD PTR [rax+24], xmm0

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ENDP ; glm::tvec4<double,2>::tvec4<double,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$00@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z PROC ; glm::tvec3<double,0>::tvec3<double,0><1>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+16]
	movsd	QWORD PTR [rax+16], xmm0

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ENDP ; glm::tvec3<double,0>::tvec3<double,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z PROC ; glm::equal<double,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@N$0A@@glm@@SAHXZ	; glm::tvec3<double,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@N$0A@@glm@@SAHXZ	; glm::tvec3<double,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@N$0A@@glm@@SAHXZ	; glm::tvec3<double,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	ucomisd	xmm0, QWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z ENDP ; glm::equal<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$01@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z PROC ; glm::tvec3<double,0>::tvec3<double,0><2>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+16]
	movsd	QWORD PTR [rax+16], xmm0

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ENDP ; glm::tvec3<double,0>::tvec3<double,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z PROC ; glm::tvec3<double,1>::tvec3<double,1><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+16]
	movsd	QWORD PTR [rax+16], xmm0

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ENDP ; glm::tvec3<double,1>::tvec3<double,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z PROC ; glm::tvec3<double,2>::tvec3<double,2><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+16]
	movsd	QWORD PTR [rax+16], xmm0

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ENDP ; glm::tvec3<double,2>::tvec3<double,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$00@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$00@1@@Z PROC ; glm::tvec2<double,0>::tvec2<double,0><1>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$00@1@@Z ENDP ; glm::tvec2<double,0>::tvec2<double,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z PROC ; glm::equal<double,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec2<double,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec2<double,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	ucomisd	xmm0, QWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ENDP ; glm::equal<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$01@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$01@1@@Z PROC ; glm::tvec2<double,0>::tvec2<double,0><2>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$01@1@@Z ENDP ; glm::tvec2<double,0>::tvec2<double,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z PROC ; glm::tvec2<double,1>::tvec2<double,1><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z ENDP ; glm::tvec2<double,1>::tvec2<double,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z PROC ; glm::tvec2<double,2>::tvec2<double,2><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	movsd	QWORD PTR [rax+8], xmm0

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z ENDP ; glm::tvec2<double,2>::tvec2<double,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 32
v1$15 = 56
v2$16 = 104
v3$17 = 152
v4$18 = 200
v1$19 = 248
v2$20 = 296
v3$21 = 344
v4$22 = 392
v1$23 = 440
v2$24 = 504
v3$25 = 568
v4$26 = 632
$T27 = 680
$T28 = 696
$T29 = 704
$T30 = 720
$T31 = 728
$T32 = 744
$T33 = 752
$T34 = 776
$T35 = 784
$T36 = 808
$T37 = 816
$T38 = 840
$T39 = 848
$T40 = 880
$T41 = 888
$T42 = 920
$T43 = 928
$T44 = 960
tv80 = 964
tv93 = 968
tv135 = 972
tv153 = 976
tv166 = 980
tv176 = 984
tv194 = 988
tv207 = 992
tv217 = 996
?test_dvec_precision@@YAHXZ PROC			; test_dvec_precision

; 142  : {

	push	rsi
	push	rdi
	sub	rsp, 1016				; 000003f8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 246				; 000000f6H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 143  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 144  : 	
; 145  : 	{
; 146  : 		glm::f64vec2 v1;

	lea	rcx, QWORD PTR v1$15[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@XZ		; glm::tvec2<double,0>::tvec2<double,0>

; 147  : 		glm::lowp_f64vec2 v2(v1);

	lea	rdx, QWORD PTR v1$15[rsp]
	lea	rcx, QWORD PTR v2$16[rsp]
	call	??$?0$0A@@?$tvec2@N$01@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z ; glm::tvec2<double,2>::tvec2<double,2><0>

; 148  : 		glm::mediump_f64vec2 v3(v1);

	lea	rdx, QWORD PTR v1$15[rsp]
	lea	rcx, QWORD PTR v3$17[rsp]
	call	??$?0$0A@@?$tvec2@N$00@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z ; glm::tvec2<double,1>::tvec2<double,1><0>

; 149  : 		glm::highp_f64vec2 v4(v1);

	lea	rax, QWORD PTR v4$18[rsp]
	lea	rcx, QWORD PTR v1$15[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb

; 150  : 
; 151  : 		Error += glm::all(glm::equal(v1, glm::f64vec2(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$16[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?0$01@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$01@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$15[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_dvec_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN4@test_dvec_
$LN3@test_dvec_:
	mov	DWORD PTR tv80[rsp], 1
$LN4@test_dvec_:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 152  : 		Error += glm::all(glm::equal(v1, glm::f64vec2(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$17[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?0$00@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@N$00@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$15[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_dvec_
	mov	DWORD PTR tv93[rsp], 0
	jmp	SHORT $LN6@test_dvec_
$LN5@test_dvec_:
	mov	DWORD PTR tv93[rsp], 1
$LN6@test_dvec_:
	mov	eax, DWORD PTR tv93[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 153  : 		Error += glm::all(glm::equal(v1, glm::f64vec2(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T31[rsp]
	lea	rcx, QWORD PTR v4$18[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T31[rsp]
	lea	rdx, QWORD PTR v1$15[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$equal@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_dvec_
	mov	DWORD PTR tv135[rsp], 0
	jmp	SHORT $LN8@test_dvec_
$LN7@test_dvec_:
	mov	DWORD PTR tv135[rsp], 1
$LN8@test_dvec_:
	mov	eax, DWORD PTR tv135[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 154  : 	}
; 155  : 
; 156  : 	{
; 157  : 		glm::f64vec3 v1;

	lea	rcx, QWORD PTR v1$19[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@XZ		; glm::tvec3<double,0>::tvec3<double,0>

; 158  : 		glm::lowp_f64vec3 v2(v1);

	lea	rdx, QWORD PTR v1$19[rsp]
	lea	rcx, QWORD PTR v2$20[rsp]
	call	??$?0$0A@@?$tvec3@N$01@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec3<double,2>::tvec3<double,2><0>

; 159  : 		glm::mediump_f64vec3 v3(v1);

	lea	rdx, QWORD PTR v1$19[rsp]
	lea	rcx, QWORD PTR v3$21[rsp]
	call	??$?0$0A@@?$tvec3@N$00@glm@@QEAA@AEBU?$tvec3@N$0A@@1@@Z ; glm::tvec3<double,1>::tvec3<double,1><0>

; 160  : 		glm::highp_f64vec3 v4(v1);

	lea	rax, QWORD PTR v4$22[rsp]
	lea	rcx, QWORD PTR v1$19[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb

; 161  : 
; 162  : 		Error += glm::all(glm::equal(v1, glm::f64vec3(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$20[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?0$01@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$01@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$19[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_dvec_
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN10@test_dvec_
$LN9@test_dvec_:
	mov	DWORD PTR tv153[rsp], 1
$LN10@test_dvec_:
	mov	eax, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 163  : 		Error += glm::all(glm::equal(v1, glm::f64vec3(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$21[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?0$00@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$00@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$19[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_dvec_
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN12@test_dvec_
$LN11@test_dvec_:
	mov	DWORD PTR tv166[rsp], 1
$LN12@test_dvec_:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 164  : 		Error += glm::all(glm::equal(v1, glm::f64vec3(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T37[rsp]
	lea	rcx, QWORD PTR v4$22[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, QWORD PTR $T37[rsp]
	lea	rdx, QWORD PTR v1$19[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$equal@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_dvec_
	mov	DWORD PTR tv176[rsp], 0
	jmp	SHORT $LN14@test_dvec_
$LN13@test_dvec_:
	mov	DWORD PTR tv176[rsp], 1
$LN14@test_dvec_:
	mov	eax, DWORD PTR tv176[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 165  : 	}
; 166  : 	
; 167  : 	{
; 168  : 		glm::f64vec4 v1;

	lea	rcx, QWORD PTR v1$23[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@XZ		; glm::tvec4<double,0>::tvec4<double,0>

; 169  : 		glm::lowp_f64vec4 v2(v1);

	lea	rdx, QWORD PTR v1$23[rsp]
	lea	rcx, QWORD PTR v2$24[rsp]
	call	??$?0$0A@@?$tvec4@N$01@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec4<double,2>::tvec4<double,2><0>

; 170  : 		glm::mediump_f64vec4 v3(v1);

	lea	rdx, QWORD PTR v1$23[rsp]
	lea	rcx, QWORD PTR v3$25[rsp]
	call	??$?0$0A@@?$tvec4@N$00@glm@@QEAA@AEBU?$tvec4@N$0A@@1@@Z ; glm::tvec4<double,1>::tvec4<double,1><0>

; 171  : 		glm::highp_f64vec4 v4(v1);

	lea	rax, QWORD PTR v4$26[rsp]
	lea	rcx, QWORD PTR v1$23[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb

; 172  : 
; 173  : 		Error += glm::all(glm::equal(v1, glm::f64vec4(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$24[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?0$01@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$01@1@@Z ; glm::tvec4<double,0>::tvec4<double,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$23[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_dvec_
	mov	DWORD PTR tv194[rsp], 0
	jmp	SHORT $LN16@test_dvec_
$LN15@test_dvec_:
	mov	DWORD PTR tv194[rsp], 1
$LN16@test_dvec_:
	mov	eax, DWORD PTR tv194[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 174  : 		Error += glm::all(glm::equal(v1, glm::f64vec4(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$25[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?0$00@?$tvec4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$00@1@@Z ; glm::tvec4<double,0>::tvec4<double,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$23[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_dvec_
	mov	DWORD PTR tv207[rsp], 0
	jmp	SHORT $LN18@test_dvec_
$LN17@test_dvec_:
	mov	DWORD PTR tv207[rsp], 1
$LN18@test_dvec_:
	mov	eax, DWORD PTR tv207[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 175  : 		Error += glm::all(glm::equal(v1, glm::f64vec4(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T43[rsp]
	lea	rcx, QWORD PTR v4$26[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T43[rsp]
	lea	rdx, QWORD PTR v1$23[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$equal@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z ; glm::equal<double,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_dvec_
	mov	DWORD PTR tv217[rsp], 0
	jmp	SHORT $LN20@test_dvec_
$LN19@test_dvec_:
	mov	DWORD PTR tv217[rsp], 1
$LN20@test_dvec_:
	mov	eax, DWORD PTR tv217[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 176  : 	}
; 177  : 	
; 178  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 179  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_dvec_precision@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 1016				; 000003f8H
	pop	rdi
	pop	rsi
	ret	0
?test_dvec_precision@@YAHXZ ENDP			; test_dvec_precision
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$00@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><1>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$01@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><2>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<float,1>::tvec4<float,1><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<float,1>::tvec4<float,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0$0A@@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<float,2>::tvec4<float,2><0>, COMDAT

; 177  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 176  : 		: x(v.x), y(v.y), z(v.z), w(v.w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0

; 177  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<float,2>::tvec4<float,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$00@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><1>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec3>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_N$0A@@glm@@SAHXZ PROC			; glm::tvec3<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$01@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><2>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z PROC ; glm::tvec3<float,1>::tvec3<float,1><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ENDP ; glm::tvec3<float,1>::tvec3<float,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0$0A@@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z PROC ; glm::tvec3<float,2>::tvec3<float,2><0>, COMDAT

; 54   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 53   : 		: x(v.x), y(v.y), z(v.z)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 54   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ENDP ; glm::tvec3<float,2>::tvec3<float,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$00@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$00@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$00@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$00@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><1>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$00@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$00@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec2>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_N$0A@@glm@@SAHXZ PROC			; glm::tvec2<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$01@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$01@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$01@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$01@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><2>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$01@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$01@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z PROC ; glm::tvec2<float,1>::tvec2<float,1><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ENDP ; glm::tvec2<float,1>::tvec2<float,1><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0$0A@@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0$0A@@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z PROC ; glm::tvec2<float,2>::tvec2<float,2><0>, COMDAT

; 41   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 40   : 		: x(v.x), y(v.y)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 41   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0$0A@@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ENDP ; glm::tvec2<float,2>::tvec2<float,2><0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 32
v1$15 = 56
v2$16 = 88
v3$17 = 120
v4$18 = 152
v1$19 = 184
v2$20 = 232
v3$21 = 280
v4$22 = 328
v1$23 = 376
v2$24 = 424
v3$25 = 472
v4$26 = 520
$T27 = 548
$T28 = 556
$T29 = 560
$T30 = 568
$T31 = 572
$T32 = 580
$T33 = 584
$T34 = 596
$T35 = 600
$T36 = 612
$T37 = 616
$T38 = 628
$T39 = 632
$T40 = 648
$T41 = 652
$T42 = 668
$T43 = 672
$T44 = 688
tv80 = 692
tv93 = 696
tv135 = 700
tv153 = 704
tv166 = 708
tv176 = 712
tv194 = 716
tv207 = 720
tv217 = 724
?test_fvec_precision@@YAHXZ PROC			; test_fvec_precision

; 91   : {

	push	rsi
	push	rdi
	sub	rsp, 744				; 000002e8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 178				; 000000b2H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 92   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 93   : /*
; 94   : 	{
; 95   : 		glm::f32vec2 v1;
; 96   : 		glm::lowp_f32vec2 v2((glm::f32vec2(v1)));
; 97   : 		glm::mediump_f32vec2 v3((glm::f32vec2(v1)));
; 98   : 		glm::highp_f32vec2 v4((glm::f32vec2(v1)));
; 99   : 
; 100  : 		Error += glm::all(glm::equal(v1, v2)) ? 0 : 1;
; 101  : 		Error += glm::all(glm::equal(v1, v3)) ? 0 : 1;
; 102  : 		Error += glm::all(glm::equal(v1, v4)) ? 0 : 1;
; 103  : 	}
; 104  : */
; 105  : 	{
; 106  : 		glm::f32vec2 v1;

	lea	rcx, QWORD PTR v1$15[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@XZ		; glm::tvec2<float,0>::tvec2<float,0>

; 107  : 		glm::lowp_f32vec2 v2(v1);

	lea	rdx, QWORD PTR v1$15[rsp]
	lea	rcx, QWORD PTR v2$16[rsp]
	call	??$?0$0A@@?$tvec2@M$01@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<float,2>::tvec2<float,2><0>

; 108  : 		glm::mediump_f32vec2 v3(v1);

	lea	rdx, QWORD PTR v1$15[rsp]
	lea	rcx, QWORD PTR v3$17[rsp]
	call	??$?0$0A@@?$tvec2@M$00@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<float,1>::tvec2<float,1><0>

; 109  : 		glm::highp_f32vec2 v4(v1);

	mov	rax, QWORD PTR v1$15[rsp]
	mov	QWORD PTR v4$18[rsp], rax

; 110  : 
; 111  : 		Error += glm::all(glm::equal(v1, glm::f32vec2(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$16[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?0$01@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$01@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$15[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_fvec_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN4@test_fvec_
$LN3@test_fvec_:
	mov	DWORD PTR tv80[rsp], 1
$LN4@test_fvec_:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 112  : 		Error += glm::all(glm::equal(v1, glm::f32vec2(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$17[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?0$00@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$00@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$15[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_fvec_
	mov	DWORD PTR tv93[rsp], 0
	jmp	SHORT $LN6@test_fvec_
$LN5@test_fvec_:
	mov	DWORD PTR tv93[rsp], 1
$LN6@test_fvec_:
	mov	eax, DWORD PTR tv93[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 113  : 		Error += glm::all(glm::equal(v1, glm::f32vec2(v4))) ? 0 : 1;

	mov	rax, QWORD PTR v4$18[rsp]
	mov	QWORD PTR $T31[rsp], rax
	lea	r8, QWORD PTR $T31[rsp]
	lea	rdx, QWORD PTR v1$15[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_fvec_
	mov	DWORD PTR tv135[rsp], 0
	jmp	SHORT $LN8@test_fvec_
$LN7@test_fvec_:
	mov	DWORD PTR tv135[rsp], 1
$LN8@test_fvec_:
	mov	eax, DWORD PTR tv135[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 114  : 	}
; 115  : 
; 116  : 	{
; 117  : 		glm::f32vec3 v1;

	lea	rcx, QWORD PTR v1$19[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@XZ		; glm::tvec3<float,0>::tvec3<float,0>

; 118  : 		glm::lowp_f32vec3 v2(v1);

	lea	rdx, QWORD PTR v1$19[rsp]
	lea	rcx, QWORD PTR v2$20[rsp]
	call	??$?0$0A@@?$tvec3@M$01@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec3<float,2>::tvec3<float,2><0>

; 119  : 		glm::mediump_f32vec3 v3(v1);

	lea	rdx, QWORD PTR v1$19[rsp]
	lea	rcx, QWORD PTR v3$21[rsp]
	call	??$?0$0A@@?$tvec3@M$00@glm@@QEAA@AEBU?$tvec3@M$0A@@1@@Z ; glm::tvec3<float,1>::tvec3<float,1><0>

; 120  : 		glm::highp_f32vec3 v4(v1);

	lea	rax, QWORD PTR v4$22[rsp]
	lea	rcx, QWORD PTR v1$19[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb

; 121  : 
; 122  : 		Error += glm::all(glm::equal(v1, glm::f32vec3(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$20[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?0$01@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$01@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$19[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_fvec_
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN10@test_fvec_
$LN9@test_fvec_:
	mov	DWORD PTR tv153[rsp], 1
$LN10@test_fvec_:
	mov	eax, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 123  : 		Error += glm::all(glm::equal(v1, glm::f32vec3(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$21[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?0$00@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$00@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$19[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_fvec_
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN12@test_fvec_
$LN11@test_fvec_:
	mov	DWORD PTR tv166[rsp], 1
$LN12@test_fvec_:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 124  : 		Error += glm::all(glm::equal(v1, glm::f32vec3(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T37[rsp]
	lea	rcx, QWORD PTR v4$22[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T37[rsp]
	lea	rdx, QWORD PTR v1$19[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_fvec_
	mov	DWORD PTR tv176[rsp], 0
	jmp	SHORT $LN14@test_fvec_
$LN13@test_fvec_:
	mov	DWORD PTR tv176[rsp], 1
$LN14@test_fvec_:
	mov	eax, DWORD PTR tv176[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 125  : 	}
; 126  : 	
; 127  : 	{
; 128  : 		glm::f32vec4 v1;

	lea	rcx, QWORD PTR v1$23[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@XZ		; glm::tvec4<float,0>::tvec4<float,0>

; 129  : 		glm::lowp_f32vec4 v2(v1);

	lea	rdx, QWORD PTR v1$23[rsp]
	lea	rcx, QWORD PTR v2$24[rsp]
	call	??$?0$0A@@?$tvec4@M$01@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<float,2>::tvec4<float,2><0>

; 130  : 		glm::mediump_f32vec4 v3(v1);

	lea	rdx, QWORD PTR v1$23[rsp]
	lea	rcx, QWORD PTR v3$25[rsp]
	call	??$?0$0A@@?$tvec4@M$00@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<float,1>::tvec4<float,1><0>

; 131  : 		glm::highp_f32vec4 v4(v1);

	lea	rax, QWORD PTR v4$26[rsp]
	lea	rcx, QWORD PTR v1$23[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb

; 132  : 
; 133  : 		Error += glm::all(glm::equal(v1, glm::f32vec4(v2))) ? 0 : 1;

	lea	rdx, QWORD PTR v2$24[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?0$01@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$01@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><2>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$23[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_fvec_
	mov	DWORD PTR tv194[rsp], 0
	jmp	SHORT $LN16@test_fvec_
$LN15@test_fvec_:
	mov	DWORD PTR tv194[rsp], 1
$LN16@test_fvec_:
	mov	eax, DWORD PTR tv194[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 134  : 		Error += glm::all(glm::equal(v1, glm::f32vec4(v3))) ? 0 : 1;

	lea	rdx, QWORD PTR v3$25[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?0$00@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$00@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><1>
	mov	r8, rax
	lea	rdx, QWORD PTR v1$23[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_fvec_
	mov	DWORD PTR tv207[rsp], 0
	jmp	SHORT $LN18@test_fvec_
$LN17@test_fvec_:
	mov	DWORD PTR tv207[rsp], 1
$LN18@test_fvec_:
	mov	eax, DWORD PTR tv207[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 135  : 		Error += glm::all(glm::equal(v1, glm::f32vec4(v4))) ? 0 : 1;

	lea	rax, QWORD PTR $T43[rsp]
	lea	rcx, QWORD PTR v4$26[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T43[rsp]
	lea	rdx, QWORD PTR v1$23[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_fvec_
	mov	DWORD PTR tv217[rsp], 0
	jmp	SHORT $LN20@test_fvec_
$LN19@test_fvec_:
	mov	DWORD PTR tv217[rsp], 1
$LN20@test_fvec_:
	mov	eax, DWORD PTR tv217[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 136  : 	}
; 137  : 	
; 138  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 139  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_fvec_precision@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 744				; 000002e8H
	pop	rdi
	pop	rsi
	ret	0
?test_fvec_precision@@YAHXZ ENDP			; test_fvec_precision
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$00@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$00@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,1>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$00@glm@@SAHXZ		; glm::tvec4<float,1>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$00@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$00@glm@@SAHXZ PROC			; glm::tvec4<float,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$00@glm@@SAHXZ ENDP			; glm::tvec4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+24], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec4<double,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@N$0A@@glm@@SAHXZ	; glm::tvec4<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$0A@@glm@@SAHXZ PROC			; glm::tvec4<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+16], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec3<double,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@N$0A@@glm@@SAHXZ	; glm::tvec3<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$0A@@glm@@SAHXZ PROC			; glm::tvec3<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+8], xmm0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec2<double,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$0A@@glm@@SAHXZ PROC			; glm::tvec2<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 0
?test_fvec_size@@YAHXZ PROC				; test_fvec_size

; 58   : {

	push	rdi
	sub	rsp, 16

; 59   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 60   : 	Error += sizeof(glm::f32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 61   : 	Error += sizeof(glm::f32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 62   : 	Error += sizeof(glm::f32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 63   : 	Error += sizeof(glm::f64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 64   : 	Error += sizeof(glm::f64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 65   : 	Error += sizeof(glm::f64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 66   : 	
; 67   : 	Error += sizeof(glm::lowp_f32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 68   : 	Error += sizeof(glm::lowp_f32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 69   : 	Error += sizeof(glm::lowp_f32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 70   : 	Error += sizeof(glm::lowp_f64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 71   : 	Error += sizeof(glm::lowp_f64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 72   : 	Error += sizeof(glm::lowp_f64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 73   : 	
; 74   : 	Error += sizeof(glm::mediump_f32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 75   : 	Error += sizeof(glm::mediump_f32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 76   : 	Error += sizeof(glm::mediump_f32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 77   : 	Error += sizeof(glm::mediump_f64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 78   : 	Error += sizeof(glm::mediump_f64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 79   : 	Error += sizeof(glm::mediump_f64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 80   : 	
; 81   : 	Error += sizeof(glm::highp_f32vec2) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 82   : 	Error += sizeof(glm::highp_f32vec3) != 12;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 83   : 	Error += sizeof(glm::highp_f32vec4) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 84   : 	Error += sizeof(glm::highp_f64vec2) != 16;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 85   : 	Error += sizeof(glm::highp_f64vec3) != 24;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 86   : 	Error += sizeof(glm::highp_f64vec4) != 32;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 87   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 88   : }

	add	rsp, 16
	pop	rdi
	ret	0
?test_fvec_size@@YAHXZ ENDP				; test_fvec_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_type_precision.cpp
_TEXT	SEGMENT
Error$ = 0
?test_scalar_size@@YAHXZ PROC				; test_scalar_size

; 9    : {

	push	rdi
	sub	rsp, 16

; 10   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 11   : 	Error += sizeof(glm::int8) != 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 12   : 	Error += sizeof(glm::int16) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 13   : 	Error += sizeof(glm::int32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 14   : 	Error += sizeof(glm::int64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 15   : 	Error += sizeof(glm::uint8) != 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 16   : 	Error += sizeof(glm::uint16) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 17   : 	Error += sizeof(glm::uint32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 18   : 	Error += sizeof(glm::uint64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 19   : 	Error += sizeof(glm::float32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 20   : 	Error += sizeof(glm::float64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 21   : 	
; 22   : 	Error += sizeof(glm::lowp_int8) != 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 23   : 	Error += sizeof(glm::lowp_int16) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 24   : 	Error += sizeof(glm::lowp_int32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 25   : 	Error += sizeof(glm::lowp_int64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 26   : 	Error += sizeof(glm::lowp_uint8) != 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 27   : 	Error += sizeof(glm::lowp_uint16) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 28   : 	Error += sizeof(glm::lowp_uint32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 29   : 	Error += sizeof(glm::lowp_uint64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 30   : 	Error += sizeof(glm::lowp_float32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 31   : 	Error += sizeof(glm::lowp_float64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 32   : 	
; 33   : 	Error += sizeof(glm::mediump_int8) != 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 34   : 	Error += sizeof(glm::mediump_int16) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 35   : 	Error += sizeof(glm::mediump_int32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 36   : 	Error += sizeof(glm::mediump_int64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 37   : 	Error += sizeof(glm::mediump_uint8) != 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 38   : 	Error += sizeof(glm::mediump_uint16) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 39   : 	Error += sizeof(glm::mediump_uint32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 40   : 	Error += sizeof(glm::mediump_uint64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 41   : 	Error += sizeof(glm::mediump_float32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 42   : 	Error += sizeof(glm::mediump_float64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 43   : 	
; 44   : 	Error += sizeof(glm::highp_int8) != 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 45   : 	Error += sizeof(glm::highp_int16) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 46   : 	Error += sizeof(glm::highp_int32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 47   : 	Error += sizeof(glm::highp_int64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 48   : 	Error += sizeof(glm::highp_uint8) != 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 49   : 	Error += sizeof(glm::highp_uint16) != 2;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 50   : 	Error += sizeof(glm::highp_uint32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 51   : 	Error += sizeof(glm::highp_uint64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 52   : 	Error += sizeof(glm::highp_float32) != 4;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 53   : 	Error += sizeof(glm::highp_float64) != 8;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 54   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 55   : }

	add	rsp, 16
	pop	rdi
	ret	0
?test_scalar_size@@YAHXZ ENDP				; test_scalar_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1297 :     _Container_proxy* _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ PROC ; std::_Basic_container_proxy_ptr12::_Release, COMDAT

; 1299 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1300 :         _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1301 :     }

	pop	rdi
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ENDP ; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1078 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1079 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1080 :         _Orphan_all_unlocked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1081 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1219 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1220 :     if (!_Myproxy) { // no proxy, already done

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@Orphan_all

; 1221 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1222 :     }
; 1223 : 
; 1224 :     // proxy allocated, drain it
; 1225 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1226 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1227 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1228 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1229 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1231 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1232 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1233 : #if _HAS_CXX20
; 1234 :     if (_STD is_constant_evaluated()) {
; 1235 :         _Orphan_all_unlocked_v3();
; 1236 :     } else
; 1237 : #endif // _HAS_CXX20
; 1238 :     {
; 1239 :         _Orphan_all_locked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1240 :     }
; 1241 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1242 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1048 : 
; 1049 :     _Container_base12(const _Container_base12&) = delete;
; 1050 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1051 : 
; 1052 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1053 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1054 : 
; 1055 :     template <class _Alloc>
; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1058 :         _Construct_in_place(*_New_proxy, this);
; 1059 :         _Myproxy            = _New_proxy;
; 1060 :         _New_proxy->_Mycont = this;
; 1061 :     }
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1065 :         // pre: no iterators refer to the existing proxy
; 1066 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1067 :         _Construct_in_place(*_New_proxy, this);
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1070 :     }
; 1071 : 
; 1072 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1040 : 
; 1041 :     const _Container_base12* _Mycont       = nullptr;
; 1042 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 154				; 0000009aH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 166  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 80   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 319  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@I$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@I$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@C$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@C$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<signed char,0>::tvec4<signed char,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+1], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+3], 0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@C$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<signed char,0>::tvec4<signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z PROC			; glm::tvec4<signed char,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@C$0A@@glm@@SAHXZ	; glm::tvec4<signed char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@C$0A@@glm@@QEBAAEBCH@Z ENDP			; glm::tvec4<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$0A@@glm@@SAHXZ PROC			; glm::tvec4<signed char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@C$0A@@glm@@SAHXZ ENDP			; glm::tvec4<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@E$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@E$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+1], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+3], 0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@E$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z PROC			; glm::tvec4<unsigned char,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@E$0A@@glm@@SAHXZ	; glm::tvec4<unsigned char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@E$0A@@glm@@QEBAAEBEH@Z ENDP			; glm::tvec4<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@E$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@F$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@F$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z PROC			; glm::tvec2<short,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z ENDP			; glm::tvec2<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$0A@@glm@@SAHXZ PROC			; glm::tvec2<short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@F$0A@@glm@@SAHXZ ENDP			; glm::tvec2<short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@G$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@G$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z PROC			; glm::tvec2<unsigned short,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z ENDP			; glm::tvec2<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@G$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
END
