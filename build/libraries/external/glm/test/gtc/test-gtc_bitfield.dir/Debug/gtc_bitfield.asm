; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG57551 DB	'mask[mix]: %d', 0aH, 00H
	ORG $+1
$SG57552 DB	'mask[loop]: %d', 0aH, 00H
$SG57553 DB	'mask[default]: %d', 0aH, 00H
	ORG $+1
$SG63126 DB	'%s', 00H
	ORG $+1
$SG57554 DB	'mask[zero]: %d', 0aH, 00H
$SG57555 DB	'mask[half]: %d', 0aH, 00H
$SG60103 DB	'glm::bitfieldInterleave Time %d clocks', 0aH, 00H
$SG58389 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'b', 00H, 'i', 00H, 't', 00H, 'f', 00H, 'i', 00H
	DB	'e', 00H, 'l', 00H, 'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG58390 DB	'A', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'B', 00H
	DB	00H, 00H
	ORG $+2
$SG60104 DB	'fastBitfieldInterleave Time %d clocks', 0aH, 00H
	ORG $+1
$SG58391 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'b', 00H, 'i', 00H, 't', 00H, 'f', 00H, 'i', 00H
	DB	'e', 00H, 'l', 00H, 'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG58392 DB	'A', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'D', 00H
	DB	00H, 00H
	ORG $+2
$SG60106 DB	'sseBitfieldInterleave Time %d clocks', 0aH, 00H
	ORG $+2
$SG58393 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'b', 00H, 'i', 00H, 't', 00H, 'f', 00H, 'i', 00H
	DB	'e', 00H, 'l', 00H, 'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG58394 DB	'A', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'E', 00H
	DB	00H, 00H
	ORG $+2
$SG60107 DB	'sseUnalignedBitfieldInterleave Time %d clocks', 0aH, 00H
	ORG $+1
$SG60108 DB	'glm::detail::bitfieldInterleave Time %d clocks', 0aH, 00H
$SG63125 DB	'invalid argument', 00H
	ORG $+7
$SG58395 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'b', 00H, 'i', 00H, 't', 00H, 'f', 00H, 'i', 00H
	DB	'e', 00H, 'l', 00H, 'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG58396 DB	'A', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'F', 00H
	DB	00H, 00H
	ORG $+2
$SG63130 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG58397 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'b', 00H, 'i', 00H, 't', 00H, 'f', 00H, 'i', 00H
	DB	'e', 00H, 'l', 00H, 'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG58398 DB	'A', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'R', 00H
	DB	'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, '[', 00H, '0'
	DB	00H, ']', 00H, 00H, 00H
	ORG $+10
$SG58399 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'b', 00H, 'i', 00H, 't', 00H, 'f', 00H, 'i', 00H
	DB	'e', 00H, 'l', 00H, 'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG58400 DB	'D', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'E', 00H
	DB	00H, 00H
	ORG $+10
$SG58401 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'b', 00H, 'i', 00H, 't', 00H, 'f', 00H, 'i', 00H
	DB	'e', 00H, 'l', 00H, 'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG58402 DB	'D', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'F', 00H
	DB	00H, 00H
	ORG $+2
$SG60105 DB	'interleaveBitfieldInterleave Time %d clocks', 0aH, 00H
	ORG $+3
$SG60109 DB	'_mm_bit_interleave_si128 Time %d clocks', 0aH, 00H
	ORG $+3
$SG63129 DB	00H, 00H
	ORG $+10
$SG63127 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+14
$SG63128 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	?bitfieldInterleave@glm@@YAFCC@Z		; glm::bitfieldInterleave
PUBLIC	?bitfieldInterleave@glm@@YAGEE@Z		; glm::bitfieldInterleave
PUBLIC	?bitfieldInterleave@glm@@YAHFF@Z		; glm::bitfieldInterleave
PUBLIC	?bitfieldInterleave@glm@@YAIGG@Z		; glm::bitfieldInterleave
PUBLIC	?bitfieldInterleave@glm@@YA_JHH@Z		; glm::bitfieldInterleave
PUBLIC	?bitfieldInterleave@glm@@YA_KII@Z		; glm::bitfieldInterleave
PUBLIC	?bitfieldInterleave@glm@@YA_KGGG@Z		; glm::bitfieldInterleave
PUBLIC	?bitfieldInterleave@glm@@YA_KIII@Z		; glm::bitfieldInterleave
PUBLIC	?bitfieldInterleave@glm@@YA_KGGGG@Z		; glm::bitfieldInterleave
PUBLIC	?glm_i128_interleave@@YA?AT__m128i@@T1@@Z	; glm_i128_interleave
PUBLIC	??$bitfieldInterleave@EG@detail@glm@@YAGEE@Z	; glm::detail::bitfieldInterleave<unsigned char,unsigned short>
PUBLIC	??$bitfieldInterleave@GI@detail@glm@@YAIGG@Z	; glm::detail::bitfieldInterleave<unsigned short,unsigned int>
PUBLIC	??$bitfieldInterleave@I_K@detail@glm@@YA_KII@Z	; glm::detail::bitfieldInterleave<unsigned int,unsigned __int64>
PUBLIC	??$bitfieldInterleave@I_K@detail@glm@@YA_KIII@Z	; glm::detail::bitfieldInterleave<unsigned int,unsigned __int64>
PUBLIC	??$bitfieldInterleave@G_K@detail@glm@@YA_KGGGG@Z ; glm::detail::bitfieldInterleave<unsigned short,unsigned __int64>
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@XZ			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@II@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	?mask_zero@mask@@YAHH@Z				; mask::mask_zero
PUBLIC	?mask_mix@mask@@YAHH@Z				; mask::mask_mix
PUBLIC	?mask_half@mask@@YAHH@Z				; mask::mask_half
PUBLIC	?mask_loop@mask@@YAHH@Z				; mask::mask_loop
PUBLIC	?perf@mask@@YAHXZ				; mask::perf
PUBLIC	??0?$allocator@H@std@@QEAA@XZ			; std::allocator<int>::allocator<int>
PUBLIC	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z	; std::allocator<int>::deallocate
PUBLIC	?allocate@?$allocator@H@std@@QEAAPEAH_K@Z	; std::allocator<int>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ; std::_Default_allocator_traits<std::allocator<int> >::max_size
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::capacity
PUBLIC	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ; std::vector<int,std::allocator<int> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z ; std::vector<int,std::allocator<int> >::_Change_array
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
PUBLIC	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
PUBLIC	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
PUBLIC	??$mask@H@glm@@YAHH@Z				; glm::mask<int>
PUBLIC	?test_uint@mask@@YAHXZ				; mask::test_uint
PUBLIC	??$mask@I@glm@@YAII@Z				; glm::mask<unsigned int>
PUBLIC	?test_uvec4@mask@@YAHXZ				; mask::test_uvec4
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec4<int,0>::operator[]
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@H@Z			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??$mask@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ; glm::mask<int,0,glm::tvec4>
PUBLIC	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	?test@mask@@YAHXZ				; mask::test
PUBLIC	?test@bitfieldInterleave3@@YAHXZ		; bitfieldInterleave3::test
PUBLIC	??$refBitfieldInterleave@G_K@bitfieldInterleave3@@YA_KGGG@Z ; bitfieldInterleave3::refBitfieldInterleave<unsigned short,unsigned __int64>
PUBLIC	?test@bitfieldInterleave4@@YAHXZ		; bitfieldInterleave4::test
PUBLIC	??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z ; bitfieldInterleave4::loopBitfieldInterleave<unsigned short,unsigned __int64>
PUBLIC	?fastBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::fastBitfieldInterleave
PUBLIC	?interleaveBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::interleaveBitfieldInterleave
PUBLIC	?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::sseBitfieldInterleave
PUBLIC	?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::sseUnalignedBitfieldInterleave
PUBLIC	?test@bitfieldInterleave@@YAHXZ			; bitfieldInterleave::test
PUBLIC	?perf@bitfieldInterleave@@YAHXZ			; bitfieldInterleave::perf
PUBLIC	??0?$allocator@_K@std@@QEAA@XZ			; std::allocator<unsigned __int64>::allocator<unsigned __int64>
PUBLIC	?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z	; std::allocator<unsigned __int64>::deallocate
PUBLIC	?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z	; std::allocator<unsigned __int64>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::max_size
PUBLIC	??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@_KAEBV?$allocator@_K@1@@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::vector<unsigned __int64,std::allocator<unsigned __int64> >
PUBLIC	??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
PUBLIC	?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::size
PUBLIC	?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::max_size
PUBLIC	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
PUBLIC	?_Buy_raw@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Tidy
PUBLIC	?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Xlength
PUBLIC	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
PUBLIC	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned __int64> >::_Vector_val<std::_Simple_types<unsigned __int64> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first
PUBLIC	??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec2<unsigned int,0> >::allocator<glm::tvec2<unsigned int,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<unsigned int,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<unsigned int,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::size
PUBLIC	?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::max_size
PUBLIC	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
PUBLIC	?_Buy_raw@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Xlength
PUBLIC	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first
PUBLIC	??0?$allocator@T__m128i@@@std@@QEAA@XZ		; std::allocator<__m128i>::allocator<__m128i>
PUBLIC	?deallocate@?$allocator@T__m128i@@@std@@QEAAXQEAT__m128i@@_K@Z ; std::allocator<__m128i>::deallocate
PUBLIC	?allocate@?$allocator@T__m128i@@@std@@QEAAPEAT__m128i@@_K@Z ; std::allocator<__m128i>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SA_KAEBV?$allocator@T__m128i@@@2@@Z ; std::_Default_allocator_traits<std::allocator<__m128i> >::max_size
PUBLIC	??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::vector<__m128i,std::allocator<__m128i> >::vector<__m128i,std::allocator<__m128i> >
PUBLIC	??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::vector<__m128i,std::allocator<__m128i> >::~vector<__m128i,std::allocator<__m128i> >
PUBLIC	?resize@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAX_K@Z ; std::vector<__m128i,std::allocator<__m128i> >::resize
PUBLIC	?size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ ; std::vector<__m128i,std::allocator<__m128i> >::size
PUBLIC	?max_size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ ; std::vector<__m128i,std::allocator<__m128i> >::max_size
PUBLIC	?capacity@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ ; std::vector<__m128i,std::allocator<__m128i> >::capacity
PUBLIC	??A?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAAEAT__m128i@@_K@Z ; std::vector<__m128i,std::allocator<__m128i> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBA_K_K@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXQEAT__m128i@@_K1@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Change_array
PUBLIC	?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ ; std::vector<__m128i,std::allocator<__m128i> >::_Tidy
PUBLIC	?_Xlength@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@CAXXZ ; std::vector<__m128i,std::allocator<__m128i> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range
PUBLIC	?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ ; std::vector<__m128i,std::allocator<__m128i> >::_Getal
PUBLIC	?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAAEBV?$allocator@T__m128i@@@2@XZ ; std::vector<__m128i,std::allocator<__m128i> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<__m128i> >::_Vector_val<std::_Simple_types<__m128i> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAAAEAV?$allocator@T__m128i@@@2@XZ ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEBAAEBV?$allocator@T__m128i@@@2@XZ ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Get_first
PUBLIC	main
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Resize<std::_Value_init_tag>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0T__m128i@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@T__m128i@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><__m128i>
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1><>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<unsigned int,0> >
PUBLIC	??$?0AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1><std::allocator<glm::tvec2<unsigned int,0> > const &>
PUBLIC	??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>
PUBLIC	??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned __int64>
PUBLIC	??$?0AEBV?$allocator@_K@std@@$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@_K@1@@Z ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1><std::allocator<unsigned __int64> const &>
PUBLIC	??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>
PUBLIC	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z ; std::_Destroy_range<std::allocator<__m128i> >
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z ; std::_Destroy_range<std::allocator<unsigned __int64> >
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec4>::call
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<__m128i> >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$forward@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@0@AEBV10@@Z ; std::forward<std::allocator<glm::tvec2<unsigned int,0> > const &>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Tidy_guard@V?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > > >::~_Tidy_guard<std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > > >
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	??$forward@AEBV?$allocator@_K@std@@@std@@YAAEBV?$allocator@_K@0@AEBV10@@Z ; std::forward<std::allocator<unsigned __int64> const &>
PUBLIC	??1?$_Tidy_guard@V?$vector@_KV?$allocator@_K@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >::~_Tidy_guard<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<int> >
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$07@std@@YA_K_K@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z ; std::_Uninitialized_move<__m128i *,std::allocator<__m128i> >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@PEAT__m128i@@AEAV?$allocator@T__m128i@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Uninitialized_backout_al<std::allocator<__m128i> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::~_Uninitialized_backout_al<std::allocator<__m128i> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAPEAT__m128i@@XZ ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Emplace_back<>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back<>
PUBLIC	??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z		; std::_Unfancy<unsigned __int64>
PUBLIC	??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z	; std::_Zero_range<unsigned __int64 *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Uninitialized_backout_al<std::allocator<unsigned __int64> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<>
PUBLIC	??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
PUBLIC	??$_Unfancy@H@std@@YAPEAHPEAH@Z			; std::_Unfancy<int>
PUBLIC	??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z		; std::_Zero_range<int *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Get_size_of_n@$03@std@@YA_K_K@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Get_unwrapped@AEBQEAT__m128i@@@std@@YA?A_TAEBQEAT__m128i@@@Z ; std::_Get_unwrapped<__m128i * const &>
PUBLIC	??$move@AEAT__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z ; std::move<__m128i &>
PUBLIC	??$_Unfancy@T__m128i@@@std@@YAPEAT__m128i@@PEAT1@@Z ; std::_Unfancy<__m128i>
PUBLIC	??$_Copy_memmove@PEAT__m128i@@PEAT1@@std@@YAPEAT__m128i@@PEAT1@00@Z ; std::_Copy_memmove<__m128i *,__m128i *>
PUBLIC	??$_Emplace_back@T__m128i@@@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAX$$QEAT__m128i@@@Z ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Emplace_back<__m128i>
PUBLIC	??$construct@T__m128i@@$$V@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@@Z ; std::_Default_allocator_traits<std::allocator<__m128i> >::construct<__m128i>
PUBLIC	??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<unsigned int,0> >
PUBLIC	??$construct@U?$tvec2@I$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::construct<glm::tvec2<unsigned int,0> >
PUBLIC	??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z	; std::_To_address<unsigned __int64 *>
PUBLIC	??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64>
PUBLIC	??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z	; std::_Get_unwrapped<int * const &>
PUBLIC	??$move@AEAH@std@@YA$$QEAHAEAH@Z		; std::move<int &>
PUBLIC	??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z	; std::_Copy_memmove<int *,int *>
PUBLIC	??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>
PUBLIC	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z	; std::_To_address<int *>
PUBLIC	??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>
PUBLIC	??$_To_address@PEAT__m128i@@@std@@YA?A_PAEBQEAT__m128i@@@Z ; std::_To_address<__m128i *>
PUBLIC	??$forward@T__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z ; std::forward<__m128i>
PUBLIC	??$construct@T__m128i@@T1@@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@$$QEAT3@@Z ; std::_Default_allocator_traits<std::allocator<__m128i> >::construct<__m128i,__m128i>
PUBLIC	??$_Voidify_iter@PEAT__m128i@@@std@@YAPEAXPEAT__m128i@@@Z ; std::_Voidify_iter<__m128i *>
PUBLIC	??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec2<unsigned int,0> *>
PUBLIC	??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z	; std::_Voidify_iter<unsigned __int64 *>
PUBLIC	??$forward@H@std@@YA$$QEAHAEAH@Z		; std::forward<int>
PUBLIC	??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>
PUBLIC	??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z		; std::_Voidify_iter<int *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__xmm@00000000000000000000000000000000
PUBLIC	__xmm@0000ffff0000ffff0000ffff0000ffff
PUBLIC	__xmm@00ff00ff00ff00ff00ff00ff00ff00ff
PUBLIC	__xmm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
PUBLIC	__xmm@33333333333333333333333333333333
PUBLIC	__xmm@55555555555555555555555555555555
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__imp_clock:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bitfieldInterleave@glm@@YAFCC@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$?bitfieldInterleave@glm@@YAFCC@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bitfieldInterleave@glm@@YAGEE@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?bitfieldInterleave@glm@@YAGEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bitfieldInterleave@glm@@YAHFF@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$?bitfieldInterleave@glm@@YAHFF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bitfieldInterleave@glm@@YAIGG@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?bitfieldInterleave@glm@@YAIGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bitfieldInterleave@glm@@YA_JHH@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?bitfieldInterleave@glm@@YA_JHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bitfieldInterleave@glm@@YA_KII@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?bitfieldInterleave@glm@@YA_KII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bitfieldInterleave@glm@@YA_KGGG@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?bitfieldInterleave@glm@@YA_KGGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bitfieldInterleave@glm@@YA_KIII@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?bitfieldInterleave@glm@@YA_KIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bitfieldInterleave@glm@@YA_KGGGG@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?bitfieldInterleave@glm@@YA_KGGGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?glm_i128_interleave@@YA?AT__m128i@@T1@@Z DD imagerel $LN3
	DD	imagerel $LN3+967
	DD	imagerel $unwind$?glm_i128_interleave@@YA?AT__m128i@@T1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldInterleave@EG@detail@glm@@YAGEE@Z DD imagerel $LN3
	DD	imagerel $LN3+190
	DD	imagerel $unwind$??$bitfieldInterleave@EG@detail@glm@@YAGEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldInterleave@GI@detail@glm@@YAIGG@Z DD imagerel $LN3
	DD	imagerel $LN3+197
	DD	imagerel $unwind$??$bitfieldInterleave@GI@detail@glm@@YAIGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldInterleave@I_K@detail@glm@@YA_KII@Z DD imagerel $LN3
	DD	imagerel $LN3+357
	DD	imagerel $unwind$??$bitfieldInterleave@I_K@detail@glm@@YA_KII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldInterleave@I_K@detail@glm@@YA_KIII@Z DD imagerel $LN3
	DD	imagerel $LN3+545
	DD	imagerel $unwind$??$bitfieldInterleave@I_K@detail@glm@@YA_KIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldInterleave@G_K@detail@glm@@YA_KGGGG@Z DD imagerel $LN3
	DD	imagerel $LN3+614
	DD	imagerel $unwind$??$bitfieldInterleave@G_K@detail@glm@@YA_KGGGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@II@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?mask_zero@mask@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?mask_zero@mask@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?mask_mix@mask@@YAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+65
	DD	imagerel $unwind$?mask_mix@mask@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?mask_half@mask@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$?mask_half@mask@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?mask_loop@mask@@YAHH@Z DD imagerel $LN6
	DD	imagerel $LN6+89
	DD	imagerel $unwind$?mask_loop@mask@@YAHH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf@mask@@YAHXZ DD imagerel $LN25
	DD	imagerel $LN25+1120
	DD	imagerel $unwind$?perf@mask@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf@mask@@YAHXZ@4HA DD imagerel ?dtor$0@?0??perf@mask@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??perf@mask@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf@mask@@YAHXZ@4HA
$pdata$?dtor$1@?0??perf@mask@@YAHXZ@4HA DD imagerel ?dtor$1@?0??perf@mask@@YAHXZ@4HA
	DD	imagerel ?dtor$1@?0??perf@mask@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$1@?0??perf@mask@@YAHXZ@4HA
$pdata$?dtor$2@?0??perf@mask@@YAHXZ@4HA DD imagerel ?dtor$2@?0??perf@mask@@YAHXZ@4HA
	DD	imagerel ?dtor$2@?0??perf@mask@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$2@?0??perf@mask@@YAHXZ@4HA
$pdata$?dtor$3@?0??perf@mask@@YAHXZ@4HA DD imagerel ?dtor$3@?0??perf@mask@@YAHXZ@4HA
	DD	imagerel ?dtor$3@?0??perf@mask@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$3@?0??perf@mask@@YAHXZ@4HA
$pdata$?dtor$4@?0??perf@mask@@YAHXZ@4HA DD imagerel ?dtor$4@?0??perf@mask@@YAHXZ@4HA
	DD	imagerel ?dtor$4@?0??perf@mask@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$4@?0??perf@mask@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@H@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@H@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+246
	DD	imagerel $unwind$?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mask@H@glm@@YAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+65
	DD	imagerel $unwind$??$mask@H@glm@@YAHH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_uint@mask@@YAHXZ DD imagerel $LN23
	DD	imagerel $LN23+690
	DD	imagerel $unwind$?test_uint@mask@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mask@I@glm@@YAII@Z DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$??$mask@I@glm@@YAII@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_uvec4@mask@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+505
	DD	imagerel $unwind$?test_uvec4@mask@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mask@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$mask@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@mask@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?test@mask@@YAHXZ
$pdata$?test@bitfieldInterleave3@@YAHXZ DD imagerel $LN14
	DD	imagerel $LN14+280
	DD	imagerel $unwind$?test@bitfieldInterleave3@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$refBitfieldInterleave@G_K@bitfieldInterleave3@@YA_KGGG@Z DD imagerel $LN6
	DD	imagerel $LN6+231
	DD	imagerel $unwind$??$refBitfieldInterleave@G_K@bitfieldInterleave3@@YA_KGGG@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@bitfieldInterleave4@@YAHXZ DD imagerel $LN17
	DD	imagerel $LN17+350
	DD	imagerel $unwind$?test@bitfieldInterleave4@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z DD imagerel $LN6
	DD	imagerel $LN6+448
	DD	imagerel $unwind$??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fastBitfieldInterleave@bitfieldInterleave@@YA_KII@Z DD imagerel $LN3
	DD	imagerel $LN3+357
	DD	imagerel $unwind$?fastBitfieldInterleave@bitfieldInterleave@@YA_KII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?interleaveBitfieldInterleave@bitfieldInterleave@@YA_KII@Z DD imagerel $LN3
	DD	imagerel $LN3+357
	DD	imagerel $unwind$?interleaveBitfieldInterleave@bitfieldInterleave@@YA_KII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z DD imagerel $LN3
	DD	imagerel $LN3+1149
	DD	imagerel $unwind$?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z DD imagerel $LN3
	DD	imagerel $LN3+1149
	DD	imagerel $unwind$?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@bitfieldInterleave@@YAHXZ DD imagerel $LN22
	DD	imagerel $LN22+920
	DD	imagerel $unwind$?test@bitfieldInterleave@@YAHXZ
$pdata$?perf@bitfieldInterleave@@YAHXZ DD imagerel $LN34
	DD	imagerel $LN34+2160
	DD	imagerel $unwind$?perf@bitfieldInterleave@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf@bitfieldInterleave@@YAHXZ@4HA DD imagerel ?dtor$0@?0??perf@bitfieldInterleave@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??perf@bitfieldInterleave@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf@bitfieldInterleave@@YAHXZ@4HA
$pdata$?dtor$1@?0??perf@bitfieldInterleave@@YAHXZ@4HA DD imagerel ?dtor$1@?0??perf@bitfieldInterleave@@YAHXZ@4HA
	DD	imagerel ?dtor$1@?0??perf@bitfieldInterleave@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$1@?0??perf@bitfieldInterleave@@YAHXZ@4HA
$pdata$?dtor$2@?0??perf@bitfieldInterleave@@YAHXZ@4HA DD imagerel ?dtor$2@?0??perf@bitfieldInterleave@@YAHXZ@4HA
	DD	imagerel ?dtor$2@?0??perf@bitfieldInterleave@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$2@?0??perf@bitfieldInterleave@@YAHXZ@4HA
$pdata$?dtor$3@?0??perf@bitfieldInterleave@@YAHXZ@4HA DD imagerel ?dtor$3@?0??perf@bitfieldInterleave@@YAHXZ@4HA
	DD	imagerel ?dtor$3@?0??perf@bitfieldInterleave@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$3@?0??perf@bitfieldInterleave@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@_K@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@_K@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@_KAEBV?$allocator@_K@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@_KAEBV?$allocator@_K@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_raw@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?_Buy_raw@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_nonzero@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+58
	DD	imagerel $unwind$?_Buy_nonzero@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_raw@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?_Buy_raw@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_nonzero@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+58
	DD	imagerel $unwind$?_Buy_nonzero@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@T__m128i@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@T__m128i@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@T__m128i@@@std@@QEAAXQEAT__m128i@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@T__m128i@@@std@@QEAAXQEAT__m128i@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@T__m128i@@@std@@QEAAPEAT__m128i@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@T__m128i@@@std@@QEAAPEAT__m128i@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SA_KAEBV?$allocator@T__m128i@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SA_KAEBV?$allocator@T__m128i@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?resize@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAAEAT__m128i@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+197
	DD	imagerel $unwind$??A?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAAEAT__m128i@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXQEAT__m128i@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+252
	DD	imagerel $unwind$?_Change_array@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXQEAT__m128i@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAAEBV?$allocator@T__m128i@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAAEBV?$allocator@T__m128i@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAAAEAV?$allocator@T__m128i@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAAAEAV?$allocator@T__m128i@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEBAAEBV?$allocator@T__m128i@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEBAAEBV?$allocator@T__m128i@@@2@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+359
	DD	imagerel $unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0T__m128i@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@T__m128i@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0T__m128i@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@T__m128i@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z DD imagerel $LN6
	DD	imagerel $LN6+274
	DD	imagerel $unwind$??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA DD imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA DD imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
	DD	imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBV?$allocator@_K@std@@$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@_K@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0AEBV?$allocator@_K@std@@$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@_K@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z DD imagerel $LN6
	DD	imagerel $LN6+274
	DD	imagerel $unwind$??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA DD imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA DD imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA
	DD	imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+362
	DD	imagerel $unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+336
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tidy_guard@V?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$??1?$_Tidy_guard@V?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBV?$allocator@_K@std@@@std@@YAAEBV?$allocator@_K@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBV?$allocator@_K@std@@@std@@YAAEBV?$allocator@_K@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tidy_guard@V?$vector@_KV?$allocator@_K@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$??1?$_Tidy_guard@V?$vector@_KV?$allocator@_K@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+215
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+333
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+215
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$07@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Get_size_of_n@$07@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@PEAT__m128i@@AEAV?$allocator@T__m128i@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@PEAT__m128i@@AEAV?$allocator@T__m128i@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAPEAT__m128i@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAPEAT__m128i@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+278
	DD	imagerel $unwind$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@H@std@@YAPEAHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@H@std@@YAPEAHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAT__m128i@@@std@@YA?A_TAEBQEAT__m128i@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAT__m128i@@@std@@YA?A_TAEBQEAT__m128i@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAT__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAT__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@T__m128i@@@std@@YAPEAT__m128i@@PEAT1@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@T__m128i@@@std@@YAPEAT__m128i@@PEAT1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAT__m128i@@PEAT1@@std@@YAPEAT__m128i@@PEAT1@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAT__m128i@@PEAT1@@std@@YAPEAT__m128i@@PEAT1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@T__m128i@@@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAX$$QEAT__m128i@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@T__m128i@@@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAX$$QEAT__m128i@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@T__m128i@@$$V@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??$construct@T__m128i@@$$V@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec2@I$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$construct@U?$tvec2@I$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAH@std@@YA$$QEAHAEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAH@std@@YA$$QEAHAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAT__m128i@@@std@@YA?A_PAEBQEAT__m128i@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAT__m128i@@@std@@YA?A_PAEBQEAT__m128i@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@T__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@T__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@T__m128i@@T1@@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@$$QEAT3@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??$construct@T__m128i@@T1@@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@$$QEAT3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAT__m128i@@@std@@YAPEAXPEAT__m128i@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAT__m128i@@@std@@YAPEAXPEAT__m128i@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@H@std@@YA$$QEAHAEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@H@std@@YA$$QEAHAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z
pdata	ENDS
;	COMDAT __xmm@55555555555555555555555555555555
CONST	SEGMENT
__xmm@55555555555555555555555555555555 DB 'UUUUUUUUUUUUUUUU'
CONST	ENDS
;	COMDAT __xmm@33333333333333333333333333333333
CONST	SEGMENT
__xmm@33333333333333333333333333333333 DB '3333333333333333'
CONST	ENDS
;	COMDAT __xmm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
CONST	SEGMENT
__xmm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f DB 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH
	DB	0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH
CONST	ENDS
;	COMDAT __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
CONST	SEGMENT
__xmm@00ff00ff00ff00ff00ff00ff00ff00ff DB 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
CONST	ENDS
;	COMDAT __xmm@0000ffff0000ffff0000ffff0000ffff
CONST	SEGMENT
__xmm@0000ffff0000ffff0000ffff0000ffff DB 0ffH, 0ffH, 00H, 00H, 0ffH, 0ffH
	DB	00H, 00H, 0ffH, 0ffH, 00H, 00H, 0ffH, 0ffH, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000000000000000000000
CONST	SEGMENT
__xmm@00000000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@H@std@@YA$$QEAHAEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAT__m128i@@@std@@YAPEAXPEAT__m128i@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@T__m128i@@T1@@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@$$QEAT3@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@T__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAT__m128i@@@std@@YA?A_PAEBQEAT__m128i@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAH@std@@YA$$QEAHAEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec2@I$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@T__m128i@@$$V@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@T__m128i@@@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAX$$QEAT__m128i@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAT__m128i@@PEAT1@@std@@YAPEAT__m128i@@PEAT1@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@T__m128i@@@std@@YAPEAT__m128i@@PEAT1@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAT__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAT__m128i@@@std@@YA?A_TAEBQEAT__m128i@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@H@std@@YAPEAHPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<int *,std::allocator<int> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<int *,std::allocator<int> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<int *,std::allocator<int> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAPEAT__m128i@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@PEAT__m128i@@AEAV?$allocator@T__m128i@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<__m128i *,std::allocator<__m128i> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<__m128i *,std::allocator<__m128i> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<__m128i *,std::allocator<__m128i> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$07@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DD 022a11H
	DD	07010b214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'I', 03H
	DB	02H
	DB	0a8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021419H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z DD 022a11H
	DD	07010b214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tidy_guard@V?$vector@_KV?$allocator@_K@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBV?$allocator@_K@std@@@std@@YAAEBV?$allocator@_K@0@AEBV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DB 06H
	DB	00H
	DB	00H
	DB	'~'
	DB	02H
	DB	'd'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DD 022a11H
	DD	070109214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec2<unsigned int,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcVarDesc DD 028H ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec2<unsigned int,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec2<unsigned int,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tidy_guard@V?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@0@AEBV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z DB 06H
	DB	00H
	DB	00H
	DB	'~'
	DB	02H
	DB	'd'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z DD 022a11H
	DD	070109214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<__m128i> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z$rtcVarDesc DD 028H ; std::_Uninitialized_value_construct_n<std::allocator<__m128i> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<__m128i> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'U', 03H
	DB	02H
	DB	0a8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021419H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	0f0H
	DB	02H
	DB	'`'
	DB	04H
	DB	'`'
	DB	02H
	DB	'0'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z
	DD	imagerel $ip2state$??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z DD 032b11H
	DD	0140112H
	DD	0700bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z$rtcName$0 DB 024H ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>
	DB	053H
	DB	036H
	DB	00H
??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z$rtcName$1 DB 05fH ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z$rtcName$2 DB 05fH ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>
	DB	047H
	DB	075H
	DB	061H
	DB	072H
	DB	064H
	DB	00H
	ORG $+13
??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z$rtcVarDesc DD 088H ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>
	DD	08H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z$rtcName$0
	ORG $+144
??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z$rtcFrameData DD 03H ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>
	DD	00H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBV?$allocator@_K@std@@$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@_K@1@@Z DD 021301H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	0f0H
	DB	02H
	DB	'`'
	DB	04H
	DB	'`'
	DB	02H
	DB	'0'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z
	DD	imagerel $ip2state$??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z DD 032b11H
	DD	0140112H
	DD	0700bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$0 DB 024H ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>
	DB	053H
	DB	035H
	DB	00H
??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$1 DB 05fH ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$2 DB 05fH ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>
	DB	047H
	DB	075H
	DB	061H
	DB	072H
	DB	064H
	DB	00H
	ORG $+13
??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcVarDesc DD 088H ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>
	DD	08H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcName$0
	ORG $+144
??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcFrameData DD 03H ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>
	DD	00H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD 021301H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0T__m128i@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@T__m128i@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEBAAEBV?$allocator@T__m128i@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAAAEAV?$allocator@T__m128i@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAAEBV?$allocator@T__m128i@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z$rtcName$0 DB 05fH ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z$rtcVarDesc DD 024H ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z$rtcFrameData DD 01H ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXQEAT__m128i@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAAEAT__m128i@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAX_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<__m128i,std::allocator<__m128i> >::~vector<__m128i,std::allocator<__m128i> >
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<__m128i,std::allocator<__m128i> >::~vector<__m128i,std::allocator<__m128i> >
	DD	01H
	DQ	FLAT:??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<__m128i,std::allocator<__m128i> >::~vector<__m128i,std::allocator<__m128i> >
	DD	00H
	DQ	FLAT:??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SA_KAEBV?$allocator@T__m128i@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@T__m128i@@@std@@QEAAPEAT__m128i@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@T__m128i@@@std@@QEAAXQEAT__m128i@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@T__m128i@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_nonzero@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_raw@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	DB	053H
	DB	032H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_nonzero@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_raw@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
	DB	053H
	DB	033H
	DB	00H
	ORG $+12
??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
	DD	01H
	DQ	FLAT:??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
	DD	00H
	DQ	FLAT:??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@_KAEBV?$allocator@_K@1@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@_K@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	032H
	DW	0464H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z DD 033a19H
	DD	0500110H
	DD	07009H
	DD	imagerel __GSHandlerCheck
	DD	0270H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcName$0 DB 041H ; bitfieldInterleave::sseUnalignedBitfieldInterleave
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	00H
	ORG $+2
?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcName$1 DB 052H ; bitfieldInterleave::sseUnalignedBitfieldInterleave
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcVarDesc DD 0248H ; bitfieldInterleave::sseUnalignedBitfieldInterleave
	DD	010H
	DQ	FLAT:?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcName$0
	ORG $+96
?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcFrameData DD 02H ; bitfieldInterleave::sseUnalignedBitfieldInterleave
	DD	00H
	DQ	FLAT:?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	032H
	DW	0464H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z DD 033a19H
	DD	0500110H
	DD	07009H
	DD	imagerel __GSHandlerCheck
	DD	0270H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcName$0 DB 041H ; bitfieldInterleave::sseBitfieldInterleave
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	00H
	ORG $+2
?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcName$1 DB 052H ; bitfieldInterleave::sseBitfieldInterleave
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcVarDesc DD 0250H ; bitfieldInterleave::sseBitfieldInterleave
	DD	010H
	DQ	FLAT:?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcName$1
	DD	030H
	DD	010H
	DQ	FLAT:?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcName$0
	ORG $+96
?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcFrameData DD 02H ; bitfieldInterleave::sseBitfieldInterleave
	DD	00H
	DQ	FLAT:?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?interleaveBitfieldInterleave@bitfieldInterleave@@YA_KII@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fastBitfieldInterleave@bitfieldInterleave@@YA_KII@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	041H
	DW	01aaH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z DD 024619H
	DD	07017f21eH
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z$rtcName$0 DB 076H ; bitfieldInterleave4::loopBitfieldInterleave<unsigned short,unsigned __int64>
	DB	00H
	ORG $+14
??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z$rtcVarDesc DD 028H ; bitfieldInterleave4::loopBitfieldInterleave<unsigned short,unsigned __int64>
	DD	020H
	DQ	FLAT:??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z$rtcName$0
	ORG $+48
??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z$rtcFrameData DD 01H ; bitfieldInterleave4::loopBitfieldInterleave<unsigned short,unsigned __int64>
	DD	00H
	DQ	FLAT:??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$refBitfieldInterleave@G_K@bitfieldInterleave3@@YA_KGGG@Z DD 021501H
	DD	070111215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mask@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mask@I@glm@@YAII@Z DD 020901H
	DD	070051209H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_uvec4@mask@@YAHXZ
	DD	024H
	DD	01e0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_uint@mask@@YAHXZ
	DD	024H
	DD	0299H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mask@H@glm@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcName$0 DB 05fH ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcVarDesc DD 024H ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcFrameData DD 01H ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	DB	053H
	DB	034H
	DB	00H
	ORG $+12
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	DD	01H
	DQ	FLAT:??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	DD	00H
	DQ	FLAT:??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@H@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$3@?0??perf@bitfieldInterleave@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$2@?0??perf@bitfieldInterleave@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??perf@bitfieldInterleave@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf@bitfieldInterleave@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$4@?0??perf@mask@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$3@?0??perf@mask@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$2@?0??perf@mask@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??perf@mask@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf@mask@@YAHXZ@4HA
	DD	00H
	DD	05H
voltbl	ENDS
xdata	SEGMENT
$unwind$?perf@mask@@YAHXZ DD 031a11H
	DD	0340109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf@mask@@YAHXZ
$cppxdata$?perf@mask@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?perf@mask@@YAHXZ
	DD	imagerel $ip2state$?perf@mask@@YAHXZ
$stateUnwindMap$?perf@mask@@YAHXZ DB 0aH
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf@mask@@YAHXZ@4HA
	DB	036H
	DD	imagerel ?dtor$1@?0??perf@mask@@YAHXZ@4HA
	DB	05eH
	DD	imagerel ?dtor$2@?0??perf@mask@@YAHXZ@4HA
	DB	086H
	DD	imagerel ?dtor$3@?0??perf@mask@@YAHXZ@4HA
	DB	0aeH
	DD	imagerel ?dtor$4@?0??perf@mask@@YAHXZ@4HA
$ip2state$?perf@mask@@YAHXZ DB 016H
	DB	00H
	DB	00H
	DB	'n'
	DB	02H
	DB	0ceH
	DB	00H
	DB	'>'
	DB	04H
	DB	0f2H
	DB	00H
	DB	'J'
	DB	06H
	DB	0feH
	DB	00H
	DB	'P'
	DB	08H
	DB	0feH
	DB	00H
	DB	'P'
	DB	0aH
	DB	0feH
	DB	00H
$cppxdata$?perf@bitfieldInterleave@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?perf@bitfieldInterleave@@YAHXZ
	DD	imagerel $ip2state$?perf@bitfieldInterleave@@YAHXZ
$stateUnwindMap$?perf@bitfieldInterleave@@YAHXZ DB 08H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf@bitfieldInterleave@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??perf@bitfieldInterleave@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0??perf@bitfieldInterleave@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$3@?0??perf@bitfieldInterleave@@YAHXZ@4HA
$unwind$?dtor$0@?0??perf@mask@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??perf@mask@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0??perf@mask@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$3@?0??perf@mask@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$4@?0??perf@mask@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_uint@mask@@YAHXZ DD 032c19H
	DD	01a0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$?test_uvec4@mask@@YAHXZ DD 032c19H
	DD	02a0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?test@mask@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?test@bitfieldInterleave3@@YAHXZ DD 020601H
	DD	07002b206H
$unwind$?test@bitfieldInterleave4@@YAHXZ DD 020601H
	DD	07002b206H
$unwind$?test@bitfieldInterleave@@YAHXZ DD 031a01H
	DD	01e0109H
	DD	07002H
$unwind$?perf@bitfieldInterleave@@YAHXZ DD 031a11H
	DD	0500109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf@bitfieldInterleave@@YAHXZ
$ip2state$?perf@bitfieldInterleave@@YAHXZ DB 012H
	DB	00H
	DB	00H
	DB	0a4H
	DB	02H
	DB	'P'
	DB	04H
	DB	')', 017H
	DB	06H
	DB	'P'
	DB	08H
	DB	099H, 06H
	DB	06H
	DB	01cH
	DB	04H
	DB	'0'
	DB	02H
	DB	016H
	DB	00H
	ORG $+3
$unwind$?dtor$0@?0??perf@bitfieldInterleave@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??perf@bitfieldInterleave@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0??perf@bitfieldInterleave@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$3@?0??perf@bitfieldInterleave@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
?perf@mask@@YAHXZ$rtcName$0 DB 04dH			; mask::perf
	DB	061H
	DB	073H
	DB	06bH
	DB	00H
	ORG $+3
?perf@mask@@YAHXZ$rtcName$1 DB 04dH			; mask::perf
	DB	061H
	DB	073H
	DB	06bH
	DB	00H
	ORG $+3
?perf@mask@@YAHXZ$rtcName$2 DB 04dH			; mask::perf
	DB	061H
	DB	073H
	DB	06bH
	DB	00H
	ORG $+3
?perf@mask@@YAHXZ$rtcName$3 DB 04dH			; mask::perf
	DB	061H
	DB	073H
	DB	06bH
	DB	00H
	ORG $+3
?perf@mask@@YAHXZ$rtcName$4 DB 04dH			; mask::perf
	DB	061H
	DB	073H
	DB	06bH
	DB	00H
	ORG $+7
?perf@mask@@YAHXZ$rtcVarDesc DD 0138H			; mask::perf
	DD	020H
	DQ	FLAT:?perf@mask@@YAHXZ$rtcName$4
	DD	0f8H
	DD	020H
	DQ	FLAT:?perf@mask@@YAHXZ$rtcName$3
	DD	0b8H
	DD	020H
	DQ	FLAT:?perf@mask@@YAHXZ$rtcName$2
	DD	078H
	DD	020H
	DQ	FLAT:?perf@mask@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?perf@mask@@YAHXZ$rtcName$0
	ORG $+240
?perf@mask@@YAHXZ$rtcFrameData DD 05H			; mask::perf
	DD	00H
	DQ	FLAT:?perf@mask@@YAHXZ$rtcVarDesc
?test_uint@mask@@YAHXZ$rtcName$0 DB 044H		; mask::test_uint
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_uint@mask@@YAHXZ$rtcFrameData DD 01H		; mask::test_uint
	DD	00H
	DQ	FLAT:?test_uint@mask@@YAHXZ$rtcVarDesc
?test_uvec4@mask@@YAHXZ$rtcName$0 DB 044H		; mask::test_uvec4
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_uint@mask@@YAHXZ$rtcVarDesc DD 028H		; mask::test_uint
	DD	030H
	DQ	FLAT:?test_uint@mask@@YAHXZ$rtcName$0
	ORG $+48
?test_uvec4@mask@@YAHXZ$rtcName$1 DB 052H		; mask::test_uvec4
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test_uvec4@mask@@YAHXZ$rtcFrameData DD 02H		; mask::test_uvec4
	DD	00H
	DQ	FLAT:?test_uvec4@mask@@YAHXZ$rtcVarDesc
?test@bitfieldInterleave@@YAHXZ$rtcName$0 DB 052H	; bitfieldInterleave::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test_uvec4@mask@@YAHXZ$rtcVarDesc DD 0118H		; mask::test_uvec4
	DD	010H
	DQ	FLAT:?test_uvec4@mask@@YAHXZ$rtcName$1
	DD	030H
	DD	0c0H
	DQ	FLAT:?test_uvec4@mask@@YAHXZ$rtcName$0
	ORG $+96
?test@bitfieldInterleave@@YAHXZ$rtcVarDesc DD 088H	; bitfieldInterleave::test
	DD	010H
	DQ	FLAT:?test@bitfieldInterleave@@YAHXZ$rtcName$0
	ORG $+48
?test@bitfieldInterleave@@YAHXZ$rtcFrameData DD 01H	; bitfieldInterleave::test
	DD	00H
	DQ	FLAT:?test@bitfieldInterleave@@YAHXZ$rtcVarDesc
?perf@bitfieldInterleave@@YAHXZ$rtcName$0 DB 044H	; bitfieldInterleave::perf
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?perf@bitfieldInterleave@@YAHXZ$rtcName$1 DB 050H	; bitfieldInterleave::perf
	DB	061H
	DB	072H
	DB	061H
	DB	06dH
	DB	00H
	ORG $+2
?perf@bitfieldInterleave@@YAHXZ$rtcName$2 DB 053H	; bitfieldInterleave::perf
	DB	069H
	DB	06dH
	DB	064H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+7
?perf@bitfieldInterleave@@YAHXZ$rtcName$3 DB 053H	; bitfieldInterleave::perf
	DB	069H
	DB	06dH
	DB	064H
	DB	050H
	DB	061H
	DB	072H
	DB	061H
	DB	06dH
	DB	00H
	ORG $+6
?perf@bitfieldInterleave@@YAHXZ$rtcVarDesc DD 0158H	; bitfieldInterleave::perf
	DD	020H
	DQ	FLAT:?perf@bitfieldInterleave@@YAHXZ$rtcName$3
	DD	0118H
	DD	020H
	DQ	FLAT:?perf@bitfieldInterleave@@YAHXZ$rtcName$2
	DD	078H
	DD	020H
	DQ	FLAT:?perf@bitfieldInterleave@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?perf@bitfieldInterleave@@YAHXZ$rtcName$0
	ORG $+192
?perf@bitfieldInterleave@@YAHXZ$rtcFrameData DD 04H	; bitfieldInterleave::perf
	DD	00H
	DQ	FLAT:?perf@bitfieldInterleave@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?mask_loop@mask@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?mask_half@mask@@YAHH@Z DD 020901H
	DD	070053209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?mask_mix@mask@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?mask_zero@mask@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@II@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldInterleave@G_K@detail@glm@@YA_KGGGG@Z DD 021b01H
	DD	07017321bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldInterleave@I_K@detail@glm@@YA_KIII@Z DD 021201H
	DD	0700e3212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldInterleave@I_K@detail@glm@@YA_KII@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldInterleave@GI@detail@glm@@YAIGG@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldInterleave@EG@detail@glm@@YAGEE@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?glm_i128_interleave@@YA?AT__m128i@@T1@@Z DD 030d01H
	DD	03e010dH
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bitfieldInterleave@glm@@YA_KGGGG@Z DD 021b01H
	DD	07017321bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bitfieldInterleave@glm@@YA_KIII@Z DD 021201H
	DD	0700e3212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bitfieldInterleave@glm@@YA_KGGG@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bitfieldInterleave@glm@@YA_KII@Z DD 020d01H
	DD	07009320dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bitfieldInterleave@glm@@YA_JHH@Z DD 022801H
	DD	07009f210H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?bitfieldInterleave@glm@@YA_JHH@Z$rtcName$0 DB 073H	; glm::bitfieldInterleave
	DB	069H
	DB	067H
	DB	06eH
	DB	05fH
	DB	078H
	DB	00H
	ORG $+1
?bitfieldInterleave@glm@@YA_JHH@Z$rtcName$1 DB 073H	; glm::bitfieldInterleave
	DB	069H
	DB	067H
	DB	06eH
	DB	05fH
	DB	079H
	DB	00H
	ORG $+1
?bitfieldInterleave@glm@@YA_JHH@Z$rtcName$2 DB 072H	; glm::bitfieldInterleave
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?bitfieldInterleave@glm@@YA_JHH@Z$rtcFrameData DD 03H	; glm::bitfieldInterleave
	DD	00H
	DQ	FLAT:?bitfieldInterleave@glm@@YA_JHH@Z$rtcVarDesc
	ORG $+8
?bitfieldInterleave@glm@@YA_JHH@Z$rtcVarDesc DD 068H	; glm::bitfieldInterleave
	DD	08H
	DQ	FLAT:?bitfieldInterleave@glm@@YA_JHH@Z$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:?bitfieldInterleave@glm@@YA_JHH@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?bitfieldInterleave@glm@@YA_JHH@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bitfieldInterleave@glm@@YAIGG@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bitfieldInterleave@glm@@YAHFF@Z DD 022b01H
	DD	0700bf212H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?bitfieldInterleave@glm@@YAHFF@Z$rtcName$0 DB 073H	; glm::bitfieldInterleave
	DB	069H
	DB	067H
	DB	06eH
	DB	05fH
	DB	078H
	DB	00H
	ORG $+1
?bitfieldInterleave@glm@@YAHFF@Z$rtcName$1 DB 073H	; glm::bitfieldInterleave
	DB	069H
	DB	067H
	DB	06eH
	DB	05fH
	DB	079H
	DB	00H
	ORG $+1
?bitfieldInterleave@glm@@YAHFF@Z$rtcName$2 DB 072H	; glm::bitfieldInterleave
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?bitfieldInterleave@glm@@YAHFF@Z$rtcFrameData DD 03H	; glm::bitfieldInterleave
	DD	00H
	DQ	FLAT:?bitfieldInterleave@glm@@YAHFF@Z$rtcVarDesc
	ORG $+8
?bitfieldInterleave@glm@@YAHFF@Z$rtcVarDesc DD 064H	; glm::bitfieldInterleave
	DD	04H
	DQ	FLAT:?bitfieldInterleave@glm@@YAHFF@Z$rtcName$2
	DD	044H
	DD	02H
	DQ	FLAT:?bitfieldInterleave@glm@@YAHFF@Z$rtcName$1
	DD	024H
	DD	02H
	DQ	FLAT:?bitfieldInterleave@glm@@YAHFF@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bitfieldInterleave@glm@@YAGEE@Z DD 020d01H
	DD	07009320dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bitfieldInterleave@glm@@YAFCC@Z DD 022901H
	DD	07009f210H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?bitfieldInterleave@glm@@YAFCC@Z$rtcName$0 DB 073H	; glm::bitfieldInterleave
	DB	069H
	DB	067H
	DB	06eH
	DB	05fH
	DB	078H
	DB	00H
	ORG $+1
?bitfieldInterleave@glm@@YAFCC@Z$rtcName$1 DB 073H	; glm::bitfieldInterleave
	DB	069H
	DB	067H
	DB	06eH
	DB	05fH
	DB	079H
	DB	00H
	ORG $+1
?bitfieldInterleave@glm@@YAFCC@Z$rtcName$2 DB 072H	; glm::bitfieldInterleave
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?bitfieldInterleave@glm@@YAFCC@Z$rtcFrameData DD 03H	; glm::bitfieldInterleave
	DD	00H
	DQ	FLAT:?bitfieldInterleave@glm@@YAFCC@Z$rtcVarDesc
	ORG $+8
?bitfieldInterleave@glm@@YAFCC@Z$rtcVarDesc DD 064H	; glm::bitfieldInterleave
	DD	02H
	DQ	FLAT:?bitfieldInterleave@glm@@YAFCC@Z$rtcName$2
	DD	044H
	DD	01H
	DQ	FLAT:?bitfieldInterleave@glm@@YAFCC@Z$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:?bitfieldInterleave@glm@@YAFCC@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z PROC		; std::_Voidify_iter<int *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z ENDP		; std::_Voidify_iter<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z	; std::_Voidify_iter<int *>
	mov	rdx, rax
	mov	ecx, 4
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@H@std@@YA$$QEAHAEAH@Z	; std::forward<int>
	mov	rcx, QWORD PTR $T1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QEAHAEAH@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@H@std@@YA$$QEAHAEAH@Z PROC			; std::forward<int>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@H@std@@YA$$QEAHAEAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z PROC		; std::_Voidify_iter<unsigned __int64 *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z ENDP		; std::_Voidify_iter<unsigned __int64 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec2<unsigned int,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec2<unsigned int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAT__m128i@@@std@@YAPEAXPEAT__m128i@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAT__m128i@@@std@@YAPEAXPEAT__m128i@@@Z PROC ; std::_Voidify_iter<__m128i *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAT__m128i@@@std@@YAPEAXPEAT__m128i@@@Z ENDP ; std::_Voidify_iter<__m128i *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@T__m128i@@T1@@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@$$QEAT3@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@T__m128i@@T1@@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@$$QEAT3@@Z PROC ; std::_Default_allocator_traits<std::allocator<__m128i> >::construct<__m128i,__m128i>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAT__m128i@@@std@@YAPEAXPEAT__m128i@@@Z ; std::_Voidify_iter<__m128i *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@T__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z ; std::forward<__m128i>
	mov	rcx, QWORD PTR $T1[rsp]
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR [rcx], xmm0

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@T__m128i@@T1@@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@$$QEAT3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<__m128i> >::construct<__m128i,__m128i>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@T__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@T__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z PROC ; std::forward<__m128i>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@T__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z ENDP ; std::forward<__m128i>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAT__m128i@@@std@@YA?A_PAEBQEAT__m128i@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAT__m128i@@@std@@YA?A_PAEBQEAT__m128i@@@Z PROC ; std::_To_address<__m128i *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAT__m128i@@@std@@YA?A_PAEBQEAT__m128i@@@Z ENDP ; std::_To_address<__m128i *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
__formal$ = 64
_Ptr$ = 72
??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	QWORD PTR $T1[rsp], 4
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z	; std::_Voidify_iter<int *>
	mov	rdx, rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T2[rsp], rax
	mov	rdi, QWORD PTR $T2[rsp]
	xor	eax, eax
	mov	rcx, QWORD PTR $T1[rsp]
	rep stosb

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z PROC		; std::_To_address<int *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ENDP		; std::_To_address<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@H@std@@YA$$QEAHAEAH@Z	; std::forward<int>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z PROC	; std::_Copy_memmove<int *,int *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z ENDP	; std::_Copy_memmove<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAH@std@@YA$$QEAHAEAH@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAH@std@@YA$$QEAHAEAH@Z PROC			; std::move<int &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAH@std@@YA$$QEAHAEAH@Z ENDP			; std::move<int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z PROC	; std::_Get_unwrapped<int * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z ENDP	; std::_Get_unwrapped<int * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
__formal$ = 64
_Ptr$ = 72
??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	QWORD PTR $T1[rsp], 8
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z ; std::_Voidify_iter<unsigned __int64 *>
	mov	rdx, rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T2[rsp], rax
	mov	rdi, QWORD PTR $T2[rsp]
	xor	eax, eax
	mov	rcx, QWORD PTR $T1[rsp]
	rep stosb

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z PROC		; std::_To_address<unsigned __int64 *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z ENDP		; std::_To_address<unsigned __int64 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec2@I$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
??$construct@U?$tvec2@I$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::construct<glm::tvec2<unsigned int,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec2<unsigned int,0> *>
	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@XZ		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@U?$tvec2@I$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::construct<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec2<unsigned int,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@T__m128i@@$$V@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
??$construct@T__m128i@@$$V@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@@Z PROC ; std::_Default_allocator_traits<std::allocator<__m128i> >::construct<__m128i>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAT__m128i@@@std@@YAPEAXPEAT__m128i@@@Z ; std::_Voidify_iter<__m128i *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rdi, QWORD PTR $T1[rsp]
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@T__m128i@@$$V@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<__m128i> >::construct<__m128i>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@T__m128i@@@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAX$$QEAT__m128i@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@T__m128i@@@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAX$$QEAT__m128i@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Emplace_back<__m128i>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@T__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z ; std::forward<__m128i>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@T__m128i@@@std@@YAPEAT__m128i@@PEAT1@@Z ; std::_Unfancy<__m128i>
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@T__m128i@@T1@@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@$$QEAT3@@Z ; std::_Default_allocator_traits<std::allocator<__m128i> >::construct<__m128i,__m128i>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@T__m128i@@@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAX$$QEAT__m128i@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Emplace_back<__m128i>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAT__m128i@@PEAT1@@std@@YAPEAT__m128i@@PEAT1@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAT__m128i@@PEAT1@@std@@YAPEAT__m128i@@PEAT1@00@Z PROC ; std::_Copy_memmove<__m128i *,__m128i *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAT__m128i@@@std@@YA?A_PAEBQEAT__m128i@@@Z ; std::_To_address<__m128i *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAT__m128i@@@std@@YA?A_PAEBQEAT__m128i@@@Z ; std::_To_address<__m128i *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAT__m128i@@@std@@YA?A_PAEBQEAT__m128i@@@Z ; std::_To_address<__m128i *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAT__m128i@@PEAT1@@std@@YAPEAT__m128i@@PEAT1@00@Z ENDP ; std::_Copy_memmove<__m128i *,__m128i *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@T__m128i@@@std@@YAPEAT__m128i@@PEAT1@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@T__m128i@@@std@@YAPEAT__m128i@@PEAT1@@Z PROC ; std::_Unfancy<__m128i>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@T__m128i@@@std@@YAPEAT__m128i@@PEAT1@@Z ENDP ; std::_Unfancy<__m128i>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAT__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAT__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z PROC ; std::move<__m128i &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAT__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z ENDP ; std::move<__m128i &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAT__m128i@@@std@@YA?A_TAEBQEAT__m128i@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAT__m128i@@@std@@YA?A_TAEBQEAT__m128i@@@Z PROC ; std::_Get_unwrapped<__m128i * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAT__m128i@@@std@@YA?A_TAEBQEAT__m128i@@@Z ENDP ; std::_Get_unwrapped<__m128i * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$03@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<4>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$03@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 130  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG63125
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG63126
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 135				; 00000087H
	lea	rdx, OFFSET FLAT:$SG63127
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG63128
	lea	rdx, OFFSET FLAT:$SG63129
	lea	rcx, OFFSET FLAT:$SG63130
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 143  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Last_ch$ = 40
_First$ = 64
_Last$ = 72
??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z PROC		; std::_Zero_range<int *>, COMDAT

; 1824 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1825 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _First_ch$[rsp], rax

; 1826 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _Last_ch$[rsp], rax

; 1827 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR _First_ch$[rsp]
	call	memset

; 1828 :     return _Last;

	mov	rax, QWORD PTR _Last$[rsp]

; 1829 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z ENDP		; std::_Zero_range<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@H@std@@YAPEAHPEAH@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@H@std@@YAPEAHPEAH@Z PROC			; std::_Unfancy<int>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@H@std@@YAPEAHPEAH@Z ENDP			; std::_Unfancy<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_move<int *,std::allocator<int> >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z ; std::_Get_unwrapped<int * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z ; std::_Get_unwrapped<int * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z ; std::_Copy_memmove<int *,int *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	mov	rcx, QWORD PTR _Dest$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 4
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAH@std@@YA$$QEAHAEAH@Z	; std::move<int &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_move<int *,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA PROC ; `std::_Uninitialized_move<int *,std::allocator<int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA ENDP ; `std::_Uninitialized_move<int *,std::allocator<int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z	; std::_Unfancy<unsigned __int64>
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z ; std::_Destroy_range<std::allocator<unsigned __int64> >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Uninitialized_backout_al<std::allocator<unsigned __int64> >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Uninitialized_backout_al<std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Last_ch$ = 40
_First$ = 64
_Last$ = 72
??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z PROC		; std::_Zero_range<unsigned __int64 *>, COMDAT

; 1824 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1825 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z ; std::_To_address<unsigned __int64 *>
	mov	QWORD PTR _First_ch$[rsp], rax

; 1826 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z ; std::_To_address<unsigned __int64 *>
	mov	QWORD PTR _Last_ch$[rsp], rax

; 1827 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR _First_ch$[rsp]
	call	memset

; 1828 :     return _Last;

	mov	rax, QWORD PTR _Last$[rsp]

; 1829 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z ENDP		; std::_Zero_range<unsigned __int64 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z PROC			; std::_Unfancy<unsigned __int64>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z ENDP			; std::_Unfancy<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<unsigned int,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec2@I$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::construct<glm::tvec2<unsigned int,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 669  :         }
; 670  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@T__m128i@@@std@@YAPEAT__m128i@@PEAT1@@Z ; std::_Unfancy<__m128i>
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@T__m128i@@$$V@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SAXAEAV?$allocator@T__m128i@@@1@QEAT__m128i@@@Z ; std::_Default_allocator_traits<std::allocator<__m128i> >::construct<__m128i>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAPEAT__m128i@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAPEAT__m128i@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAPEAT__m128i@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::~_Uninitialized_backout_al<std::allocator<__m128i> >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z ; std::_Destroy_range<std::allocator<__m128i> >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::~_Uninitialized_backout_al<std::allocator<__m128i> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@PEAT__m128i@@AEAV?$allocator@T__m128i@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@PEAT__m128i@@AEAV?$allocator@T__m128i@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Uninitialized_backout_al<std::allocator<__m128i> >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@PEAT__m128i@@AEAV?$allocator@T__m128i@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Uninitialized_backout_al<std::allocator<__m128i> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z PROC ; std::_Uninitialized_move<__m128i *,std::allocator<__m128i> >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAT__m128i@@@std@@YA?A_TAEBQEAT__m128i@@@Z ; std::_Get_unwrapped<__m128i * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAT__m128i@@@std@@YA?A_TAEBQEAT__m128i@@@Z ; std::_Get_unwrapped<__m128i * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@T__m128i@@@std@@YAPEAT__m128i@@PEAT1@@Z ; std::_Unfancy<__m128i>
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAT__m128i@@PEAT1@@std@@YAPEAT__m128i@@PEAT1@00@Z ; std::_Copy_memmove<__m128i *,__m128i *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR _Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@PEAT__m128i@@AEAV?$allocator@T__m128i@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Uninitialized_backout_al<std::allocator<__m128i> >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 16
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAT__m128i@@@std@@YA$$QEAT__m128i@@AEAT1@@Z ; std::move<__m128i &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@T__m128i@@@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAX$$QEAT__m128i@@@Z ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Emplace_back<__m128i>

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAPEAT__m128i@@XZ ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::~_Uninitialized_backout_al<std::allocator<__m128i> >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z ENDP ; std::_Uninitialized_move<__m128i *,std::allocator<__m128i> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<__m128i *,std::allocator<__m128i> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::~_Uninitialized_backout_al<std::allocator<__m128i> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<__m128i *,std::allocator<__m128i> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$07@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<8>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 2305843009213693951		; 1fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 2305843009213693951		; 1fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 3
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$07@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 67   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
_TEXT	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<int> >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);

	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	QWORD PTR _PFirst$4[rsp], rax

; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	rax, QWORD PTR _PFirst$4[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rdx, rax
	mov	rcx, QWORD PTR _PFirst$4[rsp]
	call	??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z	; std::_Zero_range<int *>

; 1843 :             return _First + _Count;

	mov	rax, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	jmp	SHORT $LN1@Uninitiali

; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
	mov	QWORD PTR $T5[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	mov	rax, QWORD PTR $T5[rsp]
$LN1@Uninitiali:

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT

; 1357 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 1358 :         if (_Newsize > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Resize_rea

; 1359 :             _Xlength();

	call	?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
$LN2@Resize_rea:

; 1360 :         }
; 1361 : 
; 1362 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1363 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1364 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1365 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1366 : 
; 1367 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1368 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ; std::vector<int,std::allocator<int> >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 1369 : 
; 1370 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@H@std@@QEAAPEAH_K@Z ; std::allocator<int>::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1371 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Oldsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Appended_first$[rsp], rax

; 1372 :         pointer _Appended_last        = _Appended_first;

	mov	rax, QWORD PTR _Appended_first$[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1373 : 
; 1374 :         _TRY_BEGIN
; 1375 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1376 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1377 :         } else {
; 1378 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1379 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Appended_first$[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	mov	QWORD PTR tv140[rsp], rax
	mov	rax, QWORD PTR tv140[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1380 :         }
; 1381 : 
; 1382 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1383 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
	npad	1
	jmp	SHORT $LN7@Resize_rea
$LN8@Resize_rea:
$LN7@Resize_rea:

; 1384 :         } else {
; 1385 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1386 :         }
; 1387 :         _CATCH_ALL
; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);
; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);
; 1390 :         _RERAISE;
; 1391 :         _CATCH_END
; 1392 : 
; 1393 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z ; std::vector<int,std::allocator<int> >::_Change_array

; 1394 :     }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
$LN9@Resize_rea:
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA PROC ; `std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0

; 1387 :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z$0:

; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Appended_last$[rbp]
	mov	rcx, QWORD PTR _Appended_first$[rbp]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ; std::allocator<int>::deallocate

; 1390 :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 1391 :         _CATCH_END

	lea	rax, $LN8@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA ENDP ; `std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z
_TEXT	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);

	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z	; std::_Unfancy<unsigned __int64>
	mov	QWORD PTR _PFirst$4[rsp], rax

; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	rax, QWORD PTR _PFirst$4[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rdx, rax
	mov	rcx, QWORD PTR _PFirst$4[rsp]
	call	??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z ; std::_Zero_range<unsigned __int64 *>

; 1843 :             return _First + _Count;

	mov	rax, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	jmp	SHORT $LN1@Uninitiali

; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Uninitialized_backout_al<std::allocator<unsigned __int64> >

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Release
	mov	QWORD PTR $T5[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >
	mov	rax, QWORD PTR $T5[rsp]
$LN1@Uninitiali:

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@_KV?$allocator@_K@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tidy_guard@V?$vector@_KV?$allocator@_K@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tidy_guard<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >::~_Tidy_guard<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >, COMDAT

; 33   :     _CONSTEXPR20 ~_Tidy_guard() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 34   :         if (_Target) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy_guard

; 35   :             _Target->_Tidy();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Tidy
$LN2@Tidy_guard:

; 36   :         }
; 37   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Tidy_guard@V?$vector@_KV?$allocator@_K@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tidy_guard<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >::~_Tidy_guard<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEBV?$allocator@_K@std@@@std@@YAAEBV?$allocator@_K@0@AEBV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBV?$allocator@_K@std@@@std@@YAAEBV?$allocator@_K@0@AEBV10@@Z PROC ; std::forward<std::allocator<unsigned __int64> const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEBV?$allocator@_K@std@@@std@@YAAEBV?$allocator@_K@0@AEBV10@@Z ENDP ; std::forward<std::allocator<unsigned __int64> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);
; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1843 :             return _First + _Count;
; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
	npad	1

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
	mov	rax, QWORD PTR $T4[rsp]

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<glm::tvec2<unsigned int,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<glm::tvec2<unsigned int,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tidy_guard@V?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tidy_guard<std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > > >::~_Tidy_guard<std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > > >, COMDAT

; 33   :     _CONSTEXPR20 ~_Tidy_guard() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 34   :         if (_Target) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy_guard

; 35   :             _Target->_Tidy();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Tidy
$LN2@Tidy_guard:

; 36   :         }
; 37   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Tidy_guard@V?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tidy_guard<std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > > >::~_Tidy_guard<std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1334 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1335 :         if (_Ptr) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Container_

; 1336 :             _Delete_plain_internal(_Al, _Ptr);

	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
$LN2@Container_:

; 1337 :         }
; 1338 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Al_$ = 72
_Mycont$ = 80
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1320 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 1321 :         // create a new _Container_proxy pointing at _Mycont
; 1322 :         _Ptr = _Unfancy(_Al_.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al_$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 1323 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

	mov	rcx, QWORD PTR _Mycont$[rsp]
	call	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1324 :         _Mycont._Myproxy = _Ptr;

	mov	rax, QWORD PTR _Mycont$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 1325 :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@0@AEBV10@@Z PROC ; std::forward<std::allocator<glm::tvec2<unsigned int,0> > const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@0@AEBV10@@Z ENDP ; std::forward<std::allocator<glm::tvec2<unsigned int,0> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 972  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 973  :     // deallocate a plain pointer using an allocator
; 974  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 975  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 976  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 977  :     } else {
; 978  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 979  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 980  :     }
; 981  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z
_TEXT	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<__m128i> >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);
; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1843 :             return _First + _Count;
; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@PEAT__m128i@@AEAV?$allocator@T__m128i@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Uninitialized_backout_al<std::allocator<__m128i> >
	npad	1

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAAPEAT__m128i@@XZ ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::~_Uninitialized_backout_al<std::allocator<__m128i> >
	mov	rax, QWORD PTR $T4[rsp]

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<__m128i> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<__m128i> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<__m128i> >::~_Uninitialized_backout_al<std::allocator<__m128i> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<__m128i> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<__m128i,std::allocator<__m128i> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT

; 1357 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 1358 :         if (_Newsize > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ ; std::vector<__m128i,std::allocator<__m128i> >::max_size
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Resize_rea

; 1359 :             _Xlength();

	call	?_Xlength@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@CAXXZ ; std::vector<__m128i,std::allocator<__m128i> >::_Xlength
$LN2@Resize_rea:

; 1360 :         }
; 1361 : 
; 1362 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ ; std::vector<__m128i,std::allocator<__m128i> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1363 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1364 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1365 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1366 : 
; 1367 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1368 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBA_K_K@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 1369 : 
; 1370 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@T__m128i@@@std@@QEAAPEAT__m128i@@_K@Z ; std::allocator<__m128i>::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1371 :         const pointer _Appended_first = _Newvec + _Oldsize;

	imul	rax, QWORD PTR _Oldsize$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Appended_first$[rsp], rax

; 1372 :         pointer _Appended_last        = _Appended_first;

	mov	rax, QWORD PTR _Appended_first$[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1373 : 
; 1374 :         _TRY_BEGIN
; 1375 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1376 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1377 :         } else {
; 1378 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1379 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Appended_first$[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<__m128i> >
	mov	QWORD PTR tv140[rsp], rax
	mov	rax, QWORD PTR tv140[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1380 :         }
; 1381 : 
; 1382 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1383 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAT__m128i@@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@QEAT1@0PEAT1@AEAV?$allocator@T__m128i@@@0@@Z ; std::_Uninitialized_move<__m128i *,std::allocator<__m128i> >
	npad	1
	jmp	SHORT $LN7@Resize_rea
$LN8@Resize_rea:
$LN7@Resize_rea:

; 1384 :         } else {
; 1385 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1386 :         }
; 1387 :         _CATCH_ALL
; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);
; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);
; 1390 :         _RERAISE;
; 1391 :         _CATCH_END
; 1392 : 
; 1393 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXQEAT__m128i@@_K1@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Change_array

; 1394 :     }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
$LN9@Resize_rea:
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<__m128i,std::allocator<__m128i> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA PROC ; `std::vector<__m128i,std::allocator<__m128i> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0

; 1387 :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z$0:

; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Appended_last$[rbp]
	mov	rcx, QWORD PTR _Appended_first$[rbp]
	call	??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z ; std::_Destroy_range<std::allocator<__m128i> >

; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@T__m128i@@@std@@QEAAXQEAT__m128i@@_K@Z ; std::allocator<__m128i>::deallocate

; 1390 :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 1391 :         _CATCH_END

	lea	rax, $LN8@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA ENDP ; `std::vector<__m128i,std::allocator<__m128i> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z PROC ; glm::detail::functor1<int,int,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv74[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	mov	ecx, DWORD PTR tv66[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	ecx, DWORD PTR tv70[rsp]
	mov	r9d, ecx
	mov	ecx, DWORD PTR tv74[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z ENDP ; glm::detail::functor1<int,int,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 256  :     }
; 257  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned __int64> >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z PROC ; std::_Destroy_range<std::allocator<__m128i> >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<__m128i> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@H@std@@QEAA@XZ		; std::allocator<int>::allocator<int>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newlast$1 = 72
_Oldcapacity$2 = 80
_Oldlast$3 = 88
this$ = 112
_Newsize$ = 120
_Val$ = 128
??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>, COMDAT

; 1397 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 1398 :         // trim or append elements, provide strong guarantee
; 1399 :         auto& _Al           = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1400 :         auto& _My_data      = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1401 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1402 :         pointer& _Mylast    = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1403 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1404 :         if (_Newsize < _Oldsize) { // trim

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jae	SHORT $LN2@Resize

; 1405 :             const pointer _Newlast = _Myfirst + _Newsize;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Newlast$1[rsp], rax

; 1406 :             _Orphan_range(_Newlast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Newlast$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 1407 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1408 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1409 :             _Mylast = _Newlast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	mov	QWORD PTR [rax], rcx

; 1410 :             return;

	jmp	$LN1@Resize
$LN2@Resize:

; 1411 :         }
; 1412 : 
; 1413 :         if (_Newsize > _Oldsize) { // append

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	$LN3@Resize

; 1414 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldcapacity$2[rsp], rax

; 1415 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	rax, QWORD PTR _Oldcapacity$2[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN4@Resize

; 1416 :                 _Resize_reallocate(_Newsize, _Val);

	mov	r8, QWORD PTR _Val$[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>

; 1417 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1418 :             }
; 1419 : 
; 1420 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1421 :             const pointer _Oldlast = _Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Oldlast$3[rsp], rax

; 1422 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1423 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1424 :             } else {
; 1425 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1426 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Oldlast$3[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1427 :             }
; 1428 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1429 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	r8, QWORD PTR _Oldlast$3[rsp]
	mov	rdx, QWORD PTR _Oldlast$3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
$LN3@Resize:
$LN1@Resize:

; 1430 :         }
; 1431 : 
; 1432 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1433 :     }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S6$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>, COMDAT

; 1902 :     _CONSTEXPR20 void _Construct_n(_CRT_GUARDOVERFLOW const size_type _Count, _Valty&&... _Val) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 1903 :         // Dispatches between the three sized constructions.
; 1904 :         // 1-arg -> value-construction, e.g. vector(5)
; 1905 :         // 2-arg -> fill, e.g. vector(5, "meow")
; 1906 :         // 3-arg -> sized range construction, e.g. vector{"Hello", "Fluffy", "World"}
; 1907 :         auto& _Al       = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1908 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

	mov	rdx, QWORD PTR _Al$[rsp]
	lea	rcx, QWORD PTR $S6$[rsp]
	call	??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned __int64>
	lea	rax, QWORD PTR $S6$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 1909 :         auto& _My_data  = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1910 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	r8, QWORD PTR _My_data$[rsp]
	mov	rdx, QWORD PTR _Alproxy$[rsp]
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1

; 1911 :         if (_Count != 0) {

	cmp	QWORD PTR _Count$[rsp], 0
	je	SHORT $LN2@Construct_

; 1912 :             _Buy_nonzero(_Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_nonzero@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Buy_nonzero

; 1913 :             _Tidy_guard<vector> _Guard{this};

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _Guard$6[rsp], rax

; 1914 :             if constexpr (sizeof...(_Val) == 0) {
; 1915 :                 _My_data._Mylast = _Uninitialized_value_construct_n(_My_data._Myfirst, _Count, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 1916 :             } else if constexpr (sizeof...(_Val) == 1) {
; 1917 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Valty..., const _Ty&>);
; 1918 :                 _My_data._Mylast = _Uninitialized_fill_n(_My_data._Myfirst, _Count, _Val..., _Al);
; 1919 :             } else if constexpr (sizeof...(_Val) == 2) {
; 1920 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);
; 1921 :             } else {
; 1922 :                 static_assert(_Always_false<_Ty>, "Should be unreachable");
; 1923 :             }
; 1924 :             _ASAN_VECTOR_CREATE;
; 1925 :             _Guard._Target = nullptr;

	mov	QWORD PTR _Guard$6[rsp], 0

; 1926 :         }

	lea	rcx, QWORD PTR _Guard$6[rsp]
	call	??1?$_Tidy_guard@V?$vector@_KV?$allocator@_K@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >::~_Tidy_guard<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >
$LN2@Construct_:

; 1927 : 
; 1928 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 1929 :     }

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S6$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
?dtor$0@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA PROC ; `std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Proxy$[rbp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA ENDP ; `std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S6$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
?dtor$1@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA PROC ; `std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Guard$6[rbp]
	call	??1?$_Tidy_guard@V?$vector@_KV?$allocator@_K@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >::~_Tidy_guard<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z@4HA ENDP ; `std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0AEBV?$allocator@_K@std@@$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@_K@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0AEBV?$allocator@_K@std@@$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@_K@1@@Z PROC ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1><std::allocator<unsigned __int64> const &>, COMDAT

; 1375 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR _Val1$[rsp]
	call	??$forward@AEBV?$allocator@_K@std@@@std@@YAAEBV?$allocator@_K@0@AEBV10@@Z ; std::forward<std::allocator<unsigned __int64> const &>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned __int64> >::_Vector_val<std::_Simple_types<unsigned __int64> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0AEBV?$allocator@_K@std@@$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@_K@1@@Z ENDP ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1><std::allocator<unsigned __int64> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned __int64>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S5$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>, COMDAT

; 1902 :     _CONSTEXPR20 void _Construct_n(_CRT_GUARDOVERFLOW const size_type _Count, _Valty&&... _Val) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 1903 :         // Dispatches between the three sized constructions.
; 1904 :         // 1-arg -> value-construction, e.g. vector(5)
; 1905 :         // 2-arg -> fill, e.g. vector(5, "meow")
; 1906 :         // 3-arg -> sized range construction, e.g. vector{"Hello", "Fluffy", "World"}
; 1907 :         auto& _Al       = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1908 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

	mov	rdx, QWORD PTR _Al$[rsp]
	lea	rcx, QWORD PTR $S5$[rsp]
	call	??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<unsigned int,0> >
	lea	rax, QWORD PTR $S5$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 1909 :         auto& _My_data  = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1910 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	r8, QWORD PTR _My_data$[rsp]
	mov	rdx, QWORD PTR _Alproxy$[rsp]
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1

; 1911 :         if (_Count != 0) {

	cmp	QWORD PTR _Count$[rsp], 0
	je	SHORT $LN2@Construct_

; 1912 :             _Buy_nonzero(_Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_nonzero@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Buy_nonzero

; 1913 :             _Tidy_guard<vector> _Guard{this};

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _Guard$6[rsp], rax

; 1914 :             if constexpr (sizeof...(_Val) == 0) {
; 1915 :                 _My_data._Mylast = _Uninitialized_value_construct_n(_My_data._Myfirst, _Count, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec2<unsigned int,0> > >
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 1916 :             } else if constexpr (sizeof...(_Val) == 1) {
; 1917 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Valty..., const _Ty&>);
; 1918 :                 _My_data._Mylast = _Uninitialized_fill_n(_My_data._Myfirst, _Count, _Val..., _Al);
; 1919 :             } else if constexpr (sizeof...(_Val) == 2) {
; 1920 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);
; 1921 :             } else {
; 1922 :                 static_assert(_Always_false<_Ty>, "Should be unreachable");
; 1923 :             }
; 1924 :             _ASAN_VECTOR_CREATE;
; 1925 :             _Guard._Target = nullptr;

	mov	QWORD PTR _Guard$6[rsp], 0

; 1926 :         }

	lea	rcx, QWORD PTR _Guard$6[rsp]
	call	??1?$_Tidy_guard@V?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > > >::~_Tidy_guard<std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > > >
$LN2@Construct_:

; 1927 : 
; 1928 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 1929 :     }

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S5$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA PROC ; `std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Proxy$[rbp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA ENDP ; `std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S5$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA PROC ; `std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Guard$6[rbp]
	call	??1?$_Tidy_guard@V?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > > >::~_Tidy_guard<std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z@4HA ENDP ; `std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1><std::allocator<glm::tvec2<unsigned int,0> > const &>, COMDAT

; 1375 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR _Val1$[rsp]
	call	??$forward@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@0@AEBV10@@Z ; std::forward<std::allocator<glm::tvec2<unsigned int,0> > const &>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1><std::allocator<glm::tvec2<unsigned int,0> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<unsigned int,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 32
$T1 = 40
this$ = 64
_Al$ = 72
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	QWORD PTR _New_proxy$[rsp], rax

; 1058 :         _Construct_in_place(*_New_proxy, this);

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1059 :         _Myproxy            = _New_proxy;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	mov	QWORD PTR [rax], rcx

; 1060 :         _New_proxy->_Mycont = this;

	mov	rax, QWORD PTR _New_proxy$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], rcx

; 1061 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@T__m128i@@@std@@QEAA@XZ	; std::allocator<__m128i>::allocator<__m128i>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<__m128i> >::_Vector_val<std::_Simple_types<__m128i> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 984  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 985  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 986  :     using _Ty = typename _Alloc::value_type;
; 987  :     _Ptr->~_Ty();
; 988  :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 989  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 609  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 610  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0T__m128i@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@T__m128i@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0T__m128i@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@T__m128i@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><__m128i>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0T__m128i@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@T__m128i@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><__m128i>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newlast$1 = 72
_Oldcapacity$2 = 80
_Oldlast$3 = 88
this$ = 112
_Newsize$ = 120
_Val$ = 128
??$_Resize@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<__m128i,std::allocator<__m128i> >::_Resize<std::_Value_init_tag>, COMDAT

; 1397 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 1398 :         // trim or append elements, provide strong guarantee
; 1399 :         auto& _Al           = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ ; std::vector<__m128i,std::allocator<__m128i> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1400 :         auto& _My_data      = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1401 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1402 :         pointer& _Mylast    = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1403 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1404 :         if (_Newsize < _Oldsize) { // trim

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jae	SHORT $LN2@Resize

; 1405 :             const pointer _Newlast = _Myfirst + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 16
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR _Newlast$1[rsp], rax

; 1406 :             _Orphan_range(_Newlast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Newlast$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range

; 1407 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	call	??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z ; std::_Destroy_range<std::allocator<__m128i> >

; 1408 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1409 :             _Mylast = _Newlast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	mov	QWORD PTR [rax], rcx

; 1410 :             return;

	jmp	$LN1@Resize
$LN2@Resize:

; 1411 :         }
; 1412 : 
; 1413 :         if (_Newsize > _Oldsize) { // append

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	$LN3@Resize

; 1414 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldcapacity$2[rsp], rax

; 1415 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	rax, QWORD PTR _Oldcapacity$2[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN4@Resize

; 1416 :                 _Resize_reallocate(_Newsize, _Val);

	mov	r8, QWORD PTR _Val$[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Resize_reallocate<std::_Value_init_tag>

; 1417 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1418 :             }
; 1419 : 
; 1420 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1421 :             const pointer _Oldlast = _Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Oldlast$3[rsp], rax

; 1422 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1423 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1424 :             } else {
; 1425 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1426 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Oldlast$3[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@T__m128i@@@std@@@std@@YAPEAT__m128i@@PEAT1@_KAEAV?$allocator@T__m128i@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<__m128i> >
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1427 :             }
; 1428 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1429 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	r8, QWORD PTR _Oldlast$3[rsp]
	mov	rdx, QWORD PTR _Oldlast$3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range
$LN3@Resize:
$LN1@Resize:

; 1430 :         }
; 1431 : 
; 1432 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1433 :     }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Resize@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<__m128i,std::allocator<__m128i> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 627  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 628  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 629  : 
; 630  : 	Error += ::mask::test();

	call	?test@mask@@YAHXZ			; mask::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 631  : 	Error += ::bitfieldInterleave3::test();

	call	?test@bitfieldInterleave3@@YAHXZ	; bitfieldInterleave3::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 632  : 	Error += ::bitfieldInterleave4::test();

	call	?test@bitfieldInterleave4@@YAHXZ	; bitfieldInterleave4::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 633  : 	Error += ::bitfieldInterleave::test();

	call	?test@bitfieldInterleave@@YAHXZ		; bitfieldInterleave::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 634  : 	//Error += ::bitRevert::test();
; 635  : 
; 636  : #	ifdef NDEBUG
; 637  : 		Error += ::mask::perf();
; 638  : 		Error += ::bitfieldInterleave::perf();
; 639  : #	endif//NDEBUG
; 640  : 
; 641  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 642  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEBAAEBV?$allocator@T__m128i@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEBAAEBV?$allocator@T__m128i@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEBAAEBV?$allocator@T__m128i@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAAAEAV?$allocator@T__m128i@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAAAEAV?$allocator@T__m128i@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAAAEAV?$allocator@T__m128i@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<__m128i> >::_Vector_val<std::_Simple_types<__m128i> >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<__m128i> >::_Vector_val<std::_Simple_types<__m128i> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAAEBV?$allocator@T__m128i@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAAEBV?$allocator@T__m128i@@@2@XZ PROC ; std::vector<__m128i,std::allocator<__m128i> >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEBAAEBV?$allocator@T__m128i@@@2@XZ ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAAEBV?$allocator@T__m128i@@@2@XZ ENDP ; std::vector<__m128i,std::allocator<__m128i> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ PROC ; std::vector<__m128i,std::allocator<__m128i> >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAAAEAV?$allocator@T__m128i@@@2@XZ ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ ENDP ; std::vector<__m128i,std::allocator<__m128i> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z PROC ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z ENDP ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z PROC ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z ENDP ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z@4HA PROC ; `std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z@4HA ENDP ; `std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z PROC ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAXPEAT__m128i@@0@Z ENDP ; std::vector<__m128i,std::allocator<__m128i> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@CAXXZ PROC ; std::vector<__m128i,std::allocator<__m128i> >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@CAXXZ ENDP ; std::vector<__m128i,std::allocator<__m128i> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ PROC ; std::vector<__m128i,std::allocator<__m128i> >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ ; std::vector<__m128i,std::allocator<__m128i> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z ; std::_Destroy_range<std::allocator<__m128i> >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@T__m128i@@@std@@QEAAXQEAT__m128i@@_K@Z ; std::allocator<__m128i>::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ ENDP ; std::vector<__m128i,std::allocator<__m128i> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXQEAT__m128i@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXQEAT__m128i@@_K1@Z PROC ; std::vector<__m128i,std::allocator<__m128i> >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ ; std::vector<__m128i,std::allocator<__m128i> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@T__m128i@@@std@@@std@@YAXPEAT__m128i@@QEAT1@AEAV?$allocator@T__m128i@@@0@@Z ; std::_Destroy_range<std::allocator<__m128i> >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@T__m128i@@@std@@QEAAXQEAT__m128i@@_K@Z ; std::allocator<__m128i>::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXQEAT__m128i@@_K1@Z ENDP ; std::vector<__m128i,std::allocator<__m128i> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<__m128i,std::allocator<__m128i> >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ ; std::vector<__m128i,std::allocator<__m128i> >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ ; std::vector<__m128i,std::allocator<__m128i> >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<__m128i,std::allocator<__m128i> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAAEAT__m128i@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAAEAT__m128i@@_K@Z PROC ; std::vector<__m128i,std::allocator<__m128i> >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	imul	rax, QWORD PTR _Pos$[rsp], 16
	mov	rcx, QWORD PTR _My_data$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAAEAT__m128i@@_K@Z ENDP ; std::vector<__m128i,std::allocator<__m128i> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ PROC ; std::vector<__m128i,std::allocator<__m128i> >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 4

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<__m128i,std::allocator<__m128i> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ PROC ; std::vector<__m128i,std::allocator<__m128i> >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEBAAEBV?$allocator@T__m128i@@@2@XZ ; std::vector<__m128i,std::allocator<__m128i> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SA_KAEBV?$allocator@T__m128i@@@2@@Z ; std::_Default_allocator_traits<std::allocator<__m128i> >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<__m128i,std::allocator<__m128i> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ PROC ; std::vector<__m128i,std::allocator<__m128i> >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<__m128i,std::allocator<__m128i> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?resize@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Newsize$ = 72
?resize@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAX_K@Z PROC ; std::vector<__m128i,std::allocator<__m128i> >::resize, COMDAT

; 1436 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1437 :         // trim or append value-initialized elements, provide strong guarantee
; 1438 :         _Resize(_Newsize, _Value_init_tag{});

	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<__m128i,std::allocator<__m128i> >::_Resize<std::_Value_init_tag>

; 1439 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?resize@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAX_K@Z ENDP ; std::vector<__m128i,std::allocator<__m128i> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S1$ = 52
$T4 = 68
this$ = 96
??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ PROC ; std::vector<__m128i,std::allocator<__m128i> >::~vector<__m128i,std::allocator<__m128i> >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAXXZ ; std::vector<__m128i,std::allocator<__m128i> >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ ; std::vector<__m128i,std::allocator<__m128i> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S1$[rsp]
	call	??$?0T__m128i@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@T__m128i@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><__m128i>
	lea	rax, QWORD PTR $S1$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ENDP ; std::vector<__m128i,std::allocator<__m128i> >::~vector<__m128i,std::allocator<__m128i> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ PROC ; std::vector<__m128i,std::allocator<__m128i> >::vector<__m128i,std::allocator<__m128i> >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@T__m128i@@@std@@V?$_Vector_val@U?$_Simple_types@T__m128i@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1>::_Compressed_pair<std::allocator<__m128i>,std::_Vector_val<std::_Simple_types<__m128i> >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@AEAAAEAV?$allocator@T__m128i@@@2@XZ ; std::vector<__m128i,std::allocator<__m128i> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0T__m128i@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@T__m128i@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><__m128i>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ENDP ; std::vector<__m128i,std::allocator<__m128i> >::vector<__m128i,std::allocator<__m128i> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SA_KAEBV?$allocator@T__m128i@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SA_KAEBV?$allocator@T__m128i@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<__m128i> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 1152921504606846975		; 0fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@T__m128i@@@std@@@std@@SA_KAEBV?$allocator@T__m128i@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<__m128i> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@T__m128i@@@std@@QEAAPEAT__m128i@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@T__m128i@@@std@@QEAAPEAT__m128i@@_K@Z PROC ; std::allocator<__m128i>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@T__m128i@@@std@@QEAAPEAT__m128i@@_K@Z ENDP ; std::allocator<__m128i>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@T__m128i@@@std@@QEAAXQEAT__m128i@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@T__m128i@@@std@@QEAAXQEAT__m128i@@_K@Z PROC ; std::allocator<__m128i>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@T__m128i@@@std@@QEAAXQEAT__m128i@@_K@Z ENDP ; std::allocator<__m128i>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@T__m128i@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@T__m128i@@@std@@QEAA@XZ PROC		; std::allocator<__m128i>::allocator<__m128i>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@T__m128i@@@std@@QEAA@XZ ENDP		; std::allocator<__m128i>::allocator<__m128i>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<unsigned int,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newcapacity$ = 56
?_Buy_nonzero@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Buy_nonzero, COMDAT

; 1841 :     _CONSTEXPR20 void _Buy_nonzero(const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1842 :         // allocate array with _Newcapacity elements
; 1843 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1844 :         auto& _My_data    = _Mypair._Myval2;
; 1845 :         pointer& _Myfirst = _My_data._Myfirst;
; 1846 :         pointer& _Mylast  = _My_data._Mylast;
; 1847 :         pointer& _Myend   = _My_data._Myend;
; 1848 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1849 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1850 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1851 : 
; 1852 :         if (_Newcapacity > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::max_size
	cmp	QWORD PTR _Newcapacity$[rsp], rax
	jbe	SHORT $LN2@Buy_nonzer

; 1853 :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Xlength
$LN2@Buy_nonzer:

; 1854 :         }
; 1855 : 
; 1856 :         _Buy_raw(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_raw@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Buy_raw
$LN3@Buy_nonzer:

; 1857 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Buy_nonzero@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_raw@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Myend$ = 56
_Newvec$ = 64
this$ = 96
_Newcapacity$ = 104
?_Buy_raw@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Buy_raw, COMDAT

; 1825 :     _CONSTEXPR20 void _Buy_raw(const size_type _Newcapacity) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1826 :         // allocate array with _Newcapacity elements
; 1827 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1828 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1829 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1830 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1831 : 
; 1832 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1833 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1834 : 
; 1835 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, rax
	call	?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<unsigned int,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1836 :         _Myfirst           = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1837 :         _Mylast            = _Newvec;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1838 :         _Myend             = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1839 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Buy_raw@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 3
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 3

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S2$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S2$[rsp]
	call	??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<unsigned int,0> >
	lea	rax, QWORD PTR $S2$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Count$ = 72
_Al$ = 80
??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 668  :         : _Mypair(_One_then_variadic_args_t{}, _Al) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR _Al$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0AEBV?$allocator@U?$tvec2@I$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1><std::allocator<glm::tvec2<unsigned int,0> > const &>

; 669  :         _Construct_n(_Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Construct_n@$$V@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Construct_n<>

; 670  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 2305843009213693951		; 1fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec2<unsigned int,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec2<unsigned int,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec2<unsigned int,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 3
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec2<unsigned int,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec2<unsigned int,0> >::allocator<glm::tvec2<unsigned int,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec2<unsigned int,0> >::allocator<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned __int64> >::_Vector_val<std::_Simple_types<unsigned __int64> >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned __int64> >::_Vector_val<std::_Simple_types<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z ; std::_Destroy_range<std::allocator<unsigned __int64> >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z ; std::allocator<unsigned __int64>::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newcapacity$ = 56
?_Buy_nonzero@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Buy_nonzero, COMDAT

; 1841 :     _CONSTEXPR20 void _Buy_nonzero(const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1842 :         // allocate array with _Newcapacity elements
; 1843 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1844 :         auto& _My_data    = _Mypair._Myval2;
; 1845 :         pointer& _Myfirst = _My_data._Myfirst;
; 1846 :         pointer& _Mylast  = _My_data._Mylast;
; 1847 :         pointer& _Myend   = _My_data._Myend;
; 1848 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1849 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1850 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1851 : 
; 1852 :         if (_Newcapacity > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::max_size
	cmp	QWORD PTR _Newcapacity$[rsp], rax
	jbe	SHORT $LN2@Buy_nonzer

; 1853 :             _Xlength();

	call	?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Xlength
$LN2@Buy_nonzer:

; 1854 :         }
; 1855 : 
; 1856 :         _Buy_raw(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_raw@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Buy_raw
$LN3@Buy_nonzer:

; 1857 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Buy_nonzero@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_raw@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Myend$ = 56
_Newvec$ = 64
this$ = 96
_Newcapacity$ = 104
?_Buy_raw@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Buy_raw, COMDAT

; 1825 :     _CONSTEXPR20 void _Buy_raw(const size_type _Newcapacity) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1826 :         // allocate array with _Newcapacity elements
; 1827 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1828 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1829 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1830 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1831 : 
; 1832 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1833 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1834 : 
; 1835 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, rax
	call	?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z ; std::allocator<unsigned __int64>::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1836 :         _Myfirst           = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1837 :         _Mylast            = _Newvec;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1838 :         _Myend             = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1839 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Buy_raw@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 3
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 3

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S3$ = 52
$T4 = 68
this$ = 96
??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ PROC	; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S3$[rsp]
	call	??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned __int64>
	lea	rax, QWORD PTR $S3$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ ENDP	; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@_KAEBV?$allocator@_K@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Count$ = 72
_Al$ = 80
??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@_KAEBV?$allocator@_K@1@@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::vector<unsigned __int64,std::allocator<unsigned __int64> >, COMDAT

; 668  :         : _Mypair(_One_then_variadic_args_t{}, _Al) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR _Al$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0AEBV?$allocator@_K@std@@$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@_K@1@@Z ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1><std::allocator<unsigned __int64> const &>

; 669  :         _Construct_n(_Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Construct_n@$$V@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Construct_n<>

; 670  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@_KAEBV?$allocator@_K@1@@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::vector<unsigned __int64,std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 2305843009213693951		; 1fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z PROC	; std::allocator<unsigned __int64>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z ENDP	; std::allocator<unsigned __int64>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z PROC	; std::allocator<unsigned __int64>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 3
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z ENDP	; std::allocator<unsigned __int64>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@_K@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@_K@std@@QEAA@XZ PROC			; std::allocator<unsigned __int64>::allocator<unsigned __int64>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@_K@std@@QEAA@XZ ENDP			; std::allocator<unsigned __int64>::allocator<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
_TEXT	SEGMENT
x_max$ = 32
y_max$ = 36
Data$ = 56
Param$ = 120
i$7 = 164
LastTime$8 = 168
i$9 = 176
Time$10 = 184
LastTime$11 = 188
i$12 = 192
Time$13 = 200
LastTime$14 = 204
i$15 = 208
Time$16 = 216
LastTime$17 = 220
i$18 = 224
Time$19 = 232
LastTime$20 = 236
i$21 = 240
Time$22 = 248
LastTime$23 = 252
i$24 = 256
Time$25 = 264
SimdData$26 = 280
SimdParam$27 = 344
i$28 = 388
$T29 = 400
LastTime$30 = 416
i$31 = 424
$T32 = 432
Time$33 = 448
$T34 = 452
$T35 = 453
$T36 = 456
$T37 = 464
$T38 = 480
tv83 = 496
tv93 = 504
tv129 = 512
tv140 = 520
tv138 = 528
tv163 = 536
tv161 = 544
tv186 = 552
tv184 = 560
tv209 = 568
tv207 = 576
tv232 = 584
tv230 = 592
tv255 = 600
tv260 = 608
tv253 = 616
tv288 = 624
tv298 = 632
?perf@bitfieldInterleave@@YAHXZ PROC			; bitfieldInterleave::perf

; 512  : 	{

$LN34:
	push	rdi
	sub	rsp, 640				; 00000280H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 152				; 00000098H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 513  : 		glm::uint32 x_max = 1 << 11;

	mov	DWORD PTR x_max$[rsp], 2048		; 00000800H

; 514  : 		glm::uint32 y_max = 1 << 10;

	mov	DWORD PTR y_max$[rsp], 1024		; 00000400H

; 515  : 
; 516  : 		// ALU
; 517  : 		std::vector<glm::uint64> Data(x_max * y_max);

	lea	rcx, QWORD PTR $T34[rsp]
	call	??0?$allocator@_K@std@@QEAA@XZ		; std::allocator<unsigned __int64>::allocator<unsigned __int64>
	mov	ecx, DWORD PTR x_max$[rsp]
	imul	ecx, DWORD PTR y_max$[rsp]
	mov	ecx, ecx
	mov	r8, rax
	mov	edx, ecx
	lea	rcx, QWORD PTR Data$[rsp]
	call	??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@_KAEBV?$allocator@_K@1@@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::vector<unsigned __int64,std::allocator<unsigned __int64> >
	npad	1

; 518  : 		std::vector<glm::u32vec2> Param(x_max * y_max);

	lea	rcx, QWORD PTR $T35[rsp]
	call	??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec2<unsigned int,0> >::allocator<glm::tvec2<unsigned int,0> >
	mov	ecx, DWORD PTR x_max$[rsp]
	imul	ecx, DWORD PTR y_max$[rsp]
	mov	ecx, ecx
	mov	r8, rax
	mov	edx, ecx
	lea	rcx, QWORD PTR Param$[rsp]
	call	??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	npad	1

; 519  : 		for(glm::uint32 i = 0; i < Param.size(); ++i)

	mov	DWORD PTR i$7[rsp], 0
	jmp	SHORT $LN4@perf
$LN2@perf:
	mov	eax, DWORD PTR i$7[rsp]
	inc	eax
	mov	DWORD PTR i$7[rsp], eax
$LN4@perf:
	mov	eax, DWORD PTR i$7[rsp]
	mov	QWORD PTR tv83[rsp], rax
	lea	rcx, QWORD PTR Param$[rsp]
	call	?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::size
	mov	rcx, QWORD PTR tv83[rsp]
	cmp	rcx, rax
	jae	SHORT $LN3@perf

; 520  : 			Param[i] = glm::u32vec2(i % x_max, i / y_max);

	xor	edx, edx
	mov	eax, DWORD PTR i$7[rsp]
	div	DWORD PTR y_max$[rsp]
	mov	DWORD PTR tv93[rsp], eax
	xor	edx, edx
	mov	eax, DWORD PTR i$7[rsp]
	div	DWORD PTR x_max$[rsp]
	mov	eax, edx
	mov	ecx, DWORD PTR tv93[rsp]
	mov	r8d, ecx
	mov	edx, eax
	lea	rcx, QWORD PTR $T36[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@II@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv129[rsp], rax
	mov	ecx, DWORD PTR i$7[rsp]
	mov	edx, ecx
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	rcx, QWORD PTR tv129[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	$LN2@perf
$LN3@perf:

; 521  : 
; 522  : 		{
; 523  : 			std::clock_t LastTime = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR LastTime$8[rsp], eax

; 524  : 
; 525  : 			for(std::size_t i = 0; i < Data.size(); ++i)

	mov	QWORD PTR i$9[rsp], 0
	jmp	SHORT $LN7@perf
$LN5@perf:
	mov	rax, QWORD PTR i$9[rsp]
	inc	rax
	mov	QWORD PTR i$9[rsp], rax
$LN7@perf:
	lea	rcx, QWORD PTR Data$[rsp]
	call	?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::size
	cmp	QWORD PTR i$9[rsp], rax
	jae	SHORT $LN6@perf

; 526  : 				Data[i] = glm::bitfieldInterleave(Param[i].x, Param[i].y);

	mov	rdx, QWORD PTR i$9[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	rdx, QWORD PTR i$9[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	mov	edx, DWORD PTR [rcx+4]
	mov	ecx, DWORD PTR [rax]
	call	?bitfieldInterleave@glm@@YA_KII@Z	; glm::bitfieldInterleave
	mov	QWORD PTR tv138[rsp], rax
	mov	rdx, QWORD PTR i$9[rsp]
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
	mov	rcx, QWORD PTR tv138[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	$LN5@perf
$LN6@perf:

; 527  : 
; 528  : 			std::clock_t Time = std::clock() - LastTime;

	call	QWORD PTR __imp_clock
	sub	eax, DWORD PTR LastTime$8[rsp]
	mov	DWORD PTR Time$10[rsp], eax

; 529  : 
; 530  : 			std::printf("glm::bitfieldInterleave Time %d clocks\n", static_cast<unsigned int>(Time));

	mov	edx, DWORD PTR Time$10[rsp]
	lea	rcx, OFFSET FLAT:$SG60103
	call	printf

; 531  : 		}
; 532  : 
; 533  : 		{
; 534  : 			std::clock_t LastTime = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR LastTime$11[rsp], eax

; 535  : 
; 536  : 			for(std::size_t i = 0; i < Data.size(); ++i)

	mov	QWORD PTR i$12[rsp], 0
	jmp	SHORT $LN10@perf
$LN8@perf:
	mov	rax, QWORD PTR i$12[rsp]
	inc	rax
	mov	QWORD PTR i$12[rsp], rax
$LN10@perf:
	lea	rcx, QWORD PTR Data$[rsp]
	call	?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::size
	cmp	QWORD PTR i$12[rsp], rax
	jae	SHORT $LN9@perf

; 537  : 				Data[i] = fastBitfieldInterleave(Param[i].x, Param[i].y);

	mov	rdx, QWORD PTR i$12[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	QWORD PTR tv163[rsp], rax
	mov	rdx, QWORD PTR i$12[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	rcx, QWORD PTR tv163[rsp]
	mov	edx, DWORD PTR [rcx+4]
	mov	ecx, DWORD PTR [rax]
	call	?fastBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::fastBitfieldInterleave
	mov	QWORD PTR tv161[rsp], rax
	mov	rdx, QWORD PTR i$12[rsp]
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
	mov	rcx, QWORD PTR tv161[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	$LN8@perf
$LN9@perf:

; 538  : 
; 539  : 			std::clock_t Time = std::clock() - LastTime;

	call	QWORD PTR __imp_clock
	sub	eax, DWORD PTR LastTime$11[rsp]
	mov	DWORD PTR Time$13[rsp], eax

; 540  : 
; 541  : 			std::printf("fastBitfieldInterleave Time %d clocks\n", static_cast<unsigned int>(Time));

	mov	edx, DWORD PTR Time$13[rsp]
	lea	rcx, OFFSET FLAT:$SG60104
	call	printf

; 542  : 		}
; 543  : /*
; 544  : 		{
; 545  : 			std::clock_t LastTime = std::clock();
; 546  : 
; 547  : 			for(std::size_t i = 0; i < Data.size(); ++i)
; 548  : 				Data[i] = loopBitfieldInterleave(Param[i].x, Param[i].y);
; 549  : 
; 550  : 			std::clock_t Time = std::clock() - LastTime;
; 551  : 
; 552  : 			std::printf("loopBitfieldInterleave Time %d clocks\n", static_cast<unsigned int>(Time));
; 553  : 		}
; 554  : */
; 555  : 		{
; 556  : 			std::clock_t LastTime = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR LastTime$14[rsp], eax

; 557  : 
; 558  : 			for(std::size_t i = 0; i < Data.size(); ++i)

	mov	QWORD PTR i$15[rsp], 0
	jmp	SHORT $LN13@perf
$LN11@perf:
	mov	rax, QWORD PTR i$15[rsp]
	inc	rax
	mov	QWORD PTR i$15[rsp], rax
$LN13@perf:
	lea	rcx, QWORD PTR Data$[rsp]
	call	?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::size
	cmp	QWORD PTR i$15[rsp], rax
	jae	SHORT $LN12@perf

; 559  : 				Data[i] = interleaveBitfieldInterleave(Param[i].x, Param[i].y);

	mov	rdx, QWORD PTR i$15[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	QWORD PTR tv186[rsp], rax
	mov	rdx, QWORD PTR i$15[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	rcx, QWORD PTR tv186[rsp]
	mov	edx, DWORD PTR [rcx+4]
	mov	ecx, DWORD PTR [rax]
	call	?interleaveBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::interleaveBitfieldInterleave
	mov	QWORD PTR tv184[rsp], rax
	mov	rdx, QWORD PTR i$15[rsp]
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
	mov	rcx, QWORD PTR tv184[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	$LN11@perf
$LN12@perf:

; 560  : 
; 561  : 			std::clock_t Time = std::clock() - LastTime;

	call	QWORD PTR __imp_clock
	sub	eax, DWORD PTR LastTime$14[rsp]
	mov	DWORD PTR Time$16[rsp], eax

; 562  : 
; 563  : 			std::printf("interleaveBitfieldInterleave Time %d clocks\n", static_cast<unsigned int>(Time));

	mov	edx, DWORD PTR Time$16[rsp]
	lea	rcx, OFFSET FLAT:$SG60105
	call	printf

; 564  : 		}
; 565  : 
; 566  : #		if GLM_ARCH & GLM_ARCH_SSE2_BIT
; 567  : 		{
; 568  : 			std::clock_t LastTime = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR LastTime$17[rsp], eax

; 569  : 
; 570  : 			for(std::size_t i = 0; i < Data.size(); ++i)

	mov	QWORD PTR i$18[rsp], 0
	jmp	SHORT $LN16@perf
$LN14@perf:
	mov	rax, QWORD PTR i$18[rsp]
	inc	rax
	mov	QWORD PTR i$18[rsp], rax
$LN16@perf:
	lea	rcx, QWORD PTR Data$[rsp]
	call	?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::size
	cmp	QWORD PTR i$18[rsp], rax
	jae	SHORT $LN15@perf

; 571  : 				Data[i] = sseBitfieldInterleave(Param[i].x, Param[i].y);

	mov	rdx, QWORD PTR i$18[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	QWORD PTR tv209[rsp], rax
	mov	rdx, QWORD PTR i$18[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	rcx, QWORD PTR tv209[rsp]
	mov	edx, DWORD PTR [rcx+4]
	mov	ecx, DWORD PTR [rax]
	call	?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::sseBitfieldInterleave
	mov	QWORD PTR tv207[rsp], rax
	mov	rdx, QWORD PTR i$18[rsp]
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
	mov	rcx, QWORD PTR tv207[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	$LN14@perf
$LN15@perf:

; 572  : 
; 573  : 			std::clock_t Time = std::clock() - LastTime;

	call	QWORD PTR __imp_clock
	sub	eax, DWORD PTR LastTime$17[rsp]
	mov	DWORD PTR Time$19[rsp], eax

; 574  : 
; 575  : 			std::printf("sseBitfieldInterleave Time %d clocks\n", static_cast<unsigned int>(Time));

	mov	edx, DWORD PTR Time$19[rsp]
	lea	rcx, OFFSET FLAT:$SG60106
	call	printf

; 576  : 		}
; 577  : 
; 578  : 		{
; 579  : 			std::clock_t LastTime = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR LastTime$20[rsp], eax

; 580  : 
; 581  : 			for(std::size_t i = 0; i < Data.size(); ++i)

	mov	QWORD PTR i$21[rsp], 0
	jmp	SHORT $LN19@perf
$LN17@perf:
	mov	rax, QWORD PTR i$21[rsp]
	inc	rax
	mov	QWORD PTR i$21[rsp], rax
$LN19@perf:
	lea	rcx, QWORD PTR Data$[rsp]
	call	?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::size
	cmp	QWORD PTR i$21[rsp], rax
	jae	SHORT $LN18@perf

; 582  : 				Data[i] = sseUnalignedBitfieldInterleave(Param[i].x, Param[i].y);

	mov	rdx, QWORD PTR i$21[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	QWORD PTR tv232[rsp], rax
	mov	rdx, QWORD PTR i$21[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	rcx, QWORD PTR tv232[rsp]
	mov	edx, DWORD PTR [rcx+4]
	mov	ecx, DWORD PTR [rax]
	call	?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::sseUnalignedBitfieldInterleave
	mov	QWORD PTR tv230[rsp], rax
	mov	rdx, QWORD PTR i$21[rsp]
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
	mov	rcx, QWORD PTR tv230[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	$LN17@perf
$LN18@perf:

; 583  : 
; 584  : 			std::clock_t Time = std::clock() - LastTime;

	call	QWORD PTR __imp_clock
	sub	eax, DWORD PTR LastTime$20[rsp]
	mov	DWORD PTR Time$22[rsp], eax

; 585  : 
; 586  : 			std::printf("sseUnalignedBitfieldInterleave Time %d clocks\n", static_cast<unsigned int>(Time));

	mov	edx, DWORD PTR Time$22[rsp]
	lea	rcx, OFFSET FLAT:$SG60107
	call	printf

; 587  : 		}
; 588  : #		endif//GLM_ARCH & GLM_ARCH_SSE2_BIT
; 589  : 
; 590  : 		{
; 591  : 			std::clock_t LastTime = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR LastTime$23[rsp], eax

; 592  : 
; 593  : 			for(std::size_t i = 0; i < Data.size(); ++i)

	mov	QWORD PTR i$24[rsp], 0
	jmp	SHORT $LN22@perf
$LN20@perf:
	mov	rax, QWORD PTR i$24[rsp]
	inc	rax
	mov	QWORD PTR i$24[rsp], rax
$LN22@perf:
	lea	rcx, QWORD PTR Data$[rsp]
	call	?size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::size
	cmp	QWORD PTR i$24[rsp], rax
	jae	$LN21@perf

; 594  : 				Data[i] = glm::bitfieldInterleave(Param[i].x, Param[i].y, Param[i].x);

	mov	rdx, QWORD PTR i$24[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	QWORD PTR tv255[rsp], rax
	mov	rdx, QWORD PTR i$24[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	QWORD PTR tv260[rsp], rax
	mov	rdx, QWORD PTR i$24[rsp]
	lea	rcx, QWORD PTR Param$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	rcx, QWORD PTR tv255[rsp]
	mov	r8d, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv260[rsp]
	mov	edx, DWORD PTR [rcx+4]
	mov	ecx, DWORD PTR [rax]
	call	?bitfieldInterleave@glm@@YA_KIII@Z	; glm::bitfieldInterleave
	mov	QWORD PTR tv253[rsp], rax
	mov	rdx, QWORD PTR i$24[rsp]
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
	mov	rcx, QWORD PTR tv253[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	$LN20@perf
$LN21@perf:

; 595  : 
; 596  : 			std::clock_t Time = std::clock() - LastTime;

	call	QWORD PTR __imp_clock
	sub	eax, DWORD PTR LastTime$23[rsp]
	mov	DWORD PTR Time$25[rsp], eax

; 597  : 
; 598  : 			std::printf("glm::detail::bitfieldInterleave Time %d clocks\n", static_cast<unsigned int>(Time));

	mov	edx, DWORD PTR Time$25[rsp]
	lea	rcx, OFFSET FLAT:$SG60108
	call	printf

; 599  : 		}
; 600  : 
; 601  : #		if(GLM_ARCH & GLM_ARCH_SSE2_BIT && !(GLM_COMPILER & GLM_COMPILER_GCC))
; 602  : 		{
; 603  : 			// SIMD
; 604  : 			std::vector<__m128i> SimdData;

	lea	rcx, QWORD PTR SimdData$26[rsp]
	call	??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::vector<__m128i,std::allocator<__m128i> >::vector<__m128i,std::allocator<__m128i> >
	npad	1

; 605  : 			SimdData.resize(x_max * y_max);

	mov	eax, DWORD PTR x_max$[rsp]
	imul	eax, DWORD PTR y_max$[rsp]
	mov	eax, eax
	mov	edx, eax
	lea	rcx, QWORD PTR SimdData$26[rsp]
	call	?resize@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAX_K@Z ; std::vector<__m128i,std::allocator<__m128i> >::resize

; 606  : 			std::vector<__m128i> SimdParam;

	lea	rcx, QWORD PTR SimdParam$27[rsp]
	call	??0?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::vector<__m128i,std::allocator<__m128i> >::vector<__m128i,std::allocator<__m128i> >
	npad	1

; 607  : 			SimdParam.resize(x_max * y_max);

	mov	eax, DWORD PTR x_max$[rsp]
	imul	eax, DWORD PTR y_max$[rsp]
	mov	eax, eax
	mov	edx, eax
	lea	rcx, QWORD PTR SimdParam$27[rsp]
	call	?resize@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAX_K@Z ; std::vector<__m128i,std::allocator<__m128i> >::resize

; 608  : 			for(int i = 0; i < SimdParam.size(); ++i)

	mov	DWORD PTR i$28[rsp], 0
	jmp	SHORT $LN25@perf
$LN23@perf:
	mov	eax, DWORD PTR i$28[rsp]
	inc	eax
	mov	DWORD PTR i$28[rsp], eax
$LN25@perf:
	movsxd	rax, DWORD PTR i$28[rsp]
	mov	QWORD PTR tv288[rsp], rax
	lea	rcx, QWORD PTR SimdParam$27[rsp]
	call	?size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ ; std::vector<__m128i,std::allocator<__m128i> >::size
	mov	rcx, QWORD PTR tv288[rsp]
	cmp	rcx, rax
	jae	SHORT $LN24@perf

; 609  : 				SimdParam[i] = _mm_set_epi32(i % x_max, 0, i / y_max, 0);

	xor	edx, edx
	mov	eax, DWORD PTR i$28[rsp]
	div	DWORD PTR y_max$[rsp]
	mov	DWORD PTR tv298[rsp], eax
	xor	edx, edx
	mov	eax, DWORD PTR i$28[rsp]
	div	DWORD PTR x_max$[rsp]
	mov	eax, edx
	movd	xmm0, eax
	mov	eax, DWORD PTR tv298[rsp]
	movd	xmm1, eax
	movdqa	xmm2, XMMWORD PTR __xmm@00000000000000000000000000000000
	punpckldq xmm1, xmm0
	movdqa	xmm0, xmm2
	punpckldq xmm0, xmm1
	movdqa	XMMWORD PTR $T29[rsp], xmm0
	movsxd	rax, DWORD PTR i$28[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR SimdParam$27[rsp]
	call	??A?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAAEAT__m128i@@_K@Z ; std::vector<__m128i,std::allocator<__m128i> >::operator[]
	movdqa	xmm0, XMMWORD PTR $T29[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
	jmp	$LN23@perf
$LN24@perf:

; 610  : 
; 611  : 			std::clock_t LastTime = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR LastTime$30[rsp], eax

; 612  : 
; 613  : 			for(std::size_t i = 0; i < SimdData.size(); ++i)

	mov	QWORD PTR i$31[rsp], 0
	jmp	SHORT $LN28@perf
$LN26@perf:
	mov	rax, QWORD PTR i$31[rsp]
	inc	rax
	mov	QWORD PTR i$31[rsp], rax
$LN28@perf:
	lea	rcx, QWORD PTR SimdData$26[rsp]
	call	?size@?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEBA_KXZ ; std::vector<__m128i,std::allocator<__m128i> >::size
	cmp	QWORD PTR i$31[rsp], rax
	jae	SHORT $LN27@perf

; 614  : 				SimdData[i] = glm_i128_interleave(SimdParam[i]);

	mov	rdx, QWORD PTR i$31[rsp]
	lea	rcx, QWORD PTR SimdParam$27[rsp]
	call	??A?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAAEAT__m128i@@_K@Z ; std::vector<__m128i,std::allocator<__m128i> >::operator[]
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR $T38[rsp], xmm0
	lea	rcx, QWORD PTR $T38[rsp]
	call	?glm_i128_interleave@@YA?AT__m128i@@T1@@Z ; glm_i128_interleave
	movdqa	XMMWORD PTR $T32[rsp], xmm0
	mov	rdx, QWORD PTR i$31[rsp]
	lea	rcx, QWORD PTR SimdData$26[rsp]
	call	??A?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAAAEAT__m128i@@_K@Z ; std::vector<__m128i,std::allocator<__m128i> >::operator[]
	movdqa	xmm0, XMMWORD PTR $T32[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
	jmp	$LN26@perf
$LN27@perf:

; 615  : 
; 616  : 			std::clock_t Time = std::clock() - LastTime;

	call	QWORD PTR __imp_clock
	sub	eax, DWORD PTR LastTime$30[rsp]
	mov	DWORD PTR Time$33[rsp], eax

; 617  : 
; 618  : 			std::printf("_mm_bit_interleave_si128 Time %d clocks\n", static_cast<unsigned int>(Time));

	mov	edx, DWORD PTR Time$33[rsp]
	lea	rcx, OFFSET FLAT:$SG60109
	call	printf
	npad	1

; 619  : 		}

	lea	rcx, QWORD PTR SimdParam$27[rsp]
	call	??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::vector<__m128i,std::allocator<__m128i> >::~vector<__m128i,std::allocator<__m128i> >
	npad	1
	lea	rcx, QWORD PTR SimdData$26[rsp]
	call	??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::vector<__m128i,std::allocator<__m128i> >::~vector<__m128i,std::allocator<__m128i> >

; 620  : #		endif//GLM_ARCH & GLM_ARCH_SSE2_BIT
; 621  : 
; 622  : 		return 0;

	mov	DWORD PTR $T37[rsp], 0
	lea	rcx, QWORD PTR Param$[rsp]
	call	??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	npad	1
	lea	rcx, QWORD PTR Data$[rsp]
	call	??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
	mov	eax, DWORD PTR $T37[rsp]

; 623  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf@bitfieldInterleave@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 640				; 00000280H
	pop	rdi
	ret	0
?perf@bitfieldInterleave@@YAHXZ ENDP			; bitfieldInterleave::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
x_max$ = 32
y_max$ = 36
Data$ = 56
Param$ = 120
i$7 = 164
LastTime$8 = 168
i$9 = 176
Time$10 = 184
LastTime$11 = 188
i$12 = 192
Time$13 = 200
LastTime$14 = 204
i$15 = 208
Time$16 = 216
LastTime$17 = 220
i$18 = 224
Time$19 = 232
LastTime$20 = 236
i$21 = 240
Time$22 = 248
LastTime$23 = 252
i$24 = 256
Time$25 = 264
SimdData$26 = 280
SimdParam$27 = 344
i$28 = 388
$T29 = 400
LastTime$30 = 416
i$31 = 424
$T32 = 432
Time$33 = 448
$T34 = 452
$T35 = 453
$T36 = 456
$T37 = 464
$T38 = 480
tv83 = 496
tv93 = 504
tv129 = 512
tv140 = 520
tv138 = 528
tv163 = 536
tv161 = 544
tv186 = 552
tv184 = 560
tv209 = 568
tv207 = 576
tv232 = 584
tv230 = 592
tv255 = 600
tv260 = 608
tv253 = 616
tv288 = 624
tv298 = 632
?dtor$0@?0??perf@bitfieldInterleave@@YAHXZ@4HA PROC	; `bitfieldInterleave::perf'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Data$[rbp]
	call	??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf@bitfieldInterleave@@YAHXZ@4HA ENDP	; `bitfieldInterleave::perf'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
x_max$ = 32
y_max$ = 36
Data$ = 56
Param$ = 120
i$7 = 164
LastTime$8 = 168
i$9 = 176
Time$10 = 184
LastTime$11 = 188
i$12 = 192
Time$13 = 200
LastTime$14 = 204
i$15 = 208
Time$16 = 216
LastTime$17 = 220
i$18 = 224
Time$19 = 232
LastTime$20 = 236
i$21 = 240
Time$22 = 248
LastTime$23 = 252
i$24 = 256
Time$25 = 264
SimdData$26 = 280
SimdParam$27 = 344
i$28 = 388
$T29 = 400
LastTime$30 = 416
i$31 = 424
$T32 = 432
Time$33 = 448
$T34 = 452
$T35 = 453
$T36 = 456
$T37 = 464
$T38 = 480
tv83 = 496
tv93 = 504
tv129 = 512
tv140 = 520
tv138 = 528
tv163 = 536
tv161 = 544
tv186 = 552
tv184 = 560
tv209 = 568
tv207 = 576
tv232 = 584
tv230 = 592
tv255 = 600
tv260 = 608
tv253 = 616
tv288 = 624
tv298 = 632
?dtor$1@?0??perf@bitfieldInterleave@@YAHXZ@4HA PROC	; `bitfieldInterleave::perf'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Param$[rbp]
	call	??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??perf@bitfieldInterleave@@YAHXZ@4HA ENDP	; `bitfieldInterleave::perf'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
x_max$ = 32
y_max$ = 36
Data$ = 56
Param$ = 120
i$7 = 164
LastTime$8 = 168
i$9 = 176
Time$10 = 184
LastTime$11 = 188
i$12 = 192
Time$13 = 200
LastTime$14 = 204
i$15 = 208
Time$16 = 216
LastTime$17 = 220
i$18 = 224
Time$19 = 232
LastTime$20 = 236
i$21 = 240
Time$22 = 248
LastTime$23 = 252
i$24 = 256
Time$25 = 264
SimdData$26 = 280
SimdParam$27 = 344
i$28 = 388
$T29 = 400
LastTime$30 = 416
i$31 = 424
$T32 = 432
Time$33 = 448
$T34 = 452
$T35 = 453
$T36 = 456
$T37 = 464
$T38 = 480
tv83 = 496
tv93 = 504
tv129 = 512
tv140 = 520
tv138 = 528
tv163 = 536
tv161 = 544
tv186 = 552
tv184 = 560
tv209 = 568
tv207 = 576
tv232 = 584
tv230 = 592
tv255 = 600
tv260 = 608
tv253 = 616
tv288 = 624
tv298 = 632
?dtor$2@?0??perf@bitfieldInterleave@@YAHXZ@4HA PROC	; `bitfieldInterleave::perf'::`1'::dtor$2
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR SimdData$26[rbp]
	call	??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::vector<__m128i,std::allocator<__m128i> >::~vector<__m128i,std::allocator<__m128i> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$2@?0??perf@bitfieldInterleave@@YAHXZ@4HA ENDP	; `bitfieldInterleave::perf'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
x_max$ = 32
y_max$ = 36
Data$ = 56
Param$ = 120
i$7 = 164
LastTime$8 = 168
i$9 = 176
Time$10 = 184
LastTime$11 = 188
i$12 = 192
Time$13 = 200
LastTime$14 = 204
i$15 = 208
Time$16 = 216
LastTime$17 = 220
i$18 = 224
Time$19 = 232
LastTime$20 = 236
i$21 = 240
Time$22 = 248
LastTime$23 = 252
i$24 = 256
Time$25 = 264
SimdData$26 = 280
SimdParam$27 = 344
i$28 = 388
$T29 = 400
LastTime$30 = 416
i$31 = 424
$T32 = 432
Time$33 = 448
$T34 = 452
$T35 = 453
$T36 = 456
$T37 = 464
$T38 = 480
tv83 = 496
tv93 = 504
tv129 = 512
tv140 = 520
tv138 = 528
tv163 = 536
tv161 = 544
tv186 = 552
tv184 = 560
tv209 = 568
tv207 = 576
tv232 = 584
tv230 = 592
tv255 = 600
tv260 = 608
tv253 = 616
tv288 = 624
tv298 = 632
?dtor$3@?0??perf@bitfieldInterleave@@YAHXZ@4HA PROC	; `bitfieldInterleave::perf'::`1'::dtor$3
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR SimdParam$27[rbp]
	call	??1?$vector@T__m128i@@V?$allocator@T__m128i@@@std@@@std@@QEAA@XZ ; std::vector<__m128i,std::allocator<__m128i> >::~vector<__m128i,std::allocator<__m128i> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$3@?0??perf@bitfieldInterleave@@YAHXZ@4HA ENDP	; `bitfieldInterleave::perf'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
_TEXT	SEGMENT
y$4 = 32
x$5 = 36
A$6 = 40
B$7 = 48
D$8 = 56
E$9 = 64
F$10 = 72
G$11 = 80
$T12 = 96
$T13 = 112
Result$14 = 136
y$15 = 164
x$16 = 165
A$17 = 168
B$18 = 176
C$19 = 184
D$20 = 192
E$21 = 200
F$22 = 208
$T23 = 224
?test@bitfieldInterleave@@YAHXZ PROC			; bitfieldInterleave::test

; 463  : 	{

$LN22:
	push	rdi
	sub	rsp, 240				; 000000f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 464  : 		{
; 465  : 			for(glm::uint32 y = 0; y < (1 << 10); ++y)

	mov	DWORD PTR y$4[rsp], 0
	jmp	SHORT $LN4@test
$LN2@test:
	mov	eax, DWORD PTR y$4[rsp]
	inc	eax
	mov	DWORD PTR y$4[rsp], eax
$LN4@test:
	cmp	DWORD PTR y$4[rsp], 1024		; 00000400H
	jae	$LN3@test

; 466  : 			for(glm::uint32 x = 0; x < (1 << 10); ++x)

	mov	DWORD PTR x$5[rsp], 0
	jmp	SHORT $LN7@test
$LN5@test:
	mov	eax, DWORD PTR x$5[rsp]
	inc	eax
	mov	DWORD PTR x$5[rsp], eax
$LN7@test:
	cmp	DWORD PTR x$5[rsp], 1024		; 00000400H
	jae	$LN6@test

; 467  : 			{
; 468  : 				glm::uint64 A = glm::bitfieldInterleave(x, y);

	mov	edx, DWORD PTR y$4[rsp]
	mov	ecx, DWORD PTR x$5[rsp]
	call	?bitfieldInterleave@glm@@YA_KII@Z	; glm::bitfieldInterleave
	mov	QWORD PTR A$6[rsp], rax

; 469  : 				glm::uint64 B = fastBitfieldInterleave(x, y);

	mov	edx, DWORD PTR y$4[rsp]
	mov	ecx, DWORD PTR x$5[rsp]
	call	?fastBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::fastBitfieldInterleave
	mov	QWORD PTR B$7[rsp], rax

; 470  : 				//glm::uint64 C = loopBitfieldInterleave(x, y);
; 471  : 				glm::uint64 D = interleaveBitfieldInterleave(x, y);

	mov	edx, DWORD PTR y$4[rsp]
	mov	ecx, DWORD PTR x$5[rsp]
	call	?interleaveBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::interleaveBitfieldInterleave
	mov	QWORD PTR D$8[rsp], rax

; 472  : 
; 473  : 				assert(A == B);

	mov	rax, QWORD PTR B$7[rsp]
	cmp	QWORD PTR A$6[rsp], rax
	je	SHORT $LN15@test
	mov	r8d, 473				; 000001d9H
	lea	rdx, OFFSET FLAT:$SG58389
	lea	rcx, OFFSET FLAT:$SG58390
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@test:

; 474  : 				//assert(A == C);
; 475  : 				assert(A == D);

	mov	rax, QWORD PTR D$8[rsp]
	cmp	QWORD PTR A$6[rsp], rax
	je	SHORT $LN16@test
	mov	r8d, 475				; 000001dbH
	lea	rdx, OFFSET FLAT:$SG58391
	lea	rcx, OFFSET FLAT:$SG58392
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@test:

; 476  : 
; 477  : #				if GLM_ARCH & GLM_ARCH_SSE2_BIT
; 478  : 					glm::uint64 E = sseBitfieldInterleave(x, y);

	mov	edx, DWORD PTR y$4[rsp]
	mov	ecx, DWORD PTR x$5[rsp]
	call	?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::sseBitfieldInterleave
	mov	QWORD PTR E$9[rsp], rax

; 479  : 					glm::uint64 F = sseUnalignedBitfieldInterleave(x, y);

	mov	edx, DWORD PTR y$4[rsp]
	mov	ecx, DWORD PTR x$5[rsp]
	call	?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ; bitfieldInterleave::sseUnalignedBitfieldInterleave
	mov	QWORD PTR F$10[rsp], rax

; 480  : 					assert(A == E);

	mov	rax, QWORD PTR E$9[rsp]
	cmp	QWORD PTR A$6[rsp], rax
	je	SHORT $LN17@test
	mov	r8d, 480				; 000001e0H
	lea	rdx, OFFSET FLAT:$SG58393
	lea	rcx, OFFSET FLAT:$SG58394
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN17@test:

; 481  : 					assert(A == F);

	mov	rax, QWORD PTR F$10[rsp]
	cmp	QWORD PTR A$6[rsp], rax
	je	SHORT $LN18@test
	mov	r8d, 481				; 000001e1H
	lea	rdx, OFFSET FLAT:$SG58395
	lea	rcx, OFFSET FLAT:$SG58396
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@test:

; 482  : 
; 483  : 					__m128i G = glm_i128_interleave(_mm_set_epi32(0, y, 0, x));

	movd	xmm0, DWORD PTR y$4[rsp]
	movd	xmm1, DWORD PTR x$5[rsp]
	punpckldq xmm1, xmm0
	movdqa	xmm0, XMMWORD PTR __xmm@00000000000000000000000000000000
	punpckldq xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR $T12[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T12[rsp]
	movdqa	XMMWORD PTR $T23[rsp], xmm0
	lea	rcx, QWORD PTR $T23[rsp]
	call	?glm_i128_interleave@@YA?AT__m128i@@T1@@Z ; glm_i128_interleave
	movdqa	XMMWORD PTR $T13[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T13[rsp]
	movdqa	XMMWORD PTR G$11[rsp], xmm0

; 484  : 					glm::uint64 Result[2];
; 485  : 					_mm_storeu_si128((__m128i*)Result, G);

	movdqa	xmm0, XMMWORD PTR G$11[rsp]
	movdqu	XMMWORD PTR Result$14[rsp], xmm0

; 486  : 					assert(A == Result[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR Result$14[rsp+rax]
	cmp	QWORD PTR A$6[rsp], rax
	je	SHORT $LN19@test
	mov	r8d, 486				; 000001e6H
	lea	rdx, OFFSET FLAT:$SG58397
	lea	rcx, OFFSET FLAT:$SG58398
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN19@test:

; 487  : #				endif//GLM_ARCH & GLM_ARCH_SSE2_BIT
; 488  : 			}

	jmp	$LN5@test
$LN6@test:
	jmp	$LN2@test
$LN3@test:

; 489  : 		}
; 490  : 
; 491  : 		{
; 492  : 			for(glm::uint8 y = 0; y < 127; ++y)

	mov	BYTE PTR y$15[rsp], 0
	jmp	SHORT $LN10@test
$LN8@test:
	movzx	eax, BYTE PTR y$15[rsp]
	inc	al
	mov	BYTE PTR y$15[rsp], al
$LN10@test:
	movzx	eax, BYTE PTR y$15[rsp]
	cmp	eax, 127				; 0000007fH
	jge	$LN9@test

; 493  : 			for(glm::uint8 x = 0; x < 127; ++x)

	mov	BYTE PTR x$16[rsp], 0
	jmp	SHORT $LN13@test
$LN11@test:
	movzx	eax, BYTE PTR x$16[rsp]
	inc	al
	mov	BYTE PTR x$16[rsp], al
$LN13@test:
	movzx	eax, BYTE PTR x$16[rsp]
	cmp	eax, 127				; 0000007fH
	jge	$LN12@test

; 494  : 			{
; 495  : 				glm::uint64 A(glm::bitfieldInterleave(glm::uint8(x), glm::uint8(y)));

	movzx	edx, BYTE PTR y$15[rsp]
	movzx	ecx, BYTE PTR x$16[rsp]
	call	?bitfieldInterleave@glm@@YAGEE@Z	; glm::bitfieldInterleave
	movzx	eax, ax
	mov	QWORD PTR A$17[rsp], rax

; 496  : 				glm::uint64 B(glm::bitfieldInterleave(glm::uint16(x), glm::uint16(y)));

	movzx	eax, BYTE PTR y$15[rsp]
	movzx	ecx, BYTE PTR x$16[rsp]
	movzx	edx, ax
	call	?bitfieldInterleave@glm@@YAIGG@Z	; glm::bitfieldInterleave
	mov	eax, eax
	mov	QWORD PTR B$18[rsp], rax

; 497  : 				glm::uint64 C(glm::bitfieldInterleave(glm::uint32(x), glm::uint32(y)));

	movzx	eax, BYTE PTR y$15[rsp]
	movzx	ecx, BYTE PTR x$16[rsp]
	mov	edx, eax
	call	?bitfieldInterleave@glm@@YA_KII@Z	; glm::bitfieldInterleave
	mov	QWORD PTR C$19[rsp], rax

; 498  : 
; 499  : 				glm::int64 D(glm::bitfieldInterleave(glm::int8(x), glm::int8(y)));

	movzx	edx, BYTE PTR y$15[rsp]
	movzx	ecx, BYTE PTR x$16[rsp]
	call	?bitfieldInterleave@glm@@YAFCC@Z	; glm::bitfieldInterleave
	movsx	rax, ax
	mov	QWORD PTR D$20[rsp], rax

; 500  : 				glm::int64 E(glm::bitfieldInterleave(glm::int16(x), glm::int16(y)));

	movzx	eax, BYTE PTR y$15[rsp]
	movzx	ecx, BYTE PTR x$16[rsp]
	movzx	edx, ax
	call	?bitfieldInterleave@glm@@YAHFF@Z	; glm::bitfieldInterleave
	cdqe
	mov	QWORD PTR E$21[rsp], rax

; 501  : 				glm::int64 F(glm::bitfieldInterleave(glm::int32(x), glm::int32(y)));

	movzx	eax, BYTE PTR y$15[rsp]
	movzx	ecx, BYTE PTR x$16[rsp]
	mov	edx, eax
	call	?bitfieldInterleave@glm@@YA_JHH@Z	; glm::bitfieldInterleave
	mov	QWORD PTR F$22[rsp], rax

; 502  : 
; 503  : 				assert(D == E);

	mov	rax, QWORD PTR E$21[rsp]
	cmp	QWORD PTR D$20[rsp], rax
	je	SHORT $LN20@test
	mov	r8d, 503				; 000001f7H
	lea	rdx, OFFSET FLAT:$SG58399
	lea	rcx, OFFSET FLAT:$SG58400
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN20@test:

; 504  : 				assert(D == F);

	mov	rax, QWORD PTR F$22[rsp]
	cmp	QWORD PTR D$20[rsp], rax
	je	SHORT $LN21@test
	mov	r8d, 504				; 000001f8H
	lea	rdx, OFFSET FLAT:$SG58401
	lea	rcx, OFFSET FLAT:$SG58402
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN21@test:

; 505  : 			}

	jmp	$LN11@test
$LN12@test:
	jmp	$LN8@test
$LN9@test:

; 506  : 		}
; 507  : 
; 508  : 		return 0;

	xor	eax, eax

; 509  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@bitfieldInterleave@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
?test@bitfieldInterleave@@YAHXZ ENDP			; bitfieldInterleave::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
;	COMDAT ?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z
_TEXT	SEGMENT
Array$ = 40
Mask4$ = 80
$T5 = 96
Mask3$ = 112
$T6 = 128
Mask2$ = 144
$T7 = 160
Mask1$ = 176
$T8 = 192
Mask0$ = 208
$T9 = 224
Reg1$ = 240
Reg2$ = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
$T18 = 400
$T19 = 416
$T20 = 432
$T21 = 448
$T22 = 464
$T23 = 480
$T24 = 496
$T25 = 512
$T26 = 528
$T27 = 544
$T28 = 560
Result$ = 584
__$ArrayPad$ = 624
x$ = 656
y$ = 664
?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z PROC ; bitfieldInterleave::sseUnalignedBitfieldInterleave, COMDAT

; 404  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 640				; 00000280H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 152				; 00000098H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+656]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 405  : 		glm::uint32 const Array[4] = {x, 0, y, 0};

	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR Array$[rsp], eax
	mov	DWORD PTR Array$[rsp+4], 0
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR Array$[rsp+8], eax
	mov	DWORD PTR Array$[rsp+12], 0

; 406  : 
; 407  : 		__m128i const Mask4 = _mm_set1_epi32(0x0000FFFF);

	movdqa	xmm0, XMMWORD PTR __xmm@0000ffff0000ffff0000ffff0000ffff
	movdqa	XMMWORD PTR $T5[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T5[rsp]
	movdqa	XMMWORD PTR Mask4$[rsp], xmm0

; 408  : 		__m128i const Mask3 = _mm_set1_epi32(0x00FF00FF);

	movdqa	xmm0, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
	movdqa	XMMWORD PTR $T6[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T6[rsp]
	movdqa	XMMWORD PTR Mask3$[rsp], xmm0

; 409  : 		__m128i const Mask2 = _mm_set1_epi32(0x0F0F0F0F);

	movdqa	xmm0, XMMWORD PTR __xmm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
	movdqa	XMMWORD PTR $T7[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T7[rsp]
	movdqa	XMMWORD PTR Mask2$[rsp], xmm0

; 410  : 		__m128i const Mask1 = _mm_set1_epi32(0x33333333);

	movdqa	xmm0, XMMWORD PTR __xmm@33333333333333333333333333333333
	movdqa	XMMWORD PTR $T8[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T8[rsp]
	movdqa	XMMWORD PTR Mask1$[rsp], xmm0

; 411  : 		__m128i const Mask0 = _mm_set1_epi32(0x55555555);

	movdqa	xmm0, XMMWORD PTR __xmm@55555555555555555555555555555555
	movdqa	XMMWORD PTR $T9[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T9[rsp]
	movdqa	XMMWORD PTR Mask0$[rsp], xmm0

; 412  : 
; 413  : 		__m128i Reg1;
; 414  : 		__m128i Reg2;
; 415  : 
; 416  : 		// REG1 = x;
; 417  : 		// REG2 = y;
; 418  : 		Reg1 = _mm_loadu_si128((__m128i*)Array);

	movdqu	xmm0, XMMWORD PTR Array$[rsp]
	movdqa	XMMWORD PTR $T10[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T10[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 419  : 
; 420  : 		//REG1 = ((REG1 << 16) | REG1) & glm::uint64(0x0000FFFF0000FFFF);
; 421  : 		//REG2 = ((REG2 << 16) | REG2) & glm::uint64(0x0000FFFF0000FFFF);
; 422  : 		Reg2 = _mm_slli_si128(Reg1, 2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslldq	xmm0, 2
	movdqa	XMMWORD PTR $T11[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T11[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 423  : 		Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T12[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T12[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 424  : 		Reg1 = _mm_and_si128(Reg1, Mask4);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask4$[rsp]
	movdqa	XMMWORD PTR $T13[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T13[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 425  : 
; 426  : 		//REG1 = ((REG1 <<  8) | REG1) & glm::uint64(0x00FF00FF00FF00FF);
; 427  : 		//REG2 = ((REG2 <<  8) | REG2) & glm::uint64(0x00FF00FF00FF00FF);
; 428  : 		Reg2 = _mm_slli_si128(Reg1, 1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslldq	xmm0, 1
	movdqa	XMMWORD PTR $T14[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T14[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 429  : 		Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T15[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 430  : 		Reg1 = _mm_and_si128(Reg1, Mask3);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask3$[rsp]
	movdqa	XMMWORD PTR $T16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T16[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 431  : 
; 432  : 		//REG1 = ((REG1 <<  4) | REG1) & glm::uint64(0x0F0F0F0F0F0F0F0F);
; 433  : 		//REG2 = ((REG2 <<  4) | REG2) & glm::uint64(0x0F0F0F0F0F0F0F0F);
; 434  : 		Reg2 = _mm_slli_epi32(Reg1, 4);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 4
	movdqa	XMMWORD PTR $T17[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T17[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 435  : 		Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T18[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T18[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 436  : 		Reg1 = _mm_and_si128(Reg1, Mask2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask2$[rsp]
	movdqa	XMMWORD PTR $T19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T19[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 437  : 
; 438  : 		//REG1 = ((REG1 <<  2) | REG1) & glm::uint64(0x3333333333333333);
; 439  : 		//REG2 = ((REG2 <<  2) | REG2) & glm::uint64(0x3333333333333333);
; 440  : 		Reg2 = _mm_slli_epi32(Reg1, 2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 2
	movdqa	XMMWORD PTR $T20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T20[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 441  : 		Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T21[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 442  : 		Reg1 = _mm_and_si128(Reg1, Mask1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask1$[rsp]
	movdqa	XMMWORD PTR $T22[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T22[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 443  : 
; 444  : 		//REG1 = ((REG1 <<  1) | REG1) & glm::uint64(0x5555555555555555);
; 445  : 		//REG2 = ((REG2 <<  1) | REG2) & glm::uint64(0x5555555555555555);
; 446  : 		Reg2 = _mm_slli_epi32(Reg1, 1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 1
	movdqa	XMMWORD PTR $T23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T23[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 447  : 		Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T24[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T24[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 448  : 		Reg1 = _mm_and_si128(Reg1, Mask0);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask0$[rsp]
	movdqa	XMMWORD PTR $T25[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T25[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 449  : 
; 450  : 		//return REG1 | (REG2 << 1);
; 451  : 		Reg2 = _mm_slli_epi32(Reg1, 1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 1
	movdqa	XMMWORD PTR $T26[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T26[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 452  : 		Reg2 = _mm_srli_si128(Reg2, 8);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	psrldq	xmm0, 8
	movdqa	XMMWORD PTR $T27[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T27[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 453  : 		Reg1 = _mm_or_si128(Reg1, Reg2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	por	xmm0, XMMWORD PTR Reg2$[rsp]
	movdqa	XMMWORD PTR $T28[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T28[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 454  : 	
; 455  : 		glm::uint64 Result[2];
; 456  : 		_mm_storeu_si128((__m128i*)Result, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqu	XMMWORD PTR Result$[rsp], xmm0

; 457  : 
; 458  : 		return Result[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR Result$[rsp+rax]

; 459  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 640				; 00000280H
	pop	rdi
	ret	0
?sseUnalignedBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ENDP ; bitfieldInterleave::sseUnalignedBitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
;	COMDAT ?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z
_TEXT	SEGMENT
Array$ = 48
Mask4$ = 80
$T5 = 96
Mask3$ = 112
$T6 = 128
Mask2$ = 144
$T7 = 160
Mask1$ = 176
$T8 = 192
Mask0$ = 208
$T9 = 224
Reg1$ = 240
Reg2$ = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
$T18 = 400
$T19 = 416
$T20 = 432
$T21 = 448
$T22 = 464
$T23 = 480
$T24 = 496
$T25 = 512
$T26 = 528
$T27 = 544
$T28 = 560
Result$ = 592
__$ArrayPad$ = 624
x$ = 656
y$ = 664
?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z PROC ; bitfieldInterleave::sseBitfieldInterleave, COMDAT

; 346  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 640				; 00000280H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 152				; 00000098H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+656]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 347  : 		GLM_ALIGN(16) glm::uint32 const Array[4] = {x, 0, y, 0};

	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR Array$[rsp], eax
	mov	DWORD PTR Array$[rsp+4], 0
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR Array$[rsp+8], eax
	mov	DWORD PTR Array$[rsp+12], 0

; 348  : 
; 349  : 		__m128i const Mask4 = _mm_set1_epi32(0x0000FFFF);

	movdqa	xmm0, XMMWORD PTR __xmm@0000ffff0000ffff0000ffff0000ffff
	movdqa	XMMWORD PTR $T5[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T5[rsp]
	movdqa	XMMWORD PTR Mask4$[rsp], xmm0

; 350  : 		__m128i const Mask3 = _mm_set1_epi32(0x00FF00FF);

	movdqa	xmm0, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
	movdqa	XMMWORD PTR $T6[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T6[rsp]
	movdqa	XMMWORD PTR Mask3$[rsp], xmm0

; 351  : 		__m128i const Mask2 = _mm_set1_epi32(0x0F0F0F0F);

	movdqa	xmm0, XMMWORD PTR __xmm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
	movdqa	XMMWORD PTR $T7[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T7[rsp]
	movdqa	XMMWORD PTR Mask2$[rsp], xmm0

; 352  : 		__m128i const Mask1 = _mm_set1_epi32(0x33333333);

	movdqa	xmm0, XMMWORD PTR __xmm@33333333333333333333333333333333
	movdqa	XMMWORD PTR $T8[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T8[rsp]
	movdqa	XMMWORD PTR Mask1$[rsp], xmm0

; 353  : 		__m128i const Mask0 = _mm_set1_epi32(0x55555555);

	movdqa	xmm0, XMMWORD PTR __xmm@55555555555555555555555555555555
	movdqa	XMMWORD PTR $T9[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T9[rsp]
	movdqa	XMMWORD PTR Mask0$[rsp], xmm0

; 354  : 
; 355  : 		__m128i Reg1;
; 356  : 		__m128i Reg2;
; 357  : 
; 358  : 		// REG1 = x;
; 359  : 		// REG2 = y;
; 360  : 		Reg1 = _mm_load_si128((__m128i*)Array);

	movdqa	xmm0, XMMWORD PTR Array$[rsp]
	movdqa	XMMWORD PTR $T10[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T10[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 361  : 
; 362  : 		//REG1 = ((REG1 << 16) | REG1) & glm::uint64(0x0000FFFF0000FFFF);
; 363  : 		//REG2 = ((REG2 << 16) | REG2) & glm::uint64(0x0000FFFF0000FFFF);
; 364  : 		Reg2 = _mm_slli_si128(Reg1, 2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslldq	xmm0, 2
	movdqa	XMMWORD PTR $T11[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T11[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 365  : 		Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T12[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T12[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 366  : 		Reg1 = _mm_and_si128(Reg1, Mask4);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask4$[rsp]
	movdqa	XMMWORD PTR $T13[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T13[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 367  : 
; 368  : 		//REG1 = ((REG1 <<  8) | REG1) & glm::uint64(0x00FF00FF00FF00FF);
; 369  : 		//REG2 = ((REG2 <<  8) | REG2) & glm::uint64(0x00FF00FF00FF00FF);
; 370  : 		Reg2 = _mm_slli_si128(Reg1, 1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslldq	xmm0, 1
	movdqa	XMMWORD PTR $T14[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T14[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 371  : 		Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T15[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 372  : 		Reg1 = _mm_and_si128(Reg1, Mask3);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask3$[rsp]
	movdqa	XMMWORD PTR $T16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T16[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 373  : 
; 374  : 		//REG1 = ((REG1 <<  4) | REG1) & glm::uint64(0x0F0F0F0F0F0F0F0F);
; 375  : 		//REG2 = ((REG2 <<  4) | REG2) & glm::uint64(0x0F0F0F0F0F0F0F0F);
; 376  : 		Reg2 = _mm_slli_epi32(Reg1, 4);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 4
	movdqa	XMMWORD PTR $T17[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T17[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 377  : 		Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T18[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T18[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 378  : 		Reg1 = _mm_and_si128(Reg1, Mask2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask2$[rsp]
	movdqa	XMMWORD PTR $T19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T19[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 379  : 
; 380  : 		//REG1 = ((REG1 <<  2) | REG1) & glm::uint64(0x3333333333333333);
; 381  : 		//REG2 = ((REG2 <<  2) | REG2) & glm::uint64(0x3333333333333333);
; 382  : 		Reg2 = _mm_slli_epi32(Reg1, 2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 2
	movdqa	XMMWORD PTR $T20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T20[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 383  : 		Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T21[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 384  : 		Reg1 = _mm_and_si128(Reg1, Mask1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask1$[rsp]
	movdqa	XMMWORD PTR $T22[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T22[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 385  : 
; 386  : 		//REG1 = ((REG1 <<  1) | REG1) & glm::uint64(0x5555555555555555);
; 387  : 		//REG2 = ((REG2 <<  1) | REG2) & glm::uint64(0x5555555555555555);
; 388  : 		Reg2 = _mm_slli_epi32(Reg1, 1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 1
	movdqa	XMMWORD PTR $T23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T23[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 389  : 		Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T24[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T24[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 390  : 		Reg1 = _mm_and_si128(Reg1, Mask0);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask0$[rsp]
	movdqa	XMMWORD PTR $T25[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T25[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 391  : 
; 392  : 		//return REG1 | (REG2 << 1);
; 393  : 		Reg2 = _mm_slli_epi32(Reg1, 1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 1
	movdqa	XMMWORD PTR $T26[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T26[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 394  : 		Reg2 = _mm_srli_si128(Reg2, 8);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	psrldq	xmm0, 8
	movdqa	XMMWORD PTR $T27[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T27[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 395  : 		Reg1 = _mm_or_si128(Reg1, Reg2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	por	xmm0, XMMWORD PTR Reg2$[rsp]
	movdqa	XMMWORD PTR $T28[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T28[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 396  : 	
; 397  : 		GLM_ALIGN(16) glm::uint64 Result[2];
; 398  : 		_mm_store_si128((__m128i*)Result, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR Result$[rsp], xmm0

; 399  : 
; 400  : 		return Result[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR Result$[rsp+rax]

; 401  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 640				; 00000280H
	pop	rdi
	ret	0
?sseBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ENDP ; bitfieldInterleave::sseBitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
;	COMDAT ?interleaveBitfieldInterleave@bitfieldInterleave@@YA_KII@Z
_TEXT	SEGMENT
REG1$ = 0
REG2$ = 8
x$ = 32
y$ = 40
?interleaveBitfieldInterleave@bitfieldInterleave@@YA_KII@Z PROC ; bitfieldInterleave::interleaveBitfieldInterleave, COMDAT

; 297  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 298  : 		glm::uint64 REG1;
; 299  : 		glm::uint64 REG2;
; 300  : 
; 301  : 		REG1 = x;

	mov	eax, DWORD PTR x$[rsp]
	mov	QWORD PTR REG1$[rsp], rax

; 302  : 		REG2 = y;

	mov	eax, DWORD PTR y$[rsp]
	mov	QWORD PTR REG2$[rsp], rax

; 303  : 
; 304  : 		REG1 = ((REG1 << 16) | REG1) & glm::uint64(0x0000FFFF0000FFFF);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 16
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 281470681808895			; 0000ffff0000ffffH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 305  : 		REG2 = ((REG2 << 16) | REG2) & glm::uint64(0x0000FFFF0000FFFF);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 16
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 281470681808895			; 0000ffff0000ffffH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 306  : 
; 307  : 		REG1 = ((REG1 <<  8) | REG1) & glm::uint64(0x00FF00FF00FF00FF);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 8
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 71777214294589695			; 00ff00ff00ff00ffH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 308  : 		REG2 = ((REG2 <<  8) | REG2) & glm::uint64(0x00FF00FF00FF00FF);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 8
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 71777214294589695			; 00ff00ff00ff00ffH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 309  : 
; 310  : 		REG1 = ((REG1 <<  4) | REG1) & glm::uint64(0x0F0F0F0F0F0F0F0F);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 4
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 1085102592571150095		; 0f0f0f0f0f0f0f0fH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 311  : 		REG2 = ((REG2 <<  4) | REG2) & glm::uint64(0x0F0F0F0F0F0F0F0F);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 4
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 1085102592571150095		; 0f0f0f0f0f0f0f0fH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 312  : 
; 313  : 		REG1 = ((REG1 <<  2) | REG1) & glm::uint64(0x3333333333333333);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 2
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 3689348814741910323		; 3333333333333333H
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 314  : 		REG2 = ((REG2 <<  2) | REG2) & glm::uint64(0x3333333333333333);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 2
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 3689348814741910323		; 3333333333333333H
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 315  : 
; 316  : 		REG1 = ((REG1 <<  1) | REG1) & glm::uint64(0x5555555555555555);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 1
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 6148914691236517205		; 5555555555555555H
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 317  : 		REG2 = ((REG2 <<  1) | REG2) & glm::uint64(0x5555555555555555);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 1
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 6148914691236517205		; 5555555555555555H
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 318  : 
; 319  : 		return REG1 | (REG2 << 1);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 1
	mov	rcx, QWORD PTR REG1$[rsp]
	or	rcx, rax
	mov	rax, rcx

; 320  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?interleaveBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ENDP ; bitfieldInterleave::interleaveBitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
;	COMDAT ?fastBitfieldInterleave@bitfieldInterleave@@YA_KII@Z
_TEXT	SEGMENT
REG1$ = 0
REG2$ = 8
x$ = 32
y$ = 40
?fastBitfieldInterleave@bitfieldInterleave@@YA_KII@Z PROC ; bitfieldInterleave::fastBitfieldInterleave, COMDAT

; 275  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 276  : 		glm::uint64 REG1;
; 277  : 		glm::uint64 REG2;
; 278  : 
; 279  : 		REG1 = x;

	mov	eax, DWORD PTR x$[rsp]
	mov	QWORD PTR REG1$[rsp], rax

; 280  : 		REG1 = ((REG1 << 16) | REG1) & glm::uint64(0x0000FFFF0000FFFF);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 16
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 281470681808895			; 0000ffff0000ffffH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 281  : 		REG1 = ((REG1 <<  8) | REG1) & glm::uint64(0x00FF00FF00FF00FF);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 8
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 71777214294589695			; 00ff00ff00ff00ffH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 282  : 		REG1 = ((REG1 <<  4) | REG1) & glm::uint64(0x0F0F0F0F0F0F0F0F);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 4
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 1085102592571150095		; 0f0f0f0f0f0f0f0fH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 283  : 		REG1 = ((REG1 <<  2) | REG1) & glm::uint64(0x3333333333333333);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 2
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 3689348814741910323		; 3333333333333333H
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 284  : 		REG1 = ((REG1 <<  1) | REG1) & glm::uint64(0x5555555555555555);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 1
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 6148914691236517205		; 5555555555555555H
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 285  : 
; 286  : 		REG2 = y;

	mov	eax, DWORD PTR y$[rsp]
	mov	QWORD PTR REG2$[rsp], rax

; 287  : 		REG2 = ((REG2 << 16) | REG2) & glm::uint64(0x0000FFFF0000FFFF);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 16
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 281470681808895			; 0000ffff0000ffffH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 288  : 		REG2 = ((REG2 <<  8) | REG2) & glm::uint64(0x00FF00FF00FF00FF);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 8
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 71777214294589695			; 00ff00ff00ff00ffH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 289  : 		REG2 = ((REG2 <<  4) | REG2) & glm::uint64(0x0F0F0F0F0F0F0F0F);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 4
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 1085102592571150095		; 0f0f0f0f0f0f0f0fH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 290  : 		REG2 = ((REG2 <<  2) | REG2) & glm::uint64(0x3333333333333333);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 2
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 3689348814741910323		; 3333333333333333H
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 291  : 		REG2 = ((REG2 <<  1) | REG2) & glm::uint64(0x5555555555555555);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 1
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 6148914691236517205		; 5555555555555555H
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 292  : 
; 293  : 		return REG1 | (REG2 << 1);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 1
	mov	rcx, QWORD PTR REG1$[rsp]
	or	rcx, rax
	mov	rax, rcx

; 294  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?fastBitfieldInterleave@bitfieldInterleave@@YA_KII@Z ENDP ; bitfieldInterleave::fastBitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
;	COMDAT ??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z
_TEXT	SEGMENT
v$ = 40
Result$ = 88
i$4 = 96
__$ArrayPad$ = 112
x$ = 144
y$ = 152
z$ = 160
w$ = 168
??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z PROC ; bitfieldInterleave4::loopBitfieldInterleave<unsigned short,unsigned __int64>, COMDAT

; 236  : 	{

$LN6:
	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 237  : 		RET const v[4] = {x, y, z, w};

	movzx	eax, WORD PTR x$[rsp]
	mov	QWORD PTR v$[rsp], rax
	movzx	eax, WORD PTR y$[rsp]
	mov	QWORD PTR v$[rsp+8], rax
	movzx	eax, WORD PTR z$[rsp]
	mov	QWORD PTR v$[rsp+16], rax
	movzx	eax, WORD PTR w$[rsp]
	mov	QWORD PTR v$[rsp+24], rax

; 238  : 		RET Result = 0; 

	mov	QWORD PTR Result$[rsp], 0

; 239  : 		for(RET i = 0; i < sizeof(PARAM) * 8; i++)

	mov	QWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@loopBitfie
$LN2@loopBitfie:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@loopBitfie:
	cmp	QWORD PTR i$4[rsp], 16
	jae	$LN3@loopBitfie

; 240  : 		{
; 241  : 			Result |= ((((v[0] >> i) & 1U)) << ((i << 2) + 0));

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$4[rsp]
	mov	rax, QWORD PTR v$[rsp+rax]
	shr	rax, cl
	and	rax, 1
	mov	rcx, QWORD PTR i$4[rsp]
	shl	rcx, 2
	shl	rax, cl
	mov	rcx, QWORD PTR Result$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR Result$[rsp], rax

; 242  : 			Result |= ((((v[1] >> i) & 1U)) << ((i << 2) + 1));

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR i$4[rsp]
	mov	rax, QWORD PTR v$[rsp+rax]
	shr	rax, cl
	and	rax, 1
	mov	rcx, QWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR [rcx*4+1]
	shl	rax, cl
	mov	rcx, QWORD PTR Result$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR Result$[rsp], rax

; 243  : 			Result |= ((((v[2] >> i) & 1U)) << ((i << 2) + 2));

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR i$4[rsp]
	mov	rax, QWORD PTR v$[rsp+rax]
	shr	rax, cl
	and	rax, 1
	mov	rcx, QWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR [rcx*4+2]
	shl	rax, cl
	mov	rcx, QWORD PTR Result$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR Result$[rsp], rax

; 244  : 			Result |= ((((v[3] >> i) & 1U)) << ((i << 2) + 3));

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR i$4[rsp]
	mov	rax, QWORD PTR v$[rsp+rax]
	shr	rax, cl
	and	rax, 1
	mov	rcx, QWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR [rcx*4+3]
	shl	rax, cl
	mov	rcx, QWORD PTR Result$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR Result$[rsp], rax

; 245  : 		}

	jmp	$LN2@loopBitfie
$LN3@loopBitfie:

; 246  : 		return Result;

	mov	rax, QWORD PTR Result$[rsp]

; 247  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z ENDP ; bitfieldInterleave4::loopBitfieldInterleave<unsigned short,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
_TEXT	SEGMENT
Error$ = 32
x_max$ = 36
y_max$ = 40
z_max$ = 44
w_max$ = 48
w$1 = 52
z$2 = 56
y$3 = 60
x$4 = 64
ResultA$5 = 72
ResultB$6 = 80
tv131 = 88
?test@bitfieldInterleave4@@YAHXZ PROC			; bitfieldInterleave4::test

; 250  : 	{

$LN17:
	push	rdi
	sub	rsp, 96					; 00000060H

; 251  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 252  : 
; 253  : 		glm::uint16 x_max = 1 << 11;

	mov	eax, 2048				; 00000800H
	mov	WORD PTR x_max$[rsp], ax

; 254  : 		glm::uint16 y_max = 1 << 11;

	mov	eax, 2048				; 00000800H
	mov	WORD PTR y_max$[rsp], ax

; 255  : 		glm::uint16 z_max = 1 << 11;

	mov	eax, 2048				; 00000800H
	mov	WORD PTR z_max$[rsp], ax

; 256  : 		glm::uint16 w_max = 1 << 11;

	mov	eax, 2048				; 00000800H
	mov	WORD PTR w_max$[rsp], ax

; 257  : 
; 258  : 		for(glm::uint16 w = 0; w < w_max; w += 27)

	xor	eax, eax
	mov	WORD PTR w$1[rsp], ax
	jmp	SHORT $LN4@test
$LN2@test:
	movzx	eax, WORD PTR w$1[rsp]
	add	eax, 27
	mov	WORD PTR w$1[rsp], ax
$LN4@test:
	movzx	eax, WORD PTR w$1[rsp]
	movzx	ecx, WORD PTR w_max$[rsp]
	cmp	eax, ecx
	jge	$LN3@test

; 259  : 		for(glm::uint16 z = 0; z < z_max; z += 27)

	xor	eax, eax
	mov	WORD PTR z$2[rsp], ax
	jmp	SHORT $LN7@test
$LN5@test:
	movzx	eax, WORD PTR z$2[rsp]
	add	eax, 27
	mov	WORD PTR z$2[rsp], ax
$LN7@test:
	movzx	eax, WORD PTR z$2[rsp]
	movzx	ecx, WORD PTR z_max$[rsp]
	cmp	eax, ecx
	jge	$LN6@test

; 260  : 		for(glm::uint16 y = 0; y < y_max; y += 27)

	xor	eax, eax
	mov	WORD PTR y$3[rsp], ax
	jmp	SHORT $LN10@test
$LN8@test:
	movzx	eax, WORD PTR y$3[rsp]
	add	eax, 27
	mov	WORD PTR y$3[rsp], ax
$LN10@test:
	movzx	eax, WORD PTR y$3[rsp]
	movzx	ecx, WORD PTR y_max$[rsp]
	cmp	eax, ecx
	jge	$LN9@test

; 261  : 		for(glm::uint16 x = 0; x < x_max; x += 27)

	xor	eax, eax
	mov	WORD PTR x$4[rsp], ax
	jmp	SHORT $LN13@test
$LN11@test:
	movzx	eax, WORD PTR x$4[rsp]
	add	eax, 27
	mov	WORD PTR x$4[rsp], ax
$LN13@test:
	movzx	eax, WORD PTR x$4[rsp]
	movzx	ecx, WORD PTR x_max$[rsp]
	cmp	eax, ecx
	jge	SHORT $LN12@test

; 262  : 		{
; 263  : 			glm::uint64 ResultA = loopBitfieldInterleave<glm::uint16, glm::uint64>(x, y, z, w);

	movzx	r9d, WORD PTR w$1[rsp]
	movzx	r8d, WORD PTR z$2[rsp]
	movzx	edx, WORD PTR y$3[rsp]
	movzx	ecx, WORD PTR x$4[rsp]
	call	??$loopBitfieldInterleave@G_K@bitfieldInterleave4@@YA_KGGGG@Z ; bitfieldInterleave4::loopBitfieldInterleave<unsigned short,unsigned __int64>
	mov	QWORD PTR ResultA$5[rsp], rax

; 264  : 			glm::uint64 ResultB = glm::bitfieldInterleave(x, y, z, w);

	movzx	r9d, WORD PTR w$1[rsp]
	movzx	r8d, WORD PTR z$2[rsp]
	movzx	edx, WORD PTR y$3[rsp]
	movzx	ecx, WORD PTR x$4[rsp]
	call	?bitfieldInterleave@glm@@YA_KGGGG@Z	; glm::bitfieldInterleave
	mov	QWORD PTR ResultB$6[rsp], rax

; 265  : 			Error += ResultA == ResultB ? 0 : 1;

	mov	rax, QWORD PTR ResultB$6[rsp]
	cmp	QWORD PTR ResultA$5[rsp], rax
	jne	SHORT $LN15@test
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv131[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv131[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 266  : 		}

	jmp	$LN11@test
$LN12@test:
	jmp	$LN8@test
$LN9@test:
	jmp	$LN5@test
$LN6@test:
	jmp	$LN2@test
$LN3@test:

; 267  : 
; 268  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 269  : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?test@bitfieldInterleave4@@YAHXZ ENDP			; bitfieldInterleave4::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
;	COMDAT ??$refBitfieldInterleave@G_K@bitfieldInterleave3@@YA_KGGG@Z
_TEXT	SEGMENT
Result$ = 0
i$1 = 8
x$ = 32
y$ = 40
z$ = 48
??$refBitfieldInterleave@G_K@bitfieldInterleave3@@YA_KGGG@Z PROC ; bitfieldInterleave3::refBitfieldInterleave<unsigned short,unsigned __int64>, COMDAT

; 200  : 	{

$LN6:
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 16

; 201  : 		RET Result = 0; 

	mov	QWORD PTR Result$[rsp], 0

; 202  : 		for(RET i = 0; i < sizeof(PARAM) * 8; ++i)

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@refBitfiel
$LN2@refBitfiel:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@refBitfiel:
	cmp	QWORD PTR i$1[rsp], 16
	jae	$LN3@refBitfiel

; 203  : 		{
; 204  : 			Result |= ((RET(x) & (RET(1U) << i)) << ((i << 1) + 0));

	movzx	eax, WORD PTR x$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	mov	edx, 1
	shl	rdx, cl
	mov	rcx, rdx
	and	rax, rcx
	mov	rcx, QWORD PTR i$1[rsp]
	add	rcx, rcx
	shl	rax, cl
	mov	rcx, QWORD PTR Result$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR Result$[rsp], rax

; 205  : 			Result |= ((RET(y) & (RET(1U) << i)) << ((i << 1) + 1));

	movzx	eax, WORD PTR y$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	mov	edx, 1
	shl	rdx, cl
	mov	rcx, rdx
	and	rax, rcx
	mov	rcx, QWORD PTR i$1[rsp]
	lea	rcx, QWORD PTR [rcx+rcx+1]
	shl	rax, cl
	mov	rcx, QWORD PTR Result$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR Result$[rsp], rax

; 206  : 			Result |= ((RET(z) & (RET(1U) << i)) << ((i << 1) + 2));

	movzx	eax, WORD PTR z$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	mov	edx, 1
	shl	rdx, cl
	mov	rcx, rdx
	and	rax, rcx
	mov	rcx, QWORD PTR i$1[rsp]
	lea	rcx, QWORD PTR [rcx+rcx+2]
	shl	rax, cl
	mov	rcx, QWORD PTR Result$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR Result$[rsp], rax

; 207  : 		}

	jmp	$LN2@refBitfiel
$LN3@refBitfiel:

; 208  : 		return Result;

	mov	rax, QWORD PTR Result$[rsp]

; 209  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$refBitfieldInterleave@G_K@bitfieldInterleave3@@YA_KGGG@Z ENDP ; bitfieldInterleave3::refBitfieldInterleave<unsigned short,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
_TEXT	SEGMENT
Error$ = 32
x_max$ = 36
y_max$ = 40
z_max$ = 44
z$1 = 48
y$2 = 52
x$3 = 56
ResultA$4 = 64
ResultB$5 = 72
tv91 = 80
?test@bitfieldInterleave3@@YAHXZ PROC			; bitfieldInterleave3::test

; 212  : 	{

$LN14:
	push	rdi
	sub	rsp, 96					; 00000060H

; 213  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 214  : 
; 215  : 		glm::uint16 x_max = 1 << 11;

	mov	eax, 2048				; 00000800H
	mov	WORD PTR x_max$[rsp], ax

; 216  : 		glm::uint16 y_max = 1 << 11;

	mov	eax, 2048				; 00000800H
	mov	WORD PTR y_max$[rsp], ax

; 217  : 		glm::uint16 z_max = 1 << 11;

	mov	eax, 2048				; 00000800H
	mov	WORD PTR z_max$[rsp], ax

; 218  : 
; 219  : 		for(glm::uint16 z = 0; z < z_max; z += 27)

	xor	eax, eax
	mov	WORD PTR z$1[rsp], ax
	jmp	SHORT $LN4@test
$LN2@test:
	movzx	eax, WORD PTR z$1[rsp]
	add	eax, 27
	mov	WORD PTR z$1[rsp], ax
$LN4@test:
	movzx	eax, WORD PTR z$1[rsp]
	movzx	ecx, WORD PTR z_max$[rsp]
	cmp	eax, ecx
	jge	$LN3@test

; 220  : 		for(glm::uint16 y = 0; y < y_max; y += 27)

	xor	eax, eax
	mov	WORD PTR y$2[rsp], ax
	jmp	SHORT $LN7@test
$LN5@test:
	movzx	eax, WORD PTR y$2[rsp]
	add	eax, 27
	mov	WORD PTR y$2[rsp], ax
$LN7@test:
	movzx	eax, WORD PTR y$2[rsp]
	movzx	ecx, WORD PTR y_max$[rsp]
	cmp	eax, ecx
	jge	$LN6@test

; 221  : 		for(glm::uint16 x = 0; x < x_max; x += 27)

	xor	eax, eax
	mov	WORD PTR x$3[rsp], ax
	jmp	SHORT $LN10@test
$LN8@test:
	movzx	eax, WORD PTR x$3[rsp]
	add	eax, 27
	mov	WORD PTR x$3[rsp], ax
$LN10@test:
	movzx	eax, WORD PTR x$3[rsp]
	movzx	ecx, WORD PTR x_max$[rsp]
	cmp	eax, ecx
	jge	SHORT $LN9@test

; 222  : 		{
; 223  : 			glm::uint64 ResultA = refBitfieldInterleave<glm::uint16, glm::uint64>(x, y, z);

	movzx	r8d, WORD PTR z$1[rsp]
	movzx	edx, WORD PTR y$2[rsp]
	movzx	ecx, WORD PTR x$3[rsp]
	call	??$refBitfieldInterleave@G_K@bitfieldInterleave3@@YA_KGGG@Z ; bitfieldInterleave3::refBitfieldInterleave<unsigned short,unsigned __int64>
	mov	QWORD PTR ResultA$4[rsp], rax

; 224  : 			glm::uint64 ResultB = glm::bitfieldInterleave(x, y, z);

	movzx	r8d, WORD PTR z$1[rsp]
	movzx	edx, WORD PTR y$2[rsp]
	movzx	ecx, WORD PTR x$3[rsp]
	call	?bitfieldInterleave@glm@@YA_KGGG@Z	; glm::bitfieldInterleave
	mov	QWORD PTR ResultB$5[rsp], rax

; 225  : 			Error += ResultA == ResultB ? 0 : 1;

	mov	rax, QWORD PTR ResultB$5[rsp]
	cmp	QWORD PTR ResultA$4[rsp], rax
	jne	SHORT $LN12@test
	mov	DWORD PTR tv91[rsp], 0
	jmp	SHORT $LN13@test
$LN12@test:
	mov	DWORD PTR tv91[rsp], 1
$LN13@test:
	mov	eax, DWORD PTR tv91[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 226  : 		}

	jmp	SHORT $LN8@test
$LN9@test:
	jmp	$LN5@test
$LN6@test:
	jmp	$LN2@test
$LN3@test:

; 227  : 
; 228  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 229  : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?test@bitfieldInterleave3@@YAHXZ ENDP			; bitfieldInterleave3::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
_TEXT	SEGMENT
Error$ = 32
?test@mask@@YAHXZ PROC					; mask::test

; 186  : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 187  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 188  : 
; 189  : 		Error += test_uint();

	call	?test_uint@mask@@YAHXZ			; mask::test_uint
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 190  : 		Error += test_uvec4();

	call	?test_uvec4@mask@@YAHXZ			; mask::test_uvec4
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 191  : 
; 192  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 193  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test@mask@@YAHXZ ENDP					; mask::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ??$mask@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$mask@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z PROC ; glm::mask<int,0,glm::tvec4>, COMDAT

; 235  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 236  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'mask' accepts only integer values");
; 237  : 
; 238  : 		return detail::functor1<T, T, P, vecIUType>::call(mask, v);

	mov	r8, QWORD PTR v$[rsp]
	lea	rdx, OFFSET FLAT:??$mask@H@glm@@YAHH@Z	; glm::mask<int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 239  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mask@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ENDP ; glm::mask<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 244
i$5 = 248
n$6 = 256
Result$7 = 280
$T8 = 320
tv138 = 324
__$ArrayPad$ = 328
?test_uvec4@mask@@YAHXZ PROC				; mask::test_uvec4

; 163  : 	{

$LN8:
	push	rdi
	sub	rsp, 336				; 00000150H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 164  : 		type<glm::ivec4> const Data[] =
; 165  : 		{
; 166  : 			{glm::ivec4( 0), glm::ivec4(0x00000000)},

	xor	edx, edx
	lea	rcx, QWORD PTR Data$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	xor	edx, edx
	lea	rcx, QWORD PTR Data$[rsp+16]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 167  : 			{glm::ivec4( 1), glm::ivec4(0x00000001)},

	mov	edx, 1
	lea	rcx, QWORD PTR Data$[rsp+32]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 1
	lea	rcx, QWORD PTR Data$[rsp+48]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 168  : 			{glm::ivec4( 2), glm::ivec4(0x00000003)},

	mov	edx, 2
	lea	rcx, QWORD PTR Data$[rsp+64]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 3
	lea	rcx, QWORD PTR Data$[rsp+80]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 169  : 			{glm::ivec4( 3), glm::ivec4(0x00000007)},

	mov	edx, 3
	lea	rcx, QWORD PTR Data$[rsp+96]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 7
	lea	rcx, QWORD PTR Data$[rsp+112]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 170  : 			{glm::ivec4(31), glm::ivec4(0x7fffffff)},

	mov	edx, 31
	lea	rcx, QWORD PTR Data$[rsp+128]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 2147483647				; 7fffffffH
	lea	rcx, QWORD PTR Data$[rsp+144]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 171  : 			{glm::ivec4(32), glm::ivec4(0xffffffff)}

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR Data$[rsp+160]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, -1
	lea	rcx, QWORD PTR Data$[rsp+176]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 172  : 		};
; 173  : 
; 174  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 175  : 
; 176  : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<glm::ivec4>); i < n; ++i)

	mov	QWORD PTR i$5[rsp], 0
	mov	QWORD PTR n$6[rsp], 6
	jmp	SHORT $LN4@test_uvec4
$LN2@test_uvec4:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN4@test_uvec4:
	mov	rax, QWORD PTR n$6[rsp]
	cmp	QWORD PTR i$5[rsp], rax
	jae	$LN3@test_uvec4

; 177  : 		{
; 178  : 			glm::ivec4 Result = glm::mask(Data[i].Value);

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rax, QWORD PTR Data$[rsp+rax]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$7[rsp]
	call	??$mask@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ; glm::mask<int,0,glm::tvec4>

; 179  : 			Error += glm::all(glm::equal(Data[i].Return, Result)) ? 0 : 1;

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rax, QWORD PTR Data$[rsp+rax+16]
	lea	r8, QWORD PTR Result$7[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_uvec4
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN7@test_uvec4
$LN6@test_uvec4:
	mov	DWORD PTR tv138[rsp], 1
$LN7@test_uvec4:
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 180  : 		}

	jmp	$LN2@test_uvec4
$LN3@test_uvec4:

; 181  : 
; 182  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 183  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_uvec4@mask@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 336				; 00000150H
	pop	rdi
	ret	0
?test_uvec4@mask@@YAHXZ ENDP				; mask::test_uvec4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ??$mask@I@glm@@YAII@Z
_TEXT	SEGMENT
tv68 = 0
tv71 = 4
Bits$ = 32
??$mask@I@glm@@YAII@Z PROC				; glm::mask<unsigned int>, COMDAT

; 227  : 	{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 228  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'mask' accepts only integer values");
; 229  : 
; 230  : 		return Bits >= sizeof(genIUType) * 8 ? ~static_cast<genIUType>(0) : (static_cast<genIUType>(1) << Bits) - static_cast<genIUType>(1);

	mov	eax, DWORD PTR Bits$[rsp]
	cmp	rax, 32					; 00000020H
	jb	SHORT $LN3@mask
	mov	DWORD PTR tv68[rsp], -1			; ffffffffH
	jmp	SHORT $LN4@mask
$LN3@mask:
	mov	eax, DWORD PTR Bits$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv71[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv71[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR tv68[rsp], eax
$LN4@mask:
	mov	eax, DWORD PTR tv68[rsp]

; 231  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$mask@I@glm@@YAII@Z ENDP				; glm::mask<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
_TEXT	SEGMENT
Data$ = 40
Error$ = 100
i$4 = 104
Result$5 = 112
i$6 = 120
Result$7 = 128
i$8 = 136
Result$9 = 144
i$10 = 152
Result$11 = 160
tv75 = 176
tv88 = 180
tv165 = 184
tv178 = 188
__$ArrayPad$ = 192
?test_uint@mask@@YAHXZ PROC				; mask::test_uint

; 116  : 	{

$LN23:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 117  : 		type<glm::uint> const Data[] =
; 118  : 		{
; 119  : 			{ 0, 0x00000000},

	mov	DWORD PTR Data$[rsp], 0
	mov	DWORD PTR Data$[rsp+4], 0

; 120  : 			{ 1, 0x00000001},

	mov	DWORD PTR Data$[rsp+8], 1
	mov	DWORD PTR Data$[rsp+12], 1

; 121  : 			{ 2, 0x00000003},

	mov	DWORD PTR Data$[rsp+16], 2
	mov	DWORD PTR Data$[rsp+20], 3

; 122  : 			{ 3, 0x00000007},

	mov	DWORD PTR Data$[rsp+24], 3
	mov	DWORD PTR Data$[rsp+28], 7

; 123  : 			{31, 0x7fffffff},

	mov	DWORD PTR Data$[rsp+32], 31
	mov	DWORD PTR Data$[rsp+36], 2147483647	; 7fffffffH

; 124  : 			{32, 0xffffffff}

	mov	DWORD PTR Data$[rsp+40], 32		; 00000020H
	mov	DWORD PTR Data$[rsp+44], -1		; ffffffffH

; 125  : 		};
; 126  : 
; 127  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 128  : /* mask_zero is sadly not a correct code
; 129  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int>); ++i)
; 130  : 		{
; 131  : 			int Result = mask_zero(Data[i].Value);
; 132  : 			Error += Data[i].Return == Result ? 0 : 1;
; 133  : 		}
; 134  : */
; 135  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int>); ++i)

	mov	QWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@test_uint
$LN2@test_uint:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@test_uint:
	cmp	QWORD PTR i$4[rsp], 6
	jae	SHORT $LN3@test_uint

; 136  : 		{
; 137  : 			int Result = mask_mix(Data[i].Value);

	mov	rax, QWORD PTR i$4[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	?mask_mix@mask@@YAHH@Z			; mask::mask_mix
	mov	DWORD PTR Result$5[rsp], eax

; 138  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$4[rsp]
	mov	ecx, DWORD PTR Result$5[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN15@test_uint
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN16@test_uint
$LN15@test_uint:
	mov	DWORD PTR tv75[rsp], 1
$LN16@test_uint:
	mov	eax, DWORD PTR tv75[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 139  : 		}

	jmp	SHORT $LN2@test_uint
$LN3@test_uint:

; 140  : 
; 141  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int>); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN7@test_uint
$LN5@test_uint:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN7@test_uint:
	cmp	QWORD PTR i$6[rsp], 6
	jae	SHORT $LN6@test_uint

; 142  : 		{
; 143  : 			int Result = mask_half(Data[i].Value);

	mov	rax, QWORD PTR i$6[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	?mask_half@mask@@YAHH@Z			; mask::mask_half
	mov	DWORD PTR Result$7[rsp], eax

; 144  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$6[rsp]
	mov	ecx, DWORD PTR Result$7[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN17@test_uint
	mov	DWORD PTR tv88[rsp], 0
	jmp	SHORT $LN18@test_uint
$LN17@test_uint:
	mov	DWORD PTR tv88[rsp], 1
$LN18@test_uint:
	mov	eax, DWORD PTR tv88[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 145  : 		}

	jmp	SHORT $LN5@test_uint
$LN6@test_uint:

; 146  : 
; 147  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int>); ++i)

	mov	QWORD PTR i$8[rsp], 0
	jmp	SHORT $LN10@test_uint
$LN8@test_uint:
	mov	rax, QWORD PTR i$8[rsp]
	inc	rax
	mov	QWORD PTR i$8[rsp], rax
$LN10@test_uint:
	cmp	QWORD PTR i$8[rsp], 6
	jae	SHORT $LN9@test_uint

; 148  : 		{
; 149  : 			int Result = mask_loop(Data[i].Value);

	mov	rax, QWORD PTR i$8[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	?mask_loop@mask@@YAHH@Z			; mask::mask_loop
	mov	DWORD PTR Result$9[rsp], eax

; 150  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$8[rsp]
	mov	ecx, DWORD PTR Result$9[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN19@test_uint
	mov	DWORD PTR tv165[rsp], 0
	jmp	SHORT $LN20@test_uint
$LN19@test_uint:
	mov	DWORD PTR tv165[rsp], 1
$LN20@test_uint:
	mov	eax, DWORD PTR tv165[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 151  : 		}

	jmp	SHORT $LN8@test_uint
$LN9@test_uint:

; 152  : 
; 153  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int>); ++i)

	mov	QWORD PTR i$10[rsp], 0
	jmp	SHORT $LN13@test_uint
$LN11@test_uint:
	mov	rax, QWORD PTR i$10[rsp]
	inc	rax
	mov	QWORD PTR i$10[rsp], rax
$LN13@test_uint:
	cmp	QWORD PTR i$10[rsp], 6
	jae	SHORT $LN12@test_uint

; 154  : 		{
; 155  : 			int Result = glm::mask(Data[i].Value);

	mov	rax, QWORD PTR i$10[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$mask@I@glm@@YAII@Z			; glm::mask<unsigned int>
	mov	DWORD PTR Result$11[rsp], eax

; 156  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$10[rsp]
	mov	ecx, DWORD PTR Result$11[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN21@test_uint
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN22@test_uint
$LN21@test_uint:
	mov	DWORD PTR tv178[rsp], 1
$LN22@test_uint:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 157  : 		}

	jmp	SHORT $LN11@test_uint
$LN12@test_uint:

; 158  : 
; 159  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 160  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_uint@mask@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_uint@mask@@YAHXZ ENDP				; mask::test_uint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ??$mask@H@glm@@YAHH@Z
_TEXT	SEGMENT
tv68 = 0
tv71 = 4
Bits$ = 32
??$mask@H@glm@@YAHH@Z PROC				; glm::mask<int>, COMDAT

; 227  : 	{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 228  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'mask' accepts only integer values");
; 229  : 
; 230  : 		return Bits >= sizeof(genIUType) * 8 ? ~static_cast<genIUType>(0) : (static_cast<genIUType>(1) << Bits) - static_cast<genIUType>(1);

	movsxd	rax, DWORD PTR Bits$[rsp]
	cmp	rax, 32					; 00000020H
	jb	SHORT $LN3@mask
	mov	DWORD PTR tv68[rsp], -1
	jmp	SHORT $LN4@mask
$LN3@mask:
	mov	eax, DWORD PTR Bits$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv71[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv71[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR tv68[rsp], eax
$LN4@mask:
	mov	eax, DWORD PTR tv68[rsp]

; 231  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$mask@H@glm@@YAHH@Z ENDP				; glm::mask<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ PROC ; std::vector<int,std::allocator<int> >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ENDP ; std::vector<int,std::allocator<int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ PROC ; std::vector<int,std::allocator<int> >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ENDP ; std::vector<int,std::allocator<int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA PROC ; `std::vector<int,std::allocator<int> >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA ENDP ; `std::vector<int,std::allocator<int> >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ PROC ; std::vector<int,std::allocator<int> >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ENDP ; std::vector<int,std::allocator<int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ; std::allocator<int>::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z PROC ; std::vector<int,std::allocator<int> >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ; std::allocator<int>::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z ENDP ; std::vector<int,std::allocator<int> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z PROC ; std::vector<int,std::allocator<int> >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<int,std::allocator<int> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z PROC ; std::vector<int,std::allocator<int> >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 2
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ENDP ; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ; std::_Default_allocator_traits<std::allocator<int> >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Newsize$ = 72
?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z PROC ; std::vector<int,std::allocator<int> >::resize, COMDAT

; 1436 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1437 :         // trim or append value-initialized elements, provide strong guarantee
; 1438 :         _Resize(_Newsize, _Value_init_tag{});

	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>

; 1439 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ENDP ; std::vector<int,std::allocator<int> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S4$ = 52
$T4 = 68
this$ = 96
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S4$[rsp]
	call	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
	lea	rax, QWORD PTR $S4$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 4611686018427387903		; 3fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@H@std@@QEAAPEAH_K@Z PROC		; std::allocator<int>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$03@std@@YA_K_K@Z	; std::_Get_size_of_n<4>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@H@std@@QEAAPEAH_K@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z PROC	; std::allocator<int>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ENDP	; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@H@std@@QEAA@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@H@std@@QEAA@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
_TEXT	SEGMENT
Count$ = 32
Timestamp1$ = 36
Mask$8 = 56
i$9 = 100
Timestamp2$ = 104
Mask$10 = 120
i$11 = 164
Timestamp3$ = 168
Mask$12 = 184
i$13 = 228
Timestamp4$ = 232
Mask$14 = 248
i$15 = 292
Timestamp5$ = 296
Mask$16 = 312
i$17 = 356
Timestamp6$ = 360
TimeMix$ = 364
TimeLoop$ = 368
TimeDefault$ = 372
TimeZero$ = 376
TimeHalf$ = 380
tv76 = 384
tv91 = 388
tv138 = 392
tv153 = 396
tv168 = 400
tv188 = 404
?perf@mask@@YAHXZ PROC					; mask::perf

; 50   : 	{

$LN25:
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 51   : 		int const Count = 100000000;

	mov	DWORD PTR Count$[rsp], 100000000	; 05f5e100H

; 52   : 
; 53   : 		std::clock_t Timestamp1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp1$[rsp], eax

; 54   : 
; 55   : 		{
; 56   : 			std::vector<int> Mask;

	lea	rcx, QWORD PTR Mask$8[rsp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	npad	1

; 57   : 			Mask.resize(Count);

	mov	edx, 100000000				; 05f5e100H
	lea	rcx, QWORD PTR Mask$8[rsp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize

; 58   : 			for(int i = 0; i < Count; ++i)

	mov	DWORD PTR i$9[rsp], 0
	jmp	SHORT $LN4@perf
$LN2@perf:
	mov	eax, DWORD PTR i$9[rsp]
	inc	eax
	mov	DWORD PTR i$9[rsp], eax
$LN4@perf:
	cmp	DWORD PTR i$9[rsp], 100000000		; 05f5e100H
	jge	SHORT $LN3@perf

; 59   : 				Mask[i] = mask_mix(i % 32);

	mov	eax, DWORD PTR i$9[rsp]
	cdq
	and	edx, 31
	add	eax, edx
	and	eax, 31
	sub	eax, edx
	mov	ecx, eax
	call	?mask_mix@mask@@YAHH@Z			; mask::mask_mix
	mov	DWORD PTR tv76[rsp], eax
	movsxd	rcx, DWORD PTR i$9[rsp]
	mov	rdx, rcx
	lea	rcx, QWORD PTR Mask$8[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv76[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN2@perf
$LN3@perf:

; 60   : 		}

	lea	rcx, QWORD PTR Mask$8[rsp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >

; 61   : 
; 62   : 		std::clock_t Timestamp2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp2$[rsp], eax

; 63   : 
; 64   : 		{
; 65   : 			std::vector<int> Mask;

	lea	rcx, QWORD PTR Mask$10[rsp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	npad	1

; 66   : 			Mask.resize(Count);

	mov	edx, 100000000				; 05f5e100H
	lea	rcx, QWORD PTR Mask$10[rsp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize

; 67   : 			for(int i = 0; i < Count; ++i)

	mov	DWORD PTR i$11[rsp], 0
	jmp	SHORT $LN7@perf
$LN5@perf:
	mov	eax, DWORD PTR i$11[rsp]
	inc	eax
	mov	DWORD PTR i$11[rsp], eax
$LN7@perf:
	cmp	DWORD PTR i$11[rsp], 100000000		; 05f5e100H
	jge	SHORT $LN6@perf

; 68   : 				Mask[i] = mask_loop(i % 32);

	mov	eax, DWORD PTR i$11[rsp]
	cdq
	and	edx, 31
	add	eax, edx
	and	eax, 31
	sub	eax, edx
	mov	ecx, eax
	call	?mask_loop@mask@@YAHH@Z			; mask::mask_loop
	mov	DWORD PTR tv91[rsp], eax
	movsxd	rcx, DWORD PTR i$11[rsp]
	mov	rdx, rcx
	lea	rcx, QWORD PTR Mask$10[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv91[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN5@perf
$LN6@perf:

; 69   : 		}

	lea	rcx, QWORD PTR Mask$10[rsp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >

; 70   : 
; 71   : 		std::clock_t Timestamp3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp3$[rsp], eax

; 72   : 
; 73   : 		{
; 74   : 			std::vector<int> Mask;

	lea	rcx, QWORD PTR Mask$12[rsp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	npad	1

; 75   : 			Mask.resize(Count);

	mov	edx, 100000000				; 05f5e100H
	lea	rcx, QWORD PTR Mask$12[rsp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize

; 76   : 			for(int i = 0; i < Count; ++i)

	mov	DWORD PTR i$13[rsp], 0
	jmp	SHORT $LN10@perf
$LN8@perf:
	mov	eax, DWORD PTR i$13[rsp]
	inc	eax
	mov	DWORD PTR i$13[rsp], eax
$LN10@perf:
	cmp	DWORD PTR i$13[rsp], 100000000		; 05f5e100H
	jge	SHORT $LN9@perf

; 77   : 				Mask[i] = glm::mask(i % 32);

	mov	eax, DWORD PTR i$13[rsp]
	cdq
	and	edx, 31
	add	eax, edx
	and	eax, 31
	sub	eax, edx
	mov	ecx, eax
	call	??$mask@H@glm@@YAHH@Z			; glm::mask<int>
	mov	DWORD PTR tv138[rsp], eax
	movsxd	rcx, DWORD PTR i$13[rsp]
	mov	rdx, rcx
	lea	rcx, QWORD PTR Mask$12[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv138[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN8@perf
$LN9@perf:

; 78   : 		}

	lea	rcx, QWORD PTR Mask$12[rsp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >

; 79   : 
; 80   : 		std::clock_t Timestamp4 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp4$[rsp], eax

; 81   : 
; 82   : 		{
; 83   : 			std::vector<int> Mask;

	lea	rcx, QWORD PTR Mask$14[rsp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	npad	1

; 84   : 			Mask.resize(Count);

	mov	edx, 100000000				; 05f5e100H
	lea	rcx, QWORD PTR Mask$14[rsp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize

; 85   : 			for(int i = 0; i < Count; ++i)

	mov	DWORD PTR i$15[rsp], 0
	jmp	SHORT $LN13@perf
$LN11@perf:
	mov	eax, DWORD PTR i$15[rsp]
	inc	eax
	mov	DWORD PTR i$15[rsp], eax
$LN13@perf:
	cmp	DWORD PTR i$15[rsp], 100000000		; 05f5e100H
	jge	SHORT $LN12@perf

; 86   : 				Mask[i] = mask_zero(i % 32);

	mov	eax, DWORD PTR i$15[rsp]
	cdq
	and	edx, 31
	add	eax, edx
	and	eax, 31
	sub	eax, edx
	mov	ecx, eax
	call	?mask_zero@mask@@YAHH@Z			; mask::mask_zero
	mov	DWORD PTR tv153[rsp], eax
	movsxd	rcx, DWORD PTR i$15[rsp]
	mov	rdx, rcx
	lea	rcx, QWORD PTR Mask$14[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv153[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN11@perf
$LN12@perf:

; 87   : 		}

	lea	rcx, QWORD PTR Mask$14[rsp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >

; 88   : 
; 89   : 		std::clock_t Timestamp5 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp5$[rsp], eax

; 90   : 
; 91   : 		{
; 92   : 			std::vector<int> Mask;

	lea	rcx, QWORD PTR Mask$16[rsp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	npad	1

; 93   : 			Mask.resize(Count);

	mov	edx, 100000000				; 05f5e100H
	lea	rcx, QWORD PTR Mask$16[rsp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize

; 94   : 			for(int i = 0; i < Count; ++i)

	mov	DWORD PTR i$17[rsp], 0
	jmp	SHORT $LN16@perf
$LN14@perf:
	mov	eax, DWORD PTR i$17[rsp]
	inc	eax
	mov	DWORD PTR i$17[rsp], eax
$LN16@perf:
	cmp	DWORD PTR i$17[rsp], 100000000		; 05f5e100H
	jge	SHORT $LN15@perf

; 95   : 				Mask[i] = mask_half(i % 32);

	mov	eax, DWORD PTR i$17[rsp]
	cdq
	and	edx, 31
	add	eax, edx
	and	eax, 31
	sub	eax, edx
	mov	ecx, eax
	call	?mask_half@mask@@YAHH@Z			; mask::mask_half
	mov	DWORD PTR tv168[rsp], eax
	movsxd	rcx, DWORD PTR i$17[rsp]
	mov	rdx, rcx
	lea	rcx, QWORD PTR Mask$16[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv168[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN14@perf
$LN15@perf:

; 96   : 		}

	lea	rcx, QWORD PTR Mask$16[rsp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >

; 97   : 
; 98   : 		std::clock_t Timestamp6 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp6$[rsp], eax

; 99   : 
; 100  : 		std::clock_t TimeMix = Timestamp2 - Timestamp1;

	mov	eax, DWORD PTR Timestamp1$[rsp]
	mov	ecx, DWORD PTR Timestamp2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR TimeMix$[rsp], eax

; 101  : 		std::clock_t TimeLoop = Timestamp3 - Timestamp2;

	mov	eax, DWORD PTR Timestamp2$[rsp]
	mov	ecx, DWORD PTR Timestamp3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR TimeLoop$[rsp], eax

; 102  : 		std::clock_t TimeDefault = Timestamp4 - Timestamp3;

	mov	eax, DWORD PTR Timestamp3$[rsp]
	mov	ecx, DWORD PTR Timestamp4$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR TimeDefault$[rsp], eax

; 103  : 		std::clock_t TimeZero = Timestamp5 - Timestamp4;

	mov	eax, DWORD PTR Timestamp4$[rsp]
	mov	ecx, DWORD PTR Timestamp5$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR TimeZero$[rsp], eax

; 104  : 		std::clock_t TimeHalf = Timestamp6 - Timestamp5;

	mov	eax, DWORD PTR Timestamp5$[rsp]
	mov	ecx, DWORD PTR Timestamp6$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR TimeHalf$[rsp], eax

; 105  : 
; 106  : 		printf("mask[mix]: %d\n", static_cast<unsigned int>(TimeMix));

	mov	edx, DWORD PTR TimeMix$[rsp]
	lea	rcx, OFFSET FLAT:$SG57551
	call	printf

; 107  : 		printf("mask[loop]: %d\n", static_cast<unsigned int>(TimeLoop));

	mov	edx, DWORD PTR TimeLoop$[rsp]
	lea	rcx, OFFSET FLAT:$SG57552
	call	printf

; 108  : 		printf("mask[default]: %d\n", static_cast<unsigned int>(TimeDefault));

	mov	edx, DWORD PTR TimeDefault$[rsp]
	lea	rcx, OFFSET FLAT:$SG57553
	call	printf

; 109  : 		printf("mask[zero]: %d\n", static_cast<unsigned int>(TimeZero));

	mov	edx, DWORD PTR TimeZero$[rsp]
	lea	rcx, OFFSET FLAT:$SG57554
	call	printf

; 110  : 		printf("mask[half]: %d\n", static_cast<unsigned int>(TimeHalf));

	mov	edx, DWORD PTR TimeHalf$[rsp]
	lea	rcx, OFFSET FLAT:$SG57555
	call	printf

; 111  : 
; 112  : 		return TimeDefault < TimeLoop ? 0 : 1;

	mov	eax, DWORD PTR TimeLoop$[rsp]
	cmp	DWORD PTR TimeDefault$[rsp], eax
	jge	SHORT $LN18@perf
	mov	DWORD PTR tv188[rsp], 0
	jmp	SHORT $LN19@perf
$LN18@perf:
	mov	DWORD PTR tv188[rsp], 1
$LN19@perf:
	mov	eax, DWORD PTR tv188[rsp]

; 113  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf@mask@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 416				; 000001a0H
	pop	rdi
	ret	0
?perf@mask@@YAHXZ ENDP					; mask::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Count$ = 32
Timestamp1$ = 36
Mask$8 = 56
i$9 = 100
Timestamp2$ = 104
Mask$10 = 120
i$11 = 164
Timestamp3$ = 168
Mask$12 = 184
i$13 = 228
Timestamp4$ = 232
Mask$14 = 248
i$15 = 292
Timestamp5$ = 296
Mask$16 = 312
i$17 = 356
Timestamp6$ = 360
TimeMix$ = 364
TimeLoop$ = 368
TimeDefault$ = 372
TimeZero$ = 376
TimeHalf$ = 380
tv76 = 384
tv91 = 388
tv138 = 392
tv153 = 396
tv168 = 400
tv188 = 404
?dtor$0@?0??perf@mask@@YAHXZ@4HA PROC			; `mask::perf'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Mask$8[rbp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf@mask@@YAHXZ@4HA ENDP			; `mask::perf'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Count$ = 32
Timestamp1$ = 36
Mask$8 = 56
i$9 = 100
Timestamp2$ = 104
Mask$10 = 120
i$11 = 164
Timestamp3$ = 168
Mask$12 = 184
i$13 = 228
Timestamp4$ = 232
Mask$14 = 248
i$15 = 292
Timestamp5$ = 296
Mask$16 = 312
i$17 = 356
Timestamp6$ = 360
TimeMix$ = 364
TimeLoop$ = 368
TimeDefault$ = 372
TimeZero$ = 376
TimeHalf$ = 380
tv76 = 384
tv91 = 388
tv138 = 392
tv153 = 396
tv168 = 400
tv188 = 404
?dtor$1@?0??perf@mask@@YAHXZ@4HA PROC			; `mask::perf'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Mask$10[rbp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??perf@mask@@YAHXZ@4HA ENDP			; `mask::perf'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Count$ = 32
Timestamp1$ = 36
Mask$8 = 56
i$9 = 100
Timestamp2$ = 104
Mask$10 = 120
i$11 = 164
Timestamp3$ = 168
Mask$12 = 184
i$13 = 228
Timestamp4$ = 232
Mask$14 = 248
i$15 = 292
Timestamp5$ = 296
Mask$16 = 312
i$17 = 356
Timestamp6$ = 360
TimeMix$ = 364
TimeLoop$ = 368
TimeDefault$ = 372
TimeZero$ = 376
TimeHalf$ = 380
tv76 = 384
tv91 = 388
tv138 = 392
tv153 = 396
tv168 = 400
tv188 = 404
?dtor$2@?0??perf@mask@@YAHXZ@4HA PROC			; `mask::perf'::`1'::dtor$2
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Mask$12[rbp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$2@?0??perf@mask@@YAHXZ@4HA ENDP			; `mask::perf'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Count$ = 32
Timestamp1$ = 36
Mask$8 = 56
i$9 = 100
Timestamp2$ = 104
Mask$10 = 120
i$11 = 164
Timestamp3$ = 168
Mask$12 = 184
i$13 = 228
Timestamp4$ = 232
Mask$14 = 248
i$15 = 292
Timestamp5$ = 296
Mask$16 = 312
i$17 = 356
Timestamp6$ = 360
TimeMix$ = 364
TimeLoop$ = 368
TimeDefault$ = 372
TimeZero$ = 376
TimeHalf$ = 380
tv76 = 384
tv91 = 388
tv138 = 392
tv153 = 396
tv168 = 400
tv188 = 404
?dtor$3@?0??perf@mask@@YAHXZ@4HA PROC			; `mask::perf'::`1'::dtor$3
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Mask$14[rbp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$3@?0??perf@mask@@YAHXZ@4HA ENDP			; `mask::perf'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Count$ = 32
Timestamp1$ = 36
Mask$8 = 56
i$9 = 100
Timestamp2$ = 104
Mask$10 = 120
i$11 = 164
Timestamp3$ = 168
Mask$12 = 184
i$13 = 228
Timestamp4$ = 232
Mask$14 = 248
i$15 = 292
Timestamp5$ = 296
Mask$16 = 312
i$17 = 356
Timestamp6$ = 360
TimeMix$ = 364
TimeLoop$ = 368
TimeDefault$ = 372
TimeZero$ = 376
TimeHalf$ = 380
tv76 = 384
tv91 = 388
tv138 = 392
tv153 = 396
tv168 = 400
tv188 = 404
?dtor$4@?0??perf@mask@@YAHXZ@4HA PROC			; `mask::perf'::`1'::dtor$4
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Mask$16[rbp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$4@?0??perf@mask@@YAHXZ@4HA ENDP			; `mask::perf'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
;	COMDAT ?mask_loop@mask@@YAHH@Z
_TEXT	SEGMENT
Mask$ = 0
Bit$1 = 4
tv72 = 8
Bits$ = 32
?mask_loop@mask@@YAHH@Z PROC				; mask::mask_loop, COMDAT

; 42   : 	{

$LN6:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 43   : 		int Mask = 0;

	mov	DWORD PTR Mask$[rsp], 0

; 44   : 		for(int Bit = 0; Bit < Bits; ++Bit)

	mov	DWORD PTR Bit$1[rsp], 0
	jmp	SHORT $LN4@mask_loop
$LN2@mask_loop:
	mov	eax, DWORD PTR Bit$1[rsp]
	inc	eax
	mov	DWORD PTR Bit$1[rsp], eax
$LN4@mask_loop:
	mov	eax, DWORD PTR Bits$[rsp]
	cmp	DWORD PTR Bit$1[rsp], eax
	jge	SHORT $LN3@mask_loop

; 45   : 			Mask |= (static_cast<int>(1) << Bit);

	mov	eax, DWORD PTR Bit$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv72[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv72[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR Mask$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Mask$[rsp], eax
	jmp	SHORT $LN2@mask_loop
$LN3@mask_loop:

; 46   : 		return Mask;

	mov	eax, DWORD PTR Mask$[rsp]

; 47   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?mask_loop@mask@@YAHH@Z ENDP				; mask::mask_loop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
;	COMDAT ?mask_half@mask@@YAHH@Z
_TEXT	SEGMENT
Half$ = 0
Fill$ = 4
ShiftHaft$ = 8
Rest$ = 12
Reversed$ = 16
tv74 = 20
Bits$ = 48
?mask_half@mask@@YAHH@Z PROC				; mask::mask_half, COMDAT

; 29   : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 30   : 		// We do the shift in two steps because 1 << 32 on an int is undefined.
; 31   : 
; 32   : 		int const Half = Bits >> 1;

	mov	eax, DWORD PTR Bits$[rsp]
	sar	eax, 1
	mov	DWORD PTR Half$[rsp], eax

; 33   : 		int const Fill = ~0;

	mov	DWORD PTR Fill$[rsp], -1

; 34   : 		int const ShiftHaft = (Fill << Half);

	mov	eax, DWORD PTR Half$[rsp]
	mov	ecx, -1
	mov	DWORD PTR tv74[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv74[rsp]
	shl	eax, cl
	mov	DWORD PTR ShiftHaft$[rsp], eax

; 35   : 		int const Rest = Bits - Half;

	mov	eax, DWORD PTR Half$[rsp]
	mov	ecx, DWORD PTR Bits$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Rest$[rsp], eax

; 36   : 		int const Reversed = ShiftHaft << Rest;

	mov	eax, DWORD PTR Rest$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR ShiftHaft$[rsp]
	shl	eax, cl
	mov	DWORD PTR Reversed$[rsp], eax

; 37   : 
; 38   : 		return ~Reversed;

	mov	eax, DWORD PTR Reversed$[rsp]
	not	eax

; 39   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?mask_half@mask@@YAHH@Z ENDP				; mask::mask_half
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
;	COMDAT ?mask_mix@mask@@YAHH@Z
_TEXT	SEGMENT
tv68 = 0
tv71 = 4
Bits$ = 32
?mask_mix@mask@@YAHH@Z PROC				; mask::mask_mix, COMDAT

; 24   : 	{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 25   : 		return Bits >= sizeof(int) * 8 ? 0xffffffff : (static_cast<int>(1) << Bits) - static_cast<int>(1);

	movsxd	rax, DWORD PTR Bits$[rsp]
	cmp	rax, 32					; 00000020H
	jb	SHORT $LN3@mask_mix
	mov	DWORD PTR tv68[rsp], -1			; ffffffffH
	jmp	SHORT $LN4@mask_mix
$LN3@mask_mix:
	mov	eax, DWORD PTR Bits$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv71[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv71[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR tv68[rsp], eax
$LN4@mask_mix:
	mov	eax, DWORD PTR tv68[rsp]

; 26   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?mask_mix@mask@@YAHH@Z ENDP				; mask::mask_mix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_bitfield.cpp
;	COMDAT ?mask_zero@mask@@YAHH@Z
_TEXT	SEGMENT
tv68 = 0
Bits$ = 32
?mask_zero@mask@@YAHH@Z PROC				; mask::mask_zero, COMDAT

; 19   : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 20   : 		return ~((~0) << Bits);

	mov	eax, DWORD PTR Bits$[rsp]
	mov	ecx, -1
	mov	DWORD PTR tv68[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv68[rsp]
	shl	eax, cl
	not	eax

; 21   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?mask_zero@mask@@YAHH@Z ENDP				; mask::mask_zero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1297 :     _Container_proxy* _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ PROC ; std::_Basic_container_proxy_ptr12::_Release, COMDAT

; 1299 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1300 :         _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1301 :     }

	pop	rdi
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ENDP ; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1078 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1079 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1080 :         _Orphan_all_unlocked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1081 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1219 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1220 :     if (!_Myproxy) { // no proxy, already done

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@Orphan_all

; 1221 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1222 :     }
; 1223 : 
; 1224 :     // proxy allocated, drain it
; 1225 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1226 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1227 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1228 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1229 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1231 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1232 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1233 : #if _HAS_CXX20
; 1234 :     if (_STD is_constant_evaluated()) {
; 1235 :         _Orphan_all_unlocked_v3();
; 1236 :     } else
; 1237 : #endif // _HAS_CXX20
; 1238 :     {
; 1239 :         _Orphan_all_locked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1240 :     }
; 1241 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1242 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1048 : 
; 1049 :     _Container_base12(const _Container_base12&) = delete;
; 1050 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1051 : 
; 1052 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1053 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1054 : 
; 1055 :     template <class _Alloc>
; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1058 :         _Construct_in_place(*_New_proxy, this);
; 1059 :         _Myproxy            = _New_proxy;
; 1060 :         _New_proxy->_Mycont = this;
; 1061 :     }
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1065 :         // pre: no iterators refer to the existing proxy
; 1066 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1067 :         _Construct_in_place(*_New_proxy, this);
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1070 :     }
; 1071 : 
; 1072 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1040 : 
; 1041 :     const _Container_base12* _Mycont       = nullptr;
; 1042 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 154				; 0000009aH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 166  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 80   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 319  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@I$0A@@glm@@QEAA@II@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s1$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@II@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@I$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ??$bitfieldInterleave@G_K@detail@glm@@YA_KGGGG@Z
_TEXT	SEGMENT
REG1$ = 0
REG2$ = 8
REG3$ = 16
REG4$ = 24
x$ = 48
y$ = 56
z$ = 64
w$ = 72
??$bitfieldInterleave@G_K@detail@glm@@YA_KGGGG@Z PROC	; glm::detail::bitfieldInterleave<unsigned short,unsigned __int64>, COMDAT

; 195  : 	{

$LN3:
	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 32					; 00000020H

; 196  : 		glm::uint64 REG1(x);

	movzx	eax, WORD PTR x$[rsp]
	mov	QWORD PTR REG1$[rsp], rax

; 197  : 		glm::uint64 REG2(y);

	movzx	eax, WORD PTR y$[rsp]
	mov	QWORD PTR REG2$[rsp], rax

; 198  : 		glm::uint64 REG3(z);

	movzx	eax, WORD PTR z$[rsp]
	mov	QWORD PTR REG3$[rsp], rax

; 199  : 		glm::uint64 REG4(w);

	movzx	eax, WORD PTR w$[rsp]
	mov	QWORD PTR REG4$[rsp], rax

; 200  : 
; 201  : 		REG1 = ((REG1 << 24) | REG1) & glm::uint64(0x000000FF000000FFull);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 24
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 1095216660735			; 000000ff000000ffH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 202  : 		REG2 = ((REG2 << 24) | REG2) & glm::uint64(0x000000FF000000FFull);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 24
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 1095216660735			; 000000ff000000ffH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 203  : 		REG3 = ((REG3 << 24) | REG3) & glm::uint64(0x000000FF000000FFull);

	mov	rax, QWORD PTR REG3$[rsp]
	shl	rax, 24
	or	rax, QWORD PTR REG3$[rsp]
	mov	rcx, 1095216660735			; 000000ff000000ffH
	and	rax, rcx
	mov	QWORD PTR REG3$[rsp], rax

; 204  : 		REG4 = ((REG4 << 24) | REG4) & glm::uint64(0x000000FF000000FFull);

	mov	rax, QWORD PTR REG4$[rsp]
	shl	rax, 24
	or	rax, QWORD PTR REG4$[rsp]
	mov	rcx, 1095216660735			; 000000ff000000ffH
	and	rax, rcx
	mov	QWORD PTR REG4$[rsp], rax

; 205  : 
; 206  : 		REG1 = ((REG1 << 12) | REG1) & glm::uint64(0x000F000F000F000Full);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 12
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 4222189076152335			; 000f000f000f000fH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 207  : 		REG2 = ((REG2 << 12) | REG2) & glm::uint64(0x000F000F000F000Full);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 12
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 4222189076152335			; 000f000f000f000fH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 208  : 		REG3 = ((REG3 << 12) | REG3) & glm::uint64(0x000F000F000F000Full);

	mov	rax, QWORD PTR REG3$[rsp]
	shl	rax, 12
	or	rax, QWORD PTR REG3$[rsp]
	mov	rcx, 4222189076152335			; 000f000f000f000fH
	and	rax, rcx
	mov	QWORD PTR REG3$[rsp], rax

; 209  : 		REG4 = ((REG4 << 12) | REG4) & glm::uint64(0x000F000F000F000Full);

	mov	rax, QWORD PTR REG4$[rsp]
	shl	rax, 12
	or	rax, QWORD PTR REG4$[rsp]
	mov	rcx, 4222189076152335			; 000f000f000f000fH
	and	rax, rcx
	mov	QWORD PTR REG4$[rsp], rax

; 210  : 
; 211  : 		REG1 = ((REG1 <<  6) | REG1) & glm::uint64(0x0303030303030303ull);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 6
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 217020518514230019			; 0303030303030303H
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 212  : 		REG2 = ((REG2 <<  6) | REG2) & glm::uint64(0x0303030303030303ull);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 6
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 217020518514230019			; 0303030303030303H
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 213  : 		REG3 = ((REG3 <<  6) | REG3) & glm::uint64(0x0303030303030303ull);

	mov	rax, QWORD PTR REG3$[rsp]
	shl	rax, 6
	or	rax, QWORD PTR REG3$[rsp]
	mov	rcx, 217020518514230019			; 0303030303030303H
	and	rax, rcx
	mov	QWORD PTR REG3$[rsp], rax

; 214  : 		REG4 = ((REG4 <<  6) | REG4) & glm::uint64(0x0303030303030303ull);

	mov	rax, QWORD PTR REG4$[rsp]
	shl	rax, 6
	or	rax, QWORD PTR REG4$[rsp]
	mov	rcx, 217020518514230019			; 0303030303030303H
	and	rax, rcx
	mov	QWORD PTR REG4$[rsp], rax

; 215  : 
; 216  : 		REG1 = ((REG1 <<  3) | REG1) & glm::uint64(0x1111111111111111ull);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 3
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 1229782938247303441		; 1111111111111111H
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 217  : 		REG2 = ((REG2 <<  3) | REG2) & glm::uint64(0x1111111111111111ull);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 3
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 1229782938247303441		; 1111111111111111H
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 218  : 		REG3 = ((REG3 <<  3) | REG3) & glm::uint64(0x1111111111111111ull);

	mov	rax, QWORD PTR REG3$[rsp]
	shl	rax, 3
	or	rax, QWORD PTR REG3$[rsp]
	mov	rcx, 1229782938247303441		; 1111111111111111H
	and	rax, rcx
	mov	QWORD PTR REG3$[rsp], rax

; 219  : 		REG4 = ((REG4 <<  3) | REG4) & glm::uint64(0x1111111111111111ull);

	mov	rax, QWORD PTR REG4$[rsp]
	shl	rax, 3
	or	rax, QWORD PTR REG4$[rsp]
	mov	rcx, 1229782938247303441		; 1111111111111111H
	and	rax, rcx
	mov	QWORD PTR REG4$[rsp], rax

; 220  : 
; 221  : 		return REG1 | (REG2 << 1) | (REG3 << 2) | (REG4 << 3);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 1
	mov	rcx, QWORD PTR REG1$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR REG3$[rsp]
	shl	rcx, 2
	or	rax, rcx
	mov	rcx, QWORD PTR REG4$[rsp]
	shl	rcx, 3
	or	rax, rcx

; 222  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$bitfieldInterleave@G_K@detail@glm@@YA_KGGGG@Z ENDP	; glm::detail::bitfieldInterleave<unsigned short,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ??$bitfieldInterleave@I_K@detail@glm@@YA_KIII@Z
_TEXT	SEGMENT
REG1$ = 0
REG2$ = 8
REG3$ = 16
x$ = 48
y$ = 56
z$ = 64
??$bitfieldInterleave@I_K@detail@glm@@YA_KIII@Z PROC	; glm::detail::bitfieldInterleave<unsigned int,unsigned __int64>, COMDAT

; 139  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  : 		glm::uint64 REG1(x);

	mov	eax, DWORD PTR x$[rsp]
	mov	QWORD PTR REG1$[rsp], rax

; 141  : 		glm::uint64 REG2(y);

	mov	eax, DWORD PTR y$[rsp]
	mov	QWORD PTR REG2$[rsp], rax

; 142  : 		glm::uint64 REG3(z);

	mov	eax, DWORD PTR z$[rsp]
	mov	QWORD PTR REG3$[rsp], rax

; 143  : 
; 144  : 		REG1 = ((REG1 << 32) | REG1) & glm::uint64(0xFFFF00000000FFFFull);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 32					; 00000020H
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, -281474976645121			; ffff00000000ffffH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 145  : 		REG2 = ((REG2 << 32) | REG2) & glm::uint64(0xFFFF00000000FFFFull);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 32					; 00000020H
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, -281474976645121			; ffff00000000ffffH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 146  : 		REG3 = ((REG3 << 32) | REG3) & glm::uint64(0xFFFF00000000FFFFull);

	mov	rax, QWORD PTR REG3$[rsp]
	shl	rax, 32					; 00000020H
	or	rax, QWORD PTR REG3$[rsp]
	mov	rcx, -281474976645121			; ffff00000000ffffH
	and	rax, rcx
	mov	QWORD PTR REG3$[rsp], rax

; 147  : 
; 148  : 		REG1 = ((REG1 << 16) | REG1) & glm::uint64(0x00FF0000FF0000FFull);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 16
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 71776123339407615			; 00ff0000ff0000ffH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 149  : 		REG2 = ((REG2 << 16) | REG2) & glm::uint64(0x00FF0000FF0000FFull);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 16
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 71776123339407615			; 00ff0000ff0000ffH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 150  : 		REG3 = ((REG3 << 16) | REG3) & glm::uint64(0x00FF0000FF0000FFull);

	mov	rax, QWORD PTR REG3$[rsp]
	shl	rax, 16
	or	rax, QWORD PTR REG3$[rsp]
	mov	rcx, 71776123339407615			; 00ff0000ff0000ffH
	and	rax, rcx
	mov	QWORD PTR REG3$[rsp], rax

; 151  : 
; 152  : 		REG1 = ((REG1 <<  8) | REG1) & glm::uint64(0xF00F00F00F00F00Full);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 8
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, -1148698348912316401		; f00f00f00f00f00fH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 153  : 		REG2 = ((REG2 <<  8) | REG2) & glm::uint64(0xF00F00F00F00F00Full);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 8
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, -1148698348912316401		; f00f00f00f00f00fH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 154  : 		REG3 = ((REG3 <<  8) | REG3) & glm::uint64(0xF00F00F00F00F00Full);

	mov	rax, QWORD PTR REG3$[rsp]
	shl	rax, 8
	or	rax, QWORD PTR REG3$[rsp]
	mov	rcx, -1148698348912316401		; f00f00f00f00f00fH
	and	rax, rcx
	mov	QWORD PTR REG3$[rsp], rax

; 155  : 
; 156  : 		REG1 = ((REG1 <<  4) | REG1) & glm::uint64(0x30C30C30C30C30C3ull);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 4
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 3513665537849438403		; 30c30c30c30c30c3H
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 157  : 		REG2 = ((REG2 <<  4) | REG2) & glm::uint64(0x30C30C30C30C30C3ull);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 4
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 3513665537849438403		; 30c30c30c30c30c3H
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 158  : 		REG3 = ((REG3 <<  4) | REG3) & glm::uint64(0x30C30C30C30C30C3ull);

	mov	rax, QWORD PTR REG3$[rsp]
	shl	rax, 4
	or	rax, QWORD PTR REG3$[rsp]
	mov	rcx, 3513665537849438403		; 30c30c30c30c30c3H
	and	rax, rcx
	mov	QWORD PTR REG3$[rsp], rax

; 159  : 
; 160  : 		REG1 = ((REG1 <<  2) | REG1) & glm::uint64(0x9249249249249249ull);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 2
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, -7905747460161236407		; 9249249249249249H
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 161  : 		REG2 = ((REG2 <<  2) | REG2) & glm::uint64(0x9249249249249249ull);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 2
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, -7905747460161236407		; 9249249249249249H
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 162  : 		REG3 = ((REG3 <<  2) | REG3) & glm::uint64(0x9249249249249249ull);

	mov	rax, QWORD PTR REG3$[rsp]
	shl	rax, 2
	or	rax, QWORD PTR REG3$[rsp]
	mov	rcx, -7905747460161236407		; 9249249249249249H
	and	rax, rcx
	mov	QWORD PTR REG3$[rsp], rax

; 163  : 
; 164  : 		return REG1 | (REG2 << 1) | (REG3 << 2);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 1
	mov	rcx, QWORD PTR REG1$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR REG3$[rsp]
	shl	rcx, 2
	or	rax, rcx

; 165  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$bitfieldInterleave@I_K@detail@glm@@YA_KIII@Z ENDP	; glm::detail::bitfieldInterleave<unsigned int,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ??$bitfieldInterleave@I_K@detail@glm@@YA_KII@Z
_TEXT	SEGMENT
REG1$ = 0
REG2$ = 8
x$ = 32
y$ = 40
??$bitfieldInterleave@I_K@detail@glm@@YA_KII@Z PROC	; glm::detail::bitfieldInterleave<unsigned int,unsigned __int64>, COMDAT

; 59   : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 60   : 		glm::uint64 REG1(x);

	mov	eax, DWORD PTR x$[rsp]
	mov	QWORD PTR REG1$[rsp], rax

; 61   : 		glm::uint64 REG2(y);

	mov	eax, DWORD PTR y$[rsp]
	mov	QWORD PTR REG2$[rsp], rax

; 62   : 
; 63   : 		REG1 = ((REG1 << 16) | REG1) & glm::uint64(0x0000FFFF0000FFFFull);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 16
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 281470681808895			; 0000ffff0000ffffH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 64   : 		REG2 = ((REG2 << 16) | REG2) & glm::uint64(0x0000FFFF0000FFFFull);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 16
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 281470681808895			; 0000ffff0000ffffH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 65   : 
; 66   : 		REG1 = ((REG1 <<  8) | REG1) & glm::uint64(0x00FF00FF00FF00FFull);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 8
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 71777214294589695			; 00ff00ff00ff00ffH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 67   : 		REG2 = ((REG2 <<  8) | REG2) & glm::uint64(0x00FF00FF00FF00FFull);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 8
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 71777214294589695			; 00ff00ff00ff00ffH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 68   : 
; 69   : 		REG1 = ((REG1 <<  4) | REG1) & glm::uint64(0x0F0F0F0F0F0F0F0Full);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 4
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 1085102592571150095		; 0f0f0f0f0f0f0f0fH
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 70   : 		REG2 = ((REG2 <<  4) | REG2) & glm::uint64(0x0F0F0F0F0F0F0F0Full);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 4
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 1085102592571150095		; 0f0f0f0f0f0f0f0fH
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 71   : 
; 72   : 		REG1 = ((REG1 <<  2) | REG1) & glm::uint64(0x3333333333333333ull);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 2
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 3689348814741910323		; 3333333333333333H
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 73   : 		REG2 = ((REG2 <<  2) | REG2) & glm::uint64(0x3333333333333333ull);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 2
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 3689348814741910323		; 3333333333333333H
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 74   : 
; 75   : 		REG1 = ((REG1 <<  1) | REG1) & glm::uint64(0x5555555555555555ull);

	mov	rax, QWORD PTR REG1$[rsp]
	shl	rax, 1
	or	rax, QWORD PTR REG1$[rsp]
	mov	rcx, 6148914691236517205		; 5555555555555555H
	and	rax, rcx
	mov	QWORD PTR REG1$[rsp], rax

; 76   : 		REG2 = ((REG2 <<  1) | REG2) & glm::uint64(0x5555555555555555ull);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 1
	or	rax, QWORD PTR REG2$[rsp]
	mov	rcx, 6148914691236517205		; 5555555555555555H
	and	rax, rcx
	mov	QWORD PTR REG2$[rsp], rax

; 77   : 
; 78   : 		return REG1 | (REG2 << 1);

	mov	rax, QWORD PTR REG2$[rsp]
	shl	rax, 1
	mov	rcx, QWORD PTR REG1$[rsp]
	or	rcx, rax
	mov	rax, rcx

; 79   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$bitfieldInterleave@I_K@detail@glm@@YA_KII@Z ENDP	; glm::detail::bitfieldInterleave<unsigned int,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ??$bitfieldInterleave@GI@detail@glm@@YAIGG@Z
_TEXT	SEGMENT
REG1$ = 0
REG2$ = 4
x$ = 32
y$ = 40
??$bitfieldInterleave@GI@detail@glm@@YAIGG@Z PROC	; glm::detail::bitfieldInterleave<unsigned short,unsigned int>, COMDAT

; 38   : 	{

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 16

; 39   : 		glm::uint32 REG1(x);

	movzx	eax, WORD PTR x$[rsp]
	mov	DWORD PTR REG1$[rsp], eax

; 40   : 		glm::uint32 REG2(y);

	movzx	eax, WORD PTR y$[rsp]
	mov	DWORD PTR REG2$[rsp], eax

; 41   : 
; 42   : 		REG1 = ((REG1 <<  8) | REG1) & glm::uint32(0x00FF00FF);

	mov	eax, DWORD PTR REG1$[rsp]
	shl	eax, 8
	or	eax, DWORD PTR REG1$[rsp]
	and	eax, 16711935				; 00ff00ffH
	mov	DWORD PTR REG1$[rsp], eax

; 43   : 		REG2 = ((REG2 <<  8) | REG2) & glm::uint32(0x00FF00FF);

	mov	eax, DWORD PTR REG2$[rsp]
	shl	eax, 8
	or	eax, DWORD PTR REG2$[rsp]
	and	eax, 16711935				; 00ff00ffH
	mov	DWORD PTR REG2$[rsp], eax

; 44   : 
; 45   : 		REG1 = ((REG1 <<  4) | REG1) & glm::uint32(0x0F0F0F0F);

	mov	eax, DWORD PTR REG1$[rsp]
	shl	eax, 4
	or	eax, DWORD PTR REG1$[rsp]
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR REG1$[rsp], eax

; 46   : 		REG2 = ((REG2 <<  4) | REG2) & glm::uint32(0x0F0F0F0F);

	mov	eax, DWORD PTR REG2$[rsp]
	shl	eax, 4
	or	eax, DWORD PTR REG2$[rsp]
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR REG2$[rsp], eax

; 47   : 
; 48   : 		REG1 = ((REG1 <<  2) | REG1) & glm::uint32(0x33333333);

	mov	eax, DWORD PTR REG1$[rsp]
	shl	eax, 2
	or	eax, DWORD PTR REG1$[rsp]
	and	eax, 858993459				; 33333333H
	mov	DWORD PTR REG1$[rsp], eax

; 49   : 		REG2 = ((REG2 <<  2) | REG2) & glm::uint32(0x33333333);

	mov	eax, DWORD PTR REG2$[rsp]
	shl	eax, 2
	or	eax, DWORD PTR REG2$[rsp]
	and	eax, 858993459				; 33333333H
	mov	DWORD PTR REG2$[rsp], eax

; 50   : 
; 51   : 		REG1 = ((REG1 <<  1) | REG1) & glm::uint32(0x55555555);

	mov	eax, DWORD PTR REG1$[rsp]
	shl	eax, 1
	or	eax, DWORD PTR REG1$[rsp]
	and	eax, 1431655765				; 55555555H
	mov	DWORD PTR REG1$[rsp], eax

; 52   : 		REG2 = ((REG2 <<  1) | REG2) & glm::uint32(0x55555555);

	mov	eax, DWORD PTR REG2$[rsp]
	shl	eax, 1
	or	eax, DWORD PTR REG2$[rsp]
	and	eax, 1431655765				; 55555555H
	mov	DWORD PTR REG2$[rsp], eax

; 53   : 
; 54   : 		return REG1 | (REG2 << 1);

	mov	eax, DWORD PTR REG2$[rsp]
	shl	eax, 1
	mov	ecx, DWORD PTR REG1$[rsp]
	or	ecx, eax
	mov	eax, ecx

; 55   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$bitfieldInterleave@GI@detail@glm@@YAIGG@Z ENDP	; glm::detail::bitfieldInterleave<unsigned short,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ??$bitfieldInterleave@EG@detail@glm@@YAGEE@Z
_TEXT	SEGMENT
REG1$ = 0
REG2$ = 4
x$ = 32
y$ = 40
??$bitfieldInterleave@EG@detail@glm@@YAGEE@Z PROC	; glm::detail::bitfieldInterleave<unsigned char,unsigned short>, COMDAT

; 20   : 	{

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 16

; 21   : 		glm::uint16 REG1(x);

	movzx	eax, BYTE PTR x$[rsp]
	mov	WORD PTR REG1$[rsp], ax

; 22   : 		glm::uint16 REG2(y);

	movzx	eax, BYTE PTR y$[rsp]
	mov	WORD PTR REG2$[rsp], ax

; 23   : 
; 24   : 		REG1 = ((REG1 <<  4) | REG1) & glm::uint16(0x0F0F);

	movzx	eax, WORD PTR REG1$[rsp]
	shl	eax, 4
	movzx	ecx, WORD PTR REG1$[rsp]
	or	eax, ecx
	and	eax, 3855				; 00000f0fH
	mov	WORD PTR REG1$[rsp], ax

; 25   : 		REG2 = ((REG2 <<  4) | REG2) & glm::uint16(0x0F0F);

	movzx	eax, WORD PTR REG2$[rsp]
	shl	eax, 4
	movzx	ecx, WORD PTR REG2$[rsp]
	or	eax, ecx
	and	eax, 3855				; 00000f0fH
	mov	WORD PTR REG2$[rsp], ax

; 26   : 
; 27   : 		REG1 = ((REG1 <<  2) | REG1) & glm::uint16(0x3333);

	movzx	eax, WORD PTR REG1$[rsp]
	shl	eax, 2
	movzx	ecx, WORD PTR REG1$[rsp]
	or	eax, ecx
	and	eax, 13107				; 00003333H
	mov	WORD PTR REG1$[rsp], ax

; 28   : 		REG2 = ((REG2 <<  2) | REG2) & glm::uint16(0x3333);

	movzx	eax, WORD PTR REG2$[rsp]
	shl	eax, 2
	movzx	ecx, WORD PTR REG2$[rsp]
	or	eax, ecx
	and	eax, 13107				; 00003333H
	mov	WORD PTR REG2$[rsp], ax

; 29   : 
; 30   : 		REG1 = ((REG1 <<  1) | REG1) & glm::uint16(0x5555);

	movzx	eax, WORD PTR REG1$[rsp]
	shl	eax, 1
	movzx	ecx, WORD PTR REG1$[rsp]
	or	eax, ecx
	and	eax, 21845				; 00005555H
	mov	WORD PTR REG1$[rsp], ax

; 31   : 		REG2 = ((REG2 <<  1) | REG2) & glm::uint16(0x5555);

	movzx	eax, WORD PTR REG2$[rsp]
	shl	eax, 1
	movzx	ecx, WORD PTR REG2$[rsp]
	or	eax, ecx
	and	eax, 21845				; 00005555H
	mov	WORD PTR REG2$[rsp], ax

; 32   : 
; 33   : 		return REG1 | (REG2 << 1);

	movzx	eax, WORD PTR REG1$[rsp]
	movzx	ecx, WORD PTR REG2$[rsp]
	shl	ecx, 1
	or	eax, ecx

; 34   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$bitfieldInterleave@EG@detail@glm@@YAGEE@Z ENDP	; glm::detail::bitfieldInterleave<unsigned char,unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\simd\integer.h
;	COMDAT ?glm_i128_interleave@@YA?AT__m128i@@T1@@Z
_TEXT	SEGMENT
Mask4$ = 16
$T1 = 32
Mask3$ = 48
$T2 = 64
Mask2$ = 80
$T3 = 96
Mask1$ = 112
$T4 = 128
Mask0$ = 144
$T5 = 160
Reg1$ = 176
Reg2$ = 192
$T6 = 208
$T7 = 224
$T8 = 240
$T9 = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
$T18 = 400
$T19 = 416
$T20 = 432
$T21 = 448
$T22 = 464
$T23 = 480
x$ = 512
?glm_i128_interleave@@YA?AT__m128i@@T1@@Z PROC		; glm_i128_interleave, COMDAT

; 9    : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 496				; 000001f0H

; 10   : 	glm_uvec4 const Mask4 = _mm_set1_epi32(0x0000FFFF);

	movdqa	xmm0, XMMWORD PTR __xmm@0000ffff0000ffff0000ffff0000ffff
	movdqa	XMMWORD PTR $T1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T1[rsp]
	movdqa	XMMWORD PTR Mask4$[rsp], xmm0

; 11   : 	glm_uvec4 const Mask3 = _mm_set1_epi32(0x00FF00FF);

	movdqa	xmm0, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
	movdqa	XMMWORD PTR $T2[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T2[rsp]
	movdqa	XMMWORD PTR Mask3$[rsp], xmm0

; 12   : 	glm_uvec4 const Mask2 = _mm_set1_epi32(0x0F0F0F0F);

	movdqa	xmm0, XMMWORD PTR __xmm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
	movdqa	XMMWORD PTR $T3[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T3[rsp]
	movdqa	XMMWORD PTR Mask2$[rsp], xmm0

; 13   : 	glm_uvec4 const Mask1 = _mm_set1_epi32(0x33333333);

	movdqa	xmm0, XMMWORD PTR __xmm@33333333333333333333333333333333
	movdqa	XMMWORD PTR $T4[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T4[rsp]
	movdqa	XMMWORD PTR Mask1$[rsp], xmm0

; 14   : 	glm_uvec4 const Mask0 = _mm_set1_epi32(0x55555555);

	movdqa	xmm0, XMMWORD PTR __xmm@55555555555555555555555555555555
	movdqa	XMMWORD PTR $T5[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T5[rsp]
	movdqa	XMMWORD PTR Mask0$[rsp], xmm0

; 15   : 
; 16   : 	glm_uvec4 Reg1;
; 17   : 	glm_uvec4 Reg2;
; 18   : 
; 19   : 	// REG1 = x;
; 20   : 	// REG2 = y;
; 21   : 	//Reg1 = _mm_unpacklo_epi64(x, y);
; 22   : 	Reg1 = x;

	mov	rax, QWORD PTR x$[rsp]
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqu	XMMWORD PTR Reg1$[rsp], xmm0

; 23   : 
; 24   : 	//REG1 = ((REG1 << 16) | REG1) & glm::uint64(0x0000FFFF0000FFFF);
; 25   : 	//REG2 = ((REG2 << 16) | REG2) & glm::uint64(0x0000FFFF0000FFFF);
; 26   : 	Reg2 = _mm_slli_si128(Reg1, 2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslldq	xmm0, 2
	movdqa	XMMWORD PTR $T6[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T6[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 27   : 	Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T7[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T7[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 28   : 	Reg1 = _mm_and_si128(Reg1, Mask4);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask4$[rsp]
	movdqa	XMMWORD PTR $T8[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T8[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 29   : 
; 30   : 	//REG1 = ((REG1 <<  8) | REG1) & glm::uint64(0x00FF00FF00FF00FF);
; 31   : 	//REG2 = ((REG2 <<  8) | REG2) & glm::uint64(0x00FF00FF00FF00FF);
; 32   : 	Reg2 = _mm_slli_si128(Reg1, 1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslldq	xmm0, 1
	movdqa	XMMWORD PTR $T9[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T9[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 33   : 	Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T10[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T10[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 34   : 	Reg1 = _mm_and_si128(Reg1, Mask3);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask3$[rsp]
	movdqa	XMMWORD PTR $T11[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T11[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 35   : 
; 36   : 	//REG1 = ((REG1 <<  4) | REG1) & glm::uint64(0x0F0F0F0F0F0F0F0F);
; 37   : 	//REG2 = ((REG2 <<  4) | REG2) & glm::uint64(0x0F0F0F0F0F0F0F0F);
; 38   : 	Reg2 = _mm_slli_epi32(Reg1, 4);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 4
	movdqa	XMMWORD PTR $T12[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T12[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 39   : 	Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T13[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T13[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 40   : 	Reg1 = _mm_and_si128(Reg1, Mask2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask2$[rsp]
	movdqa	XMMWORD PTR $T14[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T14[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 41   : 
; 42   : 	//REG1 = ((REG1 <<  2) | REG1) & glm::uint64(0x3333333333333333);
; 43   : 	//REG2 = ((REG2 <<  2) | REG2) & glm::uint64(0x3333333333333333);
; 44   : 	Reg2 = _mm_slli_epi32(Reg1, 2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 2
	movdqa	XMMWORD PTR $T15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T15[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 45   : 	Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T16[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 46   : 	Reg1 = _mm_and_si128(Reg1, Mask1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask1$[rsp]
	movdqa	XMMWORD PTR $T17[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T17[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 47   : 
; 48   : 	//REG1 = ((REG1 <<  1) | REG1) & glm::uint64(0x5555555555555555);
; 49   : 	//REG2 = ((REG2 <<  1) | REG2) & glm::uint64(0x5555555555555555);
; 50   : 	Reg2 = _mm_slli_epi32(Reg1, 1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 1
	movdqa	XMMWORD PTR $T18[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T18[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 51   : 	Reg1 = _mm_or_si128(Reg2, Reg1);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	por	xmm0, XMMWORD PTR Reg1$[rsp]
	movdqa	XMMWORD PTR $T19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T19[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 52   : 	Reg1 = _mm_and_si128(Reg1, Mask0);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pand	xmm0, XMMWORD PTR Mask0$[rsp]
	movdqa	XMMWORD PTR $T20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T20[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 53   : 
; 54   : 	//return REG1 | (REG2 << 1);
; 55   : 	Reg2 = _mm_slli_epi32(Reg1, 1);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	pslld	xmm0, 1
	movdqa	XMMWORD PTR $T21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T21[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 56   : 	Reg2 = _mm_srli_si128(Reg2, 8);

	movdqa	xmm0, XMMWORD PTR Reg2$[rsp]
	psrldq	xmm0, 8
	movdqa	XMMWORD PTR $T22[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T22[rsp]
	movdqa	XMMWORD PTR Reg2$[rsp], xmm0

; 57   : 	Reg1 = _mm_or_si128(Reg1, Reg2);

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]
	por	xmm0, XMMWORD PTR Reg2$[rsp]
	movdqa	XMMWORD PTR $T23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T23[rsp]
	movdqa	XMMWORD PTR Reg1$[rsp], xmm0

; 58   : 	
; 59   : 	return Reg1;

	movdqa	xmm0, XMMWORD PTR Reg1$[rsp]

; 60   : }

	add	rsp, 496				; 000001f0H
	pop	rdi
	ret	0
?glm_i128_interleave@@YA?AT__m128i@@T1@@Z ENDP		; glm_i128_interleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ?bitfieldInterleave@glm@@YA_KGGGG@Z
_TEXT	SEGMENT
x$ = 48
y$ = 56
z$ = 64
w$ = 72
?bitfieldInterleave@glm@@YA_KGGGG@Z PROC		; glm::bitfieldInterleave, COMDAT

; 512  : 	{

$LN3:
	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 32					; 00000020H

; 513  : 		return detail::bitfieldInterleave<uint16, uint64>(x, y, z, w);

	movzx	r9d, WORD PTR w$[rsp]
	movzx	r8d, WORD PTR z$[rsp]
	movzx	edx, WORD PTR y$[rsp]
	movzx	ecx, WORD PTR x$[rsp]
	call	??$bitfieldInterleave@G_K@detail@glm@@YA_KGGGG@Z ; glm::detail::bitfieldInterleave<unsigned short,unsigned __int64>

; 514  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?bitfieldInterleave@glm@@YA_KGGGG@Z ENDP		; glm::bitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ?bitfieldInterleave@glm@@YA_KIII@Z
_TEXT	SEGMENT
x$ = 48
y$ = 56
z$ = 64
?bitfieldInterleave@glm@@YA_KIII@Z PROC			; glm::bitfieldInterleave, COMDAT

; 456  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 457  : 		return detail::bitfieldInterleave<uint32, uint64>(x, y, z);

	mov	r8d, DWORD PTR z$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	??$bitfieldInterleave@I_K@detail@glm@@YA_KIII@Z ; glm::detail::bitfieldInterleave<unsigned int,unsigned __int64>

; 458  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?bitfieldInterleave@glm@@YA_KIII@Z ENDP			; glm::bitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ?bitfieldInterleave@glm@@YA_KGGG@Z
_TEXT	SEGMENT
tv69 = 32
x$ = 64
y$ = 72
z$ = 80
?bitfieldInterleave@glm@@YA_KGGG@Z PROC			; glm::bitfieldInterleave, COMDAT

; 429  : 	{

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 48					; 00000030H

; 430  : 		return detail::bitfieldInterleave<uint32, uint64>(x, y, z);

	movzx	eax, WORD PTR z$[rsp]
	movzx	ecx, WORD PTR y$[rsp]
	movzx	edx, WORD PTR x$[rsp]
	mov	DWORD PTR tv69[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, eax
	call	??$bitfieldInterleave@I_K@detail@glm@@YA_KIII@Z ; glm::detail::bitfieldInterleave<unsigned int,unsigned __int64>

; 431  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?bitfieldInterleave@glm@@YA_KGGG@Z ENDP			; glm::bitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ?bitfieldInterleave@glm@@YA_KII@Z
_TEXT	SEGMENT
x$ = 48
y$ = 56
?bitfieldInterleave@glm@@YA_KII@Z PROC			; glm::bitfieldInterleave, COMDAT

; 375  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 376  : 		return detail::bitfieldInterleave<uint32, uint64>(x, y);

	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	??$bitfieldInterleave@I_K@detail@glm@@YA_KII@Z ; glm::detail::bitfieldInterleave<unsigned int,unsigned __int64>

; 377  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?bitfieldInterleave@glm@@YA_KII@Z ENDP			; glm::bitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ?bitfieldInterleave@glm@@YA_JHH@Z
_TEXT	SEGMENT
sign_x$ = 36
sign_y$ = 68
result$ = 104
x$ = 144
y$ = 152
?bitfieldInterleave@glm@@YA_JHH@Z PROC			; glm::bitfieldInterleave, COMDAT

; 354  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+144]

; 355  : 		union sign32
; 356  : 		{
; 357  : 			int32 i;
; 358  : 			uint32 u;
; 359  : 		} sign_x, sign_y;
; 360  : 
; 361  : 		union sign64
; 362  : 		{
; 363  : 			int64 i;
; 364  : 			uint64 u;
; 365  : 		} result;
; 366  : 
; 367  : 		sign_x.i = x;

	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR sign_x$[rsp], eax

; 368  : 		sign_y.i = y;

	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR sign_y$[rsp], eax

; 369  : 		result.u = bitfieldInterleave(sign_x.u, sign_y.u);

	mov	edx, DWORD PTR sign_y$[rsp]
	mov	ecx, DWORD PTR sign_x$[rsp]
	call	?bitfieldInterleave@glm@@YA_KII@Z	; glm::bitfieldInterleave
	mov	QWORD PTR result$[rsp], rax

; 370  : 
; 371  : 		return result.i;

	mov	rax, QWORD PTR result$[rsp]

; 372  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?bitfieldInterleave@glm@@YA_JHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?bitfieldInterleave@glm@@YA_JHH@Z ENDP			; glm::bitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ?bitfieldInterleave@glm@@YAIGG@Z
_TEXT	SEGMENT
x$ = 48
y$ = 56
?bitfieldInterleave@glm@@YAIGG@Z PROC			; glm::bitfieldInterleave, COMDAT

; 349  : 	{

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 32					; 00000020H

; 350  : 		return detail::bitfieldInterleave<uint16, uint32>(x, y);

	movzx	edx, WORD PTR y$[rsp]
	movzx	ecx, WORD PTR x$[rsp]
	call	??$bitfieldInterleave@GI@detail@glm@@YAIGG@Z ; glm::detail::bitfieldInterleave<unsigned short,unsigned int>

; 351  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?bitfieldInterleave@glm@@YAIGG@Z ENDP			; glm::bitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ?bitfieldInterleave@glm@@YAHFF@Z
_TEXT	SEGMENT
sign_x$ = 36
sign_y$ = 68
result$ = 100
x$ = 144
y$ = 152
?bitfieldInterleave@glm@@YAHFF@Z PROC			; glm::bitfieldInterleave, COMDAT

; 328  : 	{

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+144]

; 329  : 		union sign16
; 330  : 		{
; 331  : 			int16 i;
; 332  : 			uint16 u;
; 333  : 		} sign_x, sign_y;
; 334  : 
; 335  : 		union sign32
; 336  : 		{
; 337  : 			int32 i;
; 338  : 			uint32 u;
; 339  : 		} result;
; 340  : 
; 341  : 		sign_x.i = x;

	movzx	eax, WORD PTR x$[rsp]
	mov	WORD PTR sign_x$[rsp], ax

; 342  : 		sign_y.i = y;

	movzx	eax, WORD PTR y$[rsp]
	mov	WORD PTR sign_y$[rsp], ax

; 343  : 		result.u = bitfieldInterleave(sign_x.u, sign_y.u);

	movzx	edx, WORD PTR sign_y$[rsp]
	movzx	ecx, WORD PTR sign_x$[rsp]
	call	?bitfieldInterleave@glm@@YAIGG@Z	; glm::bitfieldInterleave
	mov	DWORD PTR result$[rsp], eax

; 344  : 
; 345  : 		return result.i;

	mov	eax, DWORD PTR result$[rsp]

; 346  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?bitfieldInterleave@glm@@YAHFF@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?bitfieldInterleave@glm@@YAHFF@Z ENDP			; glm::bitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ?bitfieldInterleave@glm@@YAGEE@Z
_TEXT	SEGMENT
x$ = 48
y$ = 56
?bitfieldInterleave@glm@@YAGEE@Z PROC			; glm::bitfieldInterleave, COMDAT

; 323  : 	{

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 32					; 00000020H

; 324  : 		return detail::bitfieldInterleave<uint8, uint16>(x, y);

	movzx	edx, BYTE PTR y$[rsp]
	movzx	ecx, BYTE PTR x$[rsp]
	call	??$bitfieldInterleave@EG@detail@glm@@YAGEE@Z ; glm::detail::bitfieldInterleave<unsigned char,unsigned short>

; 325  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?bitfieldInterleave@glm@@YAGEE@Z ENDP			; glm::bitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\bitfield.inl
;	COMDAT ?bitfieldInterleave@glm@@YAFCC@Z
_TEXT	SEGMENT
sign_x$ = 36
sign_y$ = 68
result$ = 100
x$ = 144
y$ = 152
?bitfieldInterleave@glm@@YAFCC@Z PROC			; glm::bitfieldInterleave, COMDAT

; 302  : 	{

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+144]

; 303  : 		union sign8
; 304  : 		{
; 305  : 			int8 i;
; 306  : 			uint8 u;
; 307  : 		} sign_x, sign_y;
; 308  : 
; 309  : 		union sign16
; 310  : 		{
; 311  : 			int16 i;
; 312  : 			uint16 u;
; 313  : 		} result;
; 314  : 
; 315  : 		sign_x.i = x;

	movzx	eax, BYTE PTR x$[rsp]
	mov	BYTE PTR sign_x$[rsp], al

; 316  : 		sign_y.i = y;

	movzx	eax, BYTE PTR y$[rsp]
	mov	BYTE PTR sign_y$[rsp], al

; 317  : 		result.u = bitfieldInterleave(sign_x.u, sign_y.u);

	movzx	edx, BYTE PTR sign_y$[rsp]
	movzx	ecx, BYTE PTR sign_x$[rsp]
	call	?bitfieldInterleave@glm@@YAGEE@Z	; glm::bitfieldInterleave
	mov	WORD PTR result$[rsp], ax

; 318  : 
; 319  : 		return result.i;

	movzx	eax, WORD PTR result$[rsp]

; 320  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?bitfieldInterleave@glm@@YAFCC@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?bitfieldInterleave@glm@@YAFCC@Z ENDP			; glm::bitfieldInterleave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
