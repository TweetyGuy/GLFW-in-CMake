; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?nextafter@@YAMMM@Z				; nextafter
PUBLIC	?min@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::min
PUBLIC	?max@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::max
PUBLIC	?min@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::min
PUBLIC	?max@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::max
PUBLIC	??$next_float@M@glm@@YAMAEBM@Z			; glm::next_float<float>
PUBLIC	??$next_float@N@glm@@YANAEBN@Z			; glm::next_float<double>
PUBLIC	?prev_float@glm@@YAMAEBM@Z			; glm::prev_float
PUBLIC	?prev_float@glm@@YANAEBN@Z			; glm::prev_float
PUBLIC	?test_ulp_float_dist@@YAHXZ			; test_ulp_float_dist
PUBLIC	??$float_distance@M@glm@@YAIAEBM0@Z		; glm::float_distance<float>
PUBLIC	?test_ulp_float_step@@YAHXZ			; test_ulp_float_step
PUBLIC	??$next_float@M@glm@@YAMAEBMAEBI@Z		; glm::next_float<float>
PUBLIC	??$prev_float@M@glm@@YAMAEBMAEBI@Z		; glm::prev_float<float>
PUBLIC	?test_ulp_double_dist@@YAHXZ			; test_ulp_double_dist
PUBLIC	??$float_distance@N@glm@@YAIAEBN0@Z		; glm::float_distance<double>
PUBLIC	?test_ulp_double_step@@YAHXZ			; test_ulp_double_step
PUBLIC	??$next_float@N@glm@@YANAEBNAEBI@Z		; glm::next_float<double>
PUBLIC	??$prev_float@N@glm@@YANAEBNAEBI@Z		; glm::prev_float<double>
PUBLIC	main
PUBLIC	__real@0010000000000000
PUBLIC	__real@00800000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@7f7fffff
PUBLIC	__real@7fefffffffffffff
EXTRN	__imp_nextafter:PROC
EXTRN	__imp_nextafterf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?nextafter@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?nextafter@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@M@std@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?min@?$numeric_limits@M@std@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@M@std@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?max@?$numeric_limits@M@std@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@N@std@@SANXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?min@?$numeric_limits@N@std@@SANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@N@std@@SANXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?max@?$numeric_limits@N@std@@SANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$next_float@M@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??$next_float@M@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$next_float@N@glm@@YANAEBN@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??$next_float@N@glm@@YANAEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?prev_float@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?prev_float@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?prev_float@glm@@YANAEBN@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?prev_float@glm@@YANAEBN@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ulp_float_dist@@YAHXZ DD imagerel $LN12
	DD	imagerel $LN12+378
	DD	imagerel $unwind$?test_ulp_float_dist@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$float_distance@M@glm@@YAIAEBM0@Z DD imagerel $LN13
	DD	imagerel $LN13+263
	DD	imagerel $unwind$??$float_distance@M@glm@@YAIAEBM0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ulp_float_step@@YAHXZ DD imagerel $LN15
	DD	imagerel $LN15+457
	DD	imagerel $unwind$?test_ulp_float_step@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$next_float@M@glm@@YAMAEBMAEBI@Z DD imagerel $LN6
	DD	imagerel $LN6+142
	DD	imagerel $unwind$??$next_float@M@glm@@YAMAEBMAEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$prev_float@M@glm@@YAMAEBMAEBI@Z DD imagerel $LN6
	DD	imagerel $LN6+142
	DD	imagerel $unwind$??$prev_float@M@glm@@YAMAEBMAEBI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ulp_double_dist@@YAHXZ DD imagerel $LN12
	DD	imagerel $LN12+380
	DD	imagerel $unwind$?test_ulp_double_dist@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$float_distance@N@glm@@YAIAEBN0@Z DD imagerel $LN13
	DD	imagerel $LN13+267
	DD	imagerel $unwind$??$float_distance@N@glm@@YAIAEBN0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ulp_double_step@@YAHXZ DD imagerel $LN15
	DD	imagerel $LN15+459
	DD	imagerel $unwind$?test_ulp_double_step@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$next_float@N@glm@@YANAEBNAEBI@Z DD imagerel $LN6
	DD	imagerel $LN6+142
	DD	imagerel $unwind$??$next_float@N@glm@@YANAEBNAEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$prev_float@N@glm@@YANAEBNAEBI@Z DD imagerel $LN6
	DD	imagerel $LN6+142
	DD	imagerel $unwind$??$prev_float@N@glm@@YANAEBNAEBI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-38
CONST	ENDS
;	COMDAT __real@0010000000000000
CONST	SEGMENT
__real@0010000000000000 DQ 00010000000000000r	; 2.22507e-308
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$prev_float@N@glm@@YANAEBNAEBI@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$prev_float@N@glm@@YANAEBNAEBI@Z$rtcName$0 DB 074H	; glm::prev_float<double>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$prev_float@N@glm@@YANAEBNAEBI@Z$rtcVarDesc DD 038H	; glm::prev_float<double>
	DD	08H
	DQ	FLAT:??$prev_float@N@glm@@YANAEBNAEBI@Z$rtcName$0
	ORG $+48
??$prev_float@N@glm@@YANAEBNAEBI@Z$rtcFrameData DD 01H	; glm::prev_float<double>
	DD	00H
	DQ	FLAT:??$prev_float@N@glm@@YANAEBNAEBI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$next_float@N@glm@@YANAEBNAEBI@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$next_float@N@glm@@YANAEBNAEBI@Z$rtcName$0 DB 074H	; glm::next_float<double>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$next_float@N@glm@@YANAEBNAEBI@Z$rtcVarDesc DD 038H	; glm::next_float<double>
	DD	08H
	DQ	FLAT:??$next_float@N@glm@@YANAEBNAEBI@Z$rtcName$0
	ORG $+48
??$next_float@N@glm@@YANAEBNAEBI@Z$rtcFrameData DD 01H	; glm::next_float<double>
	DD	00H
	DQ	FLAT:??$next_float@N@glm@@YANAEBNAEBI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$float_distance@N@glm@@YAIAEBN0@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$float_distance@N@glm@@YAIAEBN0@Z$rtcName$0 DB 074H	; glm::float_distance<double>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
??$float_distance@N@glm@@YAIAEBN0@Z$rtcName$1 DB 074H	; glm::float_distance<double>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
??$float_distance@N@glm@@YAIAEBN0@Z$rtcVarDesc DD 058H	; glm::float_distance<double>
	DD	08H
	DQ	FLAT:??$float_distance@N@glm@@YAIAEBN0@Z$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:??$float_distance@N@glm@@YAIAEBN0@Z$rtcName$0
	ORG $+96
??$float_distance@N@glm@@YAIAEBN0@Z$rtcFrameData DD 02H	; glm::float_distance<double>
	DD	00H
	DQ	FLAT:??$float_distance@N@glm@@YAIAEBN0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$prev_float@M@glm@@YAMAEBMAEBI@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$prev_float@M@glm@@YAMAEBMAEBI@Z$rtcName$0 DB 074H	; glm::prev_float<float>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$prev_float@M@glm@@YAMAEBMAEBI@Z$rtcVarDesc DD 034H	; glm::prev_float<float>
	DD	04H
	DQ	FLAT:??$prev_float@M@glm@@YAMAEBMAEBI@Z$rtcName$0
	ORG $+48
??$prev_float@M@glm@@YAMAEBMAEBI@Z$rtcFrameData DD 01H	; glm::prev_float<float>
	DD	00H
	DQ	FLAT:??$prev_float@M@glm@@YAMAEBMAEBI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$next_float@M@glm@@YAMAEBMAEBI@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$next_float@M@glm@@YAMAEBMAEBI@Z$rtcName$0 DB 074H	; glm::next_float<float>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$next_float@M@glm@@YAMAEBMAEBI@Z$rtcVarDesc DD 034H	; glm::next_float<float>
	DD	04H
	DQ	FLAT:??$next_float@M@glm@@YAMAEBMAEBI@Z$rtcName$0
	ORG $+48
??$next_float@M@glm@@YAMAEBMAEBI@Z$rtcFrameData DD 01H	; glm::next_float<float>
	DD	00H
	DQ	FLAT:??$next_float@M@glm@@YAMAEBMAEBI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$float_distance@M@glm@@YAIAEBM0@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$float_distance@M@glm@@YAIAEBM0@Z$rtcName$0 DB 074H	; glm::float_distance<float>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
??$float_distance@M@glm@@YAIAEBM0@Z$rtcName$1 DB 074H	; glm::float_distance<float>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
??$float_distance@M@glm@@YAIAEBM0@Z$rtcVarDesc DD 054H	; glm::float_distance<float>
	DD	04H
	DQ	FLAT:??$float_distance@M@glm@@YAIAEBM0@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:??$float_distance@M@glm@@YAIAEBM0@Z$rtcName$0
	ORG $+96
??$float_distance@M@glm@@YAIAEBM0@Z$rtcFrameData DD 02H	; glm::float_distance<float>
	DD	00H
	DQ	FLAT:??$float_distance@M@glm@@YAIAEBM0@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$?test_ulp_float_dist@@YAHXZ DD 031a01H
	DD	0140109H
	DD	07002H
$unwind$?test_ulp_float_step@@YAHXZ DD 031a01H
	DD	0160109H
	DD	07002H
$unwind$?test_ulp_double_dist@@YAHXZ DD 031a01H
	DD	0140109H
	DD	07002H
$unwind$?test_ulp_double_step@@YAHXZ DD 031a01H
	DD	0160109H
	DD	07002H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
?test_ulp_float_dist@@YAHXZ$rtcName$0 DB 041H		; test_ulp_float_dist
	DB	00H
	ORG $+2
?test_ulp_float_dist@@YAHXZ$rtcName$1 DB 042H		; test_ulp_float_dist
	DB	00H
	ORG $+2
?test_ulp_float_dist@@YAHXZ$rtcName$2 DB 043H		; test_ulp_float_dist
	DB	00H
	ORG $+6
?test_ulp_float_dist@@YAHXZ$rtcVarDesc DD 074H		; test_ulp_float_dist
	DD	04H
	DQ	FLAT:?test_ulp_float_dist@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test_ulp_float_dist@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_ulp_float_dist@@YAHXZ$rtcName$0
	ORG $+144
?test_ulp_float_dist@@YAHXZ$rtcFrameData DD 03H		; test_ulp_float_dist
	DD	00H
	DQ	FLAT:?test_ulp_float_dist@@YAHXZ$rtcVarDesc
?test_ulp_float_step@@YAHXZ$rtcName$0 DB 041H		; test_ulp_float_step
	DB	00H
	ORG $+2
?test_ulp_float_step@@YAHXZ$rtcName$1 DB 042H		; test_ulp_float_step
	DB	00H
	ORG $+2
?test_ulp_float_step@@YAHXZ$rtcName$2 DB 043H		; test_ulp_float_step
	DB	00H
	ORG $+6
?test_ulp_float_step@@YAHXZ$rtcVarDesc DD 074H		; test_ulp_float_step
	DD	04H
	DQ	FLAT:?test_ulp_float_step@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test_ulp_float_step@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_ulp_float_step@@YAHXZ$rtcName$0
	ORG $+144
?test_ulp_float_step@@YAHXZ$rtcFrameData DD 03H		; test_ulp_float_step
	DD	00H
	DQ	FLAT:?test_ulp_float_step@@YAHXZ$rtcVarDesc
?test_ulp_double_dist@@YAHXZ$rtcName$0 DB 041H		; test_ulp_double_dist
	DB	00H
	ORG $+2
?test_ulp_double_dist@@YAHXZ$rtcName$1 DB 042H		; test_ulp_double_dist
	DB	00H
	ORG $+2
?test_ulp_double_dist@@YAHXZ$rtcName$2 DB 043H		; test_ulp_double_dist
	DB	00H
	ORG $+6
?test_ulp_double_dist@@YAHXZ$rtcVarDesc DD 078H		; test_ulp_double_dist
	DD	08H
	DQ	FLAT:?test_ulp_double_dist@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test_ulp_double_dist@@YAHXZ$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?test_ulp_double_dist@@YAHXZ$rtcName$0
	ORG $+144
?test_ulp_double_dist@@YAHXZ$rtcFrameData DD 03H	; test_ulp_double_dist
	DD	00H
	DQ	FLAT:?test_ulp_double_dist@@YAHXZ$rtcVarDesc
?test_ulp_double_step@@YAHXZ$rtcName$0 DB 041H		; test_ulp_double_step
	DB	00H
	ORG $+2
?test_ulp_double_step@@YAHXZ$rtcName$1 DB 042H		; test_ulp_double_step
	DB	00H
	ORG $+2
?test_ulp_double_step@@YAHXZ$rtcName$2 DB 043H		; test_ulp_double_step
	DB	00H
	ORG $+6
?test_ulp_double_step@@YAHXZ$rtcVarDesc DD 078H		; test_ulp_double_step
	DD	08H
	DQ	FLAT:?test_ulp_double_step@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test_ulp_double_step@@YAHXZ$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?test_ulp_double_step@@YAHXZ$rtcName$0
	ORG $+144
?test_ulp_double_step@@YAHXZ$rtcFrameData DD 03H	; test_ulp_double_step
	DD	00H
	DQ	FLAT:?test_ulp_double_step@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?prev_float@glm@@YANAEBN@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?prev_float@glm@@YAMAEBM@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$next_float@N@glm@@YANAEBN@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$next_float@M@glm@@YAMAEBM@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@N@std@@SANXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@N@std@@SANXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@M@std@@SAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@M@std@@SAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?nextafter@@YAMMM@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_ulp.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 87   : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 88   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 89   : 	Error += test_ulp_float_dist();

	call	?test_ulp_float_dist@@YAHXZ		; test_ulp_float_dist
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 90   : 	Error += test_ulp_float_step();

	call	?test_ulp_float_step@@YAHXZ		; test_ulp_float_step
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 91   : 	Error += test_ulp_double_dist();

	call	?test_ulp_double_dist@@YAHXZ		; test_ulp_double_dist
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 92   : 	Error += test_ulp_double_step();

	call	?test_ulp_double_step@@YAHXZ		; test_ulp_double_step
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 93   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 94   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ??$prev_float@N@glm@@YANAEBNAEBI@Z
_TEXT	SEGMENT
temp$ = 56
i$4 = 68
x$ = 96
ulps$ = 104
??$prev_float@N@glm@@YANAEBNAEBI@Z PROC			; glm::prev_float<double>, COMDAT

; 266  : 	{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 267  : 		T temp = x;

	mov	rax, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR temp$[rsp], xmm0

; 268  : 		for(uint i = 0; i < ulps; ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@prev_float
$LN2@prev_float:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@prev_float:
	mov	rax, QWORD PTR ulps$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$4[rsp], eax
	jae	SHORT $LN3@prev_float

; 269  : 			temp = prev_float(temp);

	lea	rcx, QWORD PTR temp$[rsp]
	call	?prev_float@glm@@YANAEBN@Z		; glm::prev_float
	movsd	QWORD PTR temp$[rsp], xmm0
	jmp	SHORT $LN2@prev_float
$LN3@prev_float:

; 270  : 		return temp;

	movsd	xmm0, QWORD PTR temp$[rsp]

; 271  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$prev_float@N@glm@@YANAEBNAEBI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$prev_float@N@glm@@YANAEBNAEBI@Z ENDP			; glm::prev_float<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ??$next_float@N@glm@@YANAEBNAEBI@Z
_TEXT	SEGMENT
temp$ = 56
i$4 = 68
x$ = 96
ulps$ = 104
??$next_float@N@glm@@YANAEBNAEBI@Z PROC			; glm::next_float<double>, COMDAT

; 248  : 	{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 249  : 		T temp = x;

	mov	rax, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR temp$[rsp], xmm0

; 250  : 		for(uint i = 0; i < ulps; ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@next_float
$LN2@next_float:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@next_float:
	mov	rax, QWORD PTR ulps$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$4[rsp], eax
	jae	SHORT $LN3@next_float

; 251  : 			temp = next_float(temp);

	lea	rcx, QWORD PTR temp$[rsp]
	call	??$next_float@N@glm@@YANAEBN@Z		; glm::next_float<double>
	movsd	QWORD PTR temp$[rsp], xmm0
	jmp	SHORT $LN2@next_float
$LN3@next_float:

; 252  : 		return temp;

	movsd	xmm0, QWORD PTR temp$[rsp]

; 253  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$next_float@N@glm@@YANAEBNAEBI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$next_float@N@glm@@YANAEBNAEBI@Z ENDP			; glm::next_float<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_ulp.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 68
B$7 = 88
C$8 = 120
D$9 = 132
E$10 = 136
$T11 = 140
$T12 = 144
tv70 = 148
tv76 = 152
tv82 = 156
tv88 = 160
?test_ulp_double_step@@YAHXZ PROC			; test_ulp_double_step

; 65   : {

$LN15:
	push	rdi
	sub	rsp, 176				; 000000b0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 66   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 67   : 
; 68   : 	double A = 1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR A$[rsp], xmm0

; 69   : 
; 70   : 	for(int i = 10; i < 1000; i *= 10)

	mov	DWORD PTR i$6[rsp], 10
	jmp	SHORT $LN4@test_ulp_d
$LN2@test_ulp_d:
	imul	eax, DWORD PTR i$6[rsp], 10
	mov	DWORD PTR i$6[rsp], eax
$LN4@test_ulp_d:
	cmp	DWORD PTR i$6[rsp], 1000		; 000003e8H
	jge	$LN3@test_ulp_d

; 71   : 	{
; 72   : 		double B = glm::next_float(A, i);

	mov	eax, DWORD PTR i$6[rsp]
	mov	DWORD PTR $T11[rsp], eax
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$next_float@N@glm@@YANAEBNAEBI@Z	; glm::next_float<double>
	movsd	QWORD PTR B$7[rsp], xmm0

; 73   : 		Error += A != B ? 0 : 1;

	movsd	xmm0, QWORD PTR A$[rsp]
	ucomisd	xmm0, QWORD PTR B$7[rsp]
	jp	SHORT $LN14@test_ulp_d
	je	SHORT $LN6@test_ulp_d
$LN14@test_ulp_d:
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN7@test_ulp_d
$LN6@test_ulp_d:
	mov	DWORD PTR tv70[rsp], 1
$LN7@test_ulp_d:
	mov	eax, DWORD PTR tv70[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 74   : 		double C = glm::prev_float(B, i);

	mov	eax, DWORD PTR i$6[rsp]
	mov	DWORD PTR $T12[rsp], eax
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR B$7[rsp]
	call	??$prev_float@N@glm@@YANAEBNAEBI@Z	; glm::prev_float<double>
	movsd	QWORD PTR C$8[rsp], xmm0

; 75   : 		Error += A == C ? 0 : 1;

	movsd	xmm0, QWORD PTR A$[rsp]
	ucomisd	xmm0, QWORD PTR C$8[rsp]
	jp	SHORT $LN8@test_ulp_d
	jne	SHORT $LN8@test_ulp_d
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN9@test_ulp_d
$LN8@test_ulp_d:
	mov	DWORD PTR tv76[rsp], 1
$LN9@test_ulp_d:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 76   : 
; 77   : 		int D = glm::float_distance(A, B);

	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$float_distance@N@glm@@YAIAEBN0@Z	; glm::float_distance<double>
	mov	DWORD PTR D$9[rsp], eax

; 78   : 		Error += D == i ? 0 : 1;

	mov	eax, DWORD PTR i$6[rsp]
	cmp	DWORD PTR D$9[rsp], eax
	jne	SHORT $LN10@test_ulp_d
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN11@test_ulp_d
$LN10@test_ulp_d:
	mov	DWORD PTR tv82[rsp], 1
$LN11@test_ulp_d:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 79   : 		int E = glm::float_distance(A, C);

	lea	rdx, QWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$float_distance@N@glm@@YAIAEBN0@Z	; glm::float_distance<double>
	mov	DWORD PTR E$10[rsp], eax

; 80   : 		Error += E == 0 ? 0 : 1;

	cmp	DWORD PTR E$10[rsp], 0
	jne	SHORT $LN12@test_ulp_d
	mov	DWORD PTR tv88[rsp], 0
	jmp	SHORT $LN13@test_ulp_d
$LN12@test_ulp_d:
	mov	DWORD PTR tv88[rsp], 1
$LN13@test_ulp_d:
	mov	eax, DWORD PTR tv88[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 81   : 	}

	jmp	$LN2@test_ulp_d
$LN3@test_ulp_d:

; 82   : 
; 83   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 84   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_ulp_double_step@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?test_ulp_double_step@@YAHXZ ENDP			; test_ulp_double_step
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ??$float_distance@N@glm@@YAIAEBN0@Z
_TEXT	SEGMENT
ulp$ = 32
temp$5 = 56
temp$6 = 88
x$ = 128
y$ = 136
??$float_distance@N@glm@@YAIAEBN0@Z PROC		; glm::float_distance<double>, COMDAT

; 284  : 	{

$LN13:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 285  : 		uint ulp = 0;

	mov	DWORD PTR ulp$[rsp], 0

; 286  : 
; 287  : 		if(x < y)

	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR [rcx]
	jbe	SHORT $LN6@float_dist

; 288  : 		{
; 289  : 			T temp = x;

	mov	rax, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR temp$5[rsp], xmm0
$LN2@float_dist:

; 290  : 			while(temp != y)// && ulp < std::numeric_limits<std::size_t>::max())

	mov	rax, QWORD PTR y$[rsp]
	movsd	xmm0, QWORD PTR temp$5[rsp]
	ucomisd	xmm0, QWORD PTR [rax]
	jp	SHORT $LN12@float_dist
	je	SHORT $LN3@float_dist
$LN12@float_dist:

; 291  : 			{
; 292  : 				++ulp;

	mov	eax, DWORD PTR ulp$[rsp]
	inc	eax
	mov	DWORD PTR ulp$[rsp], eax

; 293  : 				temp = next_float(temp);

	lea	rcx, QWORD PTR temp$5[rsp]
	call	??$next_float@N@glm@@YANAEBN@Z		; glm::next_float<double>
	movsd	QWORD PTR temp$5[rsp], xmm0

; 294  : 			}

	jmp	SHORT $LN2@float_dist
$LN3@float_dist:

; 295  : 		}

	jmp	SHORT $LN7@float_dist
$LN6@float_dist:

; 296  : 		else if(y < x)

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR [rcx]
	jbe	SHORT $LN8@float_dist

; 297  : 		{
; 298  : 			T temp = y;

	mov	rax, QWORD PTR y$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR temp$6[rsp], xmm0
$LN4@float_dist:

; 299  : 			while(temp != x)// && ulp < std::numeric_limits<std::size_t>::max())

	mov	rax, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR temp$6[rsp]
	ucomisd	xmm0, QWORD PTR [rax]
	jp	SHORT $LN11@float_dist
	je	SHORT $LN5@float_dist
$LN11@float_dist:

; 300  : 			{
; 301  : 				++ulp;

	mov	eax, DWORD PTR ulp$[rsp]
	inc	eax
	mov	DWORD PTR ulp$[rsp], eax

; 302  : 				temp = next_float(temp);

	lea	rcx, QWORD PTR temp$6[rsp]
	call	??$next_float@N@glm@@YANAEBN@Z		; glm::next_float<double>
	movsd	QWORD PTR temp$6[rsp], xmm0

; 303  : 			}

	jmp	SHORT $LN4@float_dist
$LN5@float_dist:
$LN8@float_dist:
$LN7@float_dist:

; 304  : 		}
; 305  : 		else // ==
; 306  : 		{
; 307  : 
; 308  : 		}
; 309  : 
; 310  : 		return ulp;

	mov	eax, DWORD PTR ulp$[rsp]

; 311  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$float_distance@N@glm@@YAIAEBN0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$float_distance@N@glm@@YAIAEBN0@Z ENDP		; glm::float_distance<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_ulp.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 88
C$ = 120
D$ = 132
E$ = 136
tv67 = 140
tv72 = 144
tv78 = 148
tv84 = 152
?test_ulp_double_dist@@YAHXZ PROC			; test_ulp_double_dist

; 46   : {

$LN12:
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 47   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 48   : 
; 49   : 	double A = 1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR A$[rsp], xmm0

; 50   : 
; 51   : 	double B = glm::next_float(A);

	lea	rcx, QWORD PTR A$[rsp]
	call	??$next_float@N@glm@@YANAEBN@Z		; glm::next_float<double>
	movsd	QWORD PTR B$[rsp], xmm0

; 52   : 	Error += A != B ? 0 : 1;

	movsd	xmm0, QWORD PTR A$[rsp]
	ucomisd	xmm0, QWORD PTR B$[rsp]
	jp	SHORT $LN11@test_ulp_d
	je	SHORT $LN3@test_ulp_d
$LN11@test_ulp_d:
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test_ulp_d
$LN3@test_ulp_d:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test_ulp_d:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 53   : 	double C = glm::prev_float(B);

	lea	rcx, QWORD PTR B$[rsp]
	call	?prev_float@glm@@YANAEBN@Z		; glm::prev_float
	movsd	QWORD PTR C$[rsp], xmm0

; 54   : 	Error += A == C ? 0 : 1;

	movsd	xmm0, QWORD PTR A$[rsp]
	ucomisd	xmm0, QWORD PTR C$[rsp]
	jp	SHORT $LN5@test_ulp_d
	jne	SHORT $LN5@test_ulp_d
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test_ulp_d
$LN5@test_ulp_d:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test_ulp_d:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 55   : 
; 56   : 	int D = glm::float_distance(A, B);

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$float_distance@N@glm@@YAIAEBN0@Z	; glm::float_distance<double>
	mov	DWORD PTR D$[rsp], eax

; 57   : 	Error += D == 1 ? 0 : 1;

	cmp	DWORD PTR D$[rsp], 1
	jne	SHORT $LN7@test_ulp_d
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN8@test_ulp_d
$LN7@test_ulp_d:
	mov	DWORD PTR tv78[rsp], 1
$LN8@test_ulp_d:
	mov	eax, DWORD PTR tv78[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 58   : 	int E = glm::float_distance(A, C);

	lea	rdx, QWORD PTR C$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$float_distance@N@glm@@YAIAEBN0@Z	; glm::float_distance<double>
	mov	DWORD PTR E$[rsp], eax

; 59   : 	Error += E == 0 ? 0 : 1;

	cmp	DWORD PTR E$[rsp], 0
	jne	SHORT $LN9@test_ulp_d
	mov	DWORD PTR tv84[rsp], 0
	jmp	SHORT $LN10@test_ulp_d
$LN9@test_ulp_d:
	mov	DWORD PTR tv84[rsp], 1
$LN10@test_ulp_d:
	mov	eax, DWORD PTR tv84[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 60   : 
; 61   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 62   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_ulp_double_dist@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?test_ulp_double_dist@@YAHXZ ENDP			; test_ulp_double_dist
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ??$prev_float@M@glm@@YAMAEBMAEBI@Z
_TEXT	SEGMENT
temp$ = 52
i$4 = 68
x$ = 96
ulps$ = 104
??$prev_float@M@glm@@YAMAEBMAEBI@Z PROC			; glm::prev_float<float>, COMDAT

; 266  : 	{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 267  : 		T temp = x;

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR temp$[rsp], xmm0

; 268  : 		for(uint i = 0; i < ulps; ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@prev_float
$LN2@prev_float:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@prev_float:
	mov	rax, QWORD PTR ulps$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$4[rsp], eax
	jae	SHORT $LN3@prev_float

; 269  : 			temp = prev_float(temp);

	lea	rcx, QWORD PTR temp$[rsp]
	call	?prev_float@glm@@YAMAEBM@Z		; glm::prev_float
	movss	DWORD PTR temp$[rsp], xmm0
	jmp	SHORT $LN2@prev_float
$LN3@prev_float:

; 270  : 		return temp;

	movss	xmm0, DWORD PTR temp$[rsp]

; 271  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$prev_float@M@glm@@YAMAEBMAEBI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$prev_float@M@glm@@YAMAEBMAEBI@Z ENDP			; glm::prev_float<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ??$next_float@M@glm@@YAMAEBMAEBI@Z
_TEXT	SEGMENT
temp$ = 52
i$4 = 68
x$ = 96
ulps$ = 104
??$next_float@M@glm@@YAMAEBMAEBI@Z PROC			; glm::next_float<float>, COMDAT

; 248  : 	{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 249  : 		T temp = x;

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR temp$[rsp], xmm0

; 250  : 		for(uint i = 0; i < ulps; ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@next_float
$LN2@next_float:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@next_float:
	mov	rax, QWORD PTR ulps$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$4[rsp], eax
	jae	SHORT $LN3@next_float

; 251  : 			temp = next_float(temp);

	lea	rcx, QWORD PTR temp$[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR temp$[rsp], xmm0
	jmp	SHORT $LN2@next_float
$LN3@next_float:

; 252  : 		return temp;

	movss	xmm0, DWORD PTR temp$[rsp]

; 253  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$next_float@M@glm@@YAMAEBMAEBI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$next_float@M@glm@@YAMAEBMAEBI@Z ENDP			; glm::next_float<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_ulp.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 52
i$6 = 68
B$7 = 84
C$8 = 116
D$9 = 132
E$10 = 136
$T11 = 140
$T12 = 144
tv70 = 148
tv76 = 152
tv82 = 156
tv88 = 160
?test_ulp_float_step@@YAHXZ PROC			; test_ulp_float_step

; 24   : {

$LN15:
	push	rdi
	sub	rsp, 176				; 000000b0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 25   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 26   : 
; 27   : 	float A = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR A$[rsp], xmm0

; 28   : 
; 29   : 	for(int i = 10; i < 1000; i *= 10)

	mov	DWORD PTR i$6[rsp], 10
	jmp	SHORT $LN4@test_ulp_f
$LN2@test_ulp_f:
	imul	eax, DWORD PTR i$6[rsp], 10
	mov	DWORD PTR i$6[rsp], eax
$LN4@test_ulp_f:
	cmp	DWORD PTR i$6[rsp], 1000		; 000003e8H
	jge	$LN3@test_ulp_f

; 30   : 	{
; 31   : 		float B = glm::next_float(A, i);

	mov	eax, DWORD PTR i$6[rsp]
	mov	DWORD PTR $T11[rsp], eax
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$next_float@M@glm@@YAMAEBMAEBI@Z	; glm::next_float<float>
	movss	DWORD PTR B$7[rsp], xmm0

; 32   : 		Error += A != B ? 0 : 1;

	movss	xmm0, DWORD PTR A$[rsp]
	ucomiss	xmm0, DWORD PTR B$7[rsp]
	jp	SHORT $LN14@test_ulp_f
	je	SHORT $LN6@test_ulp_f
$LN14@test_ulp_f:
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN7@test_ulp_f
$LN6@test_ulp_f:
	mov	DWORD PTR tv70[rsp], 1
$LN7@test_ulp_f:
	mov	eax, DWORD PTR tv70[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 33   : 		float C = glm::prev_float(B, i);

	mov	eax, DWORD PTR i$6[rsp]
	mov	DWORD PTR $T12[rsp], eax
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR B$7[rsp]
	call	??$prev_float@M@glm@@YAMAEBMAEBI@Z	; glm::prev_float<float>
	movss	DWORD PTR C$8[rsp], xmm0

; 34   : 		Error += A == C ? 0 : 1;

	movss	xmm0, DWORD PTR A$[rsp]
	ucomiss	xmm0, DWORD PTR C$8[rsp]
	jp	SHORT $LN8@test_ulp_f
	jne	SHORT $LN8@test_ulp_f
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN9@test_ulp_f
$LN8@test_ulp_f:
	mov	DWORD PTR tv76[rsp], 1
$LN9@test_ulp_f:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 35   : 
; 36   : 		int D = glm::float_distance(A, B);

	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$float_distance@M@glm@@YAIAEBM0@Z	; glm::float_distance<float>
	mov	DWORD PTR D$9[rsp], eax

; 37   : 		Error += D == i ? 0 : 1;

	mov	eax, DWORD PTR i$6[rsp]
	cmp	DWORD PTR D$9[rsp], eax
	jne	SHORT $LN10@test_ulp_f
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN11@test_ulp_f
$LN10@test_ulp_f:
	mov	DWORD PTR tv82[rsp], 1
$LN11@test_ulp_f:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 38   : 		int E = glm::float_distance(A, C);

	lea	rdx, QWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$float_distance@M@glm@@YAIAEBM0@Z	; glm::float_distance<float>
	mov	DWORD PTR E$10[rsp], eax

; 39   : 		Error += E == 0 ? 0 : 1;

	cmp	DWORD PTR E$10[rsp], 0
	jne	SHORT $LN12@test_ulp_f
	mov	DWORD PTR tv88[rsp], 0
	jmp	SHORT $LN13@test_ulp_f
$LN12@test_ulp_f:
	mov	DWORD PTR tv88[rsp], 1
$LN13@test_ulp_f:
	mov	eax, DWORD PTR tv88[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 40   : 	}

	jmp	$LN2@test_ulp_f
$LN3@test_ulp_f:

; 41   : 
; 42   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 43   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_ulp_float_step@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?test_ulp_float_step@@YAHXZ ENDP			; test_ulp_float_step
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ??$float_distance@M@glm@@YAIAEBM0@Z
_TEXT	SEGMENT
ulp$ = 32
temp$5 = 52
temp$6 = 84
x$ = 128
y$ = 136
??$float_distance@M@glm@@YAIAEBM0@Z PROC		; glm::float_distance<float>, COMDAT

; 284  : 	{

$LN13:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 285  : 		uint ulp = 0;

	mov	DWORD PTR ulp$[rsp], 0

; 286  : 
; 287  : 		if(x < y)

	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN6@float_dist

; 288  : 		{
; 289  : 			T temp = x;

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR temp$5[rsp], xmm0
$LN2@float_dist:

; 290  : 			while(temp != y)// && ulp < std::numeric_limits<std::size_t>::max())

	mov	rax, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR temp$5[rsp]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN12@float_dist
	je	SHORT $LN3@float_dist
$LN12@float_dist:

; 291  : 			{
; 292  : 				++ulp;

	mov	eax, DWORD PTR ulp$[rsp]
	inc	eax
	mov	DWORD PTR ulp$[rsp], eax

; 293  : 				temp = next_float(temp);

	lea	rcx, QWORD PTR temp$5[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR temp$5[rsp], xmm0

; 294  : 			}

	jmp	SHORT $LN2@float_dist
$LN3@float_dist:

; 295  : 		}

	jmp	SHORT $LN7@float_dist
$LN6@float_dist:

; 296  : 		else if(y < x)

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN8@float_dist

; 297  : 		{
; 298  : 			T temp = y;

	mov	rax, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR temp$6[rsp], xmm0
$LN4@float_dist:

; 299  : 			while(temp != x)// && ulp < std::numeric_limits<std::size_t>::max())

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR temp$6[rsp]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN11@float_dist
	je	SHORT $LN5@float_dist
$LN11@float_dist:

; 300  : 			{
; 301  : 				++ulp;

	mov	eax, DWORD PTR ulp$[rsp]
	inc	eax
	mov	DWORD PTR ulp$[rsp], eax

; 302  : 				temp = next_float(temp);

	lea	rcx, QWORD PTR temp$6[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR temp$6[rsp], xmm0

; 303  : 			}

	jmp	SHORT $LN4@float_dist
$LN5@float_dist:
$LN8@float_dist:
$LN7@float_dist:

; 304  : 		}
; 305  : 		else // ==
; 306  : 		{
; 307  : 
; 308  : 		}
; 309  : 
; 310  : 		return ulp;

	mov	eax, DWORD PTR ulp$[rsp]

; 311  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$float_distance@M@glm@@YAIAEBM0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$float_distance@M@glm@@YAIAEBM0@Z ENDP		; glm::float_distance<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_ulp.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 52
B$ = 84
C$ = 116
D$ = 132
E$ = 136
tv67 = 140
tv72 = 144
tv78 = 148
tv84 = 152
?test_ulp_float_dist@@YAHXZ PROC			; test_ulp_float_dist

; 5    : {

$LN12:
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6    : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 7    : 
; 8    : 	float A = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR A$[rsp], xmm0

; 9    : 
; 10   : 	float B = glm::next_float(A);

	lea	rcx, QWORD PTR A$[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR B$[rsp], xmm0

; 11   : 	Error += A != B ? 0 : 1;

	movss	xmm0, DWORD PTR A$[rsp]
	ucomiss	xmm0, DWORD PTR B$[rsp]
	jp	SHORT $LN11@test_ulp_f
	je	SHORT $LN3@test_ulp_f
$LN11@test_ulp_f:
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test_ulp_f
$LN3@test_ulp_f:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test_ulp_f:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 12   : 	float C = glm::prev_float(B);

	lea	rcx, QWORD PTR B$[rsp]
	call	?prev_float@glm@@YAMAEBM@Z		; glm::prev_float
	movss	DWORD PTR C$[rsp], xmm0

; 13   : 	Error += A == C ? 0 : 1;

	movss	xmm0, DWORD PTR A$[rsp]
	ucomiss	xmm0, DWORD PTR C$[rsp]
	jp	SHORT $LN5@test_ulp_f
	jne	SHORT $LN5@test_ulp_f
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test_ulp_f
$LN5@test_ulp_f:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test_ulp_f:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 14   : 
; 15   : 	int D = glm::float_distance(A, B);

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$float_distance@M@glm@@YAIAEBM0@Z	; glm::float_distance<float>
	mov	DWORD PTR D$[rsp], eax

; 16   : 	Error += D == 1 ? 0 : 1;

	cmp	DWORD PTR D$[rsp], 1
	jne	SHORT $LN7@test_ulp_f
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN8@test_ulp_f
$LN7@test_ulp_f:
	mov	DWORD PTR tv78[rsp], 1
$LN8@test_ulp_f:
	mov	eax, DWORD PTR tv78[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 17   : 	int E = glm::float_distance(A, C);

	lea	rdx, QWORD PTR C$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$float_distance@M@glm@@YAIAEBM0@Z	; glm::float_distance<float>
	mov	DWORD PTR E$[rsp], eax

; 18   : 	Error += E == 0 ? 0 : 1;

	cmp	DWORD PTR E$[rsp], 0
	jne	SHORT $LN9@test_ulp_f
	mov	DWORD PTR tv84[rsp], 0
	jmp	SHORT $LN10@test_ulp_f
$LN9@test_ulp_f:
	mov	DWORD PTR tv84[rsp], 1
$LN10@test_ulp_f:
	mov	eax, DWORD PTR tv84[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 19   : 
; 20   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 21   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_ulp_float_dist@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?test_ulp_float_dist@@YAHXZ ENDP			; test_ulp_float_dist
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ?prev_float@glm@@YANAEBN@Z
_TEXT	SEGMENT
x$ = 64
?prev_float@glm@@YANAEBN@Z PROC				; glm::prev_float, COMDAT

; 225  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 226  : #		if GLM_HAS_CXX11_STL
; 227  : 			return std::nextafter(x, std::numeric_limits<double>::min());

	call	?min@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::min
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	call	QWORD PTR __imp_nextafter

; 228  : #		elif((GLM_COMPILER & GLM_COMPILER_VC) || ((GLM_COMPILER & GLM_COMPILER_INTEL) && (GLM_PLATFORM & GLM_PLATFORM_WINDOWS)))
; 229  : 			return _nextafter(x, DBL_MIN);
; 230  : #		elif(GLM_PLATFORM & GLM_PLATFORM_ANDROID)
; 231  : 			return __builtin_nextafter(x, DBL_MIN);
; 232  : #		else
; 233  : 			return nextafter(x, DBL_MIN);
; 234  : #		endif
; 235  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?prev_float@glm@@YANAEBN@Z ENDP				; glm::prev_float
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ?prev_float@glm@@YAMAEBM@Z
_TEXT	SEGMENT
x$ = 64
?prev_float@glm@@YAMAEBM@Z PROC				; glm::prev_float, COMDAT

; 212  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 213  : #		if GLM_HAS_CXX11_STL
; 214  : 			return std::nextafter(x, std::numeric_limits<float>::min());

	call	?min@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::min
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?nextafter@@YAMMM@Z			; nextafter

; 215  : #		elif((GLM_COMPILER & GLM_COMPILER_VC) || ((GLM_COMPILER & GLM_COMPILER_INTEL) && (GLM_PLATFORM & GLM_PLATFORM_WINDOWS)))
; 216  : 			return detail::nextafterf(x, FLT_MIN);
; 217  : #		elif(GLM_PLATFORM & GLM_PLATFORM_ANDROID)
; 218  : 			return __builtin_nextafterf(x, FLT_MIN);
; 219  : #		else
; 220  : 			return nextafterf(x, FLT_MIN);
; 221  : #		endif
; 222  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?prev_float@glm@@YAMAEBM@Z ENDP				; glm::prev_float
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ??$next_float@N@glm@@YANAEBN@Z
_TEXT	SEGMENT
x$ = 64
??$next_float@N@glm@@YANAEBN@Z PROC			; glm::next_float<double>, COMDAT

; 190  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 191  : #		if GLM_HAS_CXX11_STL
; 192  : 			return std::nextafter(x, std::numeric_limits<double>::max());

	call	?max@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::max
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	call	QWORD PTR __imp_nextafter

; 193  : #		elif((GLM_COMPILER & GLM_COMPILER_VC) || ((GLM_COMPILER & GLM_COMPILER_INTEL) && (GLM_PLATFORM & GLM_PLATFORM_WINDOWS)))
; 194  : 			return detail::nextafter(x, std::numeric_limits<double>::max());
; 195  : #		elif(GLM_PLATFORM & GLM_PLATFORM_ANDROID)
; 196  : 			return __builtin_nextafter(x, FLT_MAX);
; 197  : #		else
; 198  : 			return nextafter(x, DBL_MAX);
; 199  : #		endif
; 200  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$next_float@N@glm@@YANAEBN@Z ENDP			; glm::next_float<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ??$next_float@M@glm@@YAMAEBM@Z
_TEXT	SEGMENT
x$ = 64
??$next_float@M@glm@@YAMAEBM@Z PROC			; glm::next_float<float>, COMDAT

; 176  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 177  : #		if GLM_HAS_CXX11_STL
; 178  : 			return std::nextafter(x, std::numeric_limits<float>::max());

	call	?max@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::max
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?nextafter@@YAMMM@Z			; nextafter

; 179  : #		elif((GLM_COMPILER & GLM_COMPILER_VC) || ((GLM_COMPILER & GLM_COMPILER_INTEL) && (GLM_PLATFORM & GLM_PLATFORM_WINDOWS)))
; 180  : 			return detail::nextafterf(x, FLT_MAX);
; 181  : #		elif(GLM_PLATFORM & GLM_PLATFORM_ANDROID)
; 182  : 			return __builtin_nextafterf(x, FLT_MAX);
; 183  : #		else
; 184  : 			return nextafterf(x, FLT_MAX);
; 185  : #		endif
; 186  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$next_float@M@glm@@YAMAEBM@Z ENDP			; glm::next_float<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?max@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::max, COMDAT

; 912  :     _NODISCARD static constexpr double(max)() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 913  :         return DBL_MAX;

	movsd	xmm0, QWORD PTR __real@7fefffffffffffff

; 914  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?max@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?min@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::min, COMDAT

; 908  :     _NODISCARD static constexpr double(min)() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 909  :         return DBL_MIN;

	movsd	xmm0, QWORD PTR __real@0010000000000000

; 910  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?min@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?max@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::max, COMDAT

; 864  :     _NODISCARD static constexpr float(max)() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 865  :         return FLT_MAX;

	movss	xmm0, DWORD PTR __real@7f7fffff

; 866  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?max@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?min@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::min, COMDAT

; 860  :     _NODISCARD static constexpr float(min)() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 861  :         return FLT_MIN;

	movss	xmm0, DWORD PTR __real@00800000

; 862  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?min@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?nextafter@@YAMMM@Z
_TEXT	SEGMENT
_Xx$ = 64
_Yx$ = 72
?nextafter@@YAMMM@Z PROC				; nextafter, COMDAT

; 214  : _NODISCARD _Check_return_ inline float nextafter(_In_ float _Xx, _In_ float _Yx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 215  :     return _CSTD nextafterf(_Xx, _Yx);

	movss	xmm1, DWORD PTR _Yx$[rsp]
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_nextafterf

; 216  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?nextafter@@YAMMM@Z ENDP				; nextafter
_TEXT	ENDS
END
