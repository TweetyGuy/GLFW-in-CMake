; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG94130 DB	'invalid argument', 00H
	ORG $+3
$SG94131 DB	'%s', 00H
	ORG $+1
$SG94135 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG94132 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+2
$SG94134 DB	00H, 00H
	ORG $+2
$SG80079 DB	'texture_perlin_pedioric_2d_256.dds', 00H
	ORG $+5
$SG94133 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
	ORG $+12
$SG94204 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xlocale', 00H
	ORG $+6
$SG79866 DB	'texture_simplex2d_256.dds', 00H
	ORG $+6
$SG79867 DB	'texture_simplex3d_256.dds', 00H
	ORG $+6
$SG79868 DB	'texture_simplex4d_256.dds', 00H
	ORG $+6
$SG79968 DB	'texture_perlin2d_256.dds', 00H
	ORG $+7
$SG79969 DB	'texture_perlin3d_256.dds', 00H
	ORG $+7
$SG79970 DB	'texture_perlin4d_256.dds', 00H
	ORG $+7
$SG80080 DB	'texture_perlin_pedioric_3d_256.dds', 00H
	ORG $+5
$SG80081 DB	'texture_perlin_pedioric_4d_256.dds', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	?length@?$tvec2@I$0A@@glm@@SAHXZ		; glm::tvec2<unsigned int,0>::length
PUBLIC	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@I@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@II@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0image2D@gli@@QEAA@XZ				; gli::image2D::image2D
PUBLIC	??0image2D@gli@@QEAA@AEBV01@@Z			; gli::image2D::image2D
PUBLIC	??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z ; gli::image2D::image2D
PUBLIC	??1image2D@gli@@QEAA@XZ				; gli::image2D::~image2D
PUBLIC	?dimensions@image2D@gli@@QEBA?AU?$tvec2@I$0A@@glm@@XZ ; gli::image2D::dimensions
PUBLIC	?format@image2D@gli@@QEBA?AW402@XZ		; gli::image2D::format
PUBLIC	?data@image2D@gli@@QEAAPEAEXZ			; gli::image2D::data
PUBLIC	?data@image2D@gli@@QEBAQEBEXZ			; gli::image2D::data
PUBLIC	??0?$allocator@E@std@@QEAA@XZ			; std::allocator<unsigned char>::allocator<unsigned char>
PUBLIC	?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z	; std::allocator<unsigned char>::deallocate
PUBLIC	?allocate@?$allocator@E@std@@QEAAPEAE_K@Z	; std::allocator<unsigned char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA?AV?$allocator@E@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::select_on_container_copy_construction
PUBLIC	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@AEBV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??4?$vector@EV?$allocator@E@std@@@std@@QEAAAEAV01@AEBV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=
PUBLIC	?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Clear_and_reserve_geometric
PUBLIC	?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
PUBLIC	?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
PUBLIC	?capacity@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
PUBLIC	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
PUBLIC	??A?$vector@EV?$allocator@E@std@@@std@@QEBAAEBE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@AEBA_K_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth
PUBLIC	?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
PUBLIC	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
PUBLIC	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
PUBLIC	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
PUBLIC	??4image2D@gli@@QEAAAEAV01@AEBV01@@Z		; gli::image2D::operator=
PUBLIC	??_Gimage2D@gli@@QEAAPEAXI@Z			; gli::image2D::`scalar deleting destructor'
PUBLIC	?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z ; gli::detail::getFormatInfo
PUBLIC	?sizeBlock@detail@gli@@YAIAEBW4format@2@@Z	; gli::detail::sizeBlock
PUBLIC	?sizeBitPerPixel@detail@gli@@YAIAEBW4format@2@@Z ; gli::detail::sizeBitPerPixel
PUBLIC	?sizeComponent@detail@gli@@YAIAEBW4format@2@@Z	; gli::detail::sizeComponent
PUBLIC	?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z	; gli::detail::sizeLinear
PUBLIC	??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::max<unsigned int,0,glm::tvec2>
PUBLIC	??$compMul@I$0A@Utvec2@glm@@@glm@@YAIAEBU?$tvec2@I$0A@@0@@Z ; glm::compMul<unsigned int,0,glm::tvec2>
PUBLIC	??0texture2D@gli@@QEAA@AEB_K@Z			; gli::texture2D::texture2D
PUBLIC	??1texture2D@gli@@QEAA@XZ			; gli::texture2D::~texture2D
PUBLIC	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z	; gli::texture2D::operator[]
PUBLIC	??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z	; gli::texture2D::operator[]
PUBLIC	?format@texture2D@gli@@QEBA?AW402@XZ		; gli::texture2D::format
PUBLIC	?levels@texture2D@gli@@QEBA_KXZ			; gli::texture2D::levels
PUBLIC	??0?$allocator@Vimage2D@gli@@@std@@QEAA@XZ	; std::allocator<gli::image2D>::allocator<gli::image2D>
PUBLIC	?deallocate@?$allocator@Vimage2D@gli@@@std@@QEAAXQEAVimage2D@gli@@_K@Z ; std::allocator<gli::image2D>::deallocate
PUBLIC	?allocate@?$allocator@Vimage2D@gli@@@std@@QEAAPEAVimage2D@gli@@_K@Z ; std::allocator<gli::image2D>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SA_KAEBV?$allocator@Vimage2D@gli@@@2@@Z ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::max_size
PUBLIC	??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::vector<gli::image2D,std::allocator<gli::image2D> >
PUBLIC	??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::~vector<gli::image2D,std::allocator<gli::image2D> >
PUBLIC	?resize@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAX_K@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::resize
PUBLIC	?empty@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_NXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::empty
PUBLIC	?size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::size
PUBLIC	?max_size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::max_size
PUBLIC	?capacity@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::capacity
PUBLIC	??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAAEAVimage2D@gli@@_K@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::operator[]
PUBLIC	??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBAAEBVimage2D@gli@@_K@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBA_K_K@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXQEAVimage2D@gli@@_K1@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Change_array
PUBLIC	?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Tidy
PUBLIC	?_Xlength@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@CAXXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range
PUBLIC	?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal
PUBLIC	?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<gli::image2D> >::_Vector_val<std::_Simple_types<gli::image2D> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Get_first
PUBLIC	?size@gli@@YAIAEBVimage2D@1@AEBI@Z		; gli::size
PUBLIC	?size@gli@@YAIAEBVtexture2D@1@AEBI@Z		; gli::size
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::move
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
PUBLIC	?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z ; std::_Narrow_char_traits<char,int>::not_eof
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z	; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Erase_noexcept
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0bad_cast@std@@QEAA@XZ			; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UEAA@XZ			; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QEAA@AEBV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UEAAPEAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	?_Throw_bad_cast@std@@YAXXZ			; std::_Throw_bad_cast
PUBLIC	??1locale@std@@QEAA@XZ				; std::locale::~locale
PUBLIC	?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z	; std::locale::_Getfacet
PUBLIC	??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z		; std::_Fgetc<char>
PUBLIC	??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z		; std::_Fputc<char>
PUBLIC	??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z	; std::_Ungetc<char>
PUBLIC	?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; gli::gtx::loader_dds9::saveDDS9
PUBLIC	?getFormatFourCC@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z ; gli::gtx::loader_dds9::detail::getFormatFourCC
PUBLIC	?getFormatFlags@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z ; gli::gtx::loader_dds9::detail::getFormatFlags
PUBLIC	?getFormatBPP@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z ; gli::gtx::loader_dds9::detail::getFormatBPP
PUBLIC	?isCompressed@detail@loader_dds9@gtx@gli@@YA_NAEBVtexture2D@4@@Z ; gli::gtx::loader_dds9::detail::isCompressed
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
PUBLIC	??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
PUBLIC	??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ		; std::fpos<_Mbstatet>::operator __int64
PUBLIC	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
PUBLIC	?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close
PUBLIC	??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	?test_simplex@@YAHXZ				; test_simplex
PUBLIC	??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z	; glm::simplex<float,0>
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z	; glm::simplex<float,0>
PUBLIC	??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z	; glm::simplex<float,0>
PUBLIC	?test_perlin@@YAHXZ				; test_perlin
PUBLIC	??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z	; glm::perlin<float,0>
PUBLIC	??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z	; glm::perlin<float,0>
PUBLIC	??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z	; glm::perlin<float,0>
PUBLIC	?test_perlin_pedioric@@YAHXZ			; test_perlin_pedioric
PUBLIC	??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z	; glm::perlin<float,0>
PUBLIC	??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z	; glm::perlin<float,0>
PUBLIC	??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z	; glm::perlin<float,0>
PUBLIC	main
PUBLIC	??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::addressof<std::basic_filebuf<char,std::char_traits<char> > >
PUBLIC	??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Convert_size@_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Resize<std::_Value_init_tag>
PUBLIC	??$?0Vimage2D@gli@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@Vimage2D@gli@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><gli::image2D>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1><>
PUBLIC	??$addressof@$$CBV?$vector@EV?$allocator@E@std@@@std@@@std@@YAPEBV?$vector@EV?$allocator@E@std@@@0@AEBV10@@Z ; std::addressof<std::vector<unsigned char,std::allocator<unsigned char> > const >
PUBLIC	??$_Pocca@V?$allocator@E@std@@@std@@YAXAEAV?$allocator@E@0@AEBV10@@Z ; std::_Pocca<std::allocator<unsigned char> >
PUBLIC	??$assign@PEAE$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAAXPEAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::assign<unsigned char *,0>
PUBLIC	??$?0E@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@E@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned char>
PUBLIC	??$?0V?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@E@1@@Z ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><std::allocator<unsigned char> >
PUBLIC	??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>
PUBLIC	??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><std::allocator<unsigned char> const &>
PUBLIC	??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
PUBLIC	??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
PUBLIC	??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
PUBLIC	??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z ; std::_Destroy_range<std::allocator<gli::image2D> >
PUBLIC	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
PUBLIC	??$max@_K@std@@YAAEB_KAEB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$_Get_size_of_n@$00@std@@YA_K_K@Z		; std::_Get_size_of_n<1>
PUBLIC	?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<unsigned int,0,glm::tvec2,0>::call
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z	; glm::operator+<float,0>
PUBLIC	??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec2>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
PUBLIC	??$?0MMM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@MM@Z ; glm::tvec4<float,0>::tvec4<float,0><float,float,float,0>
PUBLIC	??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec2>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z	; glm::operator+<float,0>
PUBLIC	??$permute@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator+<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec3>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec3>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z	; glm::operator*<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
PUBLIC	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z	; glm::operator-<float,0>
PUBLIC	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec3<float,0>::operator*=<float>
PUBLIC	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
PUBLIC	??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z		; glm::tvec2<float,0>::tvec2<float,0><double,double>
PUBLIC	??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>
PUBLIC	??$step@Utvec3@glm@@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec3,float,0>
PUBLIC	??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec3>
PUBLIC	??$mod289@U?$tvec3@M$0A@@glm@@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ; glm::detail::mod289<glm::tvec3<float,0> >
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z	; glm::operator+<float,0>
PUBLIC	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator+<float,0>
PUBLIC	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z	; glm::operator*<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z	; glm::operator-<float,0>
PUBLIC	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z	; glm::operator-<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>
PUBLIC	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec3<float,0>::operator*=<float>
PUBLIC	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec4>
PUBLIC	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
PUBLIC	??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@MAEBU?$tvec3@M$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator-<float,0>
PUBLIC	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>
PUBLIC	??$permute@M@detail@glm@@YAMAEBM@Z		; glm::detail::permute<float>
PUBLIC	??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z ; glm::gtc::grad4<float,0>
PUBLIC	??$taylorInvSqrt@M@detail@glm@@YAMAEBM@Z	; glm::detail::taylorInvSqrt<float>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z	; glm::operator-<float,0>
PUBLIC	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec2>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec2<float,0>::operator*=<float>
PUBLIC	??$fade@M$0A@@detail@glm@@YA?AU?$tvec2@M$0A@@1@AEBU21@@Z ; glm::detail::fade<float,0>
PUBLIC	??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec2>
PUBLIC	??$mix@MM@glm@@YAMMMM@Z				; glm::mix<float,float>
PUBLIC	??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
PUBLIC	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	??$fade@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ; glm::detail::fade<float,0>
PUBLIC	??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec4>
PUBLIC	??$fade@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::fade<float,0>
PUBLIC	??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec3>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<gli::image2D> >
PUBLIC	??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z ; std::_Uninitialized_copy<gli::image2D *,std::allocator<gli::image2D> >
PUBLIC	??$_Adl_verify_range@PEAEPEAE@std@@YAXAEBQEAE0@Z ; std::_Adl_verify_range<unsigned char *,unsigned char *>
PUBLIC	??$_Get_unwrapped@AEAPEAE@std@@YA?A_TAEAPEAE@Z	; std::_Get_unwrapped<unsigned char * &>
PUBLIC	??$_Assign_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0Uforward_iterator_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_range<unsigned char *>
PUBLIC	??$forward@V?$allocator@E@std@@@std@@YA$$QEAV?$allocator@E@0@AEAV10@@Z ; std::forward<std::allocator<unsigned char> >
PUBLIC	??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >::~_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >
PUBLIC	??$forward@AEBQEAE@std@@YAAEBQEAEAEBQEAE@Z	; std::forward<unsigned char * const &>
PUBLIC	??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z ; std::_Uninitialized_copy<unsigned char *,std::allocator<unsigned char> >
PUBLIC	??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z ; std::forward<std::allocator<unsigned char> const &>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z	; std::addressof<char *>
PUBLIC	??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z	; std::_Voidify_iter<char * *>
PUBLIC	??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z	; std::forward<char * const &>
PUBLIC	??$_Unfancy@Vimage2D@gli@@@std@@YAPEAVimage2D@gli@@PEAV12@@Z ; std::_Unfancy<gli::image2D>
PUBLIC	??$destroy@Vimage2D@gli@@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::destroy<gli::image2D>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z ; std::exchange<std::_Facet_base *,std::nullptr_t>
PUBLIC	?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z ; glm::detail::functor2<unsigned int,0,glm::tvec2>::call
PUBLIC	??$max@I@glm@@YAIII@Z				; glm::max<unsigned int>
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec4>
PUBLIC	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
PUBLIC	??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z		; std::_Get_size_of_n<48>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
PUBLIC	?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
PUBLIC	?call@?$compute_step_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_step_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator/<float,0>
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	??$mod289@U?$tvec4@M$0A@@glm@@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::mod289<glm::tvec4<float,0> >
PUBLIC	?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_step_vector<float,0,glm::tvec4,0>::call
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call
PUBLIC	??$mod289@M@detail@glm@@YAMAEBM@Z		; glm::detail::mod289<float>
PUBLIC	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
PUBLIC	??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
PUBLIC	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><bool,0>
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec4,0>::call
PUBLIC	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator/=<float>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z	; glm::operator-<float,0>
PUBLIC	?call@?$compute_mix_scalar@MM$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBM@Z ; glm::detail::compute_mix_scalar<float,float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z	; glm::detail::compute_mix<float,float>::call
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	?call@?$compute_mix_scalar@MM$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBM@Z ; glm::detail::compute_mix_scalar<float,float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec3,0>::call
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@PEAVimage2D@gli@@AEAV?$allocator@Vimage2D@gli@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Uninitialized_backout_al<std::allocator<gli::image2D> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::~_Uninitialized_backout_al<std::allocator<gli::image2D> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAPEAVimage2D@gli@@XZ ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Emplace_back<>
PUBLIC	??$_Get_unwrapped@AEBQEAVimage2D@gli@@@std@@YA?A_TAEBQEAVimage2D@gli@@@Z ; std::_Get_unwrapped<gli::image2D * const &>
PUBLIC	??$_Emplace_back@AEAVimage2D@gli@@@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXAEAVimage2D@gli@@@Z ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Emplace_back<gli::image2D &>
PUBLIC	??$_Verify_range@E@std@@YAXQEBE0@Z		; std::_Verify_range<unsigned char>
PUBLIC	??$distance@PEAE@std@@YA_JPEAE0@Z		; std::distance<unsigned char *>
PUBLIC	??$next@PEAE@std@@YAPEAEPEAE_J@Z		; std::next<unsigned char *>
PUBLIC	??$_Copy_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z	; std::_Copy_unchecked<unsigned char *,unsigned char *>
PUBLIC	??$_Get_unwrapped@AEBQEAE@std@@YA?A_TAEBQEAE@Z	; std::_Get_unwrapped<unsigned char * const &>
PUBLIC	??$_Unfancy@E@std@@YAPEAEPEAE@Z			; std::_Unfancy<unsigned char>
PUBLIC	??$_Copy_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z	; std::_Copy_memmove<unsigned char *,unsigned char *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Uninitialized_backout_al<std::allocator<unsigned char> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::~_Uninitialized_backout_al<std::allocator<unsigned char> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Release
PUBLIC	??$_Emplace_back@AEAE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEAE@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Emplace_back<unsigned char &>
PUBLIC	??$_Zero_range@PEAE@std@@YAPEAEQEAE0@Z		; std::_Zero_range<unsigned char *>
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Emplace_back<>
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
PUBLIC	??$min@M@glm@@YAMMM@Z				; glm::min<float>
PUBLIC	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z	; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$max@M@glm@@YAMMM@Z				; glm::max<float>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator/<float,0>
PUBLIC	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
PUBLIC	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
PUBLIC	?length@?$tvec3@_N$0A@@glm@@SAHXZ		; glm::tvec3<bool,0>::length
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec3>
PUBLIC	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator/<float,0>
PUBLIC	??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z ; std::forward<std::_Facet_base * &>
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
PUBLIC	??$construct@Vimage2D@gli@@$$V@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::construct<gli::image2D>
PUBLIC	??$forward@AEAVimage2D@gli@@@std@@YAAEAVimage2D@gli@@AEAV12@@Z ; std::forward<gli::image2D &>
PUBLIC	??$construct@Vimage2D@gli@@AEAV12@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@AEAV34@@Z ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::construct<gli::image2D,gli::image2D &>
PUBLIC	??$advance@PEAE_J@std@@YAXAEAPEAE_J@Z		; std::advance<unsigned char *,__int64>
PUBLIC	??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z	; std::_To_address<unsigned char *>
PUBLIC	??$forward@AEAE@std@@YAAEAEAEAE@Z		; std::forward<unsigned char &>
PUBLIC	??$construct@EAEAE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEAE@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char,unsigned char &>
PUBLIC	??$construct@E$$V@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAE@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char>
PUBLIC	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator/=<float>
PUBLIC	?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
PUBLIC	??$_Voidify_iter@PEAVimage2D@gli@@@std@@YAPEAXPEAVimage2D@gli@@@Z ; std::_Voidify_iter<gli::image2D *>
PUBLIC	??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z		; std::_Voidify_iter<unsigned char *>
PUBLIC	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_1ME@ILJMNGPA@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	_TI2?AVbad_cast@std@@
PUBLIC	_CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_C@_04HLKGINEK@DDS?5@				; `string'
PUBLIC	??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_C@_0GC@MAJKHLEE@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@IKNKMNDN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
PUBLIC	??_C@_0BP@PFIPNLNI@front?$CI?$CJ?5called?5on?5empty?5string@ ; `string'
PUBLIC	??_C@_1EC@DINNLDHA@?$AA?$CC?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@	; `string'
PUBLIC	??_C@_0GD@GLKFIMHC@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MG@NOLPABAB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3b5ee95c
PUBLIC	__real@3ca72f05
PUBLIC	__real@3cc7ce0c
PUBLIC	__real@3e124925
PUBLIC	__real@3e58658c
PUBLIC	__real@3e9e377a
PUBLIC	__real@3ebb67af
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f400000
PUBLIC	__real@3f5a8e5c
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc1b06d1d200925
PUBLIC	__real@3fc5555555555555
PUBLIC	__real@3fd1b06d1d200913
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fda88a3abb00da5
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe57be0
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@400ccccd
PUBLIC	__real@40133333
PUBLIC	__real@40c00000
PUBLIC	__real@40e00000
PUBLIC	__real@41200000
PUBLIC	__real@41700000
PUBLIC	__real@42080000
PUBLIC	__real@42240000
PUBLIC	__real@42280000
PUBLIC	__real@42440000
PUBLIC	__real@42800000
PUBLIC	__real@42fe0000
PUBLIC	__real@43000000
PUBLIC	__real@43020000
PUBLIC	__real@43908000
PUBLIC	__real@bf13cd3a
PUBLIC	__real@bfdc9f25c5bfedda
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__imp__get_stream_buffer_pointers:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_fflush:PROC
EXTRN	__imp_fgetc:PROC
EXTRN	__imp_fgetpos:PROC
EXTRN	__imp_fputc:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp_fsetpos:PROC
EXTRN	__imp__fseeki64:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	__imp_setvbuf:PROC
EXTRN	__imp_ungetc:PROC
EXTRN	__imp__lock_file:PROC
EXTRN	__imp__unlock_file:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	strlen:PROC
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPEBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Ebad_cast@std@@UEAAPEAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__imp_??Bid@locale@std@@QEAA_KXZ:PROC
EXTRN	?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	__imp_?always_noconv@codecvt_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z:PROC
EXTRN	__imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z:PROC
EXTRN	__imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z:PROC
EXTRN	__imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z:PROC
EXTRN	__imp_??7ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?fail@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?bad@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ:PROC
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEBA?AVlocale@2@XZ:PROC
EXTRN	__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z:PROC
EXTRN	__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z:PROC
EXTRN	__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ:PROC
EXTRN	__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ:PROC
EXTRN	__imp_?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ:PROC
EXTRN	__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ:PROC
EXTRN	__imp_?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAPEAD0PEAH001@Z:PROC
EXTRN	__imp_?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z:PROC
EXTRN	__imp_?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z:PROC
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ:PROC
EXTRN	__imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEBD_J@Z:PROC
EXTRN	?_Fiopen@std@@YAPEAU_iobuf@@PEBDHH@Z:PROC	; std::_Fiopen
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z:PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	floorf:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A:QWORD
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A DQ 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB DQ 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?floor@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?floor@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@II@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0image2D@gli@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$??0image2D@gli@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0image2D@gli@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0image2D@gli@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0image2D@gli@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0image2D@gli@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0image2D@gli@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$??0image2D@gli@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+136
	DD	imagerel $unwind$??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1image2D@gli@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??1image2D@gli@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dimensions@image2D@gli@@QEBA?AU?$tvec2@I$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$?dimensions@image2D@gli@@QEBA?AU?$tvec2@I$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?format@image2D@gli@@QEBA?AW402@XZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?format@image2D@gli@@QEBA?AW402@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?data@image2D@gli@@QEAAPEAEXZ DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$?data@image2D@gli@@QEAAPEAEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?data@image2D@gli@@QEBAQEBEXZ DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$?data@image2D@gli@@QEBAQEBEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@E@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@E@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z DD imagerel $LN13
	DD	imagerel $LN13+176
	DD	imagerel $unwind$?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@E@std@@QEAAPEAE_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@E@std@@QEAAPEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+15
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA?AV?$allocator@E@2@AEBV32@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA?AV?$allocator@E@2@AEBV32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@EV?$allocator@E@std@@@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+142
	DD	imagerel $unwind$??0?$vector@EV?$allocator@E@std@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$vector@EV?$allocator@E@std@@@std@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+133
	DD	imagerel $unwind$??4?$vector@EV?$allocator@E@std@@@std@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+258
	DD	imagerel $unwind$?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?capacity@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z DD imagerel $LN12
	DD	imagerel $LN12+192
	DD	imagerel $unwind$??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@EV?$allocator@E@std@@@std@@QEBAAEBE_K@Z DD imagerel $LN12
	DD	imagerel $LN12+192
	DD	imagerel $unwind$??A?$vector@EV?$allocator@E@std@@@std@@QEBAAEBE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+151
	DD	imagerel $unwind$?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+58
	DD	imagerel $unwind$?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+206
	DD	imagerel $unwind$?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4image2D@gli@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??4image2D@gli@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gimage2D@gli@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gimage2D@gli@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+1874
	DD	imagerel $unwind$?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sizeBlock@detail@gli@@YAIAEBW4format@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?sizeBlock@detail@gli@@YAIAEBW4format@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sizeBitPerPixel@detail@gli@@YAIAEBW4format@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?sizeBitPerPixel@detail@gli@@YAIAEBW4format@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sizeComponent@detail@gli@@YAIAEBW4format@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?sizeComponent@detail@gli@@YAIAEBW4format@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+241
	DD	imagerel $unwind$?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compMul@I$0A@Utvec2@glm@@@glm@@YAIAEBU?$tvec2@I$0A@@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+96
	DD	imagerel $unwind$??$compMul@I$0A@Utvec2@glm@@@glm@@YAIAEBU?$tvec2@I$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0texture2D@gli@@QEAA@AEB_K@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$??0texture2D@gli@@QEAA@AEB_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0texture2D@gli@@QEAA@AEB_K@Z@4HA DD imagerel ?dtor$0@?0???0texture2D@gli@@QEAA@AEB_K@Z@4HA
	DD	imagerel ?dtor$0@?0???0texture2D@gli@@QEAA@AEB_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0texture2D@gli@@QEAA@AEB_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1texture2D@gli@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??1texture2D@gli@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?format@texture2D@gli@@QEBA?AW402@XZ DD imagerel $LN5
	DD	imagerel $LN5+77
	DD	imagerel $unwind$?format@texture2D@gli@@QEBA?AW402@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?levels@texture2D@gli@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?levels@texture2D@gli@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@Vimage2D@gli@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@Vimage2D@gli@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@Vimage2D@gli@@@std@@QEAAXQEAVimage2D@gli@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@Vimage2D@gli@@@std@@QEAAXQEAVimage2D@gli@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@Vimage2D@gli@@@std@@QEAAPEAVimage2D@gli@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@Vimage2D@gli@@@std@@QEAAPEAVimage2D@gli@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SA_KAEBV?$allocator@Vimage2D@gli@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SA_KAEBV?$allocator@Vimage2D@gli@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?resize@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+66
	DD	imagerel $unwind$?empty@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?capacity@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAAEAVimage2D@gli@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+203
	DD	imagerel $unwind$??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAAEAVimage2D@gli@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBAAEBVimage2D@gli@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+203
	DD	imagerel $unwind$??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBAAEBVimage2D@gli@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXQEAVimage2D@gli@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+258
	DD	imagerel $unwind$?_Change_array@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXQEAVimage2D@gli@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+216
	DD	imagerel $unwind$?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@gli@@YAIAEBVimage2D@1@AEBI@Z DD imagerel $LN11
	DD	imagerel $LN11+188
	DD	imagerel $unwind$?size@gli@@YAIAEBVimage2D@1@AEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@gli@@YAIAEBVtexture2D@1@AEBI@Z DD imagerel $LN6
	DD	imagerel $LN6+157
	DD	imagerel $unwind$?size@gli@@YAIAEBVtexture2D@1@AEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z DD imagerel $LN7
	DD	imagerel $LN7+82
	DD	imagerel $unwind$?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen_string@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlen_string@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@D@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@D@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD imagerel $LN13
	DD	imagerel $LN13+176
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+15
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+222
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+178
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+198
	DD	imagerel $unwind$?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z DD imagerel $LN4
	DD	imagerel $LN4+193
	DD	imagerel $unwind$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ DD imagerel $LN12
	DD	imagerel $LN12+168
	DD	imagerel $unwind$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD imagerel $LN5
	DD	imagerel $LN5+191
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+189
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_cast@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_cast@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_cast@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_cast@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_cast@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_cast@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1locale@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+101
	DD	imagerel $unwind$??1locale@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD imagerel $LN8
	DD	imagerel $LN8+169
	DD	imagerel $unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z DD imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z DD imagerel $LN5
	DD	imagerel $LN5+66
	DD	imagerel $unwind$??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z DD imagerel $LN5
	DD	imagerel $LN5+70
	DD	imagerel $unwind$??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN18
	DD	imagerel $LN18+1102
	DD	imagerel $unwind$?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD imagerel ?dtor$0@?0??saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	imagerel ?dtor$0@?0??saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getFormatFourCC@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z DD imagerel $LN23
	DD	imagerel $LN23+260
	DD	imagerel $unwind$?getFormatFourCC@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getFormatFlags@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z DD imagerel $LN60
	DD	imagerel $LN60+324
	DD	imagerel $unwind$?getFormatFlags@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getFormatBPP@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z DD imagerel $LN26
	DD	imagerel $LN26+289
	DD	imagerel $unwind$?getFormatBPP@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isCompressed@detail@loader_dds9@gtx@gli@@YA_NAEBVtexture2D@4@@Z DD imagerel $LN17
	DD	imagerel $LN17+124
	DD	imagerel $unwind$?isCompressed@detail@loader_dds9@gtx@gli@@YA_NAEBVtexture2D@4@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+91
	DD	imagerel $unwind$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD imagerel $LN6
	DD	imagerel $LN6+177
	DD	imagerel $unwind$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA DD imagerel ?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA
	DD	imagerel ?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ DD imagerel $LN7
	DD	imagerel $LN7+142
	DD	imagerel $unwind$?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD imagerel $LN19
	DD	imagerel $LN19+814
	DD	imagerel $unwind$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD imagerel $LN13
	DD	imagerel $LN13+386
	DD	imagerel $unwind$?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel $LN7
	DD	imagerel $LN7+218
	DD	imagerel $unwind$?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel $LN22
	DD	imagerel $LN22+976
	DD	imagerel $unwind$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD imagerel ?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	imagerel ?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z DD imagerel $LN11
	DD	imagerel $LN11+578
	DD	imagerel $unwind$?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z DD imagerel $LN7
	DD	imagerel $LN7+302
	DD	imagerel $unwind$?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD imagerel $LN8
	DD	imagerel $LN8+300
	DD	imagerel $unwind$?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD imagerel $LN5
	DD	imagerel $LN5+238
	DD	imagerel $unwind$?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel $LN5
	DD	imagerel $LN5+130
	DD	imagerel $unwind$?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z DD imagerel $LN6
	DD	imagerel $LN6+378
	DD	imagerel $unwind$?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ DD imagerel $LN15
	DD	imagerel $LN15+524
	DD	imagerel $unwind$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+88
	DD	imagerel $unwind$?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+131
	DD	imagerel $unwind$?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD imagerel $LN9
	DD	imagerel $LN9+301
	DD	imagerel $unwind$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA+57
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD imagerel ?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA+40
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD imagerel ?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DD	imagerel ?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_simplex@@YAHXZ DD imagerel $LN45
	DD	imagerel $LN45+2868
	DD	imagerel $unwind$?test_simplex@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_simplex@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_simplex@@YAHXZ@4HA
$pdata$?dtor$1@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$1@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$1@?0??test_simplex@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??test_simplex@@YAHXZ@4HA
$pdata$?dtor$2@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$2@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$2@?0??test_simplex@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$2@?0??test_simplex@@YAHXZ@4HA
$pdata$?dtor$3@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$3@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$3@?0??test_simplex@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$3@?0??test_simplex@@YAHXZ@4HA
$pdata$?dtor$4@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$4@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$4@?0??test_simplex@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$4@?0??test_simplex@@YAHXZ@4HA
$pdata$?dtor$5@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$5@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$5@?0??test_simplex@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$5@?0??test_simplex@@YAHXZ@4HA
$pdata$?dtor$6@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$6@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$6@?0??test_simplex@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$6@?0??test_simplex@@YAHXZ@4HA
$pdata$?dtor$7@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$7@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$7@?0??test_simplex@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$7@?0??test_simplex@@YAHXZ@4HA
$pdata$?dtor$8@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$8@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$8@?0??test_simplex@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$8@?0??test_simplex@@YAHXZ@4HA
$pdata$?dtor$9@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$9@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$9@?0??test_simplex@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$9@?0??test_simplex@@YAHXZ@4HA
$pdata$?dtor$10@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$10@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$10@?0??test_simplex@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$10@?0??test_simplex@@YAHXZ@4HA
$pdata$?dtor$11@?0??test_simplex@@YAHXZ@4HA DD imagerel ?dtor$11@?0??test_simplex@@YAHXZ@4HA
	DD	imagerel ?dtor$11@?0??test_simplex@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$11@?0??test_simplex@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+1915
	DD	imagerel $unwind$??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+3366
	DD	imagerel $unwind$??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+3108
	DD	imagerel $unwind$??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_perlin@@YAHXZ DD imagerel $LN45
	DD	imagerel $LN45+2868
	DD	imagerel $unwind$?test_perlin@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_perlin@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_perlin@@YAHXZ@4HA
$pdata$?dtor$1@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$1@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$1@?0??test_perlin@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??test_perlin@@YAHXZ@4HA
$pdata$?dtor$2@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$2@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$2@?0??test_perlin@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$2@?0??test_perlin@@YAHXZ@4HA
$pdata$?dtor$3@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$3@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$3@?0??test_perlin@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$3@?0??test_perlin@@YAHXZ@4HA
$pdata$?dtor$4@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$4@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$4@?0??test_perlin@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$4@?0??test_perlin@@YAHXZ@4HA
$pdata$?dtor$5@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$5@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$5@?0??test_perlin@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$5@?0??test_perlin@@YAHXZ@4HA
$pdata$?dtor$6@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$6@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$6@?0??test_perlin@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$6@?0??test_perlin@@YAHXZ@4HA
$pdata$?dtor$7@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$7@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$7@?0??test_perlin@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$7@?0??test_perlin@@YAHXZ@4HA
$pdata$?dtor$8@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$8@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$8@?0??test_perlin@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$8@?0??test_perlin@@YAHXZ@4HA
$pdata$?dtor$9@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$9@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$9@?0??test_perlin@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$9@?0??test_perlin@@YAHXZ@4HA
$pdata$?dtor$10@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$10@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$10@?0??test_perlin@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$10@?0??test_perlin@@YAHXZ@4HA
$pdata$?dtor$11@?0??test_perlin@@YAHXZ@4HA DD imagerel ?dtor$11@?0??test_perlin@@YAHXZ@4HA
	DD	imagerel ?dtor$11@?0??test_perlin@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$11@?0??test_perlin@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+1753
	DD	imagerel $unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+3206
	DD	imagerel $unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+7351
	DD	imagerel $unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_perlin_pedioric@@YAHXZ DD imagerel $LN45
	DD	imagerel $LN45+2988
	DD	imagerel $unwind$?test_perlin_pedioric@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_perlin_pedioric@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_perlin_pedioric@@YAHXZ@4HA
$pdata$?dtor$1@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$1@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$1@?0??test_perlin_pedioric@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??test_perlin_pedioric@@YAHXZ@4HA
$pdata$?dtor$2@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$2@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$2@?0??test_perlin_pedioric@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$2@?0??test_perlin_pedioric@@YAHXZ@4HA
$pdata$?dtor$3@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$3@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$3@?0??test_perlin_pedioric@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$3@?0??test_perlin_pedioric@@YAHXZ@4HA
$pdata$?dtor$4@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$4@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$4@?0??test_perlin_pedioric@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$4@?0??test_perlin_pedioric@@YAHXZ@4HA
$pdata$?dtor$5@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$5@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$5@?0??test_perlin_pedioric@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$5@?0??test_perlin_pedioric@@YAHXZ@4HA
$pdata$?dtor$6@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$6@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$6@?0??test_perlin_pedioric@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$6@?0??test_perlin_pedioric@@YAHXZ@4HA
$pdata$?dtor$7@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$7@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$7@?0??test_perlin_pedioric@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$7@?0??test_perlin_pedioric@@YAHXZ@4HA
$pdata$?dtor$8@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$8@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$8@?0??test_perlin_pedioric@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$8@?0??test_perlin_pedioric@@YAHXZ@4HA
$pdata$?dtor$9@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$9@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$9@?0??test_perlin_pedioric@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$9@?0??test_perlin_pedioric@@YAHXZ@4HA
$pdata$?dtor$10@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$10@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$10@?0??test_perlin_pedioric@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$10@?0??test_perlin_pedioric@@YAHXZ@4HA
$pdata$?dtor$11@?0??test_perlin_pedioric@@YAHXZ@4HA DD imagerel ?dtor$11@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	imagerel ?dtor$11@?0??test_perlin_pedioric@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$11@?0??test_perlin_pedioric@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+1866
	DD	imagerel $unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+3309
	DD	imagerel $unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+7284
	DD	imagerel $unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD imagerel $LN11
	DD	imagerel $LN11+330
	DD	imagerel $unwind$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA DD imagerel ?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA DD imagerel ?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
	DD	imagerel ?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Convert_size@_K@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Convert_size@_K@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+371
	DD	imagerel $unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0Vimage2D@gli@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@Vimage2D@gli@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0Vimage2D@gli@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@Vimage2D@gli@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@$$CBV?$vector@EV?$allocator@E@std@@@std@@@std@@YAPEBV?$vector@EV?$allocator@E@std@@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@$$CBV?$vector@EV?$allocator@E@std@@@std@@@std@@YAPEBV?$vector@EV?$allocator@E@std@@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pocca@V?$allocator@E@std@@@std@@YAXAEAV?$allocator@E@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Pocca@V?$allocator@E@std@@@std@@YAXAEAV?$allocator@E@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$assign@PEAE$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAAXPEAE0@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??$assign@PEAE$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAAXPEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0E@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@E@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0E@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@E@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@E@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0V?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@E@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z DD imagerel $LN6
	DD	imagerel $LN6+328
	DD	imagerel $unwind$??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA DD imagerel ?dtor$0@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA DD imagerel ?dtor$1@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA
	DD	imagerel ?dtor$1@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD imagerel $LN6
	DD	imagerel $LN6+274
	DD	imagerel $unwind$??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA DD imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA DD imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA
	DD	imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z DD imagerel $LN6
	DD	imagerel $LN6+499
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+332
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@D@std@@YAPEADPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+79
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+75
	DD	imagerel $unwind$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+56
	DD	imagerel $unwind$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MMM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$?0MMM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$permute@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$permute@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$step@Utvec3@glm@@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$step@Utvec3@glm@@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod289@U?$tvec3@M$0A@@glm@@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+205
	DD	imagerel $unwind$??$mod289@U?$tvec3@M$0A@@glm@@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@MAEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@MAEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$permute@M@detail@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$permute@M@detail@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+623
	DD	imagerel $unwind$??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$taylorInvSqrt@M@detail@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$taylorInvSqrt@M@detail@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fade@M$0A@@detail@glm@@YA?AU?$tvec2@M$0A@@1@AEBU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+173
	DD	imagerel $unwind$??$fade@M$0A@@detail@glm@@YA?AU?$tvec2@M$0A@@1@AEBU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@MM@glm@@YAMMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$mix@MM@glm@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fade@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+194
	DD	imagerel $unwind$??$fade@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fade@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+206
	DD	imagerel $unwind$??$fade@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+342
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+206
	DD	imagerel $unwind$??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Adl_verify_range@PEAEPEAE@std@@YAXAEBQEAE0@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??$_Adl_verify_range@PEAEPEAE@std@@YAXAEBQEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEAPEAE@std@@YA?A_TAEAPEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEAPEAE@std@@YA?A_TAEAPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Assign_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0Uforward_iterator_tag@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+469
	DD	imagerel $unwind$??$_Assign_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0Uforward_iterator_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@V?$allocator@E@std@@@std@@YA$$QEAV?$allocator@E@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@V?$allocator@E@std@@@std@@YA$$QEAV?$allocator@E@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBQEAE@std@@YAAEBQEAEAEBQEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBQEAE@std@@YAAEBQEAEAEBQEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+283
	DD	imagerel $unwind$??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+219
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@Vimage2D@gli@@@std@@YAPEAVimage2D@gli@@PEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@Vimage2D@gli@@@std@@YAPEAVimage2D@gli@@PEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@Vimage2D@gli@@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??$destroy@Vimage2D@gli@@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@I@glm@@YAIII@Z DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$??$max@I@glm@@YAIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_step_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$?call@?$compute_step_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod289@U?$tvec4@M$0A@@glm@@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+214
	DD	imagerel $unwind$??$mod289@U?$tvec4@M$0A@@glm@@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod289@M@detail@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$mod289@M@detail@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_scalar@MM$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$?call@?$compute_mix_scalar@MM$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_scalar@MM$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$?call@?$compute_mix_scalar@MM$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@PEAVimage2D@gli@@AEAV?$allocator@Vimage2D@gli@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@PEAVimage2D@gli@@AEAV?$allocator@Vimage2D@gli@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAPEAVimage2D@gli@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAPEAVimage2D@gli@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAVimage2D@gli@@@std@@YA?A_TAEBQEAVimage2D@gli@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAVimage2D@gli@@@std@@YA?A_TAEBQEAVimage2D@gli@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@AEAVimage2D@gli@@@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXAEAVimage2D@gli@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@AEAVimage2D@gli@@@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXAEAVimage2D@gli@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Verify_range@E@std@@YAXQEBE0@Z DD imagerel $LN12
	DD	imagerel $LN12+148
	DD	imagerel $unwind$??$_Verify_range@E@std@@YAXQEBE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$distance@PEAE@std@@YA_JPEAE0@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??$distance@PEAE@std@@YA_JPEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$next@PEAE@std@@YAPEAEPEAE_J@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$next@PEAE@std@@YAPEAEPEAE_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z DD imagerel $LN6
	DD	imagerel $LN6+110
	DD	imagerel $unwind$??$_Copy_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAE@std@@YA?A_TAEBQEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAE@std@@YA?A_TAEBQEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@E@std@@YAPEAEPEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@E@std@@YAPEAEPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@AEAE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$_Emplace_back@AEAE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Zero_range@PEAE@std@@YAPEAEQEAE0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$_Zero_range@PEAE@std@@YAPEAEQEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$min@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$max@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+280
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@Vimage2D@gli@@$$V@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$construct@Vimage2D@gli@@$$V@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAVimage2D@gli@@@std@@YAAEAVimage2D@gli@@AEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEAVimage2D@gli@@@std@@YAAEAVimage2D@gli@@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@Vimage2D@gli@@AEAV12@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@AEAV34@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??$construct@Vimage2D@gli@@AEAV12@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@AEAV34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$advance@PEAE_J@std@@YAXAEAPEAE_J@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$advance@PEAE_J@std@@YAXAEAPEAE_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAE@std@@YAAEAEAEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEAE@std@@YAAEAEAEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@EAEAE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$construct@EAEAE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@E$$V@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$construct@E$$V@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+247
	DD	imagerel $unwind$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+247
	DD	imagerel $unwind$?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAVimage2D@gli@@@std@@YAPEAXPEAVimage2D@gli@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAVimage2D@gli@@@std@@YAPEAXPEAVimage2D@gli@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bfdc9f25c5bfedda
CONST	SEGMENT
__real@bfdc9f25c5bfedda DQ 0bfdc9f25c5bfeddar	; -0.447214
CONST	ENDS
;	COMDAT __real@bf13cd3a
CONST	SEGMENT
__real@bf13cd3a DD 0bf13cd3ar			; -0.57735
CONST	ENDS
;	COMDAT __real@43908000
CONST	SEGMENT
__real@43908000 DD 043908000r			; 289
CONST	ENDS
;	COMDAT __real@43020000
CONST	SEGMENT
__real@43020000 DD 043020000r			; 130
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42fe0000
CONST	SEGMENT
__real@42fe0000 DD 042fe0000r			; 127
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@42440000
CONST	SEGMENT
__real@42440000 DD 042440000r			; 49
CONST	ENDS
;	COMDAT __real@42280000
CONST	SEGMENT
__real@42280000 DD 042280000r			; 42
CONST	ENDS
;	COMDAT __real@42240000
CONST	SEGMENT
__real@42240000 DD 042240000r			; 41
CONST	ENDS
;	COMDAT __real@42080000
CONST	SEGMENT
__real@42080000 DD 042080000r			; 34
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40133333
CONST	SEGMENT
__real@40133333 DD 040133333r			; 2.3
CONST	ENDS
;	COMDAT __real@400ccccd
CONST	SEGMENT
__real@400ccccd DD 0400ccccdr			; 2.2
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe57be0
CONST	SEGMENT
__real@3fe57be0 DD 03fe57be0r			; 1.79284
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fda88a3abb00da5
CONST	SEGMENT
__real@3fda88a3abb00da5 DQ 03fda88a3abb00da5r	; 0.41459
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd1b06d1d200913
CONST	SEGMENT
__real@3fd1b06d1d200913 DQ 03fd1b06d1d200913r	; 0.276393
CONST	ENDS
;	COMDAT __real@3fc5555555555555
CONST	SEGMENT
__real@3fc5555555555555 DQ 03fc5555555555555r	; 0.166667
CONST	ENDS
;	COMDAT __real@3fc1b06d1d200925
CONST	SEGMENT
__real@3fc1b06d1d200925 DQ 03fc1b06d1d200925r	; 0.138197
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f5a8e5c
CONST	SEGMENT
__real@3f5a8e5c DD 03f5a8e5cr			; 0.853735
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ebb67af
CONST	SEGMENT
__real@3ebb67af DD 03ebb67afr			; 0.366025
CONST	ENDS
;	COMDAT __real@3e9e377a
CONST	SEGMENT
__real@3e9e377a DD 03e9e377ar			; 0.309017
CONST	ENDS
;	COMDAT __real@3e58658c
CONST	SEGMENT
__real@3e58658c DD 03e58658cr			; 0.211325
CONST	ENDS
;	COMDAT __real@3e124925
CONST	SEGMENT
__real@3e124925 DD 03e124925r			; 0.142857
CONST	ENDS
;	COMDAT __real@3cc7ce0c
CONST	SEGMENT
__real@3cc7ce0c DD 03cc7ce0cr			; 0.0243902
CONST	ENDS
;	COMDAT __real@3ca72f05
CONST	SEGMENT
__real@3ca72f05 DD 03ca72f05r			; 0.0204082
CONST	ENDS
;	COMDAT __real@3b5ee95c
CONST	SEGMENT
__real@3b5ee95c DD 03b5ee95cr			; 0.00340136
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD imagerel ??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD imagerel ??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 01H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	imagerel ??_R3bad_cast@std@@8
	DD	imagerel ??_R4bad_cast@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	imagerel ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD 01H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	0a8H
	DD	04H
	DD	imagerel ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
	DD	imagerel ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD imagerel ??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$rs	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD imagerel ??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$rs	SEGMENT
??_R0?AVios_base@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVios_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@ios_base@std@@8
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	imagerel ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
CONST	SEGMENT
??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ DB '"'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'p', 00H, 'o'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@NOLPABAB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MG@NOLPABAB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u'
	DB	00H, 't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@GLKFIMHC@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GD@GLKFIMHC@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xutility', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
CONST	SEGMENT
??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@ DB 'transposed pointer ran'
	DB	'ge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@DINNLDHA@?$AA?$CC?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd@
CONST	SEGMENT
??_C@_1EC@DINNLDHA@?$AA?$CC?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd@ DB '"'
	DB	00H, 'f', 00H, 'r', 00H, 'o', 00H, 'n', 00H, 't', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'e', 00H
	DB	'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PFIPNLNI@front?$CI?$CJ?5called?5on?5empty?5string@
CONST	SEGMENT
??_C@_0BP@PFIPNLNI@front?$CI?$CJ?5called?5on?5empty?5string@ DB 'front() '
	DB	'called on empty string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@IKNKMNDN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@IKNKMNDN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@MAJKHLEE@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@MAJKHLEE@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xstring', 00H		; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
	DD	0a8H
CONST	ENDS
;	COMDAT ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DQ FLAT:??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
	DQ	FLAT:??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_C@_04HLKGINEK@DDS?5@
CONST	SEGMENT
??_C@_04HLKGINEK@DDS?5@ DB 'DDS ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DQ FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DQ	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
	DQ	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DQ	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DQ	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ
	DQ	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
	DQ	FLAT:?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
	DQ	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DQ	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DQ	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z
	DQ	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
CONST	ENDS
;	COMDAT _CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_cast@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
_CTA2?AVbad_cast@std@@ DD 02H
	DD	imagerel _CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI2?AVbad_cast@std@@
xdata$x	SEGMENT
_TI2?AVbad_cast@std@@ DD 00H
	DD	imagerel ??1bad_cast@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DQ FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DQ	FLAT:??_Ebad_cast@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@ILJMNGPA@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1ME@ILJMNGPA@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'a', 00H, 'l'
	DB	00H, '\', 00H, 'g', 00H, 'l', 00H, 'i', 00H, '\', 00H, 'c', 00H
	DB	'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAVimage2D@gli@@@std@@YAPEAXPEAVimage2D@gli@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z DD 033001H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z DD 033001H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@E$$V@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAE@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@EAEAE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEAE@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAE@std@@YAAEAEAEAE@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$advance@PEAE_J@std@@YAXAEAPEAE_J@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@Vimage2D@gli@@AEAV12@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@AEAV34@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAVimage2D@gli@@@std@@YAAEAVimage2D@gli@@AEAV12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@Vimage2D@gli@@$$V@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Zero_range@PEAE@std@@YAPEAEQEAE0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@AEAE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEAE@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@E@std@@YAPEAEPEAE@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAE@std@@YA?A_TAEBQEAE@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$next@PEAE@std@@YAPEAEPEAE_J@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$distance@PEAE@std@@YA_JPEAE0@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Verify_range@E@std@@YAXQEBE0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@AEAVimage2D@gli@@@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXAEAVimage2D@gli@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAVimage2D@gli@@@std@@YA?A_TAEBQEAVimage2D@gli@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAPEAVimage2D@gli@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@PEAVimage2D@gli@@AEAV?$allocator@Vimage2D@gli@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_scalar@MM$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBM@Z DD 031a01H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z DD 021401H
	DD	070101214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_scalar@MM$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBM@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod289@M@detail@glm@@YAMAEBM@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod289@U?$tvec4@M$0A@@glm@@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z DD 031201H
	DD	0140112H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_step_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DD	08H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z DD 021301H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@I@glm@@YAIII@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@Vimage2D@gli@@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@Vimage2D@gli@@@std@@YAPEAVimage2D@gli@@PEAV12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z DD 022a11H
	DD	07010b214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_copy<unsigned char *,std::allocator<unsigned char> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_copy<unsigned char *,std::allocator<unsigned char> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_copy<unsigned char *,std::allocator<unsigned char> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBQEAE@std@@YAAEBQEAEAEBQEAE@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@V?$allocator@E@std@@@std@@YA$$QEAV?$allocator@E@0@AEAV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Assign_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0Uforward_iterator_tag@1@@Z DD 021c01H
	DD	07015f21cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEAPEAE@std@@YA?A_TAEAPEAE@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Adl_verify_range@PEAEPEAE@std@@YAXAEBQEAE0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z DB 06H
	DB	00H
	DB	00H
	DB	0d0H
	DB	02H
	DB	'x'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_copy<gli::image2D *,std::allocator<gli::image2D> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_copy<gli::image2D *,std::allocator<gli::image2D> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_copy<gli::image2D *,std::allocator<gli::image2D> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z DB 06H
	DB	00H
	DB	00H
	DB	'~'
	DB	02H
	DB	'd'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z DD 022a11H
	DD	070109214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<gli::image2D> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcVarDesc DD 028H ; std::_Uninitialized_value_construct_n<std::allocator<gli::image2D> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<gli::image2D> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'm', 03H
	DB	02H
	DB	0a8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021419H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fade@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z DD 031201H
	DD	0120112H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z DD 021a01H
	DD	07016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fade@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z DD 020f01H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@MM@glm@@YAMMMM@Z DD 021701H
	DD	070135217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z DD 021a01H
	DD	07016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fade@M$0A@@detail@glm@@YA?AU?$tvec2@M$0A@@1@AEBU21@@Z DD 020f01H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$taylorInvSqrt@M@detail@glm@@YAMAEBM@Z DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z DD 043101H
	DD	02d0118H
	DD	060107011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z$rtcName$0 DB 070H ; glm::gtc::grad4<float,0>
	DB	058H
	DB	059H
	DB	05aH
	DB	00H
	ORG $+3
??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z$rtcName$1 DB 073H ; glm::gtc::grad4<float,0>
	DB	00H
	ORG $+6
??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z$rtcVarDesc DD 058H ; glm::gtc::grad4<float,0>
	DD	010H
	DQ	FLAT:??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z$rtcName$0
	ORG $+96
??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z$rtcFrameData DD 02H ; glm::gtc::grad4<float,0>
	DD	00H
	DQ	FLAT:??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$permute@M@detail@glm@@YAMAEBM@Z DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@MAEBU?$tvec3@M$0A@@1@@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod289@U?$tvec3@M$0A@@glm@@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z DD 031201H
	DD	0120112H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$step@Utvec3@glm@@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$permute@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MMM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@MM@Z DD 011701H
	DD	07017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z DD 021419H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD 022f01H
	DD	07015b219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc DD 048H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0
	ORG $+48
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DD	00H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z DD 033501H
	DD	012011cH
	DD	07015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcVarDesc DD 068H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
	DD	08H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcName$0
	ORG $+48
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
	DD	00H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	0f0H
	DB	02H
	DB	'`'
	DB	04H
	DB	'`'
	DB	02H
	DB	'0'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
	DD	imagerel $ip2state$??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD 032b11H
	DD	0140112H
	DD	0700bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z$rtcName$0 DB 024H ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>
	DB	053H
	DB	032H
	DB	032H
	DB	00H
	ORG $+3
??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z$rtcName$1 DB 05fH ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z$rtcName$2 DB 05fH ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>
	DB	047H
	DB	075H
	DB	061H
	DB	072H
	DB	064H
	DB	00H
	ORG $+1
??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z$rtcFrameData DD 03H ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>
	DD	00H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z$rtcVarDesc
	ORG $+8
??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z$rtcVarDesc DD 088H ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>
	DD	08H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z DD 021301H
	DD	0700f3213H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z DB 0aH
	DB	00H
	DB	00H
	DB	09H, 02H
	DB	02H
	DB	'h'
	DB	04H
	DB	0b0H
	DB	02H
	DB	'0'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z
	DD	imagerel $ip2state$??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z DD 033511H
	DD	014011cH
	DD	07015H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z$rtcName$0 DB 024H ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>
	DB	053H
	DB	032H
	DB	030H
	DB	00H
	ORG $+3
??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z$rtcName$1 DB 05fH ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z$rtcName$2 DB 05fH ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>
	DB	047H
	DB	075H
	DB	061H
	DB	072H
	DB	064H
	DB	00H
	ORG $+1
??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z$rtcFrameData DD 03H ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>
	DD	00H
	DQ	FLAT:??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z$rtcVarDesc
	ORG $+8
??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z$rtcVarDesc DD 088H ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>
	DD	08H
	DQ	FLAT:??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@E@1@@Z DD 021301H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0E@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@E@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$assign@PEAE$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAAXPEAE0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pocca@V?$allocator@E@std@@@std@@YAXAEAV?$allocator@E@0@AEBV10@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@$$CBV?$vector@EV?$allocator@E@std@@@std@@@std@@YAPEBV?$vector@EV?$allocator@E@std@@@0@AEBV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0Vimage2D@gli@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@Vimage2D@gli@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Convert_size@_K@std@@YA_K_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DB 0aH
	DB	00H
	DB	00H
	DB	'h'
	DB	02H
	DB	'M', 02H
	DB	04H
	DB	'v'
	DB	02H
	DB	'.'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
	DD	imagerel $ip2state$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD 032611H
	DD	012010dH
	DD	07006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$0 DB 05fH ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+2
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$1 DB 05fH ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DB	050H
	DB	073H
	DB	061H
	DB	076H
	DB	065H
	DB	00H
	ORG $+1
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$2 DB 05fH ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DB	050H
	DB	073H
	DB	061H
	DB	076H
	DB	065H
	DB	05fH
	DB	067H
	DB	075H
	DB	061H
	DB	072H
	DB	064H
	DB	00H
	ORG $+3
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcVarDesc DD 078H ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DD	08H
	DQ	FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$0
	ORG $+144
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcFrameData DD 03H ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DD	00H
	DQ	FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD 043201H
	DD	02810119H
	DD	0600b700cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 050H ; glm::perlin<float,0>
	DB	069H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$1 DB 050H ; glm::perlin<float,0>
	DB	069H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$2 DB 050H ; glm::perlin<float,0>
	DB	066H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$3 DB 050H ; glm::perlin<float,0>
	DB	066H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$4 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$5 DB 069H ; glm::perlin<float,0>
	DB	079H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$6 DB 069H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$7 DB 069H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$8 DB 069H ; glm::perlin<float,0>
	DB	077H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$9 DB 069H ; glm::perlin<float,0>
	DB	077H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$10 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$11 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$12 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$13 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	030H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$14 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	030H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$15 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	031H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$16 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	031H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$17 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$18 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$19 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$20 DB 067H ; glm::perlin<float,0>
	DB	077H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$21 DB 073H ; glm::perlin<float,0>
	DB	077H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$22 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$23 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$24 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$25 DB 067H ; glm::perlin<float,0>
	DB	077H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$26 DB 073H ; glm::perlin<float,0>
	DB	077H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$27 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$28 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$29 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$30 DB 067H ; glm::perlin<float,0>
	DB	077H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$31 DB 073H ; glm::perlin<float,0>
	DB	077H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$32 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$33 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$34 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$35 DB 067H ; glm::perlin<float,0>
	DB	077H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$36 DB 073H ; glm::perlin<float,0>
	DB	077H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$37 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$38 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	030H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$39 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	030H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$40 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	030H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$41 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	031H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$42 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	031H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$43 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	031H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$44 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	031H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$45 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	030H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$46 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	030H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$47 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	030H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$48 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	030H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$49 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	031H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$50 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	031H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$51 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	031H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$52 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	031H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$53 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	030H
	DB	030H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$54 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	030H
	DB	031H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$55 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	031H
	DB	030H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$56 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	031H
	DB	031H
	DB	00H
	ORG $+5
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$57 DB 066H ; glm::perlin<float,0>
	DB	061H
	DB	064H
	DB	065H
	DB	05fH
	DB	078H
	DB	079H
	DB	07aH
	DB	077H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$58 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	030H
	DB	077H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$59 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	031H
	DB	077H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$60 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	07aH
	DB	077H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$61 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	079H
	DB	07aH
	DB	077H
	DB	00H
	ORG $+6
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 0bf8H ; glm::perlin<float,0>
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$61
	DD	0bc8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$60
	DD	0b98H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$59
	DD	0b68H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$58
	DD	0b38H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$57
	DD	0ac8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$56
	DD	0a98H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$55
	DD	0a68H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$54
	DD	0a38H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$53
	DD	0a08H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$52
	DD	09d8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$51
	DD	09a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$50
	DD	0978H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$49
	DD	0948H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$48
	DD	0918H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$47
	DD	08e8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$46
	DD	08b8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$45
	DD	0888H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$44
	DD	0858H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$43
	DD	0828H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$42
	DD	07f8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$41
	DD	07c8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$40
	DD	0798H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$39
	DD	0768H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$38
	DD	0738H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$37
	DD	0708H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$36
	DD	06d8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$35
	DD	06a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$34
	DD	0678H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$33
	DD	0648H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$32
	DD	0618H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$31
	DD	05e8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$30
	DD	05b8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$29
	DD	0588H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$28
	DD	0558H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$27
	DD	0528H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$26
	DD	04f8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$25
	DD	04c8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$24
	DD	0498H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$23
	DD	0468H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$22
	DD	0438H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$21
	DD	0408H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$20
	DD	03d8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$19
	DD	03a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$18
	DD	0378H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$17
	DD	0348H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$16
	DD	0318H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$15
	DD	02e8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$14
	DD	02b8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$13
	DD	0288H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$12
	DD	0258H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$11
	DD	0228H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$10
	DD	01f8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$9
	DD	01c8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$8
	DD	0198H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$7
	DD	0168H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$6
	DD	0138H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$5
	DD	0108H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$4
	DD	0d8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$3
	DD	0a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$2
	DD	078H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+2976
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 03eH ; glm::perlin<float,0>
	DD	00H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD 042c01H
	DD	01370113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 050H ; glm::perlin<float,0>
	DB	069H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$1 DB 050H ; glm::perlin<float,0>
	DB	069H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$2 DB 050H ; glm::perlin<float,0>
	DB	066H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$3 DB 050H ; glm::perlin<float,0>
	DB	066H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$4 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$5 DB 069H ; glm::perlin<float,0>
	DB	079H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$6 DB 069H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$7 DB 069H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$8 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$9 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$10 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$11 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$12 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$13 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$14 DB 073H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$15 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$16 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$17 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$18 DB 073H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$19 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$20 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$21 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$22 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$23 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$24 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$25 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$26 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$27 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$28 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$30 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	07aH
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$29 DB 066H ; glm::perlin<float,0>
	DB	061H
	DB	064H
	DB	065H
	DB	05fH
	DB	078H
	DB	079H
	DB	07aH
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$31 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	079H
	DB	07aH
	DB	00H
	ORG $+7
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 0638H ; glm::perlin<float,0>
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$31
	DD	0608H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$30
	DD	05d8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$29
	DD	0588H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$28
	DD	0558H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$27
	DD	0528H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$26
	DD	04f8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$25
	DD	04c8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$24
	DD	0498H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$23
	DD	0468H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$22
	DD	0438H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$21
	DD	0408H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$20
	DD	03d8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$19
	DD	03a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$18
	DD	0378H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$17
	DD	0348H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$16
	DD	0318H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$15
	DD	02e8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$14
	DD	02b8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$13
	DD	0288H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$12
	DD	0258H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$11
	DD	0228H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$10
	DD	01f8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$9
	DD	01c8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$8
	DD	0198H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$7
	DD	0168H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$6
	DD	0138H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$5
	DD	0108H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$4
	DD	0d8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$3
	DD	0a8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$2
	DD	078H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+1536
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 020H ; glm::perlin<float,0>
	DD	00H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD 042c01H
	DD	0970113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 050H ; glm::perlin<float,0>
	DB	069H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$1 DB 050H ; glm::perlin<float,0>
	DB	066H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$2 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$3 DB 069H ; glm::perlin<float,0>
	DB	079H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$4 DB 066H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$5 DB 066H ; glm::perlin<float,0>
	DB	079H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$6 DB 069H ; glm::perlin<float,0>
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$7 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$8 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$9 DB 074H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$10 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$11 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$12 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$13 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$14 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$15 DB 066H ; glm::perlin<float,0>
	DB	061H
	DB	064H
	DB	065H
	DB	05fH
	DB	078H
	DB	079H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$16 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	078H
	DB	00H
	ORG $+4
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 0308H ; glm::perlin<float,0>
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$16
	DD	02e8H
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$15
	DD	02a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$14
	DD	0288H
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$13
	DD	0268H
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$12
	DD	0248H
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$11
	DD	0228H
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$10
	DD	01f8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$9
	DD	01c8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$8
	DD	0198H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$7
	DD	0168H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$6
	DD	0138H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$5
	DD	0108H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$4
	DD	0d8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$3
	DD	0a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$2
	DD	078H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+816
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 011H ; glm::perlin<float,0>
	DD	00H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z DD 042d01H
	DD	02850114H
	DD	060067007H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$0 DB 050H ; glm::perlin<float,0>
	DB	069H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$1 DB 050H ; glm::perlin<float,0>
	DB	069H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$2 DB 050H ; glm::perlin<float,0>
	DB	066H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$3 DB 050H ; glm::perlin<float,0>
	DB	066H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$4 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$5 DB 069H ; glm::perlin<float,0>
	DB	079H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$6 DB 069H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$7 DB 069H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$8 DB 069H ; glm::perlin<float,0>
	DB	077H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$9 DB 069H ; glm::perlin<float,0>
	DB	077H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$10 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$11 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$12 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$13 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	030H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$14 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	030H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$15 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	031H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$16 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	031H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$17 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$18 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$19 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$20 DB 067H ; glm::perlin<float,0>
	DB	077H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$21 DB 073H ; glm::perlin<float,0>
	DB	077H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$22 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$23 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$24 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$25 DB 067H ; glm::perlin<float,0>
	DB	077H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$26 DB 073H ; glm::perlin<float,0>
	DB	077H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$27 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$28 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$29 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$30 DB 067H ; glm::perlin<float,0>
	DB	077H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$31 DB 073H ; glm::perlin<float,0>
	DB	077H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$32 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$33 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$34 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$35 DB 067H ; glm::perlin<float,0>
	DB	077H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$36 DB 073H ; glm::perlin<float,0>
	DB	077H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$37 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	030H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$38 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	030H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$39 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	030H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$40 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	030H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$41 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	031H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$42 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	031H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$43 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	031H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$44 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	031H
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$45 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	030H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$46 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	030H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$47 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	030H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$48 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	030H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$49 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	031H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$50 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	031H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$51 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	031H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$52 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	031H
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$53 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	030H
	DB	030H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$54 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	030H
	DB	031H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$55 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	031H
	DB	030H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$56 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	031H
	DB	031H
	DB	00H
	ORG $+5
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$57 DB 066H ; glm::perlin<float,0>
	DB	061H
	DB	064H
	DB	065H
	DB	05fH
	DB	078H
	DB	079H
	DB	07aH
	DB	077H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$58 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	030H
	DB	077H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$59 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	031H
	DB	077H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$60 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	07aH
	DB	077H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$61 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	079H
	DB	07aH
	DB	077H
	DB	00H
	ORG $+6
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc DD 0bf8H ; glm::perlin<float,0>
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$61
	DD	0bc8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$60
	DD	0b98H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$59
	DD	0b68H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$58
	DD	0b38H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$57
	DD	0ac8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$56
	DD	0a98H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$55
	DD	0a68H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$54
	DD	0a38H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$53
	DD	0a08H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$52
	DD	09d8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$51
	DD	09a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$50
	DD	0978H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$49
	DD	0948H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$48
	DD	0918H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$47
	DD	08e8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$46
	DD	08b8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$45
	DD	0888H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$44
	DD	0858H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$43
	DD	0828H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$42
	DD	07f8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$41
	DD	07c8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$40
	DD	0798H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$39
	DD	0768H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$38
	DD	0738H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$37
	DD	0708H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$36
	DD	06d8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$35
	DD	06a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$34
	DD	0678H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$33
	DD	0648H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$32
	DD	0618H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$31
	DD	05e8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$30
	DD	05b8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$29
	DD	0588H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$28
	DD	0558H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$27
	DD	0528H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$26
	DD	04f8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$25
	DD	04c8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$24
	DD	0498H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$23
	DD	0468H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$22
	DD	0438H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$21
	DD	0408H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$20
	DD	03d8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$19
	DD	03a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$18
	DD	0378H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$17
	DD	0348H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$16
	DD	0318H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$15
	DD	02e8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$14
	DD	02b8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$13
	DD	0288H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$12
	DD	0258H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$11
	DD	0228H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$10
	DD	01f8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$9
	DD	01c8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$8
	DD	0198H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$7
	DD	0168H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$6
	DD	0138H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$5
	DD	0108H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$4
	DD	0d8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$3
	DD	0a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$2
	DD	078H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$0
	ORG $+2976
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData DD 03eH ; glm::perlin<float,0>
	DD	00H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD 042701H
	DD	0131010eH
	DD	060067007H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 050H ; glm::perlin<float,0>
	DB	069H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$1 DB 050H ; glm::perlin<float,0>
	DB	069H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$2 DB 050H ; glm::perlin<float,0>
	DB	066H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$3 DB 050H ; glm::perlin<float,0>
	DB	066H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$4 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$5 DB 069H ; glm::perlin<float,0>
	DB	079H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$6 DB 069H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$7 DB 069H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$8 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$9 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$10 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	079H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$11 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$12 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$13 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$14 DB 073H ; glm::perlin<float,0>
	DB	07aH
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$15 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$16 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$17 DB 067H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$18 DB 073H ; glm::perlin<float,0>
	DB	07aH
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$19 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$20 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$21 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$22 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$23 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$24 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$25 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$26 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	031H
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$27 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	030H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$28 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	031H
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$30 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	07aH
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$29 DB 066H ; glm::perlin<float,0>
	DB	061H
	DB	064H
	DB	065H
	DB	05fH
	DB	078H
	DB	079H
	DB	07aH
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$31 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	079H
	DB	07aH
	DB	00H
	ORG $+7
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 0638H ; glm::perlin<float,0>
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$31
	DD	0608H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$30
	DD	05d8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$29
	DD	0588H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$28
	DD	0558H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$27
	DD	0528H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$26
	DD	04f8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$25
	DD	04c8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$24
	DD	0498H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$23
	DD	0468H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$22
	DD	0438H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$21
	DD	0408H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$20
	DD	03d8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$19
	DD	03a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$18
	DD	0378H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$17
	DD	0348H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$16
	DD	0318H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$15
	DD	02e8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$14
	DD	02b8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$13
	DD	0288H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$12
	DD	0258H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$11
	DD	0228H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$10
	DD	01f8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$9
	DD	01c8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$8
	DD	0198H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$7
	DD	0168H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$6
	DD	0138H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$5
	DD	0108H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$4
	DD	0d8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$3
	DD	0a8H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$2
	DD	078H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+1536
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 020H ; glm::perlin<float,0>
	DD	00H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z DD 042701H
	DD	093010eH
	DD	060067007H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$0 DB 050H ; glm::perlin<float,0>
	DB	069H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$1 DB 050H ; glm::perlin<float,0>
	DB	066H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$2 DB 069H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$3 DB 069H ; glm::perlin<float,0>
	DB	079H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$4 DB 066H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$5 DB 066H ; glm::perlin<float,0>
	DB	079H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$6 DB 069H ; glm::perlin<float,0>
	DB	00H
	ORG $+2
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$7 DB 067H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$8 DB 067H ; glm::perlin<float,0>
	DB	079H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$9 DB 074H ; glm::perlin<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$10 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$11 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	030H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$12 DB 067H ; glm::perlin<float,0>
	DB	030H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$13 DB 067H ; glm::perlin<float,0>
	DB	031H
	DB	031H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$14 DB 06eH ; glm::perlin<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	00H
	ORG $+3
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$15 DB 066H ; glm::perlin<float,0>
	DB	061H
	DB	064H
	DB	065H
	DB	05fH
	DB	078H
	DB	079H
	DB	00H
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$16 DB 06eH ; glm::perlin<float,0>
	DB	05fH
	DB	078H
	DB	00H
	ORG $+4
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc DD 0308H ; glm::perlin<float,0>
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$16
	DD	02e8H
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$15
	DD	02a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$14
	DD	0288H
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$13
	DD	0268H
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$12
	DD	0248H
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$11
	DD	0228H
	DD	08H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$10
	DD	01f8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$9
	DD	01c8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$8
	DD	0198H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$7
	DD	0168H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$6
	DD	0138H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$5
	DD	0108H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$4
	DD	0d8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$3
	DD	0a8H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$2
	DD	078H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$0
	ORG $+816
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData DD 011H ; glm::perlin<float,0>
	DD	00H
	DQ	FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z DD 042701H
	DD	0f3010eH
	DD	060067007H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$0 DB 043H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$1 DB 069H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$2 DB 078H ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$3 DB 069H ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$4 DB 069H ; glm::simplex<float,0>
	DB	073H
	DB	058H
	DB	00H
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$5 DB 069H ; glm::simplex<float,0>
	DB	073H
	DB	059H
	DB	05aH
	DB	00H
	ORG $+3
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$6 DB 069H ; glm::simplex<float,0>
	DB	033H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$7 DB 069H ; glm::simplex<float,0>
	DB	032H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$8 DB 069H ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$9 DB 078H ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$10 DB 078H ; glm::simplex<float,0>
	DB	032H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$11 DB 078H ; glm::simplex<float,0>
	DB	033H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$12 DB 078H ; glm::simplex<float,0>
	DB	034H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$13 DB 06aH ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$14 DB 06aH ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$15 DB 069H ; glm::simplex<float,0>
	DB	070H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$16 DB 070H ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$17 DB 070H ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$18 DB 070H ; glm::simplex<float,0>
	DB	032H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$19 DB 070H ; glm::simplex<float,0>
	DB	033H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$20 DB 070H ; glm::simplex<float,0>
	DB	034H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$21 DB 06eH ; glm::simplex<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	00H
	ORG $+3
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$22 DB 06dH ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$23 DB 06dH ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData DD 018H ; glm::simplex<float,0>
	DD	00H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc
	ORG $+8
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc DD 0488H ; glm::simplex<float,0>
	DD	08H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$23
	DD	0458H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$22
	DD	0428H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$21
	DD	03f8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$20
	DD	03c8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$19
	DD	0398H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$18
	DD	0368H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$17
	DD	0338H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$16
	DD	0308H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$15
	DD	02d8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$14
	DD	02b4H
	DD	04H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$13
	DD	0288H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$12
	DD	0258H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$11
	DD	0228H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$10
	DD	01f8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$9
	DD	01c8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$8
	DD	0198H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$7
	DD	0168H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$6
	DD	0138H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$5
	DD	0108H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$4
	DD	0d8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$3
	DD	0a8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$2
	DD	078H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD 042701H
	DD	013f010eH
	DD	060067007H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 043H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$1 DB 044H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$2 DB 069H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$3 DB 078H ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$4 DB 067H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$5 DB 06cH ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$6 DB 069H ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$7 DB 069H ; glm::simplex<float,0>
	DB	032H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$8 DB 078H ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$9 DB 078H ; glm::simplex<float,0>
	DB	032H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$10 DB 078H ; glm::simplex<float,0>
	DB	033H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$11 DB 070H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$12 DB 06eH ; glm::simplex<float,0>
	DB	073H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$13 DB 06aH ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$14 DB 078H ; glm::simplex<float,0>
	DB	05fH
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$15 DB 079H ; glm::simplex<float,0>
	DB	05fH
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$16 DB 078H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$17 DB 079H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$18 DB 068H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$19 DB 062H ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$20 DB 062H ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$21 DB 073H ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$22 DB 073H ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$23 DB 073H ; glm::simplex<float,0>
	DB	068H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$24 DB 061H ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$25 DB 061H ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$26 DB 070H ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$27 DB 070H ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$28 DB 070H ; glm::simplex<float,0>
	DB	032H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$29 DB 070H ; glm::simplex<float,0>
	DB	033H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$30 DB 06eH ; glm::simplex<float,0>
	DB	06fH
	DB	072H
	DB	06dH
	DB	00H
	ORG $+3
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$31 DB 06dH ; glm::simplex<float,0>
	DB	00H
	ORG $+6
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 020H ; glm::simplex<float,0>
	DD	00H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
	ORG $+8
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 0608H ; glm::simplex<float,0>
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$31
	DD	05d8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$30
	DD	05a8H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$29
	DD	0578H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$28
	DD	0548H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$27
	DD	0518H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$26
	DD	04e8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$25
	DD	04b8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$24
	DD	0488H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$23
	DD	0458H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$22
	DD	0428H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$21
	DD	03f8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$20
	DD	03c8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$19
	DD	0398H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$18
	DD	0368H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$17
	DD	0338H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$16
	DD	0308H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$15
	DD	02d8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$14
	DD	02a8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$13
	DD	0278H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$12
	DD	0248H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$11
	DD	0218H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$10
	DD	01e8H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$9
	DD	01b8H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$8
	DD	0188H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$7
	DD	0158H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$6
	DD	0128H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$5
	DD	0f8H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$4
	DD	0c8H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$3
	DD	098H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$2
	DD	068H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z DD 042701H
	DD	08b010eH
	DD	060067007H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$0 DB 043H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$1 DB 069H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$2 DB 078H ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$3 DB 069H ; glm::simplex<float,0>
	DB	031H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$4 DB 078H ; glm::simplex<float,0>
	DB	031H
	DB	032H
	DB	00H
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$5 DB 070H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$6 DB 06dH ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$7 DB 078H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$8 DB 068H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$9 DB 06fH ; glm::simplex<float,0>
	DB	078H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$10 DB 061H ; glm::simplex<float,0>
	DB	030H
	DB	00H
	ORG $+1
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$11 DB 067H ; glm::simplex<float,0>
	DB	00H
	ORG $+2
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc DD 0228H ; glm::simplex<float,0>
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$11
	DD	01f8H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$10
	DD	01c8H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$9
	DD	0198H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$8
	DD	0168H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$7
	DD	0138H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$6
	DD	0108H
	DD	0cH
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$5
	DD	0d8H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$4
	DD	0b8H
	DD	08H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$3
	DD	098H
	DD	08H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcName$0
	ORG $+576
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData DD 0cH ; glm::simplex<float,0>
	DD	00H
	DQ	FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$11@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$10@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$9@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$8@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$7@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$6@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$5@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$4@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$3@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$2@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_perlin_pedioric@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$11@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$10@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$9@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$8@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$7@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$6@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$5@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$4@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$3@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$2@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_perlin@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$11@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$10@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$9@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$8@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$7@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$6@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$5@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$4@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$3@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$2@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_simplex@@YAHXZ@4HA
	DD	00H
	DD	05H
voltbl	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_perlin_pedioric@@YAHXZ
	DD	024H
	DD	0b93H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_perlin@@YAHXZ
	DD	024H
	DD	0b1bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_simplex@@YAHXZ
	DD	024H
	DD	0b1bH
voltbl	ENDS
xdata	SEGMENT
$unwind$?test_simplex@@YAHXZ DD 032c19H
	DD	0880109H
	DD	07002H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?test_simplex@@YAHXZ
	DD	0432H
$cppxdata$?test_simplex@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_simplex@@YAHXZ
	DD	imagerel $ip2state$?test_simplex@@YAHXZ
$stateUnwindMap$?test_simplex@@YAHXZ DB 018H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_simplex@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??test_simplex@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0??test_simplex@@YAHXZ@4HA
	DB	056H
	DD	imagerel ?dtor$3@?0??test_simplex@@YAHXZ@4HA
	DB	0aeH
	DD	imagerel ?dtor$4@?0??test_simplex@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$5@?0??test_simplex@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$6@?0??test_simplex@@YAHXZ@4HA
	DB	056H
	DD	imagerel ?dtor$7@?0??test_simplex@@YAHXZ@4HA
	DB	09dH
	DB	02H
	DD	imagerel ?dtor$8@?0??test_simplex@@YAHXZ@4HA
	DB	036H
	DD	imagerel ?dtor$9@?0??test_simplex@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$10@?0??test_simplex@@YAHXZ@4HA
	DB	056H
	DD	imagerel ?dtor$11@?0??test_simplex@@YAHXZ@4HA
$ip2state$?test_simplex@@YAHXZ DB '2'
	DB	00H
	DB	00H
	DB	098H
	DB	02H
	DB	0c1H, 07H
	DB	04H
	DB	0b2H
	DB	06H
	DB	'L'
	DB	04H
	DB	'=', 02H
	DB	08H
	DB	','
	DB	04H
	DB	01cH
	DB	02H
	DB	01cH
	DB	00H
	DB	'Z'
	DB	0aH
	DB	0dH, 09H
	DB	0cH
	DB	0b2H
	DB	0eH
	DB	'L'
	DB	0cH
	DB	'U', 02H
	DB	010H
	DB	','
	DB	0cH
	DB	01cH
	DB	0aH
	DB	01cH
	DB	00H
	DB	'`'
	DB	012H
	DB	'E', 09H
	DB	014H
	DB	0b2H
	DB	016H
	DB	'L'
	DB	014H
	DB	'U', 02H
	DB	018H
	DB	','
	DB	014H
	DB	01cH
	DB	012H
	DB	01cH
	DB	00H
$unwind$?dtor$0@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$3@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$4@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$5@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$6@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$7@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$8@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$9@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$10@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$11@?0??test_simplex@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_perlin@@YAHXZ DD 032c19H
	DD	0880109H
	DD	07002H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?test_perlin@@YAHXZ
	DD	0432H
$cppxdata$?test_perlin@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_perlin@@YAHXZ
	DD	imagerel $ip2state$?test_perlin@@YAHXZ
$stateUnwindMap$?test_perlin@@YAHXZ DB 018H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_perlin@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??test_perlin@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0??test_perlin@@YAHXZ@4HA
	DB	056H
	DD	imagerel ?dtor$3@?0??test_perlin@@YAHXZ@4HA
	DB	0aeH
	DD	imagerel ?dtor$4@?0??test_perlin@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$5@?0??test_perlin@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$6@?0??test_perlin@@YAHXZ@4HA
	DB	056H
	DD	imagerel ?dtor$7@?0??test_perlin@@YAHXZ@4HA
	DB	09dH
	DB	02H
	DD	imagerel ?dtor$8@?0??test_perlin@@YAHXZ@4HA
	DB	036H
	DD	imagerel ?dtor$9@?0??test_perlin@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$10@?0??test_perlin@@YAHXZ@4HA
	DB	056H
	DD	imagerel ?dtor$11@?0??test_perlin@@YAHXZ@4HA
$ip2state$?test_perlin@@YAHXZ DB '2'
	DB	00H
	DB	00H
	DB	098H
	DB	02H
	DB	0c1H, 07H
	DB	04H
	DB	0b2H
	DB	06H
	DB	'L'
	DB	04H
	DB	'=', 02H
	DB	08H
	DB	','
	DB	04H
	DB	01cH
	DB	02H
	DB	01cH
	DB	00H
	DB	'Z'
	DB	0aH
	DB	0dH, 09H
	DB	0cH
	DB	0b2H
	DB	0eH
	DB	'L'
	DB	0cH
	DB	'U', 02H
	DB	010H
	DB	','
	DB	0cH
	DB	01cH
	DB	0aH
	DB	01cH
	DB	00H
	DB	'`'
	DB	012H
	DB	'E', 09H
	DB	014H
	DB	0b2H
	DB	016H
	DB	'L'
	DB	014H
	DB	'U', 02H
	DB	018H
	DB	','
	DB	014H
	DB	01cH
	DB	012H
	DB	01cH
	DB	00H
$unwind$?dtor$0@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$3@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$4@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$5@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$6@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$7@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$8@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$9@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$10@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$11@?0??test_perlin@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_perlin_pedioric@@YAHXZ DD 032c19H
	DD	0900109H
	DD	07002H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?test_perlin_pedioric@@YAHXZ
	DD	0472H
$cppxdata$?test_perlin_pedioric@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_perlin_pedioric@@YAHXZ
	DD	imagerel $ip2state$?test_perlin_pedioric@@YAHXZ
$stateUnwindMap$?test_perlin_pedioric@@YAHXZ DB 018H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_perlin_pedioric@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??test_perlin_pedioric@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0??test_perlin_pedioric@@YAHXZ@4HA
	DB	056H
	DD	imagerel ?dtor$3@?0??test_perlin_pedioric@@YAHXZ@4HA
	DB	0aeH
	DD	imagerel ?dtor$4@?0??test_perlin_pedioric@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$5@?0??test_perlin_pedioric@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$6@?0??test_perlin_pedioric@@YAHXZ@4HA
	DB	056H
	DD	imagerel ?dtor$7@?0??test_perlin_pedioric@@YAHXZ@4HA
	DB	09dH
	DB	02H
	DD	imagerel ?dtor$8@?0??test_perlin_pedioric@@YAHXZ@4HA
	DB	036H
	DD	imagerel ?dtor$9@?0??test_perlin_pedioric@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$10@?0??test_perlin_pedioric@@YAHXZ@4HA
	DB	056H
	DD	imagerel ?dtor$11@?0??test_perlin_pedioric@@YAHXZ@4HA
$ip2state$?test_perlin_pedioric@@YAHXZ DB '2'
	DB	00H
	DB	00H
	DB	098H
	DB	02H
	DB	'a', 08H
	DB	04H
	DB	0b2H
	DB	06H
	DB	'L'
	DB	04H
	DB	'=', 02H
	DB	08H
	DB	','
	DB	04H
	DB	01cH
	DB	02H
	DB	01cH
	DB	00H
	DB	'Z'
	DB	0aH
	DB	0adH, 09H
	DB	0cH
	DB	0b2H
	DB	0eH
	DB	'L'
	DB	0cH
	DB	'U', 02H
	DB	010H
	DB	','
	DB	0cH
	DB	01cH
	DB	0aH
	DB	01cH
	DB	00H
	DB	'`'
	DB	012H
	DB	0e5H, 09H
	DB	014H
	DB	0b2H
	DB	016H
	DB	'L'
	DB	014H
	DB	'U', 02H
	DB	018H
	DB	','
	DB	014H
	DB	01cH
	DB	012H
	DB	01cH
	DB	00H
$unwind$?dtor$0@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$3@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$4@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$5@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$6@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$7@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$8@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$9@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$10@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$11@?0??test_perlin_pedioric@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
	ORG $+5
?test_simplex@@YAHXZ$rtcName$0 DB 049H			; test_simplex
	DB	06dH
	DB	061H
	DB	067H
	DB	065H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
?test_simplex@@YAHXZ$rtcName$1 DB 054H			; test_simplex
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	00H
?test_simplex@@YAHXZ$rtcName$2 DB 049H			; test_simplex
	DB	06dH
	DB	061H
	DB	067H
	DB	065H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
?test_simplex@@YAHXZ$rtcName$3 DB 054H			; test_simplex
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	00H
?test_simplex@@YAHXZ$rtcName$4 DB 049H			; test_simplex
	DB	06dH
	DB	061H
	DB	067H
	DB	065H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
?test_simplex@@YAHXZ$rtcName$5 DB 054H			; test_simplex
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	00H
?test_simplex@@YAHXZ$rtcVarDesc DD 01e8H		; test_simplex
	DD	020H
	DQ	FLAT:?test_simplex@@YAHXZ$rtcName$5
	DD	0198H
	DD	020H
	DQ	FLAT:?test_simplex@@YAHXZ$rtcName$4
	DD	0138H
	DD	020H
	DQ	FLAT:?test_simplex@@YAHXZ$rtcName$3
	DD	0e8H
	DD	020H
	DQ	FLAT:?test_simplex@@YAHXZ$rtcName$2
	DD	088H
	DD	020H
	DQ	FLAT:?test_simplex@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_simplex@@YAHXZ$rtcName$0
	ORG $+288
?test_simplex@@YAHXZ$rtcFrameData DD 06H		; test_simplex
	DD	00H
	DQ	FLAT:?test_simplex@@YAHXZ$rtcVarDesc
?test_perlin@@YAHXZ$rtcName$0 DB 049H			; test_perlin
	DB	06dH
	DB	061H
	DB	067H
	DB	065H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
?test_perlin@@YAHXZ$rtcName$1 DB 054H			; test_perlin
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	00H
?test_perlin@@YAHXZ$rtcName$2 DB 049H			; test_perlin
	DB	06dH
	DB	061H
	DB	067H
	DB	065H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
?test_perlin@@YAHXZ$rtcName$3 DB 054H			; test_perlin
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	00H
?test_perlin@@YAHXZ$rtcName$4 DB 049H			; test_perlin
	DB	06dH
	DB	061H
	DB	067H
	DB	065H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
?test_perlin@@YAHXZ$rtcName$5 DB 054H			; test_perlin
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	00H
?test_perlin_pedioric@@YAHXZ$rtcName$1 DB 054H		; test_perlin_pedioric
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	00H
?test_perlin@@YAHXZ$rtcVarDesc DD 01e8H			; test_perlin
	DD	020H
	DQ	FLAT:?test_perlin@@YAHXZ$rtcName$5
	DD	0198H
	DD	020H
	DQ	FLAT:?test_perlin@@YAHXZ$rtcName$4
	DD	0138H
	DD	020H
	DQ	FLAT:?test_perlin@@YAHXZ$rtcName$3
	DD	0e8H
	DD	020H
	DQ	FLAT:?test_perlin@@YAHXZ$rtcName$2
	DD	088H
	DD	020H
	DQ	FLAT:?test_perlin@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_perlin@@YAHXZ$rtcName$0
	ORG $+288
?test_perlin@@YAHXZ$rtcFrameData DD 06H			; test_perlin
	DD	00H
	DQ	FLAT:?test_perlin@@YAHXZ$rtcVarDesc
?test_perlin_pedioric@@YAHXZ$rtcName$0 DB 049H		; test_perlin_pedioric
	DB	06dH
	DB	061H
	DB	067H
	DB	065H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
?test_perlin_pedioric@@YAHXZ$rtcName$2 DB 049H		; test_perlin_pedioric
	DB	06dH
	DB	061H
	DB	067H
	DB	065H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
?test_perlin_pedioric@@YAHXZ$rtcName$3 DB 054H		; test_perlin_pedioric
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	00H
?test_perlin_pedioric@@YAHXZ$rtcName$4 DB 049H		; test_perlin_pedioric
	DB	06dH
	DB	061H
	DB	067H
	DB	065H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
?test_perlin_pedioric@@YAHXZ$rtcName$5 DB 054H		; test_perlin_pedioric
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	00H
?test_perlin_pedioric@@YAHXZ$rtcVarDesc DD 01e8H	; test_perlin_pedioric
	DD	020H
	DQ	FLAT:?test_perlin_pedioric@@YAHXZ$rtcName$5
	DD	0198H
	DD	020H
	DQ	FLAT:?test_perlin_pedioric@@YAHXZ$rtcName$4
	DD	0138H
	DD	020H
	DQ	FLAT:?test_perlin_pedioric@@YAHXZ$rtcName$3
	DD	0e8H
	DD	020H
	DQ	FLAT:?test_perlin_pedioric@@YAHXZ$rtcName$2
	DD	088H
	DD	020H
	DQ	FLAT:?test_perlin_pedioric@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_perlin_pedioric@@YAHXZ$rtcName$0
	ORG $+288
?test_perlin_pedioric@@YAHXZ$rtcFrameData DD 06H	; test_perlin_pedioric
	DD	00H
	DQ	FLAT:?test_perlin_pedioric@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DB 0aH
	DB	00H
	DB	00H
	DB	098H
	DB	02H
	DB	'b'
	DB	04H
	DB	0aaH
	DB	06H
	DB	0a0H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
	DD	imagerel $ip2state$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z DD 021911H
	DD	070155219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	030H
	DW	01f3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ DD 033819H
	DD	01a010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DB	044H
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+2
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcVarDesc DD 088H ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DD	08H
	DQ	FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$0
	ORG $+96
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcFrameData DD 02H ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DD	00H
	DQ	FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z DD 033001H
	DD	0160117H
	DD	07010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DB	050H
	DB	062H
	DB	00H
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DB	050H
	DB	06eH
	DB	00H
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$2 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DB	04eH
	DB	072H
	DB	00H
	ORG $+4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcVarDesc DD 088H ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DD	08H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$0
	ORG $+144
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcFrameData DD 03H ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DD	00H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD 022f01H
	DD	070157219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
	DB	04fH
	DB	066H
	DB	066H
	DB	00H
	ORG $+11
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcVarDesc DD 028H ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
	DD	08H
	DQ	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcName$0
	ORG $+48
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcFrameData DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
	DD	00H
	DQ	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD 022f01H
	DD	070157219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+2
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcVarDesc DD 028H ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
	DD	08H
	DQ	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcName$0
	ORG $+48
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcFrameData DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
	DD	00H
	DQ	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z DD 022d01H
	DD	07010d214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
	DB	043H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	05fH
	DB	073H
	DB	00H
	ORG $+7
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
	DB	041H
	DB	076H
	DB	061H
	DB	069H
	DB	06cH
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+5
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z$rtcVarDesc DD 048H ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
	DD	08H
	DQ	FLAT:?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z$rtcName$0
	ORG $+96
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z$rtcFrameData DD 02H ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
	DD	00H
	DQ	FLAT:?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	030H
	DW	03b7H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DB 016H
	DB	00H
	DB	00H
	DB	095H, 04H
	DB	02H
	DB	'd'
	DB	00H
	DB	','
	DB	02H
	DB	08dH, 06H
	DB	00H
	DB	'&'
	DB	02H
	DB	'z'
	DB	00H
	DB	'&'
	DB	02H
	DB	018H
	DB	00H
	DB	'&'
	DB	02H
	DB	' '
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DD	imagerel $ip2state$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 033819H
	DD	02c010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DD	0152H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	043H
	DB	068H
	DB	00H
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$2 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	053H
	DB	072H
	DB	063H
	DB	00H
	ORG $+3
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$3 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	043H
	DB	068H
	DB	00H
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$4 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	044H
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+2
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc DD 0e8H ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DD	08H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$4
	DD	0c4H
	DD	01H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$3
	DD	0a8H
	DD	08H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$2
	DD	068H
	DD	028H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$1
	DD	044H
	DD	01H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0
	ORG $+240
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData DD 05H ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DD	00H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::underflow
	DB	04dH
	DB	065H
	DB	074H
	DB	061H
	DB	00H
	ORG $+10
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc DD 024H ; std::basic_filebuf<char,std::char_traits<char> >::underflow
	DD	04H
	DQ	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0
	ORG $+48
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::underflow
	DD	00H
	DQ	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD 020e01H
	DD	0700a720eH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0315H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD 033c19H
	DD	0240111H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	043H
	DB	068H
	DB	00H
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$2 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	053H
	DB	072H
	DB	063H
	DB	00H
	ORG $+3
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$3 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	044H
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+6
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcVarDesc DD 0d8H ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DD	08H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$3
	DD	0b8H
	DD	08H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$2
	DD	094H
	DD	01H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$1
	DD	058H
	DD	020H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$0
	ORG $+192
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcFrameData DD 04H ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DD	00H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DB 06H
	DB	00H
	DB	00H
	DB	011H, 02H
	DB	02H
	DB	'0'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DB 028H
	DD	imagerel $stateUnwindMap$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
	DD	imagerel $ip2state$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD 021911H
	DD	070159219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 020a19H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	','
	DB	02H
	DB	'>'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 020a11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isCompressed@detail@loader_dds9@gtx@gli@@YA_NAEBVtexture2D@4@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getFormatBPP@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getFormatFlags@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getFormatFourCC@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	0435H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 0eH
	DB	00H
	DB	00H
	DB	0d8H
	DB	02H
	DB	'<'
	DB	00H
	DB	01eH
	DB	02H
	DB	0b1H, 0dH
	DB	00H
	DB	018H
	DB	02H
	DB	016H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 028H
	DD	imagerel $stateUnwindMap$?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	imagerel $ip2state$?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 033d19H
	DD	0500112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	0272H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$0 DB 046H ; gli::gtx::loader_dds9::saveDDS9
	DB	069H
	DB	06cH
	DB	065H
	DB	04fH
	DB	075H
	DB	074H
	DB	00H
?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$1 DB 053H ; gli::gtx::loader_dds9::saveDDS9
	DB	075H
	DB	072H
	DB	066H
	DB	061H
	DB	063H
	DB	065H
	DB	044H
	DB	065H
	DB	073H
	DB	063H
	DB	00H
?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$2 DB 04cH ; gli::gtx::loader_dds9::saveDDS9
	DB	065H
	DB	076H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+6
?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcVarDesc DD 0218H ; gli::gtx::loader_dds9::saveDDS9
	DD	08H
	DQ	FLAT:?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$2
	DD	0180H
	DD	07cH
	DQ	FLAT:?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$1
	DD	040H
	DD	0108H
	DQ	FLAT:?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$0
	ORG $+144
?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcFrameData DD 03H ; gli::gtx::loader_dds9::saveDDS9
	DD	00H
	DQ	FLAT:?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z DD 020e01H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1locale@std@@QEAA@XZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_cast@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_cast@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_cast@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 020a19H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD 022a01H
	DD	070107214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+8
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	08H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0
	ORG $+48
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	00H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 022001H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+5
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	08H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0
	ORG $+48
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	00H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z DD 020e01H
	DD	0700a720eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	038H
	DB	00H
	ORG $+12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	01H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	082H
	DB	02H
	DB	'~'
	DB	04H
	DB	'Z'
	DB	02H
	DB	016H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD 022b11H
	DD	0700bf212H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$1 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcVarDesc DD 058H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	010H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$0
	ORG $+96
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcFrameData DD 02H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@D@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen_string@std@@YAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@gli@@YAIAEBVtexture2D@1@AEBI@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?size@gli@@YAIAEBVtexture2D@1@AEBI@Z$rtcName$0 DB 04cH	; gli::size
	DB	065H
	DB	076H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+10
?size@gli@@YAIAEBVtexture2D@1@AEBI@Z$rtcVarDesc DD 038H	; gli::size
	DD	08H
	DQ	FLAT:?size@gli@@YAIAEBVtexture2D@1@AEBI@Z$rtcName$0
	ORG $+48
?size@gli@@YAIAEBVtexture2D@1@AEBI@Z$rtcFrameData DD 01H ; gli::size
	DD	00H
	DQ	FLAT:?size@gli@@YAIAEBVtexture2D@1@AEBI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@gli@@YAIAEBVimage2D@1@AEBI@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z$rtcName$0 DB 05fH ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z$rtcVarDesc DD 024H ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z$rtcFrameData DD 01H ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXQEAVimage2D@gli@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBAAEBVimage2D@gli@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAAEAVimage2D@gli@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_NXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAX_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<gli::image2D,std::allocator<gli::image2D> >::~vector<gli::image2D,std::allocator<gli::image2D> >
	DB	053H
	DB	031H
	DB	035H
	DB	00H
	ORG $+11
??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<gli::image2D,std::allocator<gli::image2D> >::~vector<gli::image2D,std::allocator<gli::image2D> >
	DD	01H
	DQ	FLAT:??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<gli::image2D,std::allocator<gli::image2D> >::~vector<gli::image2D,std::allocator<gli::image2D> >
	DD	00H
	DQ	FLAT:??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SA_KAEBV?$allocator@Vimage2D@gli@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@Vimage2D@gli@@@std@@QEAAPEAVimage2D@gli@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@Vimage2D@gli@@@std@@QEAAXQEAVimage2D@gli@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@Vimage2D@gli@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?levels@texture2D@gli@@QEBA_KXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?format@texture2D@gli@@QEBA?AW402@XZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1texture2D@gli@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0texture2D@gli@@QEAA@AEB_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0texture2D@gli@@QEAA@AEB_K@Z DB 06H
	DB	00H
	DB	00H
	DB	':'
	DB	02H
	DB	','
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0texture2D@gli@@QEAA@AEB_K@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0texture2D@gli@@QEAA@AEB_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0texture2D@gli@@QEAA@AEB_K@Z DB 028H
	DD	imagerel $stateUnwindMap$??0texture2D@gli@@QEAA@AEB_K@Z
	DD	imagerel $ip2state$??0texture2D@gli@@QEAA@AEB_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0texture2D@gli@@QEAA@AEB_K@Z DD 020f11H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0texture2D@gli@@QEAA@AEB_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compMul@I$0A@Utvec2@glm@@@glm@@YAIAEBU?$tvec2@I$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z DD 022001H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z$rtcName$0 DB 044H ; gli::detail::sizeLinear
	DB	069H
	DB	06dH
	DB	065H
	DB	06eH
	DB	073H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+6
?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z$rtcVarDesc DD 028H ; gli::detail::sizeLinear
	DD	08H
	DQ	FLAT:?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z$rtcName$0
	ORG $+48
?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z$rtcFrameData DD 01H ; gli::detail::sizeLinear
	DD	00H
	DQ	FLAT:?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	015H
	DB	03fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sizeComponent@detail@gli@@YAIAEBW4format@2@@Z DD 031a19H
	DD	07007a20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	015H
	DB	03fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sizeBitPerPixel@detail@gli@@YAIAEBW4format@2@@Z DD 031a19H
	DD	07007a20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	015H
	DB	03fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sizeBlock@detail@gli@@YAIAEBW4format@2@@Z DD 031a19H
	DD	07007a20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	0738H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z DD 043e19H
	DD	05d0113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	02d0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z$rtcName$0 DB 044H ; gli::detail::getFormatInfo
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+11
?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z$rtcVarDesc DD 030H ; gli::detail::getFormatInfo
	DD	0288H
	DQ	FLAT:?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z$rtcName$0
	ORG $+48
?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z$rtcFrameData DD 01H ; gli::detail::getFormatInfo
	DD	00H
	DQ	FLAT:?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gimage2D@gli@@QEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4image2D@gli@@QEAAAEAV01@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@EV?$allocator@E@std@@@std@@QEBAAEBE_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$vector@EV?$allocator@E@std@@@std@@QEAAAEAV01@AEBV01@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	DB	053H
	DB	031H
	DB	036H
	DB	00H
	ORG $+11
??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	DD	01H
	DQ	FLAT:??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	DD	00H
	DQ	FLAT:??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@EV?$allocator@E@std@@@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA?AV?$allocator@E@2@AEBV32@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@E@std@@QEAAPEAE_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@E@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?data@image2D@gli@@QEBAQEBEXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?data@image2D@gli@@QEAAPEAEXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?format@image2D@gli@@QEBA?AW402@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dimensions@image2D@gli@@QEBA?AU?$tvec2@I$0A@@glm@@XZ DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1image2D@gli@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0image2D@gli@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0image2D@gli@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0image2D@gli@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'H'
	DB	02H
	DB	'>'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0image2D@gli@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0image2D@gli@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0image2D@gli@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0image2D@gli@@QEAA@XZ
	DD	imagerel $ip2state$??0image2D@gli@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0image2D@gli@@QEAA@XZ DD 020a11H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0image2D@gli@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@II@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z DD 021b01H
	DD	07017921bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?floor@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 010601H
	DD	07006H
xdata	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
_TEXT	SEGMENT
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
	movsxd	rax, DWORD PTR [rcx-4]
	sub	rcx, rax
	jmp	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z PROC		; std::_Voidify_iter<unsigned char *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z ENDP		; std::_Voidify_iter<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAVimage2D@gli@@@std@@YAPEAXPEAVimage2D@gli@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAVimage2D@gli@@@std@@YAPEAXPEAVimage2D@gli@@@Z PROC ; std::_Voidify_iter<gli::image2D *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAVimage2D@gli@@@std@@YAPEAXPEAVimage2D@gli@@@Z ENDP ; std::_Voidify_iter<gli::image2D *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv83 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
a$ = 136
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv83 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
a$ = 136
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator/=<float>, COMDAT

; 446  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 447  : 		return (*this = detail::compute_vec4_div<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 448  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@E$$V@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAE@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
__formal$ = 64
_Ptr$ = 72
??$construct@E$$V@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAE@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	QWORD PTR $T1[rsp], 1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z	; std::_Voidify_iter<unsigned char *>
	mov	rdx, rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T2[rsp], rax
	mov	rdi, QWORD PTR $T2[rsp]
	xor	eax, eax
	mov	rcx, QWORD PTR $T1[rsp]
	rep stosb

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@E$$V@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAE@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@EAEAE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEAE@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@EAEAE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEAE@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char,unsigned char &>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAE@std@@YAPEAXPEAE@Z	; std::_Voidify_iter<unsigned char *>
	mov	rdx, rax
	mov	ecx, 1
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@AEAE@std@@YAAEAEAEAE@Z	; std::forward<unsigned char &>
	mov	rcx, QWORD PTR $T1[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR [rcx], al

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@EAEAE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEAE@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char,unsigned char &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEAE@std@@YAAEAEAEAE@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEAE@std@@YAAEAEAEAE@Z PROC			; std::forward<unsigned char &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEAE@std@@YAAEAEAEAE@Z ENDP			; std::forward<unsigned char &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z PROC		; std::_To_address<unsigned char *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z ENDP		; std::_To_address<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$advance@PEAE_J@std@@YAXAEAPEAE_J@Z
_TEXT	SEGMENT
_Where$ = 16
_Off$ = 24
??$advance@PEAE_J@std@@YAXAEAPEAE_J@Z PROC		; std::advance<unsigned char *,__int64>, COMDAT

; 1491 : _CONSTEXPR17 void advance(_InIt& _Where, _Diff _Off) { // increment iterator by offset

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1492 :     if constexpr (_Is_random_iter_v<_InIt>) {
; 1493 :         _Where += _Off;

	mov	rax, QWORD PTR _Where$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, QWORD PTR _Off$[rsp]
	mov	rcx, QWORD PTR _Where$[rsp]
	mov	QWORD PTR [rcx], rax

; 1494 :     } else {
; 1495 :         if constexpr (is_signed_v<_Diff> && !_Is_bidi_iter_v<_InIt>) {
; 1496 :             _STL_ASSERT(_Off >= 0, "negative advance of non-bidirectional iterator");
; 1497 :         }
; 1498 : 
; 1499 :         decltype(auto) _UWhere      = _Get_unwrapped_n(_STD move(_Where), _Off);
; 1500 :         constexpr bool _Need_rewrap = !is_reference_v<decltype(_Get_unwrapped_n(_STD move(_Where), _Off))>;
; 1501 : 
; 1502 :         if constexpr (is_signed_v<_Diff> && _Is_bidi_iter_v<_InIt>) {
; 1503 :             for (; _Off < 0; ++_Off) {
; 1504 :                 --_UWhere;
; 1505 :             }
; 1506 :         }
; 1507 : 
; 1508 :         for (; 0 < _Off; --_Off) {
; 1509 :             ++_UWhere;
; 1510 :         }
; 1511 : 
; 1512 :         if constexpr (_Need_rewrap) {
; 1513 :             _Seek_wrapped(_Where, _STD move(_UWhere));
; 1514 :         }
; 1515 :     }
; 1516 : }

	pop	rdi
	ret	0
??$advance@PEAE_J@std@@YAXAEAPEAE_J@Z ENDP		; std::advance<unsigned char *,__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@Vimage2D@gli@@AEAV12@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@AEAV34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@Vimage2D@gli@@AEAV12@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@AEAV34@@Z PROC ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::construct<gli::image2D,gli::image2D &>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAVimage2D@gli@@@std@@YAPEAXPEAVimage2D@gli@@@Z ; std::_Voidify_iter<gli::image2D *>
	mov	rdx, rax
	mov	ecx, 48					; 00000030H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@AEAVimage2D@gli@@@std@@YAAEAVimage2D@gli@@AEAV12@@Z ; std::forward<gli::image2D &>
	mov	rdx, rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0image2D@gli@@QEAA@AEBV01@@Z		; gli::image2D::image2D

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@Vimage2D@gli@@AEAV12@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@AEAV34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::construct<gli::image2D,gli::image2D &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEAVimage2D@gli@@@std@@YAAEAVimage2D@gli@@AEAV12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEAVimage2D@gli@@@std@@YAAEAVimage2D@gli@@AEAV12@@Z PROC ; std::forward<gli::image2D &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEAVimage2D@gli@@@std@@YAAEAVimage2D@gli@@AEAV12@@Z ENDP ; std::forward<gli::image2D &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@Vimage2D@gli@@$$V@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
??$construct@Vimage2D@gli@@$$V@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z PROC ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::construct<gli::image2D>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAVimage2D@gli@@@std@@YAPEAXPEAVimage2D@gli@@@Z ; std::_Voidify_iter<gli::image2D *>
	mov	rdx, rax
	mov	ecx, 48					; 00000030H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0image2D@gli@@QEAA@XZ			; gli::image2D::image2D

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@Vimage2D@gli@@$$V@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::construct<gli::image2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_div<float,0,0>::call, COMDAT

; 68   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 69   : 			return tvec4<T, P>(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	divss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	divss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	divss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	divss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 70   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_div<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z PROC ; std::forward<std::_Facet_base * &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z ENDP ; std::forward<std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 613  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 614  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	divss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	divss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 615  : 			v1.x / v2.x,
; 616  : 			v1.y / v2.y);
; 617  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
tv70 = 36
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 41   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::mix<float,bool,0,glm::tvec3>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::mix<float,bool,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_N$0A@@glm@@SAHXZ PROC			; glm::tvec3<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec3>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
tv72 = 36
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec3>::call, COMDAT

; 78   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 79   : 			return tvec3<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 80   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::mix<float,bool,0,glm::tvec4>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::mix<float,bool,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 748  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 749  : 		return tvec4<T, P>(v1) /= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator/=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 750  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$max@M@glm@@YAMMM@Z PROC				; glm::max<float>, COMDAT

; 24   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	SHORT $LN3@max
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@max
$LN3@max:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@max:
	movss	xmm0, DWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M@glm@@YAMMM@Z ENDP				; glm::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
scalar$ = 56
v$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 557  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 558  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	mulss	xmm0, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR scalar$[rsp]
	mulss	xmm1, DWORD PTR [rax]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 559  : 			scalar * v.x,
; 560  : 			scalar * v.y);
; 561  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv78 = 56
__$ReturnUdt$ = 80
Func$ = 88
a$ = 96
b$ = 104
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec4>::call, COMDAT

; 87   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 88   : 			return tvec4<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z), Func(a.w, b.w));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$min@M@glm@@YAMMM@Z PROC				; glm::min<float>, COMDAT

; 16   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	movss	xmm0, DWORD PTR y$[rsp]
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN3@min
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@min
$LN3@min:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@min:
	movss	xmm0, DWORD PTR tv65[rsp]

; 19   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M@glm@@YAMMM@Z ENDP				; glm::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@E@std@@YAPEAEPEAE@Z		; std::_Unfancy<unsigned char>
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@E$$V@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAE@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	inc	rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Zero_range@PEAE@std@@YAPEAEQEAE0@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Last_ch$ = 40
_First$ = 64
_Last$ = 72
??$_Zero_range@PEAE@std@@YAPEAEQEAE0@Z PROC		; std::_Zero_range<unsigned char *>, COMDAT

; 1824 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1825 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z ; std::_To_address<unsigned char *>
	mov	QWORD PTR _First_ch$[rsp], rax

; 1826 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z ; std::_To_address<unsigned char *>
	mov	QWORD PTR _Last_ch$[rsp], rax

; 1827 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR _First_ch$[rsp]
	call	memset

; 1828 :     return _Last;

	mov	rax, QWORD PTR _Last$[rsp]

; 1829 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Zero_range@PEAE@std@@YAPEAEQEAE0@Z ENDP		; std::_Zero_range<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@AEAE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEAE@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@AEAE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEAE@Z PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Emplace_back<unsigned char &>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@AEAE@std@@YAAEAEAEAE@Z	; std::forward<unsigned char &>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@E@std@@YAPEAEPEAE@Z		; std::_Unfancy<unsigned char>
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@EAEAE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAEAV?$allocator@E@1@QEAEAEAE@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char,unsigned char &>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	inc	rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@AEAE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEAE@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Emplace_back<unsigned char &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::~_Uninitialized_backout_al<std::allocator<unsigned char> >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::~_Uninitialized_backout_al<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Uninitialized_backout_al<std::allocator<unsigned char> >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Uninitialized_backout_al<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z PROC	; std::_Copy_memmove<unsigned char *,unsigned char *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z ; std::_To_address<unsigned char *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z ; std::_To_address<unsigned char *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAE@std@@YA?A_PAEBQEAE@Z ; std::_To_address<unsigned char *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z ENDP	; std::_Copy_memmove<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@E@std@@YAPEAEPEAE@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@E@std@@YAPEAEPEAE@Z PROC			; std::_Unfancy<unsigned char>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@E@std@@YAPEAEPEAE@Z ENDP			; std::_Unfancy<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAE@std@@YA?A_TAEBQEAE@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAE@std@@YA?A_TAEBQEAE@Z PROC	; std::_Get_unwrapped<unsigned char * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAE@std@@YA?A_TAEBQEAE@Z ENDP	; std::_Get_unwrapped<unsigned char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Copy_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z PROC	; std::_Copy_unchecked<unsigned char *,unsigned char *>, COMDAT

; 4055 : _CONSTEXPR20 _OutIt _Copy_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 4056 :     // copy [_First, _Last) to [_Dest, ...)
; 4057 :     // note: _Copy_unchecked has callers other than the copy family
; 4058 :     if constexpr (_Iter_copy_cat<_InIt, _OutIt>::_Bitcopy_assignable) {
; 4059 : #if _HAS_CXX20
; 4060 :         if (!_STD is_constant_evaluated())
; 4061 : #endif // _HAS_CXX20
; 4062 :         {
; 4063 :             return _Copy_memmove(_First, _Last, _Dest);

	mov	r8, QWORD PTR _Dest$[rsp]
	mov	rdx, QWORD PTR _Last$[rsp]
	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Copy_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z ; std::_Copy_memmove<unsigned char *,unsigned char *>
	jmp	SHORT $LN1@Copy_unche

; 4064 :         }
; 4065 :     }
; 4066 : 
; 4067 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

	jmp	SHORT $LN4@Copy_unche
$LN2@Copy_unche:
	mov	rax, QWORD PTR _Dest$[rsp]
	inc	rax
	mov	QWORD PTR _Dest$[rsp], rax
	mov	rax, QWORD PTR _First$[rsp]
	inc	rax
	mov	QWORD PTR _First$[rsp], rax
$LN4@Copy_unche:
	mov	rax, QWORD PTR _Last$[rsp]
	cmp	QWORD PTR _First$[rsp], rax
	je	SHORT $LN3@Copy_unche

; 4068 :         *_Dest = *_First;

	mov	rax, QWORD PTR _Dest$[rsp]
	mov	rcx, QWORD PTR _First$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 4069 :     }

	jmp	SHORT $LN2@Copy_unche
$LN3@Copy_unche:

; 4070 : 
; 4071 :     return _Dest;

	mov	rax, QWORD PTR _Dest$[rsp]
$LN1@Copy_unche:

; 4072 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Copy_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z ENDP	; std::_Copy_unchecked<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$next@PEAE@std@@YAPEAEPEAE_J@Z
_TEXT	SEGMENT
_First$ = 48
_Off$ = 56
??$next@PEAE@std@@YAPEAEPEAE_J@Z PROC			; std::next<unsigned char *>, COMDAT

; 1541 : _NODISCARD _CONSTEXPR17 _InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1) { // increment iterator

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1542 :     static_assert(_Is_input_iter_v<_InIt>, "next requires input iterator");
; 1543 : 
; 1544 :     _STD advance(_First, _Off);

	mov	rdx, QWORD PTR _Off$[rsp]
	lea	rcx, QWORD PTR _First$[rsp]
	call	??$advance@PEAE_J@std@@YAXAEAPEAE_J@Z	; std::advance<unsigned char *,__int64>

; 1545 :     return _First;

	mov	rax, QWORD PTR _First$[rsp]

; 1546 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$next@PEAE@std@@YAPEAEPEAE_J@Z ENDP			; std::next<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$distance@PEAE@std@@YA_JPEAE0@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
??$distance@PEAE@std@@YA_JPEAE0@Z PROC			; std::distance<unsigned char *>, COMDAT

; 1519 : _NODISCARD _CONSTEXPR17 _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1520 :     if constexpr (_Is_random_iter_v<_InIt>) {
; 1521 :         return _Last - _First; // assume the iterator will do debug checking

	mov	rax, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR _Last$[rsp]
	sub	rcx, rax
	mov	rax, rcx

; 1522 :     } else {
; 1523 :         _Adl_verify_range(_First, _Last);
; 1524 :         auto _UFirst             = _Get_unwrapped(_First);
; 1525 :         const auto _ULast        = _Get_unwrapped(_Last);
; 1526 :         _Iter_diff_t<_InIt> _Off = 0;
; 1527 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1528 :             ++_Off;
; 1529 :         }
; 1530 : 
; 1531 :         return _Off;
; 1532 :     }
; 1533 : }

	pop	rdi
	ret	0
??$distance@PEAE@std@@YA_JPEAE0@Z ENDP			; std::distance<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Verify_range@E@std@@YAXQEBE0@Z
_TEXT	SEGMENT
_First$ = 64
_Last$ = 72
??$_Verify_range@E@std@@YAXQEBE0@Z PROC			; std::_Verify_range<unsigned char>, COMDAT

; 1232 : constexpr void _Verify_range(const _Ty* const _First, const _Ty* const _Last) noexcept {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@Verify_ran:

; 1233 :     // special case range verification for pointers
; 1234 :     _STL_VERIFY(_First <= _Last, "transposed pointer range");

	mov	rax, QWORD PTR _Last$[rsp]
	cmp	QWORD PTR _First$[rsp], rax
	ja	SHORT $LN7@Verify_ran
	jmp	SHORT $LN9@Verify_ran
$LN7@Verify_ran:
	lea	rax, OFFSET FLAT:??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1234				; 000004d2H
	lea	rdx, OFFSET FLAT:??_C@_0GD@GLKFIMHC@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@Verify_ran
	int	3
	xor	eax, eax
$LN11@Verify_ran:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1234				; 000004d2H
	lea	r8, OFFSET FLAT:??_C@_1MG@NOLPABAB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Verify_ran
$LN9@Verify_ran:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Verify_ran

; 1235 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Verify_range@E@std@@YAXQEBE0@Z ENDP			; std::_Verify_range<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@AEAVimage2D@gli@@@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXAEAVimage2D@gli@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@AEAVimage2D@gli@@@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXAEAVimage2D@gli@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Emplace_back<gli::image2D &>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@AEAVimage2D@gli@@@std@@YAAEAVimage2D@gli@@AEAV12@@Z ; std::forward<gli::image2D &>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@Vimage2D@gli@@@std@@YAPEAVimage2D@gli@@PEAV12@@Z ; std::_Unfancy<gli::image2D>
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@Vimage2D@gli@@AEAV12@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@AEAV34@@Z ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::construct<gli::image2D,gli::image2D &>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 48					; 00000030H
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@AEAVimage2D@gli@@@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXAEAVimage2D@gli@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Emplace_back<gli::image2D &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAVimage2D@gli@@@std@@YA?A_TAEBQEAVimage2D@gli@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAVimage2D@gli@@@std@@YA?A_TAEBQEAVimage2D@gli@@@Z PROC ; std::_Get_unwrapped<gli::image2D * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAVimage2D@gli@@@std@@YA?A_TAEBQEAVimage2D@gli@@@Z ENDP ; std::_Get_unwrapped<gli::image2D * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@Vimage2D@gli@@@std@@YAPEAVimage2D@gli@@PEAV12@@Z ; std::_Unfancy<gli::image2D>
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@Vimage2D@gli@@$$V@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::construct<gli::image2D>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 48					; 00000030H
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAPEAVimage2D@gli@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAPEAVimage2D@gli@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAPEAVimage2D@gli@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::~_Uninitialized_backout_al<std::allocator<gli::image2D> >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z ; std::_Destroy_range<std::allocator<gli::image2D> >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::~_Uninitialized_backout_al<std::allocator<gli::image2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@PEAVimage2D@gli@@AEAV?$allocator@Vimage2D@gli@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@PEAVimage2D@gli@@AEAV?$allocator@Vimage2D@gli@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Uninitialized_backout_al<std::allocator<gli::image2D> >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@PEAVimage2D@gli@@AEAV?$allocator@Vimage2D@gli@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Uninitialized_backout_al<std::allocator<gli::image2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 669  :         }
; 670  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
__$ReturnUdt$ = 96
a$ = 104
b$ = 112
?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_mod<float,0,glm::tvec3,0>::call, COMDAT

; 254  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 255  : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
; 256  : 			return a - b * floor(a / b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
	mov	r8, rax
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 257  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_mod<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_scalar@MM$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
a$ = 136
?call@?$compute_mix_scalar@MM$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBM@Z PROC ; glm::detail::compute_mix_scalar<float,float,0,glm::tvec4,0>::call, COMDAT

; 146  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H

; 147  : 			GLM_STATIC_ASSERT(std::numeric_limits<U>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'mix' only accept floating-point inputs for the interpolator a");
; 148  : 
; 149  : 			return vecType<T, P>(vecType<U, P>(x) + a * vecType<U, P>(y - x));

	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR x$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 150  : 		}

	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_scalar@MM$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBM@Z ENDP ; glm::detail::compute_mix_scalar<float,float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z
_TEXT	SEGMENT
x$ = 32
y$ = 40
a$ = 48
?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z PROC	; glm::detail::compute_mix<float,float>::call, COMDAT

; 166  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 167  : 			GLM_STATIC_ASSERT(std::numeric_limits<U>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'mix' only accept floating-point inputs for the interpolator a");
; 168  : 
; 169  : 			return static_cast<T>(static_cast<U>(x) + a * static_cast<U>(y - x));

	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1

; 170  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z ENDP	; glm::detail::compute_mix<float,float>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_scalar@MM$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
a$ = 104
?call@?$compute_mix_scalar@MM$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBM@Z PROC ; glm::detail::compute_mix_scalar<float,float,0,glm::tvec2,0>::call, COMDAT

; 146  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 147  : 			GLM_STATIC_ASSERT(std::numeric_limits<U>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'mix' only accept floating-point inputs for the interpolator a");
; 148  : 
; 149  : 			return vecType<T, P>(vecType<U, P>(x) + a * vecType<U, P>(y - x));

	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T3[rsp], rax
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 150  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_mix_scalar@MM$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBM@Z ENDP ; glm::detail::compute_mix_scalar<float,float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z PROC	; glm::operator-<float,0>, COMDAT

; 501  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 502  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 503  : 			v.x - scalar,
; 504  : 			v.y - scalar);
; 505  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator/=<float>, COMDAT

; 432  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 433  : 		return (*this = detail::compute_vec4_div<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 434  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_fract<float,0,glm::tvec4,0>::call, COMDAT

; 227  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 228  : 			return x - floor(x);

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 229  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_fract<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><bool,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+3]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>, COMDAT

; 278  : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 274  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 275  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 276  : 		z(static_cast<T>(a.z)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 277  : 		w(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 278  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,0>, COMDAT

; 138  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 135  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 136  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 137  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 138  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_noise.hpp
;	COMDAT ??$mod289@M@detail@glm@@YAMAEBM@Z
_TEXT	SEGMENT
x$ = 64
??$mod289@M@detail@glm@@YAMAEBM@Z PROC			; glm::detail::mod289<float>, COMDAT

; 16   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 17   : 		return x - floor(x * static_cast<T>(1.0) / static_cast<T>(289.0)) * static_cast<T>(289.0);

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@43908000
	call	?floor@@YAMM@Z				; floor
	mulss	xmm0, DWORD PTR __real@43908000
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1

; 18   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$mod289@M@detail@glm@@YAMAEBM@Z ENDP			; glm::detail::mod289<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ReturnUdt$ = 96
a$ = 104
b$ = 112
?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call, COMDAT

; 254  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 255  : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
; 256  : 			return a - b * floor(a / b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	mov	r8, rax
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 257  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 390  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 391  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 392  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call, COMDAT

; 67   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 68   : 			tvec4<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 69   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	movss	xmm1, DWORD PTR tmp$[rsp+8]
	addss	xmm1, DWORD PTR tmp$[rsp+12]
	addss	xmm0, xmm1

; 70   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 52
tv65 = 72
tv71 = 80
__$ReturnUdt$ = 112
edge$ = 120
x$ = 128
?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_step_vector<float,0,glm::tvec4,0>::call, COMDAT

; 291  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 292  : 			return mix(vecType<T, P>(1), vecType<T, P>(0), glm::lessThan(x, edge));

	mov	r8, QWORD PTR edge$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	QWORD PTR tv65[rsp], rax
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv71[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv71[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 293  : 		}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_step_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_noise.hpp
;	COMDAT ??$mod289@U?$tvec4@M$0A@@glm@@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
tv67 = 144
tv73 = 152
__$ReturnUdt$ = 176
x$ = 184
??$mod289@U?$tvec4@M$0A@@glm@@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z PROC ; glm::detail::mod289<glm::tvec4<float,0> >, COMDAT

; 16   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H

; 17   : 		return x - floor(x * static_cast<T>(1.0) / static_cast<T>(289.0)) * static_cast<T>(289.0);

	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv67[rsp], rax
	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv73[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv73[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$mod289@U?$tvec4@M$0A@@glm@@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ENDP ; glm::detail::mod289<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 369  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 370  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 371  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 709  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 710  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	divss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	divss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 711  : 			v1.x / v2.x,
; 712  : 			v1.y / v2.y,
; 713  : 			v1.z / v2.z);
; 714  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_step_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 48
tv65 = 64
tv71 = 72
__$ReturnUdt$ = 96
edge$ = 104
x$ = 112
?call@?$compute_step_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_step_vector<float,0,glm::tvec3,0>::call, COMDAT

; 291  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 292  : 			return mix(vecType<T, P>(1), vecType<T, P>(0), glm::lessThan(x, edge));

	mov	r8, QWORD PTR edge$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
	mov	QWORD PTR tv65[rsp], rax
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv71[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv71[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 293  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_step_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_step_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call, COMDAT

; 57   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 59   : 			return tmp.x + tmp.y + tmp.z;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	addss	xmm0, DWORD PTR tmp$[rsp+8]

; 60   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_fract<float,0,glm::tvec3,0>::call, COMDAT

; 227  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 228  : 			return x - floor(x);

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 229  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_fract<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_mod<float,0,glm::tvec2,0>::call, COMDAT

; 254  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 255  : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
; 256  : 			return a - b * floor(a / b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec2>
	mov	r8, rax
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 257  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_mod<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 96
y$ = 104
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call, COMDAT

; 47   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 48   : 			tvec2<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 49   : 			return tmp.x + tmp.y;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]

; 50   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
<_Val2_0>$ = 64
??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR <_Val2_0>$[rsp]
	call	??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z ; std::forward<std::_Facet_base * &>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<48>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 384307168202282325			; 0555555555555555H
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 384307168202282325			; 0555555555555555H
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 48		; 00000030H
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<48>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec2>::call, COMDAT

; 30   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 			return tvec2<R, P>(Func(v.x), Func(v.y));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 32   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec4>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@I@glm@@YAIII@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$max@I@glm@@YAIII@Z PROC				; glm::max<unsigned int>, COMDAT

; 24   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jbe	SHORT $LN3@max
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv65[rsp], eax
$LN4@max:
	mov	eax, DWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$max@I@glm@@YAIII@Z ENDP				; glm::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z PROC ; glm::detail::functor2<unsigned int,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	mov	ecx, DWORD PTR tv66[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@II@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z ENDP ; glm::detail::functor2<unsigned int,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z PROC ; std::exchange<std::_Facet_base *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 609  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 610  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z ENDP ; std::exchange<std::_Facet_base *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 130  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG94130
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG94131
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 135				; 00000087H
	lea	rdx, OFFSET FLAT:$SG94132
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG94133
	lea	rdx, OFFSET FLAT:$SG94134
	lea	rcx, OFFSET FLAT:$SG94135
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 143  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$destroy@Vimage2D@gli@@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z
_TEXT	SEGMENT
__formal$ = 48
_Ptr$ = 56
??$destroy@Vimage2D@gli@@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z PROC ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::destroy<gli::image2D>, COMDAT

; 685  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 686  : #if _HAS_CXX20
; 687  :         _STD destroy_at(_Ptr);
; 688  : #else // _HAS_CXX20
; 689  :         _Ptr->~_Uty();

	xor	edx, edx
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??_Gimage2D@gli@@QEAAPEAXI@Z

; 690  : #endif // _HAS_CXX20
; 691  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$destroy@Vimage2D@gli@@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::destroy<gli::image2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@Vimage2D@gli@@@std@@YAPEAVimage2D@gli@@PEAV12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@Vimage2D@gli@@@std@@YAPEAVimage2D@gli@@PEAV12@@Z PROC ; std::_Unfancy<gli::image2D>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@Vimage2D@gli@@@std@@YAPEAVimage2D@gli@@PEAV12@@Z ENDP ; std::_Unfancy<gli::image2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z PROC	; std::_Voidify_iter<char * *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ENDP	; std::_Voidify_iter<char * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z PROC		; std::addressof<char *>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z
_TEXT	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);

	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Unfancy@E@std@@YAPEAEPEAE@Z		; std::_Unfancy<unsigned char>
	mov	QWORD PTR _PFirst$4[rsp], rax

; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _PFirst$4[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR _PFirst$4[rsp]
	call	??$_Zero_range@PEAE@std@@YAPEAEQEAE0@Z	; std::_Zero_range<unsigned char *>

; 1843 :             return _First + _Count;

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _First$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@Uninitiali

; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Uninitialized_backout_al<std::allocator<unsigned char> >

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Release
	mov	QWORD PTR $T5[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::~_Uninitialized_backout_al<std::allocator<unsigned char> >
	mov	rax, QWORD PTR $T5[rsp]
$LN1@Uninitiali:

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::~_Uninitialized_backout_al<std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z PROC ; std::forward<std::allocator<unsigned char> const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z ENDP ; std::forward<std::allocator<unsigned char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z PROC ; std::_Uninitialized_copy<unsigned char *,std::allocator<unsigned char> >, COMDAT

; 1673 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1674 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1675 :     // note: only called internally from elsewhere in the STL
; 1676 :     using _Ptrval = typename _Alloc::value_type*;
; 1677 : 
; 1678 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAE@std@@YA?A_TAEBQEAE@Z ; std::_Get_unwrapped<unsigned char * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1679 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAE@std@@YA?A_TAEBQEAE@Z ; std::_Get_unwrapped<unsigned char * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1680 : 
; 1681 :     if constexpr (conjunction_v<bool_constant<_Iter_copy_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1682 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1683 : #if _HAS_CXX20
; 1684 :         if (!_STD is_constant_evaluated())
; 1685 : #endif // _HAS_CXX20
; 1686 :         {
; 1687 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@E@std@@YAPEAEPEAE@Z		; std::_Unfancy<unsigned char>
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z ; std::_Copy_memmove<unsigned char *,unsigned char *>

; 1688 :             _Dest += _ULast - _UFirst;

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Dest$[rsp], rax

; 1689 :             return _Dest;

	mov	rax, QWORD PTR _Dest$[rsp]
	jmp	SHORT $LN1@Uninitiali

; 1690 :         }
; 1691 :     }
; 1692 : 
; 1693 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@PEAEAEAV?$allocator@E@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Uninitialized_backout_al<std::allocator<unsigned char> >

; 1694 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	inc	rax
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1695 :         _Backout._Emplace_back(*_UFirst);

	mov	rdx, QWORD PTR _UFirst$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@AEAE@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAXAEAE@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Emplace_back<unsigned char &>

; 1696 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1697 : 
; 1698 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAAPEAEXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::~_Uninitialized_backout_al<std::allocator<unsigned char> >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1699 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z ENDP ; std::_Uninitialized_copy<unsigned char *,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z@4HA PROC ; `std::_Uninitialized_copy<unsigned char *,std::allocator<unsigned char> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@E@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned char> >::~_Uninitialized_backout_al<std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z@4HA ENDP ; `std::_Uninitialized_copy<unsigned char *,std::allocator<unsigned char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEBQEAE@std@@YAAEBQEAEAEBQEAE@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBQEAE@std@@YAAEBQEAEAEBQEAE@Z PROC		; std::forward<unsigned char * const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEBQEAE@std@@YAAEBQEAEAEBQEAE@Z ENDP		; std::forward<unsigned char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >::~_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >, COMDAT

; 33   :     _CONSTEXPR20 ~_Tidy_guard() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 34   :         if (_Target) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy_guard

; 35   :             _Target->_Tidy();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
$LN2@Tidy_guard:

; 36   :         }
; 37   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >::~_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@V?$allocator@E@std@@@std@@YA$$QEAV?$allocator@E@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@V?$allocator@E@std@@@std@@YA$$QEAV?$allocator@E@0@AEAV10@@Z PROC ; std::forward<std::allocator<unsigned char> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@V?$allocator@E@std@@@std@@YA$$QEAV?$allocator@E@0@AEAV10@@Z ENDP ; std::forward<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Assign_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
_Newsize$ = 32
_Al$ = 40
_My_data$ = 48
_Myfirst$ = 56
_Mylast$ = 64
_Myend$ = 72
_Nothrow_construct$ = 80
_Oldcapacity$ = 88
_Oldsize$ = 96
_Mid$1 = 104
_Newlast$2 = 112
this$ = 144
_First$ = 152
_Last$ = 160
__formal$ = 168
??$_Assign_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0Uforward_iterator_tag@1@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_range<unsigned char *>, COMDAT

; 1268 :     _CONSTEXPR20 void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) {

$LN6:
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 1269 :         // assign forward range [_First, _Last)
; 1270 :         const auto _Newsize = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));

	mov	rdx, QWORD PTR _Last$[rsp]
	mov	rcx, QWORD PTR _First$[rsp]
	call	??$distance@PEAE@std@@YA_JPEAE0@Z	; std::distance<unsigned char *>
	mov	rcx, rax
	call	??$_Convert_size@_K@std@@YA_K_K@Z	; std::_Convert_size<unsigned __int64>
	mov	QWORD PTR _Newsize$[rsp], rax

; 1271 :         auto& _Al           = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1272 :         auto& _My_data      = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1273 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1274 :         pointer& _Mylast    = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1275 :         pointer& _Myend     = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1276 : 
; 1277 :         constexpr bool _Nothrow_construct = conjunction_v<is_nothrow_constructible<_Ty, _Iter_ref_t<_Iter>>,

	mov	BYTE PTR _Nothrow_construct$[rsp], 1

; 1278 :             _Uses_default_construct<_Alloc, _Ty*, _Iter_ref_t<_Iter>>>;
; 1279 : 
; 1280 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1281 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1282 :         if (_Newsize > _Oldcapacity) {

	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Assign_ran

; 1283 :             _Clear_and_reserve_geometric(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Clear_and_reserve_geometric

; 1284 :             if constexpr (_Nothrow_construct) {
; 1285 :                 _Mylast = _Uninitialized_copy(_First, _Last, _Myfirst, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Last$[rsp]
	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z ; std::_Uninitialized_copy<unsigned char *,std::allocator<unsigned char> >
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1286 :                 _ASAN_VECTOR_CREATE;
; 1287 :             } else {
; 1288 :                 _ASAN_VECTOR_CREATE_GUARD;
; 1289 :                 _Mylast = _Uninitialized_copy(_First, _Last, _Myfirst, _Al);
; 1290 :             }
; 1291 :             return;

	jmp	$LN1@Assign_ran
$LN2@Assign_ran:

; 1292 :         }
; 1293 : 
; 1294 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1295 :         if (_Newsize > _Oldsize) {

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN3@Assign_ran

; 1296 :             // performance note: traversing [_First, _Mid) twice
; 1297 :             const _Iter _Mid = _STD next(_First, static_cast<difference_type>(_Oldsize));

	mov	rdx, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _First$[rsp]
	call	??$next@PEAE@std@@YAPEAEPEAE_J@Z	; std::next<unsigned char *>
	mov	QWORD PTR _Mid$1[rsp], rax

; 1298 :             _Copy_unchecked(_First, _Mid, _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Mid$1[rsp]
	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Copy_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z ; std::_Copy_unchecked<unsigned char *,unsigned char *>

; 1299 : 
; 1300 :             if constexpr (_Nothrow_construct) {
; 1301 :                 _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1302 :                 _Mylast = _Uninitialized_copy(_Mid, _Last, _Mylast, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Last$[rsp]
	mov	rcx, QWORD PTR _Mid$1[rsp]
	call	??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z ; std::_Uninitialized_copy<unsigned char *,std::allocator<unsigned char> >
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1303 :             } else {
; 1304 :                 _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1305 :                 _Mylast = _Uninitialized_copy(_Mid, _Last, _Mylast, _Al);
; 1306 :                 _ASAN_VECTOR_RELEASE_GUARD;
; 1307 :             }
; 1308 :         } else {

	jmp	SHORT $LN4@Assign_ran
$LN3@Assign_ran:

; 1309 :             const pointer _Newlast = _Myfirst + _Newsize;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, QWORD PTR _Newsize$[rsp]
	mov	QWORD PTR _Newlast$2[rsp], rax

; 1310 :             _Copy_unchecked(_First, _Last, _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Last$[rsp]
	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Copy_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z ; std::_Copy_unchecked<unsigned char *,unsigned char *>

; 1311 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newlast$2[rsp]
	call	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >

; 1312 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1313 :             _Mylast = _Newlast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newlast$2[rsp]
	mov	QWORD PTR [rax], rcx
$LN4@Assign_ran:
$LN1@Assign_ran:

; 1314 :         }
; 1315 :     }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
??$_Assign_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0Uforward_iterator_tag@1@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_range<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEAPEAE@std@@YA?A_TAEAPEAE@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEAPEAE@std@@YA?A_TAEAPEAE@Z PROC	; std::_Get_unwrapped<unsigned char * &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEAPEAE@std@@YA?A_TAEAPEAE@Z ENDP	; std::_Get_unwrapped<unsigned char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Adl_verify_range@PEAEPEAE@std@@YAXAEBQEAE0@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
??$_Adl_verify_range@PEAEPEAE@std@@YAXAEBQEAE0@Z PROC	; std::_Adl_verify_range<unsigned char *,unsigned char *>, COMDAT

; 1254 : constexpr void _Adl_verify_range(const _Iter& _First, const _Sentinel& _Last) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1255 :     // check that [_First, _Last) forms an iterator range
; 1256 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1257 :         _Verify_range(_First, _Last);

	mov	rax, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Verify_range@E@std@@YAXQEBE0@Z	; std::_Verify_range<unsigned char>

; 1258 :     }
; 1259 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Adl_verify_range@PEAEPEAE@std@@YAXAEBQEAE0@Z ENDP	; std::_Adl_verify_range<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z PROC ; std::_Uninitialized_copy<gli::image2D *,std::allocator<gli::image2D> >, COMDAT

; 1673 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1674 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1675 :     // note: only called internally from elsewhere in the STL
; 1676 :     using _Ptrval = typename _Alloc::value_type*;
; 1677 : 
; 1678 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAVimage2D@gli@@@std@@YA?A_TAEBQEAVimage2D@gli@@@Z ; std::_Get_unwrapped<gli::image2D * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1679 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAVimage2D@gli@@@std@@YA?A_TAEBQEAVimage2D@gli@@@Z ; std::_Get_unwrapped<gli::image2D * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1680 : 
; 1681 :     if constexpr (conjunction_v<bool_constant<_Iter_copy_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1682 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1683 : #if _HAS_CXX20
; 1684 :         if (!_STD is_constant_evaluated())
; 1685 : #endif // _HAS_CXX20
; 1686 :         {
; 1687 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1688 :             _Dest += _ULast - _UFirst;
; 1689 :             return _Dest;
; 1690 :         }
; 1691 :     }
; 1692 : 
; 1693 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@PEAVimage2D@gli@@AEAV?$allocator@Vimage2D@gli@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Uninitialized_backout_al<std::allocator<gli::image2D> >
	npad	1

; 1694 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 48					; 00000030H
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1695 :         _Backout._Emplace_back(*_UFirst);

	mov	rdx, QWORD PTR _UFirst$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@AEAVimage2D@gli@@@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXAEAVimage2D@gli@@@Z ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Emplace_back<gli::image2D &>

; 1696 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1697 : 
; 1698 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAPEAVimage2D@gli@@XZ ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::~_Uninitialized_backout_al<std::allocator<gli::image2D> >
	mov	rax, QWORD PTR $T4[rsp]

; 1699 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z ENDP ; std::_Uninitialized_copy<gli::image2D *,std::allocator<gli::image2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA PROC ; `std::_Uninitialized_copy<gli::image2D *,std::allocator<gli::image2D> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::~_Uninitialized_backout_al<std::allocator<gli::image2D> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA ENDP ; `std::_Uninitialized_copy<gli::image2D *,std::allocator<gli::image2D> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z
_TEXT	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<gli::image2D> >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);
; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1843 :             return _First + _Count;
; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@PEAVimage2D@gli@@AEAV?$allocator@Vimage2D@gli@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Uninitialized_backout_al<std::allocator<gli::image2D> >
	npad	1

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAPEAVimage2D@gli@@XZ ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::~_Uninitialized_backout_al<std::allocator<gli::image2D> >
	mov	rax, QWORD PTR $T4[rsp]

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<gli::image2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<gli::image2D> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<gli::image2D> >::~_Uninitialized_backout_al<std::allocator<gli::image2D> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<gli::image2D> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT

; 1357 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 1358 :         if (_Newsize > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::max_size
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Resize_rea

; 1359 :             _Xlength();

	call	?_Xlength@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@CAXXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Xlength
$LN2@Resize_rea:

; 1360 :         }
; 1361 : 
; 1362 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1363 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1364 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1365 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1366 : 
; 1367 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	cdq
	mov	ecx, 48					; 00000030H
	idiv	rcx
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1368 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBA_K_K@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 1369 : 
; 1370 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@Vimage2D@gli@@@std@@QEAAPEAVimage2D@gli@@_K@Z ; std::allocator<gli::image2D>::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1371 :         const pointer _Appended_first = _Newvec + _Oldsize;

	imul	rax, QWORD PTR _Oldsize$[rsp], 48	; 00000030H
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Appended_first$[rsp], rax

; 1372 :         pointer _Appended_last        = _Appended_first;

	mov	rax, QWORD PTR _Appended_first$[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1373 : 
; 1374 :         _TRY_BEGIN
; 1375 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1376 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1377 :         } else {
; 1378 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1379 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Appended_first$[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<gli::image2D> >
	mov	QWORD PTR tv140[rsp], rax
	mov	rax, QWORD PTR tv140[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1380 :         }
; 1381 : 
; 1382 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1383 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);
; 1384 :         } else {
; 1385 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_copy@PEAVimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@QEAV12@0PEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z ; std::_Uninitialized_copy<gli::image2D *,std::allocator<gli::image2D> >
	npad	1
	jmp	SHORT $LN7@Resize_rea
$LN8@Resize_rea:
$LN7@Resize_rea:

; 1386 :         }
; 1387 :         _CATCH_ALL
; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);
; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);
; 1390 :         _RERAISE;
; 1391 :         _CATCH_END
; 1392 : 
; 1393 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXQEAVimage2D@gli@@_K1@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Change_array

; 1394 :     }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
$LN9@Resize_rea:
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA PROC ; `std::vector<gli::image2D,std::allocator<gli::image2D> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0

; 1387 :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z$0:

; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Appended_last$[rbp]
	mov	rcx, QWORD PTR _Appended_first$[rbp]
	call	??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z ; std::_Destroy_range<std::allocator<gli::image2D> >

; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@Vimage2D@gli@@@std@@QEAAXQEAVimage2D@gli@@_K@Z ; std::allocator<gli::image2D>::deallocate

; 1390 :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 1391 :         _CATCH_END

	lea	rax, $LN8@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA ENDP ; `std::vector<gli::image2D,std::allocator<gli::image2D> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 972  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 973  :     // deallocate a plain pointer using an allocator
; 974  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 975  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 976  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 977  :     } else {
; 978  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 979  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 980  :     }
; 981  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::mod<float,0,glm::tvec3>, COMDAT

; 459  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 460  : 		return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::mod<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_noise.hpp
;	COMDAT ??$fade@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
tv65 = 128
__$ReturnUdt$ = 160
t$ = 168
??$fade@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z PROC ; glm::detail::fade<float,0>, COMDAT

; 95   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 96   : 		return (t * t * t) * (t * (t * T(6) - T(15)) + T(10));

	movss	xmm2, DWORD PTR __real@40c00000
	mov	rdx, QWORD PTR t$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@41700000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR t$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@41200000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv65[rsp], rax
	mov	r8, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR t$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR t$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 97   : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$fade@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ENDP ; glm::detail::fade<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z PROC ; glm::mix<float,float,0,glm::tvec4>, COMDAT

; 571  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 572  : 		return detail::compute_mix_scalar<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	lea	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_scalar@MM$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBM@Z ; glm::detail::compute_mix_scalar<float,float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 573  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z ENDP ; glm::mix<float,float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_noise.hpp
;	COMDAT ??$fade@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
$T4 = 68
$T5 = 80
$T6 = 92
tv65 = 104
__$ReturnUdt$ = 128
t$ = 136
??$fade@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z PROC ; glm::detail::fade<float,0>, COMDAT

; 89   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 90   : 		return (t * t * t) * (t * (t * T(6) - T(15)) + T(10));

	movss	xmm2, DWORD PTR __real@40c00000
	mov	rdx, QWORD PTR t$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@41700000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR t$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@41200000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv65[rsp], rax
	mov	r8, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR t$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR t$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 91   : 	}

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$fade@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ENDP ; glm::detail::fade<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
edge$ = 72
x$ = 80
??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z PROC ; glm::step<glm::tvec4,float,0>, COMDAT

; 590  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 591  : 		return detail::compute_step_vector<T, P, vecType, detail::is_aligned<P>::value>::call(vecType<T, P>(edge), x);

	movss	xmm1, DWORD PTR edge$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_step_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 592  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ENDP ; glm::step<glm::tvec4,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>, COMDAT

; 314  : 	{}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 310  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 311  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 312  : 		z(static_cast<T>(b.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax+8], xmm0

; 313  : 		w(static_cast<T>(b.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+12], xmm0

; 314  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@MM@glm@@YAMMMM@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
a$ = 80
??$mix@MM@glm@@YAMMMM@Z PROC				; glm::mix<float,float>, COMDAT

; 565  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 566  : 		return detail::compute_mix<genTypeT, genTypeU>::call(x, y, a);

	lea	r8, QWORD PTR a$[rsp]
	lea	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z ; glm::detail::compute_mix<float,float>::call

; 567  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$mix@MM@glm@@YAMMMM@Z ENDP				; glm::mix<float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z PROC ; glm::mix<float,float,0,glm::tvec2>, COMDAT

; 571  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 572  : 		return detail::compute_mix_scalar<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	lea	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_scalar@MM$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBM@Z ; glm::detail::compute_mix_scalar<float,float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 573  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z ENDP ; glm::mix<float,float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_noise.hpp
;	COMDAT ??$fade@M$0A@@detail@glm@@YA?AU?$tvec2@M$0A@@1@AEBU21@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
$T5 = 64
$T6 = 72
tv65 = 80
__$ReturnUdt$ = 112
t$ = 120
??$fade@M$0A@@detail@glm@@YA?AU?$tvec2@M$0A@@1@AEBU21@@Z PROC ; glm::detail::fade<float,0>, COMDAT

; 83   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 84   : 		return (t * t * t) * (t * (t * T(6) - T(15)) + T(10));

	movss	xmm2, DWORD PTR __real@40c00000
	mov	rdx, QWORD PTR t$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@41700000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR t$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@41200000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv65[rsp], rax
	mov	r8, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR t$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR t$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 85   : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$fade@M$0A@@detail@glm@@YA?AU?$tvec2@M$0A@@1@AEBU21@@Z ENDP ; glm::detail::fade<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec2<float,0>::operator*=<float>, COMDAT

; 192  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 193  : 		this->x *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 194  : 		this->y *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 195  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 196  : 	}

	pop	rdi
	ret	0
??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec2<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 724  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 725  : 		return tvec4<T, P>(v) /= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator/=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 726  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::fract<float,0,glm::tvec4>, COMDAT

; 433  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 434  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'fract' only accept floating-point inputs");
; 435  : 		return detail::compute_fract<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 436  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::fract<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 573  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 574  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 			v1.x * v2.x,
; 576  : 			v1.y * v2.y);
; 577  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
scalar$ = 56
v$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z PROC	; glm::operator-<float,0>, COMDAT

; 517  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 518  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	subss	xmm0, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR scalar$[rsp]
	subss	xmm1, DWORD PTR [rax]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 519  : 			scalar - v.x,
; 520  : 			scalar - v.y);
; 521  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_noise.hpp
;	COMDAT ??$taylorInvSqrt@M@detail@glm@@YAMAEBM@Z
_TEXT	SEGMENT
r$ = 32
??$taylorInvSqrt@M@detail@glm@@YAMAEBM@Z PROC		; glm::detail::taylorInvSqrt<float>, COMDAT

; 52   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 53   : 		return T(1.79284291400159) - T(0.85373472095314) * r;

	mov	rax, QWORD PTR r$[rsp]
	movss	xmm0, DWORD PTR __real@3f5a8e5c
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR __real@3fe57be0
	subss	xmm1, xmm0
	movaps	xmm0, xmm1

; 54   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$taylorInvSqrt@M@detail@glm@@YAMAEBM@Z ENDP		; glm::detail::taylorInvSqrt<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\noise.inl
;	COMDAT ??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z
_TEXT	SEGMENT
pXYZ$ = 40
pW$ = 68
s$ = 88
$T5 = 116
$T6 = 128
$T7 = 140
$T8 = 152
$T9 = 164
$T10 = 176
$T11 = 188
$T12 = 200
$T13 = 212
$T14 = 224
$T15 = 240
$T16 = 256
$T17 = 260
$T18 = 272
$T19 = 284
$T20 = 296
$T21 = 308
tv68 = 320
tv77 = 328
tv128 = 336
tv140 = 344
__$ReturnUdt$ = 384
j$ = 392
ip$ = 400
??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z PROC ; glm::gtc::grad4<float,0>, COMDAT

; 14   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+384]

; 15   : 		tvec3<T, P> pXYZ = floor(fract(tvec3<T, P>(j) * tvec3<T, P>(ip)) * T(7)) * ip[2] - T(1);

	mov	edx, 2
	mov	rcx, QWORD PTR ip$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	rdx, QWORD PTR ip$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	QWORD PTR tv77[rsp], rax
	mov	rcx, QWORD PTR j$[rsp]
	movss	xmm1, DWORD PTR [rcx]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv77[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec3>
	movss	xmm2, DWORD PTR __real@40e00000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv68[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR pXYZ$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 16   : 		T pW = static_cast<T>(1.5) - dot(abs(pXYZ), tvec3<T, P>(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv128[rsp], rax
	lea	rdx, QWORD PTR pXYZ$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv128[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR __real@3fc00000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR pW$[rsp], xmm0

; 17   : 		tvec4<T, P> s = tvec4<T, P>(lessThan(tvec4<T, P>(pXYZ, pW), tvec4<T, P>(0.0)));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv140[rsp], rax
	movss	xmm2, DWORD PTR pW$[rsp]
	lea	rdx, QWORD PTR pXYZ$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
	mov	rcx, QWORD PTR tv140[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR s$[rsp]
	call	??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><bool,0>

; 18   : 		pXYZ = pXYZ + (tvec3<T, P>(s) * T(2) - T(1)) * s.w; 

	lea	rdx, QWORD PTR s$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	movss	xmm2, DWORD PTR __real@40000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	movss	xmm2, DWORD PTR s$[rsp+12]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR pXYZ$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	lea	rcx, QWORD PTR pXYZ$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 19   : 		return tvec4<T, P>(pXYZ, pW);

	movss	xmm2, DWORD PTR pW$[rsp]
	lea	rdx, QWORD PTR pXYZ$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 20   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 360				; 00000168H
	pop	rdi
	pop	rsi
	ret	0
??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z ENDP ; glm::gtc::grad4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_noise.hpp
;	COMDAT ??$permute@M@detail@glm@@YAMAEBM@Z
_TEXT	SEGMENT
$T1 = 48
x$ = 80
??$permute@M@detail@glm@@YAMAEBM@Z PROC			; glm::detail::permute<float>, COMDAT

; 22   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 23   : 		return mod289(((x * static_cast<T>(34)) + static_cast<T>(1)) * x);

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR __real@42080000
	addss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR $T1[rsp], xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$mod289@M@detail@glm@@YAMAEBM@Z	; glm::detail::mod289<float>

; 24   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$permute@M@detail@glm@@YAMAEBM@Z ENDP			; glm::detail::permute<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::mod<float,0,glm::tvec4>, COMDAT

; 459  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 460  : 		return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::mod<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator-<float,0>, COMDAT

; 664  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 665  : 		return tvec4<T, P>(v) -= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@MAEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@MAEBU?$tvec3@M$0A@@1@@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>, COMDAT

; 296  : 	{}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 292  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 293  : 		y(static_cast<T>(b.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax+4], xmm0

; 294  : 		z(static_cast<T>(b.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+8], xmm0

; 295  : 		w(static_cast<T>(b.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+12], xmm0

; 296  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@MAEBU?$tvec3@M$0A@@1@@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec4>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec4>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec3<float,0>::operator*=<float>, COMDAT

; 242  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 243  : 		this->x *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 244  : 		this->y *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 245  : 		this->z *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 246  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 247  : 	}

	pop	rdi
	ret	0
??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec3<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_noise.hpp
;	COMDAT ??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
r$ = 72
??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z PROC ; glm::detail::taylorInvSqrt<float,0>, COMDAT

; 70   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 71   : 		return T(1.79284291400159) - T(0.85373472095314) * r;

	mov	r8, QWORD PTR r$[rsp]
	movss	xmm1, DWORD PTR __real@3f5a8e5c
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3fe57be0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 72   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ENDP ; glm::detail::taylorInvSqrt<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC	; glm::operator-<float,0>, COMDAT

; 626  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 627  : 		return tvec4<T, P>(0) -= v;

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, rax
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 628  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
edge$ = 56
x$ = 64
??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::step<glm::tvec4,float,0>, COMDAT

; 596  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 597  : 		return detail::compute_step_vector<T, P, vecType, detail::is_aligned<P>::value>::call(edge, x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR edge$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_step_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 598  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::step<glm::tvec4,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
scalar$ = 88
v$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z PROC	; glm::operator-<float,0>, COMDAT

; 676  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 677  : 		return tvec4<T, P>(scalar) -= v;

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, rax
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 678  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
scalar$ = 88
v$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 706  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 707  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 708  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec4>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator+<float,0>, COMDAT

; 634  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 635  : 		return tvec4<T, P>(v) += scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 636  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_noise.hpp
;	COMDAT ??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ReturnUdt$ = 96
x$ = 104
??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z PROC ; glm::detail::permute<float,0>, COMDAT

; 40   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 41   : 		return mod289(((x * static_cast<T>(34)) + static_cast<T>(1)) * x);

	movss	xmm2, DWORD PTR __real@42080000
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mod289@U?$tvec4@M$0A@@glm@@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::mod289<glm::tvec4<float,0> >
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 42   : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ENDP ; glm::detail::permute<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
scalar$ = 88
v$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z PROC	; glm::operator+<float,0>, COMDAT

; 646  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 647  : 		return tvec4<T, P>(v) += scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 648  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_noise.hpp
;	COMDAT ??$mod289@U?$tvec3@M$0A@@glm@@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
$T4 = 68
$T5 = 80
$T6 = 92
$T7 = 104
tv67 = 120
tv73 = 128
__$ReturnUdt$ = 160
x$ = 168
??$mod289@U?$tvec3@M$0A@@glm@@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z PROC ; glm::detail::mod289<glm::tvec3<float,0> >, COMDAT

; 16   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 17   : 		return x - floor(x * static_cast<T>(1.0) / static_cast<T>(289.0)) * static_cast<T>(289.0);

	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv67[rsp], rax
	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv73[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv73[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$mod289@U?$tvec3@M$0A@@glm@@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ENDP ; glm::detail::mod289<glm::tvec3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec3>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$step@Utvec3@glm@@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
edge$ = 56
x$ = 64
??$step@Utvec3@glm@@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::step<glm::tvec3,float,0>, COMDAT

; 596  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 597  : 		return detail::compute_step_vector<T, P, vecType, detail::is_aligned<P>::value>::call(edge, x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR edge$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_step_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_step_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 598  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$step@Utvec3@glm@@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::step<glm::tvec3,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>, COMDAT

; 204  : 	{}

$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsd2ss xmm0, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsd2ss xmm0, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsd2ss xmm0, QWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><double,double>, COMDAT

; 66   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsd2ss xmm0, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec3>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec3<float,0>::operator*=<float>, COMDAT

; 262  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 263  : 		this->x *= static_cast<T>(v.x);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 264  : 		this->y *= static_cast<T>(v.y);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 265  : 		this->z *= static_cast<T>(v.z);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 266  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 267  : 	}

	pop	rdi
	ret	0
??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec3<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
scalar$ = 72
v$ = 80
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z PROC	; glm::operator-<float,0>, COMDAT

; 601  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 602  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	subss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR scalar$[rsp]
	subss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR scalar$[rsp]
	subss	xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 603  : 			scalar - v.x,
; 604  : 			scalar - v.y,
; 605  : 			scalar - v.z);
; 606  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec3>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec3>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator-<float,0>, COMDAT

; 583  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 584  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	subss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 585  : 			v.x - scalar,
; 586  : 			v.y - scalar,
; 587  : 			v.z - scalar);
; 588  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
scalar$ = 72
v$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 646  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 647  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	mulss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR scalar$[rsp]
	mulss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mulss	xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 648  : 			scalar * v.x,
; 649  : 			scalar * v.y,
; 650  : 			scalar * v.z);
; 651  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::fract<float,0,glm::tvec3>, COMDAT

; 433  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 434  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'fract' only accept floating-point inputs");
; 435  : 		return detail::compute_fract<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 436  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::fract<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec3>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	subss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 574  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 575  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	addss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 576  : 			v1.x + v2.x,
; 577  : 			v1.y + v2.y,
; 578  : 			v1.z + v2.z);
; 579  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator+<float,0>, COMDAT

; 538  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 539  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	addss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 540  : 			v.x + scalar,
; 541  : 			v.y + scalar,
; 542  : 			v.z + scalar);
; 543  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_noise.hpp
;	COMDAT ??$permute@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
__$ReturnUdt$ = 96
x$ = 104
??$permute@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z PROC ; glm::detail::permute<float,0>, COMDAT

; 34   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 35   : 		return mod289(((x * static_cast<T>(34)) + static_cast<T>(1)) * x);

	movss	xmm2, DWORD PTR __real@42080000
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mod289@U?$tvec3@M$0A@@glm@@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ; glm::detail::mod289<glm::tvec3<float,0> >
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 36   : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$permute@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ENDP ; glm::detail::permute<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
scalar$ = 72
v$ = 80
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z PROC	; glm::operator+<float,0>, COMDAT

; 556  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 557  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	addss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR scalar$[rsp]
	addss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR scalar$[rsp]
	addss	xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 558  : 			scalar + v.x,
; 559  : 			scalar + v.y,
; 560  : 			scalar + v.z);
; 561  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::mod<float,0,glm::tvec2>, COMDAT

; 459  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 460  : 		return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::mod<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MMM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@MM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0MMM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@MM@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,float,float,0>, COMDAT

; 224  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 220  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 221  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 222  : 		z(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 223  : 		w(static_cast<T>(c))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 224  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MMM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@MM@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,float,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><float,0>, COMDAT

; 96   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 94   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 95   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 96   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec2>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z PROC	; glm::operator+<float,0>, COMDAT

; 461  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 462  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 463  : 			v.x + scalar,
; 464  : 			v.y + scalar);
; 465  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec2>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\memory
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Ptr$ = 72
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT

; 3182 :     explicit unique_ptr(pointer _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t{}, _Ptr) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	lea	r8, QWORD PTR _Ptr$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\memory
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT

; 3267 :     pointer release() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 3268 :         return _STD exchange(_Mypair._Myval2, nullptr);

	mov	QWORD PTR $T1[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rax
	call	??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z ; std::exchange<std::_Facet_base *,std::nullptr_t>

; 3269 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT

; 3237 :     ~unique_ptr() noexcept {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 3238 :         if (_Mypair._Myval2) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@unique_ptr

; 3239 :             _Mypair._Get_first()(_Mypair._Myval2);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, rax
	call	??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
$LN2@unique_ptr:

; 3240 :         }
; 3241 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\memory
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = 32
tv70 = 40
this$ = 64
_Ptr$ = 72
??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT

; 3127 :     void operator()(_Ty* _Ptr) const noexcept /* strengthened */ { // delete a pointer

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 3128 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 3129 :         delete _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 0
	je	SHORT $LN3@operator
	mov	rax, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	edx, 1
	mov	rcx, QWORD PTR $T1[rsp]
	call	QWORD PTR [rax]
	mov	QWORD PTR tv70[rsp], rax
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	QWORD PTR tv70[rsp], 0
$LN4@operator:

; 3130 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<unsigned int,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@I@glm@@YAIII@Z	; glm::max<unsigned int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z ; glm::detail::functor2<unsigned int,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<unsigned int,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
minVal$ = 80
maxVal$ = 88
?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z PROC ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call, COMDAT

; 282  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 283  : 			return min(max(x, minVal), maxVal);

	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec4>
	mov	r8, QWORD PTR maxVal$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 284  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ENDP ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 0
_Count$ = 32
??$_Get_size_of_n@$00@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<1>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 0

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 60   :         if (_Count > _Max_possible) {
; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	rax, QWORD PTR _Count$[rsp]

; 66   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$_Get_size_of_n@$00@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 256  :     }
; 257  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$max@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$max@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 41   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 42   :     // return larger of _Left and _Right
; 43   :     return _Left < _Right ? _Right : _Left;

	mov	rax, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@max
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@max:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 44   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$max@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char> >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Al$ = 64
??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z PROC ; std::_Destroy_range<std::allocator<gli::image2D> >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {

	jmp	SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
	mov	rax, QWORD PTR _First$[rsp]
	add	rax, 48					; 00000030H
	mov	QWORD PTR _First$[rsp], rax
$LN4@Destroy_ra:
	mov	rax, QWORD PTR _Last$[rsp]
	cmp	QWORD PTR _First$[rsp], rax
	je	SHORT $LN3@Destroy_ra

; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Unfancy@Vimage2D@gli@@@std@@YAPEAVimage2D@gli@@PEAV12@@Z ; std::_Unfancy<gli::image2D>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$destroy@Vimage2D@gli@@@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SAXAEAV?$allocator@Vimage2D@gli@@@1@QEAVimage2D@gli@@@Z ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::destroy<gli::image2D>

; 945  :         }

	jmp	SHORT $LN2@Destroy_ra
$LN3@Destroy_ra:

; 946  :     }
; 947  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<gli::image2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ; std::_Voidify_iter<char * *>
	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ; std::forward<char * const &>
	mov	rcx, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
_TEXT	SEGMENT
_Old_capacity$ = 32
_New_capacity$ = 40
_Al$ = 48
_New_ptr$ = 72
this$ = 112
_New_size$ = 120
_Fn$ = 128
<_Args_0>$ = 136
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>, COMDAT

; 4520 :     _CONSTEXPR20 basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 4521 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4522 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4523 :         if (_New_size > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	QWORD PTR _New_size$[rsp], rax
	jbe	SHORT $LN2@Reallocate

; 4524 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
$LN2@Reallocate:

; 4525 :         }
; 4526 : 
; 4527 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR _Old_capacity$[rsp], rax

; 4528 :         const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	rdx, QWORD PTR _New_size$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	QWORD PTR _New_capacity$[rsp], rax

; 4529 :         auto& _Al                     = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 4530 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

	mov	rax, QWORD PTR _New_capacity$[rsp]
	inc	rax
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
	mov	QWORD PTR _New_ptr$[rsp], rax

; 4531 : 
; 4532 : #if _HAS_CXX20
; 4533 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4534 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4535 :         }
; 4536 : #endif // _HAS_CXX20
; 4537 :         _Mypair._Myval2._Orphan_all();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 4538 :         _Mypair._Myval2._Mysize = _New_size;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_size$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 4539 :         _Mypair._Myval2._Myres  = _New_capacity;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_capacity$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 4540 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

	mov	rcx, QWORD PTR _New_ptr$[rsp]
	call	??$_Unfancy@D@std@@YAPEADPEAD@Z		; std::_Unfancy<char>
	mov	r9, QWORD PTR <_Args_0>$[rsp]
	mov	r8, QWORD PTR _New_size$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR _Fn$[rsp]
	call	??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()

; 4541 :         if (_BUF_SIZE <= _Old_capacity) {

	cmp	QWORD PTR _Old_capacity$[rsp], 16
	jb	SHORT $LN3@Reallocate

; 4542 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

	mov	rax, QWORD PTR _Old_capacity$[rsp]
	inc	rax
	mov	r8, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 4543 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_ptr$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 4544 :         } else {

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4545 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	lea	rdx, QWORD PTR _New_ptr$[rsp]
	mov	rcx, rax
	call	??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN4@Reallocate:

; 4546 :         }
; 4547 : 
; 4548 :         return *this;

	mov	rax, QWORD PTR this$[rsp]
$LN5@Reallocate:

; 4549 :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_New_ptr$ = 72
_Count$ = 80
_Ptr$ = 88
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z PROC ; <lambda_66f57f934f28d61049862f64df852ff0>::operator(), COMDAT

; 3253 :             },

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 3251 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _New_ptr$[rsp]
	call	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 3252 :                 _Traits::assign(_New_ptr[_Count], _Elem());

	mov	BYTE PTR $T1[rsp], 0
	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _New_ptr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3253 :             },

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ENDP ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z
_TEXT	SEGMENT
_My_data$ = 48
_Old_size$ = 56
_New_size$ = 64
_Old_capacity$ = 72
_New_capacity$ = 80
_Al$ = 88
_New_ptr$ = 104
_Raw_new$ = 120
_Old_ptr$4 = 128
this$ = 160
_Size_increase$ = 168
_Fn$ = 176
<_Args_0>$ = 184
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>, COMDAT

; 4552 :     _CONSTEXPR20 basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

$LN6:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 4553 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4554 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4555 :         auto& _My_data            = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 4556 :         const size_type _Old_size = _My_data._Mysize;

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR _Old_size$[rsp], rax

; 4557 :         if (max_size() - _Old_size < _Size_increase) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	rax, QWORD PTR _Old_size$[rsp]
	cmp	rax, QWORD PTR _Size_increase$[rsp]
	jae	SHORT $LN2@Reallocate

; 4558 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
$LN2@Reallocate:

; 4559 :         }
; 4560 : 
; 4561 :         const size_type _New_size     = _Old_size + _Size_increase;

	mov	rax, QWORD PTR _Size_increase$[rsp]
	mov	rcx, QWORD PTR _Old_size$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _New_size$[rsp], rax

; 4562 :         const size_type _Old_capacity = _My_data._Myres;

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR _Old_capacity$[rsp], rax

; 4563 :         const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	rdx, QWORD PTR _New_size$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	QWORD PTR _New_capacity$[rsp], rax

; 4564 :         auto& _Al                     = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 4565 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

	mov	rax, QWORD PTR _New_capacity$[rsp]
	inc	rax
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
	mov	QWORD PTR _New_ptr$[rsp], rax

; 4566 : 
; 4567 : #if _HAS_CXX20
; 4568 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4569 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4570 :         }
; 4571 : #endif // _HAS_CXX20
; 4572 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 4573 :         _My_data._Mysize      = _New_size;

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _New_size$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 4574 :         _My_data._Myres       = _New_capacity;

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _New_capacity$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 4575 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

	mov	rcx, QWORD PTR _New_ptr$[rsp]
	call	??$_Unfancy@D@std@@YAPEADPEAD@Z		; std::_Unfancy<char>
	mov	QWORD PTR _Raw_new$[rsp], rax

; 4576 :         if (_BUF_SIZE <= _Old_capacity) {

	cmp	QWORD PTR _Old_capacity$[rsp], 16
	jb	SHORT $LN3@Reallocate

; 4577 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR _Old_ptr$4[rsp], rax

; 4578 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

	mov	rcx, QWORD PTR _Old_ptr$4[rsp]
	call	??$_Unfancy@D@std@@YAPEADPEAD@Z		; std::_Unfancy<char>
	movzx	ecx, BYTE PTR <_Args_0>$[rsp]
	mov	BYTE PTR [rsp+32], cl
	mov	r9, QWORD PTR _Old_size$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR _Raw_new$[rsp]
	lea	rcx, QWORD PTR _Fn$[rsp]
	call	??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator()

; 4579 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

	mov	rax, QWORD PTR _Old_capacity$[rsp]
	inc	rax
	mov	r8, rax
	mov	rdx, QWORD PTR _Old_ptr$4[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 4580 :             _My_data._Bx._Ptr = _New_ptr;

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _New_ptr$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 4581 :         } else {

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4582 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	movzx	ecx, BYTE PTR <_Args_0>$[rsp]
	mov	BYTE PTR [rsp+32], cl
	mov	r9, QWORD PTR _Old_size$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR _Raw_new$[rsp]
	lea	rcx, QWORD PTR _Fn$[rsp]
	call	??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator()

; 4583 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	lea	rdx, QWORD PTR _New_ptr$[rsp]
	mov	rcx, rax
	call	??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN4@Reallocate:

; 4584 :         }
; 4585 : 
; 4586 :         return *this;

	mov	rax, QWORD PTR this$[rsp]
$LN5@Reallocate:

; 4587 :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_New_ptr$ = 72
_Old_ptr$ = 80
_Old_size$ = 88
_Ch$ = 96
??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z PROC ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator(), COMDAT

; 3867 :             },

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 3864 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

	mov	r8, QWORD PTR _Old_size$[rsp]
	mov	rdx, QWORD PTR _Old_ptr$[rsp]
	mov	rcx, QWORD PTR _New_ptr$[rsp]
	call	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 3865 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

	mov	rax, QWORD PTR _Old_size$[rsp]
	mov	rcx, QWORD PTR _New_ptr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	lea	rdx, QWORD PTR _Ch$[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3866 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

	mov	BYTE PTR $T1[rsp], 0
	mov	rax, QWORD PTR _New_ptr$[rsp]
	mov	rcx, QWORD PTR _Old_size$[rsp]
	lea	rax, QWORD PTR [rax+rcx+1]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3867 :             },

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z ENDP ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
_TEXT	SEGMENT
_Obj$ = 16
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z PROC	; std::_Destroy_in_place<char *>, COMDAT

; 294  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	pop	rdi
	ret	0
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ENDP	; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z PROC ; std::addressof<std::codecvt<char,char,_Mbstatet> const >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z ENDP ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S22$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>, COMDAT

; 1902 :     _CONSTEXPR20 void _Construct_n(_CRT_GUARDOVERFLOW const size_type _Count, _Valty&&... _Val) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 1903 :         // Dispatches between the three sized constructions.
; 1904 :         // 1-arg -> value-construction, e.g. vector(5)
; 1905 :         // 2-arg -> fill, e.g. vector(5, "meow")
; 1906 :         // 3-arg -> sized range construction, e.g. vector{"Hello", "Fluffy", "World"}
; 1907 :         auto& _Al       = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1908 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

	mov	rdx, QWORD PTR _Al$[rsp]
	lea	rcx, QWORD PTR $S22$[rsp]
	call	??$?0E@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@E@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned char>
	lea	rax, QWORD PTR $S22$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 1909 :         auto& _My_data  = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1910 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	r8, QWORD PTR _My_data$[rsp]
	mov	rdx, QWORD PTR _Alproxy$[rsp]
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1

; 1911 :         if (_Count != 0) {

	cmp	QWORD PTR _Count$[rsp], 0
	je	SHORT $LN2@Construct_

; 1912 :             _Buy_nonzero(_Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_nonzero

; 1913 :             _Tidy_guard<vector> _Guard{this};

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _Guard$6[rsp], rax

; 1914 :             if constexpr (sizeof...(_Val) == 0) {
; 1915 :                 _My_data._Mylast = _Uninitialized_value_construct_n(_My_data._Myfirst, _Count, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPEAEPEAE_KAEAV?$allocator@E@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 1916 :             } else if constexpr (sizeof...(_Val) == 1) {
; 1917 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Valty..., const _Ty&>);
; 1918 :                 _My_data._Mylast = _Uninitialized_fill_n(_My_data._Myfirst, _Count, _Val..., _Al);
; 1919 :             } else if constexpr (sizeof...(_Val) == 2) {
; 1920 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);
; 1921 :             } else {
; 1922 :                 static_assert(_Always_false<_Ty>, "Should be unreachable");
; 1923 :             }
; 1924 :             _ASAN_VECTOR_CREATE;
; 1925 :             _Guard._Target = nullptr;

	mov	QWORD PTR _Guard$6[rsp], 0

; 1926 :         }

	lea	rcx, QWORD PTR _Guard$6[rsp]
	call	??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >::~_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >
$LN2@Construct_:

; 1927 : 
; 1928 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 1929 :     }

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S22$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
?dtor$0@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA PROC ; `std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Proxy$[rbp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA ENDP ; `std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S22$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
this$ = 176
_Count$ = 184
?dtor$1@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA PROC ; `std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Guard$6[rbp]
	call	??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >::~_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z@4HA ENDP ; `std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><std::allocator<unsigned char> const &>, COMDAT

; 1375 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR _Val1$[rsp]
	call	??$forward@AEBV?$allocator@E@std@@@std@@YAAEBV?$allocator@E@0@AEBV10@@Z ; std::forward<std::allocator<unsigned char> const &>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><std::allocator<unsigned char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z
_TEXT	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S20$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
tv88 = 152
this$ = 176
_Count$ = 184
<_Val_0>$ = 192
<_Val_1>$ = 200
??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>, COMDAT

; 1902 :     _CONSTEXPR20 void _Construct_n(_CRT_GUARDOVERFLOW const size_type _Count, _Valty&&... _Val) {

$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 1903 :         // Dispatches between the three sized constructions.
; 1904 :         // 1-arg -> value-construction, e.g. vector(5)
; 1905 :         // 2-arg -> fill, e.g. vector(5, "meow")
; 1906 :         // 3-arg -> sized range construction, e.g. vector{"Hello", "Fluffy", "World"}
; 1907 :         auto& _Al       = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1908 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

	mov	rdx, QWORD PTR _Al$[rsp]
	lea	rcx, QWORD PTR $S20$[rsp]
	call	??$?0E@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@E@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned char>
	lea	rax, QWORD PTR $S20$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 1909 :         auto& _My_data  = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1910 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	r8, QWORD PTR _My_data$[rsp]
	mov	rdx, QWORD PTR _Alproxy$[rsp]
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1

; 1911 :         if (_Count != 0) {

	cmp	QWORD PTR _Count$[rsp], 0
	je	$LN2@Construct_

; 1912 :             _Buy_nonzero(_Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_nonzero

; 1913 :             _Tidy_guard<vector> _Guard{this};

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _Guard$6[rsp], rax

; 1914 :             if constexpr (sizeof...(_Val) == 0) {
; 1915 :                 _My_data._Mylast = _Uninitialized_value_construct_n(_My_data._Myfirst, _Count, _Al);
; 1916 :             } else if constexpr (sizeof...(_Val) == 1) {
; 1917 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Valty..., const _Ty&>);
; 1918 :                 _My_data._Mylast = _Uninitialized_fill_n(_My_data._Myfirst, _Count, _Val..., _Al);
; 1919 :             } else if constexpr (sizeof...(_Val) == 2) {
; 1920 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

	mov	rcx, QWORD PTR <_Val_1>$[rsp]
	call	??$forward@AEBQEAE@std@@YAAEBQEAEAEBQEAE@Z ; std::forward<unsigned char * const &>
	mov	QWORD PTR tv88[rsp], rax
	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@AEBQEAE@std@@YAAEBQEAEAEBQEAE@Z ; std::forward<unsigned char * const &>
	mov	r9, QWORD PTR _Al$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	r8, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_copy@PEAEV?$allocator@E@std@@@std@@YAPEAEQEAE0PEAEAEAV?$allocator@E@0@@Z ; std::_Uninitialized_copy<unsigned char *,std::allocator<unsigned char> >
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 1921 :             } else {
; 1922 :                 static_assert(_Always_false<_Ty>, "Should be unreachable");
; 1923 :             }
; 1924 :             _ASAN_VECTOR_CREATE;
; 1925 :             _Guard._Target = nullptr;

	mov	QWORD PTR _Guard$6[rsp], 0

; 1926 :         }

	lea	rcx, QWORD PTR _Guard$6[rsp]
	call	??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >::~_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >
$LN2@Construct_:

; 1927 : 
; 1928 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 1929 :     }

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S20$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
tv88 = 152
this$ = 176
_Count$ = 184
<_Val_0>$ = 192
<_Val_1>$ = 200
?dtor$0@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA PROC ; `std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Proxy$[rbp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA ENDP ; `std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S20$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
tv88 = 152
this$ = 176
_Count$ = 184
<_Val_0>$ = 192
<_Val_1>$ = 200
?dtor$1@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA PROC ; `std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Guard$6[rbp]
	call	??1?$_Tidy_guard@V?$vector@EV?$allocator@E@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >::~_Tidy_guard<std::vector<unsigned char,std::allocator<unsigned char> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z@4HA ENDP ; `std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0V?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@E@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0V?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@E@1@@Z PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><std::allocator<unsigned char> >, COMDAT

; 1375 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR _Val1$[rsp]
	call	??$forward@V?$allocator@E@std@@@std@@YA$$QEAV?$allocator@E@0@AEAV10@@Z ; std::forward<std::allocator<unsigned char> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0V?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@E@1@@Z ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0E@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@E@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0E@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@E@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned char>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0E@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@E@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$assign@PEAE$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAAXPEAE0@Z
_TEXT	SEGMENT
$T1 = 33
tv72 = 40
this$ = 64
_First$ = 72
_Last$ = 80
??$assign@PEAE$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAAXPEAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::assign<unsigned char *,0>, COMDAT

; 1319 :     _CONSTEXPR20 void assign(_Iter _First, _Iter _Last) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1320 :         _Adl_verify_range(_First, _Last);

	lea	rdx, QWORD PTR _Last$[rsp]
	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Adl_verify_range@PEAEPEAE@std@@YAXAEBQEAE0@Z ; std::_Adl_verify_range<unsigned char *,unsigned char *>

; 1321 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEAPEAE@std@@YA?A_TAEAPEAE@Z ; std::_Get_unwrapped<unsigned char * &>
	mov	QWORD PTR tv72[rsp], rax
	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEAPEAE@std@@YA?A_TAEAPEAE@Z ; std::_Get_unwrapped<unsigned char * &>
	movzx	r9d, BYTE PTR $T1[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Assign_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXPEAE0Uforward_iterator_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_range<unsigned char *>

; 1322 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$assign@PEAE$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAAXPEAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::assign<unsigned char *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@E@std@@@std@@YAXAEAV?$allocator@E@0@AEBV10@@Z
_TEXT	SEGMENT
_Left$ = 16
_Right$ = 24
??$_Pocca@V?$allocator@E@std@@@std@@YAXAEAV?$allocator@E@0@AEBV10@@Z PROC ; std::_Pocca<std::allocator<unsigned char> >, COMDAT

; 916  : _CONSTEXPR20 void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 917  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 918  :         _Left = _Right;
; 919  :     }
; 920  : }

	pop	rdi
	ret	0
??$_Pocca@V?$allocator@E@std@@@std@@YAXAEAV?$allocator@E@0@AEBV10@@Z ENDP ; std::_Pocca<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@$$CBV?$vector@EV?$allocator@E@std@@@std@@@std@@YAPEBV?$vector@EV?$allocator@E@std@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@$$CBV?$vector@EV?$allocator@E@std@@@std@@@std@@YAPEBV?$vector@EV?$allocator@E@std@@@0@AEBV10@@Z PROC ; std::addressof<std::vector<unsigned char,std::allocator<unsigned char> > const >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@$$CBV?$vector@EV?$allocator@E@std@@@std@@@std@@YAPEBV?$vector@EV?$allocator@E@std@@@0@AEBV10@@Z ENDP ; std::addressof<std::vector<unsigned char,std::allocator<unsigned char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@Vimage2D@gli@@@std@@QEAA@XZ ; std::allocator<gli::image2D>::allocator<gli::image2D>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<gli::image2D> >::_Vector_val<std::_Simple_types<gli::image2D> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0Vimage2D@gli@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@Vimage2D@gli@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0Vimage2D@gli@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@Vimage2D@gli@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><gli::image2D>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0Vimage2D@gli@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@Vimage2D@gli@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><gli::image2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newlast$1 = 72
_Oldcapacity$2 = 80
_Oldlast$3 = 88
this$ = 112
_Newsize$ = 120
_Val$ = 128
??$_Resize@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Resize<std::_Value_init_tag>, COMDAT

; 1397 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 1398 :         // trim or append elements, provide strong guarantee
; 1399 :         auto& _Al           = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1400 :         auto& _My_data      = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1401 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1402 :         pointer& _Mylast    = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1403 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	cdq
	mov	ecx, 48					; 00000030H
	idiv	rcx
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1404 :         if (_Newsize < _Oldsize) { // trim

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jae	SHORT $LN2@Resize

; 1405 :             const pointer _Newlast = _Myfirst + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 48	; 00000030H
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR _Newlast$1[rsp], rax

; 1406 :             _Orphan_range(_Newlast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Newlast$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range

; 1407 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	call	??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z ; std::_Destroy_range<std::allocator<gli::image2D> >

; 1408 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1409 :             _Mylast = _Newlast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	mov	QWORD PTR [rax], rcx

; 1410 :             return;

	jmp	$LN1@Resize
$LN2@Resize:

; 1411 :         }
; 1412 : 
; 1413 :         if (_Newsize > _Oldsize) { // append

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	$LN3@Resize

; 1414 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	cdq
	mov	ecx, 48					; 00000030H
	idiv	rcx
	mov	QWORD PTR _Oldcapacity$2[rsp], rax

; 1415 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	rax, QWORD PTR _Oldcapacity$2[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN4@Resize

; 1416 :                 _Resize_reallocate(_Newsize, _Val);

	mov	r8, QWORD PTR _Val$[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Resize_reallocate<std::_Value_init_tag>

; 1417 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1418 :             }
; 1419 : 
; 1420 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1421 :             const pointer _Oldlast = _Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Oldlast$3[rsp], rax

; 1422 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1423 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1424 :             } else {
; 1425 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1426 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Oldlast$3[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@Vimage2D@gli@@@std@@@std@@YAPEAVimage2D@gli@@PEAV12@_KAEAV?$allocator@Vimage2D@gli@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<gli::image2D> >
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1427 :             }
; 1428 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1429 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	r8, QWORD PTR _Oldlast$3[rsp]
	mov	rdx, QWORD PTR _Oldlast$3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range
$LN3@Resize:
$LN1@Resize:

; 1430 :         }
; 1431 : 
; 1432 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1433 :     }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Resize@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 609  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 610  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@D@std@@QEAA@XZ		; std::allocator<char>::allocator<char>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Convert_size@_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 16
??$_Convert_size@_K@std@@YA_K_K@Z PROC			; std::_Convert_size<unsigned __int64>, COMDAT

; 960  : _NODISCARD constexpr _Size_type _Convert_size(const size_t _Len) noexcept(is_same_v<_Size_type, size_t>) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 961  :     // convert size_t to _Size_type, avoiding truncation
; 962  :     if constexpr (!is_same_v<_Size_type, size_t>) {
; 963  :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 964  :             _Xlength_error("size_t too long for _Size_type");
; 965  :         }
; 966  :     }
; 967  : 
; 968  :     return static_cast<_Size_type>(_Len);

	mov	rax, QWORD PTR _Len$[rsp]

; 969  : }

	pop	rdi
	ret	0
??$_Convert_size@_K@std@@YA_K_K@Z ENDP			; std::_Convert_size<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 32
$T1 = 40
this$ = 64
_Al$ = 72
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	QWORD PTR _New_proxy$[rsp], rax

; 1058 :         _Construct_in_place(*_New_proxy, this);

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1059 :         _Myproxy            = _New_proxy;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	mov	QWORD PTR [rax], rcx

; 1060 :         _New_proxy->_Mycont = this;

	mov	rax, QWORD PTR _New_proxy$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], rcx

; 1061 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1334 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1335 :         if (_Ptr) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Container_

; 1336 :             _Delete_plain_internal(_Al, _Ptr);

	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
$LN2@Container_:

; 1337 :         }
; 1338 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Al_$ = 72
_Mycont$ = 80
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1320 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 1321 :         // create a new _Container_proxy pointing at _Mycont
; 1322 :         _Ptr = _Unfancy(_Al_.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al_$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 1323 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

	mov	rcx, QWORD PTR _Mycont$[rsp]
	call	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1324 :         _Mycont._Myproxy = _Ptr;

	mov	rax, QWORD PTR _Mycont$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 1325 :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 984  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 985  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 986  :     using _Ty = typename _Alloc::value_type;
; 987  :     _Ptr->~_Ty();
; 988  :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 989  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 67   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xlocale
;	COMDAT ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
_TEXT	SEGMENT
_Lock$6 = 36
_Psave$7 = 72
_Id$8 = 88
_Pf$9 = 96
_Pfmod$10 = 104
_Psave_guard$11 = 120
$T12 = 136
_Loc$ = 160
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,_Mbstatet> >, COMDAT

; 422  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

$LN11:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 423  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

	xor	edx, edx
	lea	rcx, QWORD PTR _Lock$6[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 424  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

	mov	rax, QWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
	mov	QWORD PTR _Psave$7[rsp], rax

; 425  : 
; 426  :     const size_t _Id         = _Facet::id;

	mov	rcx, QWORD PTR __imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A
	call	QWORD PTR __imp_??Bid@locale@std@@QEAA_KXZ
	mov	QWORD PTR _Id$8[rsp], rax

; 427  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);

	mov	rdx, QWORD PTR _Id$8[rsp]
	mov	rcx, QWORD PTR _Loc$[rsp]
	call	?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ; std::locale::_Getfacet
	mov	QWORD PTR _Pf$9[rsp], rax

; 428  : 
; 429  :     if (!_Pf) {

	cmp	QWORD PTR _Pf$9[rsp], 0
	jne	$LN2@use_facet

; 430  :         if (_Psave) {

	cmp	QWORD PTR _Psave$7[rsp], 0
	je	SHORT $LN3@use_facet

; 431  :             _Pf = _Psave; // lazy facet already allocated

	mov	rax, QWORD PTR _Psave$7[rsp]
	mov	QWORD PTR _Pf$9[rsp], rax
	jmp	$LN2@use_facet
$LN3@use_facet:

; 432  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

	mov	rdx, QWORD PTR _Loc$[rsp]
	lea	rcx, QWORD PTR _Psave$7[rsp]
	call	QWORD PTR __imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
	cmp	rax, -1
	jne	SHORT $LN5@use_facet

; 433  : #if _HAS_EXCEPTIONS
; 434  :             _Throw_bad_cast(); // lazy disallowed

	call	?_Throw_bad_cast@std@@YAXXZ		; std::_Throw_bad_cast
	npad	1

; 435  : #else // _HAS_EXCEPTIONS
; 436  :             _CSTD abort(); // lazy disallowed
; 437  : #endif // _HAS_EXCEPTIONS
; 438  :         } else { // queue up lazy facet for destruction

	jmp	SHORT $LN2@use_facet
$LN5@use_facet:

; 439  :             auto _Pfmod = const_cast<locale::facet*>(_Psave);

	mov	rax, QWORD PTR _Psave$7[rsp]
	mov	QWORD PTR _Pfmod$10[rsp], rax

; 440  :             unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base*>(_Pfmod));

	mov	rdx, QWORD PTR _Pfmod$10[rsp]
	lea	rcx, QWORD PTR _Psave_guard$11[rsp]
	call	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
	npad	1

; 441  : 
; 442  : #if defined(_M_CEE)
; 443  :             _Facet_Register_m(_Pfmod);
; 444  : #else // defined(_M_CEE)
; 445  :             _Facet_Register(_Pfmod);

	mov	rcx, QWORD PTR _Pfmod$10[rsp]
	call	?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z ; std::_Facet_Register

; 446  : #endif // defined(_M_CEE)
; 447  : 
; 448  :             _Pfmod->_Incref();

	mov	rax, QWORD PTR _Pfmod$10[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pfmod$10[rsp]
	call	QWORD PTR [rax+8]

; 449  :             _Facetptr<_Facet>::_Psave = _Psave;

	mov	rax, QWORD PTR _Psave$7[rsp]
	mov	QWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB, rax ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave

; 450  :             _Pf                       = _Psave;

	mov	rax, QWORD PTR _Psave$7[rsp]
	mov	QWORD PTR _Pf$9[rsp], rax

; 451  : 
; 452  :             (void) _Psave_guard.release();

	lea	rcx, QWORD PTR _Psave_guard$11[rsp]
	call	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
	npad	1

; 453  :         }

	lea	rcx, QWORD PTR _Psave_guard$11[rsp]
	call	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 454  :     }
; 455  : 
; 456  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

	mov	rax, QWORD PTR _Pf$9[rsp]
	mov	QWORD PTR $T12[rsp], rax
	lea	rcx, QWORD PTR _Lock$6[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rax, QWORD PTR $T12[rsp]

; 457  :     _END_LOCK()
; 458  : } // end of use_facet body

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
$LN10@use_facet:
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$6 = 36
_Psave$7 = 72
_Id$8 = 88
_Pf$9 = 96
_Pfmod$10 = 104
_Psave_guard$11 = 120
$T12 = 136
_Loc$ = 160
?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$6[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$6 = 36
_Psave$7 = 72
_Id$8 = 88
_Pf$9 = 96
_Pfmod$10 = 104
_Psave_guard$11 = 120
$T12 = 136
_Loc$ = 160
?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Psave_guard$11[rbp]
	call	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::addressof<std::basic_filebuf<char,std::char_traits<char> > >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::basic_filebuf<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_noise.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 176  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 177  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 178  : 
; 179  : 	Error += test_simplex();

	call	?test_simplex@@YAHXZ			; test_simplex
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 180  : 	Error += test_perlin();

	call	?test_perlin@@YAHXZ			; test_perlin
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 181  : 	Error += test_perlin_pedioric();

	call	?test_perlin_pedioric@@YAHXZ		; test_perlin_pedioric
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 182  : 
; 183  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 184  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\noise.inl
;	COMDAT ??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Pi0$ = 72
Pi1$ = 120
Pf0$ = 168
Pf1$ = 216
ix$ = 264
iy$ = 312
iz0$ = 360
iz1$ = 408
iw0$ = 456
iw1$ = 504
ixy$ = 552
ixy0$ = 600
ixy1$ = 648
ixy00$ = 696
ixy01$ = 744
ixy10$ = 792
ixy11$ = 840
gx00$ = 888
gy00$ = 936
gz00$ = 984
gw00$ = 1032
sw00$ = 1080
gx01$ = 1128
gy01$ = 1176
gz01$ = 1224
gw01$ = 1272
sw01$ = 1320
gx10$ = 1368
gy10$ = 1416
gz10$ = 1464
gw10$ = 1512
sw10$ = 1560
gx11$ = 1608
gy11$ = 1656
gz11$ = 1704
gw11$ = 1752
sw11$ = 1800
g0000$ = 1848
g1000$ = 1896
g0100$ = 1944
g1100$ = 1992
g0010$ = 2040
g1010$ = 2088
g0110$ = 2136
g1110$ = 2184
g0001$ = 2232
g1001$ = 2280
g0101$ = 2328
g1101$ = 2376
g0011$ = 2424
g1011$ = 2472
g0111$ = 2520
g1111$ = 2568
norm00$ = 2616
norm01$ = 2664
norm10$ = 2712
norm11$ = 2760
n0000$ = 2788
n1000$ = 2792
n0100$ = 2796
n1100$ = 2800
n0010$ = 2804
n1010$ = 2808
n0110$ = 2812
n1110$ = 2816
n0001$ = 2820
n1001$ = 2824
n0101$ = 2828
n1101$ = 2832
n0011$ = 2836
n1011$ = 2840
n0111$ = 2844
n1111$ = 2848
fade_xyzw$ = 2872
n_0w$ = 2920
n_1w$ = 2968
n_zw$ = 3016
n_yzw$ = 3064
n_xyzw$ = 3076
$T65 = 3080
$T66 = 3096
$T67 = 3112
$T68 = 3128
$T69 = 3144
$T70 = 3160
$T71 = 3176
$T72 = 3192
$T73 = 3208
$T74 = 3224
$T75 = 3240
$T76 = 3256
$T77 = 3272
$T78 = 3288
$T79 = 3304
$T80 = 3320
$T81 = 3336
$T82 = 3352
$T83 = 3368
$T84 = 3384
$T85 = 3400
$T86 = 3416
$T87 = 3432
$T88 = 3448
$T89 = 3464
$T90 = 3480
$T91 = 3496
$T92 = 3512
$T93 = 3528
$T94 = 3544
$T95 = 3560
$T96 = 3576
$T97 = 3592
$T98 = 3608
$T99 = 3624
$T100 = 3640
$T101 = 3656
$T102 = 3672
$T103 = 3688
$T104 = 3704
$T105 = 3720
$T106 = 3736
$T107 = 3752
$T108 = 3768
$T109 = 3784
$T110 = 3800
$T111 = 3816
$T112 = 3832
$T113 = 3848
$T114 = 3864
$T115 = 3880
$T116 = 3896
$T117 = 3912
$T118 = 3928
$T119 = 3944
$T120 = 3960
$T121 = 3976
$T122 = 3992
$T123 = 4008
$T124 = 4024
$T125 = 4040
$T126 = 4056
$T127 = 4072
$T128 = 4088
$T129 = 4104
$T130 = 4120
$T131 = 4136
$T132 = 4152
$T133 = 4168
$T134 = 4184
$T135 = 4200
$T136 = 4216
$T137 = 4232
$T138 = 4248
$T139 = 4264
$T140 = 4280
$T141 = 4296
$T142 = 4312
$T143 = 4328
$T144 = 4344
$T145 = 4360
$T146 = 4376
$T147 = 4392
$T148 = 4408
$T149 = 4424
$T150 = 4440
$T151 = 4456
$T152 = 4472
$T153 = 4488
$T154 = 4504
$T155 = 4520
$T156 = 4536
$T157 = 4552
$T158 = 4568
$T159 = 4584
$T160 = 4600
$T161 = 4616
$T162 = 4632
$T163 = 4648
$T164 = 4664
$T165 = 4680
$T166 = 4696
$T167 = 4712
$T168 = 4728
$T169 = 4744
$T170 = 4760
$T171 = 4776
$T172 = 4792
$T173 = 4808
$T174 = 4824
$T175 = 4840
$T176 = 4856
$T177 = 4872
$T178 = 4888
$T179 = 4904
$T180 = 4920
$T181 = 4936
$T182 = 4944
tv249 = 4952
tv254 = 4960
tv259 = 4968
tv377 = 4976
tv382 = 4984
tv387 = 4992
tv505 = 5000
tv510 = 5008
tv515 = 5016
tv601 = 5024
tv606 = 5032
tv643 = 5040
tv900 = 5048
tv904 = 5052
tv908 = 5056
tv928 = 5060
tv932 = 5064
tv936 = 5068
tv956 = 5072
tv992 = 5076
tv996 = 5080
tv1016 = 5084
tv1020 = 5088
tv1024 = 5092
tv1210 = 5096
tv1258 = 5104
tv1278 = 5112
Position$ = 5152
rep$ = 5160
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z PROC	; glm::perlin<float,0>, COMDAT

; 460  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 5128				; 00001408H
	call	__chkstk
	sub	rsp, rax
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 1266				; 000004f2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+5152]

; 461  : 		tvec4<T, P> Pi0 = mod(floor(Position), rep); // Integer part modulo rep

	mov	rdx, QWORD PTR Position$[rsp]
	lea	rcx, QWORD PTR $T65[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	mov	r8, QWORD PTR rep$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Pi0$[rsp]
	call	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>

; 462  : 		tvec4<T, P> Pi1 = mod(Pi0 + T(1), rep); // Integer part + 1 mod rep

	movss	xmm2, DWORD PTR __real@3f800000
	lea	rdx, QWORD PTR Pi0$[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	r8, QWORD PTR rep$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Pi1$[rsp]
	call	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>

; 463  : 		tvec4<T, P> Pf0 = fract(Position); // Fractional part for interpolation

	mov	rdx, QWORD PTR Position$[rsp]
	lea	rcx, QWORD PTR Pf0$[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>

; 464  : 		tvec4<T, P> Pf1 = Pf0 - T(1); // Fractional part - 1.0

	movss	xmm2, DWORD PTR __real@3f800000
	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR Pf1$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 465  : 		tvec4<T, P> ix = tvec4<T, P>(Pi0.x, Pi1.x, Pi0.x, Pi1.x);

	movss	xmm0, DWORD PTR Pi1$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pi0$[rsp]
	movss	xmm2, DWORD PTR Pi1$[rsp]
	movss	xmm1, DWORD PTR Pi0$[rsp]
	lea	rcx, QWORD PTR ix$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 466  : 		tvec4<T, P> iy = tvec4<T, P>(Pi0.y, Pi0.y, Pi1.y, Pi1.y);

	movss	xmm0, DWORD PTR Pi1$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pi1$[rsp+4]
	movss	xmm2, DWORD PTR Pi0$[rsp+4]
	movss	xmm1, DWORD PTR Pi0$[rsp+4]
	lea	rcx, QWORD PTR iy$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 467  : 		tvec4<T, P> iz0(Pi0.z);

	movss	xmm1, DWORD PTR Pi0$[rsp+8]
	lea	rcx, QWORD PTR iz0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 468  : 		tvec4<T, P> iz1(Pi1.z);

	movss	xmm1, DWORD PTR Pi1$[rsp+8]
	lea	rcx, QWORD PTR iz1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 469  : 		tvec4<T, P> iw0(Pi0.w);

	movss	xmm1, DWORD PTR Pi0$[rsp+12]
	lea	rcx, QWORD PTR iw0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 470  : 		tvec4<T, P> iw1(Pi1.w);

	movss	xmm1, DWORD PTR Pi1$[rsp+12]
	lea	rcx, QWORD PTR iw1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 471  : 
; 472  : 		tvec4<T, P> ixy = detail::permute(detail::permute(ix) + iy);

	lea	rdx, QWORD PTR ix$[rsp]
	lea	rcx, QWORD PTR $T67[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	lea	r8, QWORD PTR iy$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T68[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 473  : 		tvec4<T, P> ixy0 = detail::permute(ixy + iz0);

	lea	r8, QWORD PTR iz0$[rsp]
	lea	rdx, QWORD PTR ixy$[rsp]
	lea	rcx, QWORD PTR $T69[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy0$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 474  : 		tvec4<T, P> ixy1 = detail::permute(ixy + iz1);

	lea	r8, QWORD PTR iz1$[rsp]
	lea	rdx, QWORD PTR ixy$[rsp]
	lea	rcx, QWORD PTR $T70[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy1$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 475  : 		tvec4<T, P> ixy00 = detail::permute(ixy0 + iw0);

	lea	r8, QWORD PTR iw0$[rsp]
	lea	rdx, QWORD PTR ixy0$[rsp]
	lea	rcx, QWORD PTR $T71[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy00$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 476  : 		tvec4<T, P> ixy01 = detail::permute(ixy0 + iw1);

	lea	r8, QWORD PTR iw1$[rsp]
	lea	rdx, QWORD PTR ixy0$[rsp]
	lea	rcx, QWORD PTR $T72[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy01$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 477  : 		tvec4<T, P> ixy10 = detail::permute(ixy1 + iw0);

	lea	r8, QWORD PTR iw0$[rsp]
	lea	rdx, QWORD PTR ixy1$[rsp]
	lea	rcx, QWORD PTR $T73[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy10$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 478  : 		tvec4<T, P> ixy11 = detail::permute(ixy1 + iw1);

	lea	r8, QWORD PTR iw1$[rsp]
	lea	rdx, QWORD PTR ixy1$[rsp]
	lea	rcx, QWORD PTR $T74[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy11$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 479  : 
; 480  : 		tvec4<T, P> gx00 = ixy00 / T(7);

	movss	xmm2, DWORD PTR __real@40e00000
	lea	rdx, QWORD PTR ixy00$[rsp]
	lea	rcx, QWORD PTR gx00$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 481  : 		tvec4<T, P> gy00 = floor(gx00) / T(7);

	lea	rdx, QWORD PTR gx00$[rsp]
	lea	rcx, QWORD PTR $T75[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40e00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy00$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 482  : 		tvec4<T, P> gz00 = floor(gy00) / T(6);

	lea	rdx, QWORD PTR gy00$[rsp]
	lea	rcx, QWORD PTR $T76[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40c00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gz00$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 483  : 		gx00 = fract(gx00) - T(0.5);

	lea	rdx, QWORD PTR gx00$[rsp]
	lea	rcx, QWORD PTR $T77[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T78[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gx00$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 484  : 		gy00 = fract(gy00) - T(0.5);

	lea	rdx, QWORD PTR gy00$[rsp]
	lea	rcx, QWORD PTR $T79[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T80[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gy00$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 485  : 		gz00 = fract(gz00) - T(0.5);

	lea	rdx, QWORD PTR gz00$[rsp]
	lea	rcx, QWORD PTR $T81[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T82[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gz00$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 486  : 		tvec4<T, P> gw00 = tvec4<T, P>(0.75) - abs(gx00) - abs(gy00) - abs(gz00);

	lea	rdx, QWORD PTR gz00$[rsp]
	lea	rcx, QWORD PTR $T83[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv249[rsp], rax
	lea	rdx, QWORD PTR gy00$[rsp]
	lea	rcx, QWORD PTR $T84[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv254[rsp], rax
	lea	rdx, QWORD PTR gx00$[rsp]
	lea	rcx, QWORD PTR $T85[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv259[rsp], rax
	movss	xmm1, DWORD PTR __real@3f400000
	lea	rcx, QWORD PTR $T86[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv259[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T87[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv254[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T88[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv249[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gw00$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 487  : 		tvec4<T, P> sw00 = step(gw00, tvec4<T, P>(0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T89[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gw00$[rsp]
	lea	rcx, QWORD PTR sw00$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 488  : 		gx00 -= sw00 * (step(T(0), gx00) - T(0.5));

	lea	r8, QWORD PTR gx00$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T90[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T91[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw00$[rsp]
	lea	rcx, QWORD PTR $T92[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx00$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 489  : 		gy00 -= sw00 * (step(T(0), gy00) - T(0.5));

	lea	r8, QWORD PTR gy00$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T93[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T94[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw00$[rsp]
	lea	rcx, QWORD PTR $T95[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy00$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 490  : 
; 491  : 		tvec4<T, P> gx01 = ixy01 / T(7);

	movss	xmm2, DWORD PTR __real@40e00000
	lea	rdx, QWORD PTR ixy01$[rsp]
	lea	rcx, QWORD PTR gx01$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 492  : 		tvec4<T, P> gy01 = floor(gx01) / T(7);

	lea	rdx, QWORD PTR gx01$[rsp]
	lea	rcx, QWORD PTR $T96[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40e00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy01$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 493  : 		tvec4<T, P> gz01 = floor(gy01) / T(6);

	lea	rdx, QWORD PTR gy01$[rsp]
	lea	rcx, QWORD PTR $T97[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40c00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gz01$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 494  : 		gx01 = fract(gx01) - T(0.5);

	lea	rdx, QWORD PTR gx01$[rsp]
	lea	rcx, QWORD PTR $T98[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T99[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gx01$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 495  : 		gy01 = fract(gy01) - T(0.5);

	lea	rdx, QWORD PTR gy01$[rsp]
	lea	rcx, QWORD PTR $T100[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T101[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gy01$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 496  : 		gz01 = fract(gz01) - T(0.5);

	lea	rdx, QWORD PTR gz01$[rsp]
	lea	rcx, QWORD PTR $T102[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T103[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gz01$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 497  : 		tvec4<T, P> gw01 = tvec4<T, P>(0.75) - abs(gx01) - abs(gy01) - abs(gz01);

	lea	rdx, QWORD PTR gz01$[rsp]
	lea	rcx, QWORD PTR $T104[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv377[rsp], rax
	lea	rdx, QWORD PTR gy01$[rsp]
	lea	rcx, QWORD PTR $T105[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv382[rsp], rax
	lea	rdx, QWORD PTR gx01$[rsp]
	lea	rcx, QWORD PTR $T106[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv387[rsp], rax
	movss	xmm1, DWORD PTR __real@3f400000
	lea	rcx, QWORD PTR $T107[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv387[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T108[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv382[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T109[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv377[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gw01$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 498  : 		tvec4<T, P> sw01 = step(gw01, tvec4<T, P>(0.0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T110[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gw01$[rsp]
	lea	rcx, QWORD PTR sw01$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 499  : 		gx01 -= sw01 * (step(T(0), gx01) - T(0.5));

	lea	r8, QWORD PTR gx01$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T111[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T112[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw01$[rsp]
	lea	rcx, QWORD PTR $T113[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx01$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 500  : 		gy01 -= sw01 * (step(T(0), gy01) - T(0.5));

	lea	r8, QWORD PTR gy01$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T114[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T115[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw01$[rsp]
	lea	rcx, QWORD PTR $T116[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy01$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 501  : 
; 502  : 		tvec4<T, P> gx10 = ixy10 / T(7);

	movss	xmm2, DWORD PTR __real@40e00000
	lea	rdx, QWORD PTR ixy10$[rsp]
	lea	rcx, QWORD PTR gx10$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 503  : 		tvec4<T, P> gy10 = floor(gx10) / T(7);

	lea	rdx, QWORD PTR gx10$[rsp]
	lea	rcx, QWORD PTR $T117[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40e00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy10$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 504  : 		tvec4<T, P> gz10 = floor(gy10) / T(6);

	lea	rdx, QWORD PTR gy10$[rsp]
	lea	rcx, QWORD PTR $T118[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40c00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gz10$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 505  : 		gx10 = fract(gx10) - T(0.5);

	lea	rdx, QWORD PTR gx10$[rsp]
	lea	rcx, QWORD PTR $T119[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T120[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gx10$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 506  : 		gy10 = fract(gy10) - T(0.5);

	lea	rdx, QWORD PTR gy10$[rsp]
	lea	rcx, QWORD PTR $T121[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T122[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gy10$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 507  : 		gz10 = fract(gz10) - T(0.5);

	lea	rdx, QWORD PTR gz10$[rsp]
	lea	rcx, QWORD PTR $T123[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T124[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gz10$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 508  : 		tvec4<T, P> gw10 = tvec4<T, P>(0.75) - abs(gx10) - abs(gy10) - abs(gz10);

	lea	rdx, QWORD PTR gz10$[rsp]
	lea	rcx, QWORD PTR $T125[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv505[rsp], rax
	lea	rdx, QWORD PTR gy10$[rsp]
	lea	rcx, QWORD PTR $T126[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv510[rsp], rax
	lea	rdx, QWORD PTR gx10$[rsp]
	lea	rcx, QWORD PTR $T127[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv515[rsp], rax
	movss	xmm1, DWORD PTR __real@3f400000
	lea	rcx, QWORD PTR $T128[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv515[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T129[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv510[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T130[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv505[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gw10$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 509  : 		tvec4<T, P> sw10 = step(gw10, tvec4<T, P>(0.0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T131[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gw10$[rsp]
	lea	rcx, QWORD PTR sw10$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 510  : 		gx10 -= sw10 * (step(T(0), gx10) - T(0.5));

	lea	r8, QWORD PTR gx10$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T132[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T133[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw10$[rsp]
	lea	rcx, QWORD PTR $T134[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx10$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 511  : 		gy10 -= sw10 * (step(T(0), gy10) - T(0.5));

	lea	r8, QWORD PTR gy10$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T135[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T136[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw10$[rsp]
	lea	rcx, QWORD PTR $T137[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy10$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 512  : 
; 513  : 		tvec4<T, P> gx11 = ixy11 / T(7);

	movss	xmm2, DWORD PTR __real@40e00000
	lea	rdx, QWORD PTR ixy11$[rsp]
	lea	rcx, QWORD PTR gx11$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 514  : 		tvec4<T, P> gy11 = floor(gx11) / T(7);

	lea	rdx, QWORD PTR gx11$[rsp]
	lea	rcx, QWORD PTR $T138[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40e00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy11$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 515  : 		tvec4<T, P> gz11 = floor(gy11) / T(6);

	lea	rdx, QWORD PTR gy11$[rsp]
	lea	rcx, QWORD PTR $T139[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40c00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gz11$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 516  : 		gx11 = fract(gx11) - T(0.5);

	lea	rdx, QWORD PTR gx11$[rsp]
	lea	rcx, QWORD PTR $T140[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T141[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gx11$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 517  : 		gy11 = fract(gy11) - T(0.5);

	lea	rdx, QWORD PTR gy11$[rsp]
	lea	rcx, QWORD PTR $T142[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T143[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gy11$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 518  : 		gz11 = fract(gz11) - T(0.5);

	lea	rdx, QWORD PTR gz11$[rsp]
	lea	rcx, QWORD PTR $T144[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T145[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gz11$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 519  : 		tvec4<T, P> gw11 = tvec4<T, P>(0.75) - abs(gx11) - abs(gy11) - abs(gz11);

	lea	rdx, QWORD PTR gz11$[rsp]
	lea	rcx, QWORD PTR $T146[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv601[rsp], rax
	lea	rdx, QWORD PTR gy11$[rsp]
	lea	rcx, QWORD PTR $T147[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv606[rsp], rax
	lea	rdx, QWORD PTR gx11$[rsp]
	lea	rcx, QWORD PTR $T148[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv643[rsp], rax
	movss	xmm1, DWORD PTR __real@3f400000
	lea	rcx, QWORD PTR $T149[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv643[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T150[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv606[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T151[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv601[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gw11$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 520  : 		tvec4<T, P> sw11 = step(gw11, tvec4<T, P>(T(0)));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T152[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gw11$[rsp]
	lea	rcx, QWORD PTR sw11$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 521  : 		gx11 -= sw11 * (step(T(0), gx11) - T(0.5));

	lea	r8, QWORD PTR gx11$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T153[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T154[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw11$[rsp]
	lea	rcx, QWORD PTR $T155[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx11$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 522  : 		gy11 -= sw11 * (step(T(0), gy11) - T(0.5));

	lea	r8, QWORD PTR gy11$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T156[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T157[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw11$[rsp]
	lea	rcx, QWORD PTR $T158[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy11$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 523  : 
; 524  : 		tvec4<T, P> g0000(gx00.x, gy00.x, gz00.x, gw00.x);

	movss	xmm0, DWORD PTR gw00$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz00$[rsp]
	movss	xmm2, DWORD PTR gy00$[rsp]
	movss	xmm1, DWORD PTR gx00$[rsp]
	lea	rcx, QWORD PTR g0000$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 525  : 		tvec4<T, P> g1000(gx00.y, gy00.y, gz00.y, gw00.y);

	movss	xmm0, DWORD PTR gw00$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz00$[rsp+4]
	movss	xmm2, DWORD PTR gy00$[rsp+4]
	movss	xmm1, DWORD PTR gx00$[rsp+4]
	lea	rcx, QWORD PTR g1000$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 526  : 		tvec4<T, P> g0100(gx00.z, gy00.z, gz00.z, gw00.z);

	movss	xmm0, DWORD PTR gw00$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz00$[rsp+8]
	movss	xmm2, DWORD PTR gy00$[rsp+8]
	movss	xmm1, DWORD PTR gx00$[rsp+8]
	lea	rcx, QWORD PTR g0100$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 527  : 		tvec4<T, P> g1100(gx00.w, gy00.w, gz00.w, gw00.w);

	movss	xmm0, DWORD PTR gw00$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz00$[rsp+12]
	movss	xmm2, DWORD PTR gy00$[rsp+12]
	movss	xmm1, DWORD PTR gx00$[rsp+12]
	lea	rcx, QWORD PTR g1100$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 528  : 		tvec4<T, P> g0010(gx10.x, gy10.x, gz10.x, gw10.x);

	movss	xmm0, DWORD PTR gw10$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz10$[rsp]
	movss	xmm2, DWORD PTR gy10$[rsp]
	movss	xmm1, DWORD PTR gx10$[rsp]
	lea	rcx, QWORD PTR g0010$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 529  : 		tvec4<T, P> g1010(gx10.y, gy10.y, gz10.y, gw10.y);

	movss	xmm0, DWORD PTR gw10$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz10$[rsp+4]
	movss	xmm2, DWORD PTR gy10$[rsp+4]
	movss	xmm1, DWORD PTR gx10$[rsp+4]
	lea	rcx, QWORD PTR g1010$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 530  : 		tvec4<T, P> g0110(gx10.z, gy10.z, gz10.z, gw10.z);

	movss	xmm0, DWORD PTR gw10$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz10$[rsp+8]
	movss	xmm2, DWORD PTR gy10$[rsp+8]
	movss	xmm1, DWORD PTR gx10$[rsp+8]
	lea	rcx, QWORD PTR g0110$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 531  : 		tvec4<T, P> g1110(gx10.w, gy10.w, gz10.w, gw10.w);

	movss	xmm0, DWORD PTR gw10$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz10$[rsp+12]
	movss	xmm2, DWORD PTR gy10$[rsp+12]
	movss	xmm1, DWORD PTR gx10$[rsp+12]
	lea	rcx, QWORD PTR g1110$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 532  : 		tvec4<T, P> g0001(gx01.x, gy01.x, gz01.x, gw01.x);

	movss	xmm0, DWORD PTR gw01$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz01$[rsp]
	movss	xmm2, DWORD PTR gy01$[rsp]
	movss	xmm1, DWORD PTR gx01$[rsp]
	lea	rcx, QWORD PTR g0001$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 533  : 		tvec4<T, P> g1001(gx01.y, gy01.y, gz01.y, gw01.y);

	movss	xmm0, DWORD PTR gw01$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz01$[rsp+4]
	movss	xmm2, DWORD PTR gy01$[rsp+4]
	movss	xmm1, DWORD PTR gx01$[rsp+4]
	lea	rcx, QWORD PTR g1001$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 534  : 		tvec4<T, P> g0101(gx01.z, gy01.z, gz01.z, gw01.z);

	movss	xmm0, DWORD PTR gw01$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz01$[rsp+8]
	movss	xmm2, DWORD PTR gy01$[rsp+8]
	movss	xmm1, DWORD PTR gx01$[rsp+8]
	lea	rcx, QWORD PTR g0101$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 535  : 		tvec4<T, P> g1101(gx01.w, gy01.w, gz01.w, gw01.w);

	movss	xmm0, DWORD PTR gw01$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz01$[rsp+12]
	movss	xmm2, DWORD PTR gy01$[rsp+12]
	movss	xmm1, DWORD PTR gx01$[rsp+12]
	lea	rcx, QWORD PTR g1101$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 536  : 		tvec4<T, P> g0011(gx11.x, gy11.x, gz11.x, gw11.x);

	movss	xmm0, DWORD PTR gw11$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz11$[rsp]
	movss	xmm2, DWORD PTR gy11$[rsp]
	movss	xmm1, DWORD PTR gx11$[rsp]
	lea	rcx, QWORD PTR g0011$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 537  : 		tvec4<T, P> g1011(gx11.y, gy11.y, gz11.y, gw11.y);

	movss	xmm0, DWORD PTR gw11$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz11$[rsp+4]
	movss	xmm2, DWORD PTR gy11$[rsp+4]
	movss	xmm1, DWORD PTR gx11$[rsp+4]
	lea	rcx, QWORD PTR g1011$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 538  : 		tvec4<T, P> g0111(gx11.z, gy11.z, gz11.z, gw11.z);

	movss	xmm0, DWORD PTR gw11$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz11$[rsp+8]
	movss	xmm2, DWORD PTR gy11$[rsp+8]
	movss	xmm1, DWORD PTR gx11$[rsp+8]
	lea	rcx, QWORD PTR g0111$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 539  : 		tvec4<T, P> g1111(gx11.w, gy11.w, gz11.w, gw11.w);

	movss	xmm0, DWORD PTR gw11$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz11$[rsp+12]
	movss	xmm2, DWORD PTR gy11$[rsp+12]
	movss	xmm1, DWORD PTR gx11$[rsp+12]
	lea	rcx, QWORD PTR g1111$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 540  : 
; 541  : 		tvec4<T, P> norm00 = detail::taylorInvSqrt(tvec4<T, P>(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));

	lea	rdx, QWORD PTR g1100$[rsp]
	lea	rcx, QWORD PTR g1100$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv900[rsp], xmm0
	lea	rdx, QWORD PTR g1000$[rsp]
	lea	rcx, QWORD PTR g1000$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv904[rsp], xmm0
	lea	rdx, QWORD PTR g0100$[rsp]
	lea	rcx, QWORD PTR g0100$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv908[rsp], xmm0
	lea	rdx, QWORD PTR g0000$[rsp]
	lea	rcx, QWORD PTR g0000$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv900[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv904[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv908[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T159[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm00$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 542  : 		g0000 *= norm00.x;

	movss	xmm1, DWORD PTR norm00$[rsp]
	lea	rcx, QWORD PTR g0000$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 543  : 		g0100 *= norm00.y;

	movss	xmm1, DWORD PTR norm00$[rsp+4]
	lea	rcx, QWORD PTR g0100$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 544  : 		g1000 *= norm00.z;

	movss	xmm1, DWORD PTR norm00$[rsp+8]
	lea	rcx, QWORD PTR g1000$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 545  : 		g1100 *= norm00.w;

	movss	xmm1, DWORD PTR norm00$[rsp+12]
	lea	rcx, QWORD PTR g1100$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 546  : 
; 547  : 		tvec4<T, P> norm01 = detail::taylorInvSqrt(tvec4<T, P>(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));

	lea	rdx, QWORD PTR g1101$[rsp]
	lea	rcx, QWORD PTR g1101$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv928[rsp], xmm0
	lea	rdx, QWORD PTR g1001$[rsp]
	lea	rcx, QWORD PTR g1001$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv932[rsp], xmm0
	lea	rdx, QWORD PTR g0101$[rsp]
	lea	rcx, QWORD PTR g0101$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv936[rsp], xmm0
	lea	rdx, QWORD PTR g0001$[rsp]
	lea	rcx, QWORD PTR g0001$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv928[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv932[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv936[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T160[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm01$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 548  : 		g0001 *= norm01.x;

	movss	xmm1, DWORD PTR norm01$[rsp]
	lea	rcx, QWORD PTR g0001$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 549  : 		g0101 *= norm01.y;

	movss	xmm1, DWORD PTR norm01$[rsp+4]
	lea	rcx, QWORD PTR g0101$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 550  : 		g1001 *= norm01.z;

	movss	xmm1, DWORD PTR norm01$[rsp+8]
	lea	rcx, QWORD PTR g1001$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 551  : 		g1101 *= norm01.w;

	movss	xmm1, DWORD PTR norm01$[rsp+12]
	lea	rcx, QWORD PTR g1101$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 552  : 
; 553  : 		tvec4<T, P> norm10 = detail::taylorInvSqrt(tvec4<T, P>(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));

	lea	rdx, QWORD PTR g1110$[rsp]
	lea	rcx, QWORD PTR g1110$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv956[rsp], xmm0
	lea	rdx, QWORD PTR g1010$[rsp]
	lea	rcx, QWORD PTR g1010$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv992[rsp], xmm0
	lea	rdx, QWORD PTR g0110$[rsp]
	lea	rcx, QWORD PTR g0110$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv996[rsp], xmm0
	lea	rdx, QWORD PTR g0010$[rsp]
	lea	rcx, QWORD PTR g0010$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv956[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv992[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv996[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T161[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm10$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 554  : 		g0010 *= norm10.x;

	movss	xmm1, DWORD PTR norm10$[rsp]
	lea	rcx, QWORD PTR g0010$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 555  : 		g0110 *= norm10.y;

	movss	xmm1, DWORD PTR norm10$[rsp+4]
	lea	rcx, QWORD PTR g0110$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 556  : 		g1010 *= norm10.z;

	movss	xmm1, DWORD PTR norm10$[rsp+8]
	lea	rcx, QWORD PTR g1010$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 557  : 		g1110 *= norm10.w;

	movss	xmm1, DWORD PTR norm10$[rsp+12]
	lea	rcx, QWORD PTR g1110$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 558  : 
; 559  : 		tvec4<T, P> norm11 = detail::taylorInvSqrt(tvec4<T, P>(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));

	lea	rdx, QWORD PTR g1111$[rsp]
	lea	rcx, QWORD PTR g1111$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv1016[rsp], xmm0
	lea	rdx, QWORD PTR g1011$[rsp]
	lea	rcx, QWORD PTR g1011$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv1020[rsp], xmm0
	lea	rdx, QWORD PTR g0111$[rsp]
	lea	rcx, QWORD PTR g0111$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv1024[rsp], xmm0
	lea	rdx, QWORD PTR g0011$[rsp]
	lea	rcx, QWORD PTR g0011$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv1016[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv1020[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv1024[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T162[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm11$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 560  : 		g0011 *= norm11.x;

	movss	xmm1, DWORD PTR norm11$[rsp]
	lea	rcx, QWORD PTR g0011$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 561  : 		g0111 *= norm11.y;

	movss	xmm1, DWORD PTR norm11$[rsp+4]
	lea	rcx, QWORD PTR g0111$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 562  : 		g1011 *= norm11.z;

	movss	xmm1, DWORD PTR norm11$[rsp+8]
	lea	rcx, QWORD PTR g1011$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 563  : 		g1111 *= norm11.w;

	movss	xmm1, DWORD PTR norm11$[rsp+12]
	lea	rcx, QWORD PTR g1111$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 564  : 
; 565  : 		T n0000 = dot(g0000, Pf0);

	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR g0000$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0000$[rsp], xmm0

; 566  : 		T n1000 = dot(g1000, tvec4<T, P>(Pf1.x, Pf0.y, Pf0.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T163[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1000$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1000$[rsp], xmm0

; 567  : 		T n0100 = dot(g0100, tvec4<T, P>(Pf0.x, Pf1.y, Pf0.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T164[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0100$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0100$[rsp], xmm0

; 568  : 		T n1100 = dot(g1100, tvec4<T, P>(Pf1.x, Pf1.y, Pf0.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T165[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1100$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1100$[rsp], xmm0

; 569  : 		T n0010 = dot(g0010, tvec4<T, P>(Pf0.x, Pf0.y, Pf1.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T166[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0010$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0010$[rsp], xmm0

; 570  : 		T n1010 = dot(g1010, tvec4<T, P>(Pf1.x, Pf0.y, Pf1.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T167[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1010$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1010$[rsp], xmm0

; 571  : 		T n0110 = dot(g0110, tvec4<T, P>(Pf0.x, Pf1.y, Pf1.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T168[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0110$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0110$[rsp], xmm0

; 572  : 		T n1110 = dot(g1110, tvec4<T, P>(Pf1.x, Pf1.y, Pf1.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T169[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1110$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1110$[rsp], xmm0

; 573  : 		T n0001 = dot(g0001, tvec4<T, P>(Pf0.x, Pf0.y, Pf0.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T170[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0001$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0001$[rsp], xmm0

; 574  : 		T n1001 = dot(g1001, tvec4<T, P>(Pf1.x, Pf0.y, Pf0.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T171[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1001$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1001$[rsp], xmm0

; 575  : 		T n0101 = dot(g0101, tvec4<T, P>(Pf0.x, Pf1.y, Pf0.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T172[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0101$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0101$[rsp], xmm0

; 576  : 		T n1101 = dot(g1101, tvec4<T, P>(Pf1.x, Pf1.y, Pf0.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T173[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1101$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1101$[rsp], xmm0

; 577  : 		T n0011 = dot(g0011, tvec4<T, P>(Pf0.x, Pf0.y, Pf1.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T174[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0011$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0011$[rsp], xmm0

; 578  : 		T n1011 = dot(g1011, tvec4<T, P>(Pf1.x, Pf0.y, Pf1.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T175[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1011$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1011$[rsp], xmm0

; 579  : 		T n0111 = dot(g0111, tvec4<T, P>(Pf0.x, Pf1.y, Pf1.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T176[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0111$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0111$[rsp], xmm0

; 580  : 		T n1111 = dot(g1111, Pf1);

	lea	rdx, QWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR g1111$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1111$[rsp], xmm0

; 581  : 
; 582  : 		tvec4<T, P> fade_xyzw = detail::fade(Pf0);

	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR fade_xyzw$[rsp]
	call	??$fade@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::fade<float,0>

; 583  : 		tvec4<T, P> n_0w = mix(tvec4<T, P>(n0000, n1000, n0100, n1100), tvec4<T, P>(n0001, n1001, n0101, n1101), fade_xyzw.w);

	movss	xmm0, DWORD PTR n1101$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n0101$[rsp]
	movss	xmm2, DWORD PTR n1001$[rsp]
	movss	xmm1, DWORD PTR n0001$[rsp]
	lea	rcx, QWORD PTR $T177[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv1210[rsp], rax
	movss	xmm0, DWORD PTR n1100$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n0100$[rsp]
	movss	xmm2, DWORD PTR n1000$[rsp]
	movss	xmm1, DWORD PTR n0000$[rsp]
	lea	rcx, QWORD PTR $T178[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm3, DWORD PTR fade_xyzw$[rsp+12]
	mov	rcx, QWORD PTR tv1210[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_0w$[rsp]
	call	??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec4>

; 584  : 		tvec4<T, P> n_1w = mix(tvec4<T, P>(n0010, n1010, n0110, n1110), tvec4<T, P>(n0011, n1011, n0111, n1111), fade_xyzw.w);

	movss	xmm0, DWORD PTR n1111$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n0111$[rsp]
	movss	xmm2, DWORD PTR n1011$[rsp]
	movss	xmm1, DWORD PTR n0011$[rsp]
	lea	rcx, QWORD PTR $T179[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv1258[rsp], rax
	movss	xmm0, DWORD PTR n1110$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n0110$[rsp]
	movss	xmm2, DWORD PTR n1010$[rsp]
	movss	xmm1, DWORD PTR n0010$[rsp]
	lea	rcx, QWORD PTR $T180[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm3, DWORD PTR fade_xyzw$[rsp+12]
	mov	rcx, QWORD PTR tv1258[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_1w$[rsp]
	call	??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec4>

; 585  : 		tvec4<T, P> n_zw = mix(n_0w, n_1w, fade_xyzw.z);

	movss	xmm3, DWORD PTR fade_xyzw$[rsp+8]
	lea	r8, QWORD PTR n_1w$[rsp]
	lea	rdx, QWORD PTR n_0w$[rsp]
	lea	rcx, QWORD PTR n_zw$[rsp]
	call	??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec4>

; 586  : 		tvec2<T, P> n_yzw = mix(tvec2<T, P>(n_zw.x, n_zw.y), tvec2<T, P>(n_zw.z, n_zw.w), fade_xyzw.y);

	movss	xmm2, DWORD PTR n_zw$[rsp+12]
	movss	xmm1, DWORD PTR n_zw$[rsp+8]
	lea	rcx, QWORD PTR $T181[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv1278[rsp], rax
	movss	xmm2, DWORD PTR n_zw$[rsp+4]
	movss	xmm1, DWORD PTR n_zw$[rsp]
	lea	rcx, QWORD PTR $T182[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm3, DWORD PTR fade_xyzw$[rsp+4]
	mov	rcx, QWORD PTR tv1278[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_yzw$[rsp]
	call	??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec2>

; 587  : 		T n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);

	movss	xmm2, DWORD PTR fade_xyzw$[rsp]
	movss	xmm1, DWORD PTR n_yzw$[rsp+4]
	movss	xmm0, DWORD PTR n_yzw$[rsp]
	call	??$mix@MM@glm@@YAMMMM@Z			; glm::mix<float,float>
	movss	DWORD PTR n_xyzw$[rsp], xmm0

; 588  : 		return T(2.2) * n_xyzw;

	movss	xmm0, DWORD PTR __real@400ccccd
	mulss	xmm0, DWORD PTR n_xyzw$[rsp]

; 589  : 	}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 5128				; 00001408H
	pop	rdi
	pop	rsi
	ret	0
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ENDP	; glm::perlin<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\noise.inl
;	COMDAT ??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Pi0$ = 72
Pi1$ = 120
Pf0$ = 168
Pf1$ = 216
ix$ = 264
iy$ = 312
iz0$ = 360
iz1$ = 408
ixy$ = 456
ixy0$ = 504
ixy1$ = 552
gx0$ = 600
gy0$ = 648
gz0$ = 696
sz0$ = 744
gx1$ = 792
gy1$ = 840
gz1$ = 888
sz1$ = 936
g000$ = 984
g100$ = 1032
g010$ = 1080
g110$ = 1128
g001$ = 1176
g101$ = 1224
g011$ = 1272
g111$ = 1320
norm0$ = 1368
norm1$ = 1416
n000$ = 1444
n100$ = 1448
n010$ = 1452
n110$ = 1456
n001$ = 1460
n101$ = 1464
n011$ = 1468
n111$ = 1472
fade_xyz$ = 1496
n_z$ = 1544
n_yz$ = 1592
n_xyz$ = 1604
$T35 = 1608
$T36 = 1620
$T37 = 1632
$T38 = 1644
$T39 = 1656
$T40 = 1668
$T41 = 1680
$T42 = 1692
$T43 = 1704
$T44 = 1720
$T45 = 1736
$T46 = 1752
$T47 = 1768
$T48 = 1784
$T49 = 1800
$T50 = 1816
$T51 = 1832
$T52 = 1848
$T53 = 1864
$T54 = 1880
$T55 = 1896
$T56 = 1912
$T57 = 1928
$T58 = 1944
$T59 = 1960
$T60 = 1976
$T61 = 1992
$T62 = 2008
$T63 = 2024
$T64 = 2040
$T65 = 2056
$T66 = 2072
$T67 = 2088
$T68 = 2104
$T69 = 2120
$T70 = 2136
$T71 = 2152
$T72 = 2168
$T73 = 2184
$T74 = 2200
$T75 = 2216
$T76 = 2232
$T77 = 2248
$T78 = 2264
$T79 = 2280
$T80 = 2292
$T81 = 2304
$T82 = 2316
$T83 = 2328
$T84 = 2340
$T85 = 2352
$T86 = 2368
$T87 = 2384
$T88 = 2392
tv224 = 2400
tv229 = 2408
tv294 = 2416
tv299 = 2424
tv410 = 2432
tv414 = 2436
tv450 = 2440
tv470 = 2444
tv474 = 2448
tv478 = 2452
tv618 = 2456
tv634 = 2464
Position$ = 2512
rep$ = 2520
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z PROC	; glm::perlin<float,0>, COMDAT

; 389  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 2488				; 000009b8H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 606				; 0000025eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2512]

; 390  : 		tvec3<T, P> Pi0 = mod(floor(Position), rep); // Integer part, modulo period

	mov	rdx, QWORD PTR Position$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
	mov	r8, QWORD PTR rep$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Pi0$[rsp]
	call	??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec3>

; 391  : 		tvec3<T, P> Pi1 = mod(Pi0 + tvec3<T, P>(T(1)), rep); // Integer part + 1, mod period

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T36[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Pi0$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	r8, QWORD PTR rep$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Pi1$[rsp]
	call	??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec3>

; 392  : 		Pi0 = mod(Pi0, tvec3<T, P>(289));

	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T38[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Pi0$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec3>
	lea	rcx, QWORD PTR Pi0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 393  : 		Pi1 = mod(Pi1, tvec3<T, P>(289));

	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Pi1$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec3>
	lea	rcx, QWORD PTR Pi1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 394  : 		tvec3<T, P> Pf0 = fract(Position); // Fractional part for interpolation

	mov	rdx, QWORD PTR Position$[rsp]
	lea	rcx, QWORD PTR Pf0$[rsp]
	call	??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec3>

; 395  : 		tvec3<T, P> Pf1 = Pf0 - tvec3<T, P>(T(1)); // Fractional part - 1.0

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T42[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR Pf1$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 396  : 		tvec4<T, P> ix = tvec4<T, P>(Pi0.x, Pi1.x, Pi0.x, Pi1.x);

	movss	xmm0, DWORD PTR Pi1$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pi0$[rsp]
	movss	xmm2, DWORD PTR Pi1$[rsp]
	movss	xmm1, DWORD PTR Pi0$[rsp]
	lea	rcx, QWORD PTR ix$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 397  : 		tvec4<T, P> iy = tvec4<T, P>(Pi0.y, Pi0.y, Pi1.y, Pi1.y);

	movss	xmm0, DWORD PTR Pi1$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pi1$[rsp+4]
	movss	xmm2, DWORD PTR Pi0$[rsp+4]
	movss	xmm1, DWORD PTR Pi0$[rsp+4]
	lea	rcx, QWORD PTR iy$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 398  : 		tvec4<T, P> iz0(Pi0.z);

	movss	xmm1, DWORD PTR Pi0$[rsp+8]
	lea	rcx, QWORD PTR iz0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 399  : 		tvec4<T, P> iz1(Pi1.z);

	movss	xmm1, DWORD PTR Pi1$[rsp+8]
	lea	rcx, QWORD PTR iz1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 400  : 
; 401  : 		tvec4<T, P> ixy = detail::permute(detail::permute(ix) + iy);

	lea	rdx, QWORD PTR ix$[rsp]
	lea	rcx, QWORD PTR $T43[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	lea	r8, QWORD PTR iy$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 402  : 		tvec4<T, P> ixy0 = detail::permute(ixy + iz0);

	lea	r8, QWORD PTR iz0$[rsp]
	lea	rdx, QWORD PTR ixy$[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy0$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 403  : 		tvec4<T, P> ixy1 = detail::permute(ixy + iz1);

	lea	r8, QWORD PTR iz1$[rsp]
	lea	rdx, QWORD PTR ixy$[rsp]
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy1$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 404  : 
; 405  : 		tvec4<T, P> gx0 = ixy0 / T(7);

	movss	xmm2, DWORD PTR __real@40e00000
	lea	rdx, QWORD PTR ixy0$[rsp]
	lea	rcx, QWORD PTR gx0$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 406  : 		tvec4<T, P> gy0 = fract(floor(gx0) / T(7)) - T(0.5);

	lea	rdx, QWORD PTR gx0$[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40e00000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T48[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T49[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy0$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 407  : 		gx0 = fract(gx0);

	lea	rdx, QWORD PTR gx0$[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	lea	rcx, QWORD PTR gx0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 408  : 		tvec4<T, P> gz0 = tvec4<T, P>(0.5) - abs(gx0) - abs(gy0);

	lea	rdx, QWORD PTR gy0$[rsp]
	lea	rcx, QWORD PTR $T51[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv224[rsp], rax
	lea	rdx, QWORD PTR gx0$[rsp]
	lea	rcx, QWORD PTR $T52[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv229[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T53[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv229[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T54[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv224[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gz0$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 409  : 		tvec4<T, P> sz0 = step(gz0, tvec4<T, P>(0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T55[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gz0$[rsp]
	lea	rcx, QWORD PTR sz0$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 410  : 		gx0 -= sz0 * (step(T(0), gx0) - T(0.5));

	lea	r8, QWORD PTR gx0$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T56[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T57[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sz0$[rsp]
	lea	rcx, QWORD PTR $T58[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx0$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 411  : 		gy0 -= sz0 * (step(T(0), gy0) - T(0.5));

	lea	r8, QWORD PTR gy0$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T59[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T60[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sz0$[rsp]
	lea	rcx, QWORD PTR $T61[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy0$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 412  : 
; 413  : 		tvec4<T, P> gx1 = ixy1 / T(7);

	movss	xmm2, DWORD PTR __real@40e00000
	lea	rdx, QWORD PTR ixy1$[rsp]
	lea	rcx, QWORD PTR gx1$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 414  : 		tvec4<T, P> gy1 = fract(floor(gx1) / T(7)) - T(0.5);

	lea	rdx, QWORD PTR gx1$[rsp]
	lea	rcx, QWORD PTR $T62[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40e00000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T63[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T64[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy1$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 415  : 		gx1 = fract(gx1);

	lea	rdx, QWORD PTR gx1$[rsp]
	lea	rcx, QWORD PTR $T65[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	lea	rcx, QWORD PTR gx1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 416  : 		tvec4<T, P> gz1 = tvec4<T, P>(0.5) - abs(gx1) - abs(gy1);

	lea	rdx, QWORD PTR gy1$[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv294[rsp], rax
	lea	rdx, QWORD PTR gx1$[rsp]
	lea	rcx, QWORD PTR $T67[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv299[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T68[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv299[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T69[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv294[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gz1$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 417  : 		tvec4<T, P> sz1 = step(gz1, tvec4<T, P>(T(0)));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T70[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gz1$[rsp]
	lea	rcx, QWORD PTR sz1$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 418  : 		gx1 -= sz1 * (step(T(0), gx1) - T(0.5));

	lea	r8, QWORD PTR gx1$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T71[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T72[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sz1$[rsp]
	lea	rcx, QWORD PTR $T73[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx1$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 419  : 		gy1 -= sz1 * (step(T(0), gy1) - T(0.5));

	lea	r8, QWORD PTR gy1$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T74[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T75[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sz1$[rsp]
	lea	rcx, QWORD PTR $T76[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy1$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 420  : 
; 421  : 		tvec3<T, P> g000 = tvec3<T, P>(gx0.x, gy0.x, gz0.x);

	movss	xmm3, DWORD PTR gz0$[rsp]
	movss	xmm2, DWORD PTR gy0$[rsp]
	movss	xmm1, DWORD PTR gx0$[rsp]
	lea	rcx, QWORD PTR g000$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 422  : 		tvec3<T, P> g100 = tvec3<T, P>(gx0.y, gy0.y, gz0.y);

	movss	xmm3, DWORD PTR gz0$[rsp+4]
	movss	xmm2, DWORD PTR gy0$[rsp+4]
	movss	xmm1, DWORD PTR gx0$[rsp+4]
	lea	rcx, QWORD PTR g100$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 423  : 		tvec3<T, P> g010 = tvec3<T, P>(gx0.z, gy0.z, gz0.z);

	movss	xmm3, DWORD PTR gz0$[rsp+8]
	movss	xmm2, DWORD PTR gy0$[rsp+8]
	movss	xmm1, DWORD PTR gx0$[rsp+8]
	lea	rcx, QWORD PTR g010$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 424  : 		tvec3<T, P> g110 = tvec3<T, P>(gx0.w, gy0.w, gz0.w);

	movss	xmm3, DWORD PTR gz0$[rsp+12]
	movss	xmm2, DWORD PTR gy0$[rsp+12]
	movss	xmm1, DWORD PTR gx0$[rsp+12]
	lea	rcx, QWORD PTR g110$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 425  : 		tvec3<T, P> g001 = tvec3<T, P>(gx1.x, gy1.x, gz1.x);

	movss	xmm3, DWORD PTR gz1$[rsp]
	movss	xmm2, DWORD PTR gy1$[rsp]
	movss	xmm1, DWORD PTR gx1$[rsp]
	lea	rcx, QWORD PTR g001$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 426  : 		tvec3<T, P> g101 = tvec3<T, P>(gx1.y, gy1.y, gz1.y);

	movss	xmm3, DWORD PTR gz1$[rsp+4]
	movss	xmm2, DWORD PTR gy1$[rsp+4]
	movss	xmm1, DWORD PTR gx1$[rsp+4]
	lea	rcx, QWORD PTR g101$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 427  : 		tvec3<T, P> g011 = tvec3<T, P>(gx1.z, gy1.z, gz1.z);

	movss	xmm3, DWORD PTR gz1$[rsp+8]
	movss	xmm2, DWORD PTR gy1$[rsp+8]
	movss	xmm1, DWORD PTR gx1$[rsp+8]
	lea	rcx, QWORD PTR g011$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 428  : 		tvec3<T, P> g111 = tvec3<T, P>(gx1.w, gy1.w, gz1.w);

	movss	xmm3, DWORD PTR gz1$[rsp+12]
	movss	xmm2, DWORD PTR gy1$[rsp+12]
	movss	xmm1, DWORD PTR gx1$[rsp+12]
	lea	rcx, QWORD PTR g111$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 429  : 
; 430  : 		tvec4<T, P> norm0 = detail::taylorInvSqrt(tvec4<T, P>(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));

	lea	rdx, QWORD PTR g110$[rsp]
	lea	rcx, QWORD PTR g110$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv410[rsp], xmm0
	lea	rdx, QWORD PTR g100$[rsp]
	lea	rcx, QWORD PTR g100$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv414[rsp], xmm0
	lea	rdx, QWORD PTR g010$[rsp]
	lea	rcx, QWORD PTR g010$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv450[rsp], xmm0
	lea	rdx, QWORD PTR g000$[rsp]
	lea	rcx, QWORD PTR g000$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR tv410[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv414[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv450[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T77[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm0$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 431  : 		g000 *= norm0.x;

	movss	xmm1, DWORD PTR norm0$[rsp]
	lea	rcx, QWORD PTR g000$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 432  : 		g010 *= norm0.y;

	movss	xmm1, DWORD PTR norm0$[rsp+4]
	lea	rcx, QWORD PTR g010$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 433  : 		g100 *= norm0.z;

	movss	xmm1, DWORD PTR norm0$[rsp+8]
	lea	rcx, QWORD PTR g100$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 434  : 		g110 *= norm0.w;

	movss	xmm1, DWORD PTR norm0$[rsp+12]
	lea	rcx, QWORD PTR g110$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 435  : 		tvec4<T, P> norm1 = detail::taylorInvSqrt(tvec4<T, P>(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));

	lea	rdx, QWORD PTR g111$[rsp]
	lea	rcx, QWORD PTR g111$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv470[rsp], xmm0
	lea	rdx, QWORD PTR g101$[rsp]
	lea	rcx, QWORD PTR g101$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv474[rsp], xmm0
	lea	rdx, QWORD PTR g011$[rsp]
	lea	rcx, QWORD PTR g011$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv478[rsp], xmm0
	lea	rdx, QWORD PTR g001$[rsp]
	lea	rcx, QWORD PTR g001$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR tv470[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv474[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv478[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T78[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm1$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 436  : 		g001 *= norm1.x;

	movss	xmm1, DWORD PTR norm1$[rsp]
	lea	rcx, QWORD PTR g001$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 437  : 		g011 *= norm1.y;

	movss	xmm1, DWORD PTR norm1$[rsp+4]
	lea	rcx, QWORD PTR g011$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 438  : 		g101 *= norm1.z;

	movss	xmm1, DWORD PTR norm1$[rsp+8]
	lea	rcx, QWORD PTR g101$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 439  : 		g111 *= norm1.w;

	movss	xmm1, DWORD PTR norm1$[rsp+12]
	lea	rcx, QWORD PTR g111$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 440  : 
; 441  : 		T n000 = dot(g000, Pf0);

	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR g000$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n000$[rsp], xmm0

; 442  : 		T n100 = dot(g100, tvec3<T, P>(Pf1.x, Pf0.y, Pf0.z));

	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T79[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g100$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n100$[rsp], xmm0

; 443  : 		T n010 = dot(g010, tvec3<T, P>(Pf0.x, Pf1.y, Pf0.z));

	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T80[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g010$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n010$[rsp], xmm0

; 444  : 		T n110 = dot(g110, tvec3<T, P>(Pf1.x, Pf1.y, Pf0.z));

	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T81[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g110$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n110$[rsp], xmm0

; 445  : 		T n001 = dot(g001, tvec3<T, P>(Pf0.x, Pf0.y, Pf1.z));

	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T82[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g001$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n001$[rsp], xmm0

; 446  : 		T n101 = dot(g101, tvec3<T, P>(Pf1.x, Pf0.y, Pf1.z));

	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T83[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g101$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n101$[rsp], xmm0

; 447  : 		T n011 = dot(g011, tvec3<T, P>(Pf0.x, Pf1.y, Pf1.z));

	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T84[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g011$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n011$[rsp], xmm0

; 448  : 		T n111 = dot(g111, Pf1);

	lea	rdx, QWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR g111$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n111$[rsp], xmm0

; 449  : 
; 450  : 		tvec3<T, P> fade_xyz = detail::fade(Pf0);

	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR fade_xyz$[rsp]
	call	??$fade@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ; glm::detail::fade<float,0>

; 451  : 		tvec4<T, P> n_z = mix(tvec4<T, P>(n000, n100, n010, n110), tvec4<T, P>(n001, n101, n011, n111), fade_xyz.z);

	movss	xmm0, DWORD PTR n111$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n011$[rsp]
	movss	xmm2, DWORD PTR n101$[rsp]
	movss	xmm1, DWORD PTR n001$[rsp]
	lea	rcx, QWORD PTR $T85[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv618[rsp], rax
	movss	xmm0, DWORD PTR n110$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n010$[rsp]
	movss	xmm2, DWORD PTR n100$[rsp]
	movss	xmm1, DWORD PTR n000$[rsp]
	lea	rcx, QWORD PTR $T86[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm3, DWORD PTR fade_xyz$[rsp+8]
	mov	rcx, QWORD PTR tv618[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_z$[rsp]
	call	??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec4>

; 452  : 		tvec2<T, P> n_yz = mix(tvec2<T, P>(n_z.x, n_z.y), tvec2<T, P>(n_z.z, n_z.w), fade_xyz.y);

	movss	xmm2, DWORD PTR n_z$[rsp+12]
	movss	xmm1, DWORD PTR n_z$[rsp+8]
	lea	rcx, QWORD PTR $T87[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv634[rsp], rax
	movss	xmm2, DWORD PTR n_z$[rsp+4]
	movss	xmm1, DWORD PTR n_z$[rsp]
	lea	rcx, QWORD PTR $T88[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm3, DWORD PTR fade_xyz$[rsp+4]
	mov	rcx, QWORD PTR tv634[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_yz$[rsp]
	call	??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec2>

; 453  : 		T n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);

	movss	xmm2, DWORD PTR fade_xyz$[rsp]
	movss	xmm1, DWORD PTR n_yz$[rsp+4]
	movss	xmm0, DWORD PTR n_yz$[rsp]
	call	??$mix@MM@glm@@YAMMMM@Z			; glm::mix<float,float>
	movss	DWORD PTR n_xyz$[rsp], xmm0

; 454  : 		return T(2.2) * n_xyz;

	movss	xmm0, DWORD PTR __real@400ccccd
	mulss	xmm0, DWORD PTR n_xyz$[rsp]

; 455  : 	}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 2488				; 000009b8H
	pop	rdi
	pop	rsi
	ret	0
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ENDP	; glm::perlin<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\noise.inl
;	COMDAT ??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
Pi$ = 72
Pf$ = 120
ix$ = 168
iy$ = 216
fx$ = 264
fy$ = 312
i$ = 360
gx$ = 408
gy$ = 456
tx$ = 504
g00$ = 552
g10$ = 584
g01$ = 616
g11$ = 648
norm$ = 680
n00$ = 708
n10$ = 712
n01$ = 716
n11$ = 720
fade_xy$ = 744
n_x$ = 776
n_xy$ = 788
$T20 = 792
$T21 = 808
$T22 = 824
$T23 = 840
$T24 = 856
$T25 = 872
$T26 = 888
$T27 = 904
$T28 = 920
$T29 = 936
$T30 = 952
$T31 = 968
$T32 = 984
$T33 = 1000
$T34 = 1016
$T35 = 1032
$T36 = 1048
$T37 = 1064
$T38 = 1080
$T39 = 1096
$T40 = 1104
$T41 = 1112
$T42 = 1120
$T43 = 1128
$T44 = 1136
$T45 = 1144
tv66 = 1152
tv88 = 1160
tv270 = 1168
tv274 = 1172
tv278 = 1176
tv364 = 1184
Position$ = 1232
rep$ = 1240
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z PROC	; glm::perlin<float,0>, COMDAT

; 347  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1208				; 000004b8H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 286				; 0000011eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1232]

; 348  : 		tvec4<T, P> Pi = floor(tvec4<T, P>(Position.x, Position.y, Position.x, Position.y)) + tvec4<T, P>(0.0, 0.0, 1.0, 1.0);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR __real@3ff0000000000000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z ; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>
	mov	QWORD PTR tv66[rsp], rax
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm2, DWORD PTR [rcx+4]
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm1, DWORD PTR [rcx]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Pi$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 349  : 		tvec4<T, P> Pf = fract(tvec4<T, P>(Position.x, Position.y, Position.x, Position.y)) - tvec4<T, P>(0.0, 0.0, 1.0, 1.0);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR __real@3ff0000000000000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z ; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>
	mov	QWORD PTR tv88[rsp], rax
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm2, DWORD PTR [rcx+4]
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm1, DWORD PTR [rcx]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv88[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Pf$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 350  : 		Pi = mod(Pi, tvec4<T, P>(rep.x, rep.y, rep.x, rep.y)); // To create noise with explicit period

	mov	rax, QWORD PTR rep$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR rep$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mov	rax, QWORD PTR rep$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR rep$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Pi$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>
	lea	rcx, QWORD PTR Pi$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 351  : 		Pi = mod(Pi, tvec4<T, P>(289)); // To avoid truncation effects in permutation

	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T28[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Pi$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>
	lea	rcx, QWORD PTR Pi$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 352  : 		tvec4<T, P> ix(Pi.x, Pi.z, Pi.x, Pi.z);

	movss	xmm0, DWORD PTR Pi$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pi$[rsp]
	movss	xmm2, DWORD PTR Pi$[rsp+8]
	movss	xmm1, DWORD PTR Pi$[rsp]
	lea	rcx, QWORD PTR ix$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 353  : 		tvec4<T, P> iy(Pi.y, Pi.y, Pi.w, Pi.w);

	movss	xmm0, DWORD PTR Pi$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pi$[rsp+12]
	movss	xmm2, DWORD PTR Pi$[rsp+4]
	movss	xmm1, DWORD PTR Pi$[rsp+4]
	lea	rcx, QWORD PTR iy$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 354  : 		tvec4<T, P> fx(Pf.x, Pf.z, Pf.x, Pf.z);

	movss	xmm0, DWORD PTR Pf$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf$[rsp]
	movss	xmm2, DWORD PTR Pf$[rsp+8]
	movss	xmm1, DWORD PTR Pf$[rsp]
	lea	rcx, QWORD PTR fx$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 355  : 		tvec4<T, P> fy(Pf.y, Pf.y, Pf.w, Pf.w);

	movss	xmm0, DWORD PTR Pf$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf$[rsp+12]
	movss	xmm2, DWORD PTR Pf$[rsp+4]
	movss	xmm1, DWORD PTR Pf$[rsp+4]
	lea	rcx, QWORD PTR fy$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 356  : 
; 357  : 		tvec4<T, P> i = detail::permute(detail::permute(ix) + iy);

	lea	rdx, QWORD PTR ix$[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	lea	r8, QWORD PTR iy$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR i$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 358  : 
; 359  : 		tvec4<T, P> gx = static_cast<T>(2) * fract(i / T(41)) - T(1);

	movss	xmm2, DWORD PTR __real@42240000
	lea	rdx, QWORD PTR i$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR gx$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 360  : 		tvec4<T, P> gy = abs(gx) - T(0.5);

	lea	rdx, QWORD PTR gx$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 361  : 		tvec4<T, P> tx = floor(gx + T(0.5));

	movss	xmm2, DWORD PTR __real@3f000000
	lea	rdx, QWORD PTR gx$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR tx$[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>

; 362  : 		gx = gx - tx;

	lea	r8, QWORD PTR tx$[rsp]
	lea	rdx, QWORD PTR gx$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gx$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 363  : 
; 364  : 		tvec2<T, P> g00(gx.x, gy.x);

	movss	xmm2, DWORD PTR gy$[rsp]
	movss	xmm1, DWORD PTR gx$[rsp]
	lea	rcx, QWORD PTR g00$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 365  : 		tvec2<T, P> g10(gx.y, gy.y);

	movss	xmm2, DWORD PTR gy$[rsp+4]
	movss	xmm1, DWORD PTR gx$[rsp+4]
	lea	rcx, QWORD PTR g10$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 366  : 		tvec2<T, P> g01(gx.z, gy.z);

	movss	xmm2, DWORD PTR gy$[rsp+8]
	movss	xmm1, DWORD PTR gx$[rsp+8]
	lea	rcx, QWORD PTR g01$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 367  : 		tvec2<T, P> g11(gx.w, gy.w);

	movss	xmm2, DWORD PTR gy$[rsp+12]
	movss	xmm1, DWORD PTR gx$[rsp+12]
	lea	rcx, QWORD PTR g11$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 368  : 
; 369  : 		tvec4<T, P> norm = detail::taylorInvSqrt(tvec4<T, P>(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));

	lea	rdx, QWORD PTR g11$[rsp]
	lea	rcx, QWORD PTR g11$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR tv270[rsp], xmm0
	lea	rdx, QWORD PTR g10$[rsp]
	lea	rcx, QWORD PTR g10$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR tv274[rsp], xmm0
	lea	rdx, QWORD PTR g01$[rsp]
	lea	rcx, QWORD PTR g01$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR tv278[rsp], xmm0
	lea	rdx, QWORD PTR g00$[rsp]
	lea	rcx, QWORD PTR g00$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	xmm1, DWORD PTR tv270[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv274[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv278[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T38[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 370  : 		g00 *= norm.x;

	movss	xmm1, DWORD PTR norm$[rsp]
	lea	rcx, QWORD PTR g00$[rsp]
	call	??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec2<float,0>::operator*=<float>

; 371  : 		g01 *= norm.y;

	movss	xmm1, DWORD PTR norm$[rsp+4]
	lea	rcx, QWORD PTR g01$[rsp]
	call	??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec2<float,0>::operator*=<float>

; 372  : 		g10 *= norm.z;

	movss	xmm1, DWORD PTR norm$[rsp+8]
	lea	rcx, QWORD PTR g10$[rsp]
	call	??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec2<float,0>::operator*=<float>

; 373  : 		g11 *= norm.w;

	movss	xmm1, DWORD PTR norm$[rsp+12]
	lea	rcx, QWORD PTR g11$[rsp]
	call	??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec2<float,0>::operator*=<float>

; 374  : 
; 375  : 		T n00 = dot(g00, tvec2<T, P>(fx.x, fy.x));

	movss	xmm2, DWORD PTR fy$[rsp]
	movss	xmm1, DWORD PTR fx$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g00$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR n00$[rsp], xmm0

; 376  : 		T n10 = dot(g10, tvec2<T, P>(fx.y, fy.y));

	movss	xmm2, DWORD PTR fy$[rsp+4]
	movss	xmm1, DWORD PTR fx$[rsp+4]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g10$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR n10$[rsp], xmm0

; 377  : 		T n01 = dot(g01, tvec2<T, P>(fx.z, fy.z));

	movss	xmm2, DWORD PTR fy$[rsp+8]
	movss	xmm1, DWORD PTR fx$[rsp+8]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g01$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR n01$[rsp], xmm0

; 378  : 		T n11 = dot(g11, tvec2<T, P>(fx.w, fy.w));

	movss	xmm2, DWORD PTR fy$[rsp+12]
	movss	xmm1, DWORD PTR fx$[rsp+12]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g11$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR n11$[rsp], xmm0

; 379  : 
; 380  : 		tvec2<T, P> fade_xy = detail::fade(tvec2<T, P>(Pf.x, Pf.y));

	movss	xmm2, DWORD PTR Pf$[rsp+4]
	movss	xmm1, DWORD PTR Pf$[rsp]
	lea	rcx, QWORD PTR $T43[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR fade_xy$[rsp]
	call	??$fade@M$0A@@detail@glm@@YA?AU?$tvec2@M$0A@@1@AEBU21@@Z ; glm::detail::fade<float,0>

; 381  : 		tvec2<T, P> n_x = mix(tvec2<T, P>(n00, n01), tvec2<T, P>(n10, n11), fade_xy.x);

	movss	xmm2, DWORD PTR n11$[rsp]
	movss	xmm1, DWORD PTR n10$[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv364[rsp], rax
	movss	xmm2, DWORD PTR n01$[rsp]
	movss	xmm1, DWORD PTR n00$[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm3, DWORD PTR fade_xy$[rsp]
	mov	rcx, QWORD PTR tv364[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_x$[rsp]
	call	??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec2>

; 382  : 		T n_xy = mix(n_x.x, n_x.y, fade_xy.y);

	movss	xmm2, DWORD PTR fade_xy$[rsp+4]
	movss	xmm1, DWORD PTR n_x$[rsp+4]
	movss	xmm0, DWORD PTR n_x$[rsp]
	call	??$mix@MM@glm@@YAMMMM@Z			; glm::mix<float,float>
	movss	DWORD PTR n_xy$[rsp], xmm0

; 383  : 		return T(2.3) * n_xy;

	movss	xmm0, DWORD PTR __real@40133333
	mulss	xmm0, DWORD PTR n_xy$[rsp]

; 384  : 	}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 1208				; 000004b8H
	pop	rdi
	pop	rsi
	ret	0
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ENDP	; glm::perlin<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_noise.cpp
_TEXT	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?test_perlin_pedioric@@YAHXZ PROC			; test_perlin_pedioric

; 120  : {

$LN45:
	push	rdi
	sub	rsp, 1152				; 00000480H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 276				; 00000114H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 121  : 	{
; 122  : 		std::vector<glm::byte> ImageData(Size * Size * 3);

	lea	rcx, QWORD PTR $T24[rsp]
	call	??0?$allocator@E@std@@QEAA@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	r8, rax
	mov	edx, 12288				; 00003000H
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	npad	1

; 123  : 		
; 124  : 		for(std::size_t y = 0; y < Size; ++y)

	mov	QWORD PTR y$10[rsp], 0
	jmp	SHORT $LN4@test_perli
$LN2@test_perli:
	mov	rax, QWORD PTR y$10[rsp]
	inc	rax
	mov	QWORD PTR y$10[rsp], rax
$LN4@test_perli:
	cmp	QWORD PTR y$10[rsp], 64			; 00000040H
	jae	$LN3@test_perli

; 125  : 		for(std::size_t x = 0; x < Size; ++x)

	mov	QWORD PTR x$11[rsp], 0
	jmp	SHORT $LN7@test_perli
$LN5@test_perli:
	mov	rax, QWORD PTR x$11[rsp]
	inc	rax
	mov	QWORD PTR x$11[rsp], rax
$LN7@test_perli:
	cmp	QWORD PTR x$11[rsp], 64			; 00000040H
	jae	$LN6@test_perli

; 126  : 		{
; 127  : 			ImageData[(x + y * Size) * 3 + 0] = glm::byte(glm::perlin(glm::vec2(x / 64.f, y / 64.f), glm::vec2(2.0f)) * 128.f + 127.f);

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T25[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv83[rsp], rax
	mov	rcx, QWORD PTR y$10[rsp]
	test	rcx, rcx
	jl	SHORT $LN43@test_perli
	cvtsi2ss xmm0, rcx
	jmp	SHORT $LN44@test_perli
$LN43@test_perli:
	mov	rdx, rcx
	shr	rdx, 1
	and	rcx, 1
	or	rdx, rcx
	cvtsi2ss xmm1, rdx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN44@test_perli:
	divss	xmm0, DWORD PTR __real@42800000
	mov	rcx, QWORD PTR x$11[rsp]
	test	rcx, rcx
	jl	SHORT $LN41@test_perli
	cvtsi2ss xmm1, rcx
	jmp	SHORT $LN42@test_perli
$LN41@test_perli:
	mov	rdx, rcx
	shr	rdx, 1
	and	rcx, 1
	or	rdx, rcx
	cvtsi2ss xmm2, rdx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN42@test_perli:
	divss	xmm1, DWORD PTR __real@42800000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T26[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv83[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::perlin<float,0>
	mulss	xmm0, DWORD PTR __real@43000000
	addss	xmm0, DWORD PTR __real@42fe0000
	cvttss2si eax, xmm0
	mov	BYTE PTR tv395[rsp], al
	imul	rcx, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	ecx, BYTE PTR tv395[rsp]
	mov	BYTE PTR [rax], cl

; 128  : 			ImageData[(x + y * Size) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv138[rsp], rax
	imul	rcx, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	inc	rcx
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv138[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 129  : 			ImageData[(x + y * Size) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv151[rsp], rax
	imul	rcx, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	add	rcx, 2
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv151[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 130  : 		}

	jmp	$LN5@test_perli
$LN6@test_perli:
	jmp	$LN2@test_perli
$LN3@test_perli:

; 131  : 
; 132  : 		gli::texture2D Texture(1);

	mov	QWORD PTR $T27[rsp], 1
	lea	rdx, QWORD PTR $T27[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??0texture2D@gli@@QEAA@AEB_K@Z		; gli::texture2D::texture2D
	npad	1

; 133  : 		Texture[0] = gli::image2D(glm::uvec2(Size), gli::RGB8U);

	mov	DWORD PTR $T30[rsp], 3
	mov	QWORD PTR $T28[rsp], 0
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T31[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	lea	r8, QWORD PTR $T30[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T29[rsp]
	call	??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z ; gli::image2D::image2D
	mov	QWORD PTR tv157[rsp], rax
	mov	rax, QWORD PTR tv157[rsp]
	mov	QWORD PTR tv425[rsp], rax
	lea	rdx, QWORD PTR $T28[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rdx, QWORD PTR tv425[rsp]
	mov	rcx, rax
	call	??4image2D@gli@@QEAAAEAV01@AEBV01@@Z
	npad	1
	lea	rcx, QWORD PTR $T29[rsp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D

; 134  : 		memcpy(Texture[0].data(), &ImageData[0], ImageData.size());

	mov	QWORD PTR $T32[rsp], 0
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	QWORD PTR tv176[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv179[rsp], rax
	lea	rdx, QWORD PTR $T32[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rcx, rax
	call	?data@image2D@gli@@QEAAPEAEXZ		; gli::image2D::data
	mov	rcx, QWORD PTR tv176[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR tv179[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	memcpy

; 135  : 		gli::saveDDS9(Texture, "texture_perlin_pedioric_2d_256.dds");

	lea	rdx, OFFSET FLAT:$SG80079
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; gli::gtx::loader_dds9::saveDDS9
	npad	1
	lea	rcx, QWORD PTR $T13[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 136  : 	}

	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	npad	1
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >

; 137  : 
; 138  : 	{
; 139  : 		std::vector<glm::byte> ImageData(Size * Size * 3);

	lea	rcx, QWORD PTR $T33[rsp]
	call	??0?$allocator@E@std@@QEAA@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	r8, rax
	mov	edx, 12288				; 00003000H
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	npad	1

; 140  : 		
; 141  : 		for(std::size_t y = 0; y < Size; ++y)

	mov	QWORD PTR y$15[rsp], 0
	jmp	SHORT $LN10@test_perli
$LN8@test_perli:
	mov	rax, QWORD PTR y$15[rsp]
	inc	rax
	mov	QWORD PTR y$15[rsp], rax
$LN10@test_perli:
	cmp	QWORD PTR y$15[rsp], 64			; 00000040H
	jae	$LN9@test_perli

; 142  : 		for(std::size_t x = 0; x < Size; ++x)

	mov	QWORD PTR x$16[rsp], 0
	jmp	SHORT $LN13@test_perli
$LN11@test_perli:
	mov	rax, QWORD PTR x$16[rsp]
	inc	rax
	mov	QWORD PTR x$16[rsp], rax
$LN13@test_perli:
	cmp	QWORD PTR x$16[rsp], 64			; 00000040H
	jae	$LN12@test_perli

; 143  : 		{
; 144  : 			ImageData[(x + y * Size) * 3 + 0] = glm::byte(glm::perlin(glm::vec3(x / 64.f, y / 64.f, 0.5f), glm::vec3(2.0f)) * 128.f + 127.f);

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T34[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv212[rsp], rax
	mov	rcx, QWORD PTR y$15[rsp]
	test	rcx, rcx
	jl	SHORT $LN39@test_perli
	cvtsi2ss xmm0, rcx
	jmp	SHORT $LN40@test_perli
$LN39@test_perli:
	mov	rdx, rcx
	shr	rdx, 1
	and	rcx, 1
	or	rdx, rcx
	cvtsi2ss xmm1, rdx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN40@test_perli:
	divss	xmm0, DWORD PTR __real@42800000
	mov	rcx, QWORD PTR x$16[rsp]
	test	rcx, rcx
	jl	SHORT $LN37@test_perli
	cvtsi2ss xmm1, rcx
	jmp	SHORT $LN38@test_perli
$LN37@test_perli:
	mov	rdx, rcx
	shr	rdx, 1
	and	rcx, 1
	or	rdx, rcx
	cvtsi2ss xmm2, rdx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN38@test_perli:
	divss	xmm1, DWORD PTR __real@42800000
	movss	xmm3, DWORD PTR __real@3f000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T35[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv212[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::perlin<float,0>
	mulss	xmm0, DWORD PTR __real@43000000
	addss	xmm0, DWORD PTR __real@42fe0000
	cvttss2si eax, xmm0
	mov	BYTE PTR tv166[rsp], al
	imul	rcx, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$16[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	ecx, BYTE PTR tv166[rsp]
	mov	BYTE PTR [rax], cl

; 145  : 			ImageData[(x + y * Size) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$16[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv236[rsp], rax
	imul	rcx, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$16[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	inc	rcx
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv236[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 146  : 			ImageData[(x + y * Size) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$16[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv249[rsp], rax
	imul	rcx, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$16[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	add	rcx, 2
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv249[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 147  : 		}

	jmp	$LN11@test_perli
$LN12@test_perli:
	jmp	$LN8@test_perli
$LN9@test_perli:

; 148  : 
; 149  : 		gli::texture2D Texture(1);

	mov	QWORD PTR $T36[rsp], 1
	lea	rdx, QWORD PTR $T36[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??0texture2D@gli@@QEAA@AEB_K@Z		; gli::texture2D::texture2D
	npad	1

; 150  : 		Texture[0] = gli::image2D(glm::uvec2(Size), gli::RGB8U);

	mov	DWORD PTR $T39[rsp], 3
	mov	QWORD PTR $T37[rsp], 0
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	lea	r8, QWORD PTR $T39[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z ; gli::image2D::image2D
	mov	QWORD PTR tv255[rsp], rax
	mov	rax, QWORD PTR tv255[rsp]
	mov	QWORD PTR tv430[rsp], rax
	lea	rdx, QWORD PTR $T37[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rdx, QWORD PTR tv430[rsp]
	mov	rcx, rax
	call	??4image2D@gli@@QEAAAEAV01@AEBV01@@Z
	npad	1
	lea	rcx, QWORD PTR $T38[rsp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D

; 151  : 		memcpy(Texture[0].data(), &ImageData[0], ImageData.size());

	mov	QWORD PTR $T41[rsp], 0
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	QWORD PTR tv274[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv277[rsp], rax
	lea	rdx, QWORD PTR $T41[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rcx, rax
	call	?data@image2D@gli@@QEAAPEAEXZ		; gli::image2D::data
	mov	rcx, QWORD PTR tv274[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR tv277[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	memcpy

; 152  : 		gli::saveDDS9(Texture, "texture_perlin_pedioric_3d_256.dds");

	lea	rdx, OFFSET FLAT:$SG80080
	lea	rcx, QWORD PTR $T18[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rdx, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; gli::gtx::loader_dds9::saveDDS9
	npad	1
	lea	rcx, QWORD PTR $T18[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 153  : 	}

	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	npad	1
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >

; 154  : 	
; 155  : 	{
; 156  : 		std::vector<glm::byte> ImageData(Size * Size * 3);

	lea	rcx, QWORD PTR $T42[rsp]
	call	??0?$allocator@E@std@@QEAA@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	r8, rax
	mov	edx, 12288				; 00003000H
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	npad	1

; 157  : 		
; 158  : 		for(std::size_t y = 0; y < Size; ++y)

	mov	QWORD PTR y$20[rsp], 0
	jmp	SHORT $LN16@test_perli
$LN14@test_perli:
	mov	rax, QWORD PTR y$20[rsp]
	inc	rax
	mov	QWORD PTR y$20[rsp], rax
$LN16@test_perli:
	cmp	QWORD PTR y$20[rsp], 64			; 00000040H
	jae	$LN15@test_perli

; 159  : 		for(std::size_t x = 0; x < Size; ++x)

	mov	QWORD PTR x$21[rsp], 0
	jmp	SHORT $LN19@test_perli
$LN17@test_perli:
	mov	rax, QWORD PTR x$21[rsp]
	inc	rax
	mov	QWORD PTR x$21[rsp], rax
$LN19@test_perli:
	cmp	QWORD PTR x$21[rsp], 64			; 00000040H
	jae	$LN18@test_perli

; 160  : 		{
; 161  : 			ImageData[(x + y * Size) * 3 + 0] = glm::byte(glm::perlin(glm::vec4(x / 64.f, y / 64.f, 0.5f, 0.5f), glm::vec4(2.0f)) * 128.f + 127.f);

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T43[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv310[rsp], rax
	mov	rcx, QWORD PTR y$20[rsp]
	test	rcx, rcx
	jl	SHORT $LN35@test_perli
	cvtsi2ss xmm0, rcx
	jmp	SHORT $LN36@test_perli
$LN35@test_perli:
	mov	rdx, rcx
	shr	rdx, 1
	and	rcx, 1
	or	rdx, rcx
	cvtsi2ss xmm1, rdx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN36@test_perli:
	divss	xmm0, DWORD PTR __real@42800000
	mov	rcx, QWORD PTR x$21[rsp]
	test	rcx, rcx
	jl	SHORT $LN33@test_perli
	cvtsi2ss xmm1, rcx
	jmp	SHORT $LN34@test_perli
$LN33@test_perli:
	mov	rdx, rcx
	shr	rdx, 1
	and	rcx, 1
	or	rdx, rcx
	cvtsi2ss xmm2, rdx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN34@test_perli:
	divss	xmm1, DWORD PTR __real@42800000
	movss	xmm2, DWORD PTR __real@3f000000
	movss	DWORD PTR [rsp+32], xmm2
	movss	xmm3, DWORD PTR __real@3f000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T44[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv310[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::perlin<float,0>
	mulss	xmm0, DWORD PTR __real@43000000
	addss	xmm0, DWORD PTR __real@42fe0000
	cvttss2si eax, xmm0
	mov	BYTE PTR tv571[rsp], al
	imul	rcx, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$21[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	ecx, BYTE PTR tv571[rsp]
	mov	BYTE PTR [rax], cl

; 162  : 			ImageData[(x + y * Size) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$21[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv367[rsp], rax
	imul	rcx, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$21[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	inc	rcx
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv367[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 163  : 			ImageData[(x + y * Size) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$21[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv380[rsp], rax
	imul	rcx, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$21[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	add	rcx, 2
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv380[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 164  : 		}

	jmp	$LN17@test_perli
$LN18@test_perli:
	jmp	$LN14@test_perli
$LN15@test_perli:

; 165  : 
; 166  : 		gli::texture2D Texture(1);

	mov	QWORD PTR $T45[rsp], 1
	lea	rdx, QWORD PTR $T45[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??0texture2D@gli@@QEAA@AEB_K@Z		; gli::texture2D::texture2D
	npad	1

; 167  : 		Texture[0] = gli::image2D(glm::uvec2(Size), gli::RGB8U);

	mov	DWORD PTR $T48[rsp], 3
	mov	QWORD PTR $T46[rsp], 0
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T49[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	lea	r8, QWORD PTR $T48[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T47[rsp]
	call	??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z ; gli::image2D::image2D
	mov	QWORD PTR tv386[rsp], rax
	mov	rax, QWORD PTR tv386[rsp]
	mov	QWORD PTR tv435[rsp], rax
	lea	rdx, QWORD PTR $T46[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rdx, QWORD PTR tv435[rsp]
	mov	rcx, rax
	call	??4image2D@gli@@QEAAAEAV01@AEBV01@@Z
	npad	1
	lea	rcx, QWORD PTR $T47[rsp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D

; 168  : 		memcpy(Texture[0].data(), &ImageData[0], ImageData.size());

	mov	QWORD PTR $T50[rsp], 0
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	QWORD PTR tv405[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv408[rsp], rax
	lea	rdx, QWORD PTR $T50[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rcx, rax
	call	?data@image2D@gli@@QEAAPEAEXZ		; gli::image2D::data
	mov	rcx, QWORD PTR tv405[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR tv408[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	memcpy

; 169  : 		gli::saveDDS9(Texture, "texture_perlin_pedioric_4d_256.dds");

	lea	rdx, OFFSET FLAT:$SG80081
	lea	rcx, QWORD PTR $T23[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; gli::gtx::loader_dds9::saveDDS9
	npad	1
	lea	rcx, QWORD PTR $T23[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 170  : 	}

	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	npad	1
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >

; 171  : 
; 172  : 	return 0;

	xor	eax, eax

; 173  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_perlin_pedioric@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1152				; 00000480H
	pop	rdi
	ret	0
?test_perlin_pedioric@@YAHXZ ENDP			; test_perlin_pedioric
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$0@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR ImageData$9[rbp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$1@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Texture$12[rbp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$2@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$2
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T29[rbp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$2@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$3@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$3
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T13[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$3@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$4@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$4
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR ImageData$14[rbp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$4@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$5@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$5
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Texture$17[rbp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$5@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$6@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$6
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T38[rbp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$6@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$7@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$7
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T18[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$7@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$8@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$8
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR ImageData$19[rbp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$8@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$8
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$9@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$9
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Texture$22[rbp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$9@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$9
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$10@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$10
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T47[rbp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$10@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$10
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 596
$T27 = 608
$T28 = 616
$T29 = 624
$T30 = 672
$T31 = 676
$T32 = 688
$T33 = 696
$T34 = 700
$T35 = 712
$T36 = 728
$T37 = 736
$T38 = 744
$T39 = 792
$T40 = 796
$T41 = 808
$T42 = 816
$T43 = 820
$T44 = 836
$T45 = 856
$T46 = 864
$T47 = 872
$T48 = 920
$T49 = 924
$T50 = 936
tv83 = 944
tv395 = 952
tv138 = 960
tv151 = 968
tv157 = 976
tv425 = 984
tv176 = 992
tv179 = 1000
tv212 = 1008
tv166 = 1016
tv236 = 1024
tv249 = 1032
tv255 = 1040
tv430 = 1048
tv274 = 1056
tv277 = 1064
tv310 = 1072
tv571 = 1080
tv367 = 1088
tv380 = 1096
tv386 = 1104
tv435 = 1112
tv405 = 1120
tv408 = 1128
__$ArrayPad$ = 1136
?dtor$11@?0??test_perlin_pedioric@@YAHXZ@4HA PROC	; `test_perlin_pedioric'::`1'::dtor$11
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T23[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$11@?0??test_perlin_pedioric@@YAHXZ@4HA ENDP	; `test_perlin_pedioric'::`1'::dtor$11
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\noise.inl
;	COMDAT ??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
Pi0$ = 72
Pi1$ = 120
Pf0$ = 168
Pf1$ = 216
ix$ = 264
iy$ = 312
iz0$ = 360
iz1$ = 408
iw0$ = 456
iw1$ = 504
ixy$ = 552
ixy0$ = 600
ixy1$ = 648
ixy00$ = 696
ixy01$ = 744
ixy10$ = 792
ixy11$ = 840
gx00$ = 888
gy00$ = 936
gz00$ = 984
gw00$ = 1032
sw00$ = 1080
gx01$ = 1128
gy01$ = 1176
gz01$ = 1224
gw01$ = 1272
sw01$ = 1320
gx10$ = 1368
gy10$ = 1416
gz10$ = 1464
gw10$ = 1512
sw10$ = 1560
gx11$ = 1608
gy11$ = 1656
gz11$ = 1704
gw11$ = 1752
sw11$ = 1800
g0000$ = 1848
g1000$ = 1896
g0100$ = 1944
g1100$ = 1992
g0010$ = 2040
g1010$ = 2088
g0110$ = 2136
g1110$ = 2184
g0001$ = 2232
g1001$ = 2280
g0101$ = 2328
g1101$ = 2376
g0011$ = 2424
g1011$ = 2472
g0111$ = 2520
g1111$ = 2568
norm00$ = 2616
norm01$ = 2664
norm10$ = 2712
norm11$ = 2760
n0000$ = 2788
n1000$ = 2792
n0100$ = 2796
n1100$ = 2800
n0010$ = 2804
n1010$ = 2808
n0110$ = 2812
n1110$ = 2816
n0001$ = 2820
n1001$ = 2824
n0101$ = 2828
n1101$ = 2832
n0011$ = 2836
n1011$ = 2840
n0111$ = 2844
n1111$ = 2848
fade_xyzw$ = 2872
n_0w$ = 2920
n_1w$ = 2968
n_zw$ = 3016
n_yzw$ = 3064
n_xyzw$ = 3076
$T65 = 3080
$T66 = 3096
$T67 = 3112
$T68 = 3128
$T69 = 3144
$T70 = 3160
$T71 = 3176
$T72 = 3192
$T73 = 3208
$T74 = 3224
$T75 = 3240
$T76 = 3256
$T77 = 3272
$T78 = 3288
$T79 = 3304
$T80 = 3320
$T81 = 3336
$T82 = 3352
$T83 = 3368
$T84 = 3384
$T85 = 3400
$T86 = 3416
$T87 = 3432
$T88 = 3448
$T89 = 3464
$T90 = 3480
$T91 = 3496
$T92 = 3512
$T93 = 3528
$T94 = 3544
$T95 = 3560
$T96 = 3576
$T97 = 3592
$T98 = 3608
$T99 = 3624
$T100 = 3640
$T101 = 3656
$T102 = 3672
$T103 = 3688
$T104 = 3704
$T105 = 3720
$T106 = 3736
$T107 = 3752
$T108 = 3768
$T109 = 3784
$T110 = 3800
$T111 = 3816
$T112 = 3832
$T113 = 3848
$T114 = 3864
$T115 = 3880
$T116 = 3896
$T117 = 3912
$T118 = 3928
$T119 = 3944
$T120 = 3960
$T121 = 3976
$T122 = 3992
$T123 = 4008
$T124 = 4024
$T125 = 4040
$T126 = 4056
$T127 = 4072
$T128 = 4088
$T129 = 4104
$T130 = 4120
$T131 = 4136
$T132 = 4152
$T133 = 4168
$T134 = 4184
$T135 = 4200
$T136 = 4216
$T137 = 4232
$T138 = 4248
$T139 = 4264
$T140 = 4280
$T141 = 4296
$T142 = 4312
$T143 = 4328
$T144 = 4344
$T145 = 4360
$T146 = 4376
$T147 = 4392
$T148 = 4408
$T149 = 4424
$T150 = 4440
$T151 = 4456
$T152 = 4472
$T153 = 4488
$T154 = 4504
$T155 = 4520
$T156 = 4536
$T157 = 4552
$T158 = 4568
$T159 = 4584
$T160 = 4600
$T161 = 4616
$T162 = 4632
$T163 = 4648
$T164 = 4664
$T165 = 4680
$T166 = 4696
$T167 = 4712
$T168 = 4728
$T169 = 4744
$T170 = 4760
$T171 = 4776
$T172 = 4792
$T173 = 4808
$T174 = 4824
$T175 = 4840
$T176 = 4856
$T177 = 4872
$T178 = 4888
$T179 = 4904
$T180 = 4920
$T181 = 4936
$T182 = 4952
$T183 = 4968
$T184 = 4976
tv257 = 4984
tv262 = 4992
tv267 = 5000
tv385 = 5008
tv390 = 5016
tv395 = 5024
tv513 = 5032
tv518 = 5040
tv523 = 5048
tv641 = 5056
tv646 = 5064
tv651 = 5072
tv908 = 5080
tv912 = 5084
tv916 = 5088
tv936 = 5092
tv940 = 5096
tv944 = 5100
tv996 = 5104
tv1000 = 5108
tv1004 = 5112
tv1024 = 5116
tv1028 = 5120
tv1032 = 5124
tv1250 = 5128
tv1266 = 5136
tv1286 = 5144
Position$ = 5184
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z PROC	; glm::perlin<float,0>, COMDAT

; 211  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 5160				; 00001428H
	call	__chkstk
	sub	rsp, rax
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 1274				; 000004faH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+5184]

; 212  : 		tvec4<T, P> Pi0 = floor(Position);	// Integer part for indexing

	mov	rdx, QWORD PTR Position$[rsp]
	lea	rcx, QWORD PTR Pi0$[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>

; 213  : 		tvec4<T, P> Pi1 = Pi0 + T(1);		// Integer part + 1

	movss	xmm2, DWORD PTR __real@3f800000
	lea	rdx, QWORD PTR Pi0$[rsp]
	lea	rcx, QWORD PTR Pi1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 214  : 		Pi0 = mod(Pi0, tvec4<T, P>(289));

	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T65[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Pi0$[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	call	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>
	lea	rcx, QWORD PTR Pi0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 215  : 		Pi1 = mod(Pi1, tvec4<T, P>(289));

	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T67[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Pi1$[rsp]
	lea	rcx, QWORD PTR $T68[rsp]
	call	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>
	lea	rcx, QWORD PTR Pi1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 216  : 		tvec4<T, P> Pf0 = fract(Position);	// Fractional part for interpolation

	mov	rdx, QWORD PTR Position$[rsp]
	lea	rcx, QWORD PTR Pf0$[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>

; 217  : 		tvec4<T, P> Pf1 = Pf0 - T(1);		// Fractional part - 1.0

	movss	xmm2, DWORD PTR __real@3f800000
	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR Pf1$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 218  : 		tvec4<T, P> ix(Pi0.x, Pi1.x, Pi0.x, Pi1.x);

	movss	xmm0, DWORD PTR Pi1$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pi0$[rsp]
	movss	xmm2, DWORD PTR Pi1$[rsp]
	movss	xmm1, DWORD PTR Pi0$[rsp]
	lea	rcx, QWORD PTR ix$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 219  : 		tvec4<T, P> iy(Pi0.y, Pi0.y, Pi1.y, Pi1.y);

	movss	xmm0, DWORD PTR Pi1$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pi1$[rsp+4]
	movss	xmm2, DWORD PTR Pi0$[rsp+4]
	movss	xmm1, DWORD PTR Pi0$[rsp+4]
	lea	rcx, QWORD PTR iy$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 220  : 		tvec4<T, P> iz0(Pi0.z);

	movss	xmm1, DWORD PTR Pi0$[rsp+8]
	lea	rcx, QWORD PTR iz0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 221  : 		tvec4<T, P> iz1(Pi1.z);

	movss	xmm1, DWORD PTR Pi1$[rsp+8]
	lea	rcx, QWORD PTR iz1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 222  : 		tvec4<T, P> iw0(Pi0.w);

	movss	xmm1, DWORD PTR Pi0$[rsp+12]
	lea	rcx, QWORD PTR iw0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 223  : 		tvec4<T, P> iw1(Pi1.w);

	movss	xmm1, DWORD PTR Pi1$[rsp+12]
	lea	rcx, QWORD PTR iw1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 224  : 
; 225  : 		tvec4<T, P> ixy = detail::permute(detail::permute(ix) + iy);

	lea	rdx, QWORD PTR ix$[rsp]
	lea	rcx, QWORD PTR $T69[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	lea	r8, QWORD PTR iy$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T70[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 226  : 		tvec4<T, P> ixy0 = detail::permute(ixy + iz0);

	lea	r8, QWORD PTR iz0$[rsp]
	lea	rdx, QWORD PTR ixy$[rsp]
	lea	rcx, QWORD PTR $T71[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy0$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 227  : 		tvec4<T, P> ixy1 = detail::permute(ixy + iz1);

	lea	r8, QWORD PTR iz1$[rsp]
	lea	rdx, QWORD PTR ixy$[rsp]
	lea	rcx, QWORD PTR $T72[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy1$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 228  : 		tvec4<T, P> ixy00 = detail::permute(ixy0 + iw0);

	lea	r8, QWORD PTR iw0$[rsp]
	lea	rdx, QWORD PTR ixy0$[rsp]
	lea	rcx, QWORD PTR $T73[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy00$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 229  : 		tvec4<T, P> ixy01 = detail::permute(ixy0 + iw1);

	lea	r8, QWORD PTR iw1$[rsp]
	lea	rdx, QWORD PTR ixy0$[rsp]
	lea	rcx, QWORD PTR $T74[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy01$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 230  : 		tvec4<T, P> ixy10 = detail::permute(ixy1 + iw0);

	lea	r8, QWORD PTR iw0$[rsp]
	lea	rdx, QWORD PTR ixy1$[rsp]
	lea	rcx, QWORD PTR $T75[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy10$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 231  : 		tvec4<T, P> ixy11 = detail::permute(ixy1 + iw1);

	lea	r8, QWORD PTR iw1$[rsp]
	lea	rdx, QWORD PTR ixy1$[rsp]
	lea	rcx, QWORD PTR $T76[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy11$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 232  : 
; 233  : 		tvec4<T, P> gx00 = ixy00 / T(7);

	movss	xmm2, DWORD PTR __real@40e00000
	lea	rdx, QWORD PTR ixy00$[rsp]
	lea	rcx, QWORD PTR gx00$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 234  : 		tvec4<T, P> gy00 = floor(gx00) / T(7);

	lea	rdx, QWORD PTR gx00$[rsp]
	lea	rcx, QWORD PTR $T77[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40e00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy00$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 235  : 		tvec4<T, P> gz00 = floor(gy00) / T(6);

	lea	rdx, QWORD PTR gy00$[rsp]
	lea	rcx, QWORD PTR $T78[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40c00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gz00$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 236  : 		gx00 = fract(gx00) - T(0.5);

	lea	rdx, QWORD PTR gx00$[rsp]
	lea	rcx, QWORD PTR $T79[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T80[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gx00$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 237  : 		gy00 = fract(gy00) - T(0.5);

	lea	rdx, QWORD PTR gy00$[rsp]
	lea	rcx, QWORD PTR $T81[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T82[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gy00$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 238  : 		gz00 = fract(gz00) - T(0.5);

	lea	rdx, QWORD PTR gz00$[rsp]
	lea	rcx, QWORD PTR $T83[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T84[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gz00$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 239  : 		tvec4<T, P> gw00 = tvec4<T, P>(0.75) - abs(gx00) - abs(gy00) - abs(gz00);

	lea	rdx, QWORD PTR gz00$[rsp]
	lea	rcx, QWORD PTR $T85[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv257[rsp], rax
	lea	rdx, QWORD PTR gy00$[rsp]
	lea	rcx, QWORD PTR $T86[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv262[rsp], rax
	lea	rdx, QWORD PTR gx00$[rsp]
	lea	rcx, QWORD PTR $T87[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv267[rsp], rax
	movss	xmm1, DWORD PTR __real@3f400000
	lea	rcx, QWORD PTR $T88[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv267[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T89[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv262[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T90[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv257[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gw00$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 240  : 		tvec4<T, P> sw00 = step(gw00, tvec4<T, P>(0.0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T91[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gw00$[rsp]
	lea	rcx, QWORD PTR sw00$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 241  : 		gx00 -= sw00 * (step(T(0), gx00) - T(0.5));

	lea	r8, QWORD PTR gx00$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T92[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T93[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw00$[rsp]
	lea	rcx, QWORD PTR $T94[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx00$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 242  : 		gy00 -= sw00 * (step(T(0), gy00) - T(0.5));

	lea	r8, QWORD PTR gy00$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T95[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T96[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw00$[rsp]
	lea	rcx, QWORD PTR $T97[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy00$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 243  : 
; 244  : 		tvec4<T, P> gx01 = ixy01 / T(7);

	movss	xmm2, DWORD PTR __real@40e00000
	lea	rdx, QWORD PTR ixy01$[rsp]
	lea	rcx, QWORD PTR gx01$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 245  : 		tvec4<T, P> gy01 = floor(gx01) / T(7);

	lea	rdx, QWORD PTR gx01$[rsp]
	lea	rcx, QWORD PTR $T98[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40e00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy01$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 246  : 		tvec4<T, P> gz01 = floor(gy01) / T(6);

	lea	rdx, QWORD PTR gy01$[rsp]
	lea	rcx, QWORD PTR $T99[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40c00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gz01$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 247  : 		gx01 = fract(gx01) - T(0.5);

	lea	rdx, QWORD PTR gx01$[rsp]
	lea	rcx, QWORD PTR $T100[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T101[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gx01$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 248  : 		gy01 = fract(gy01) - T(0.5);

	lea	rdx, QWORD PTR gy01$[rsp]
	lea	rcx, QWORD PTR $T102[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T103[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gy01$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 249  : 		gz01 = fract(gz01) - T(0.5);

	lea	rdx, QWORD PTR gz01$[rsp]
	lea	rcx, QWORD PTR $T104[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T105[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gz01$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 250  : 		tvec4<T, P> gw01 = tvec4<T, P>(0.75) - abs(gx01) - abs(gy01) - abs(gz01);

	lea	rdx, QWORD PTR gz01$[rsp]
	lea	rcx, QWORD PTR $T106[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv385[rsp], rax
	lea	rdx, QWORD PTR gy01$[rsp]
	lea	rcx, QWORD PTR $T107[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv390[rsp], rax
	lea	rdx, QWORD PTR gx01$[rsp]
	lea	rcx, QWORD PTR $T108[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv395[rsp], rax
	movss	xmm1, DWORD PTR __real@3f400000
	lea	rcx, QWORD PTR $T109[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv395[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T110[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv390[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T111[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv385[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gw01$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 251  : 		tvec4<T, P> sw01 = step(gw01, tvec4<T, P>(0.0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T112[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gw01$[rsp]
	lea	rcx, QWORD PTR sw01$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 252  : 		gx01 -= sw01 * (step(T(0), gx01) - T(0.5));

	lea	r8, QWORD PTR gx01$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T113[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T114[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw01$[rsp]
	lea	rcx, QWORD PTR $T115[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx01$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 253  : 		gy01 -= sw01 * (step(T(0), gy01) - T(0.5));

	lea	r8, QWORD PTR gy01$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T116[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T117[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw01$[rsp]
	lea	rcx, QWORD PTR $T118[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy01$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 254  : 
; 255  : 		tvec4<T, P> gx10 = ixy10 / T(7);

	movss	xmm2, DWORD PTR __real@40e00000
	lea	rdx, QWORD PTR ixy10$[rsp]
	lea	rcx, QWORD PTR gx10$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 256  : 		tvec4<T, P> gy10 = floor(gx10) / T(7);

	lea	rdx, QWORD PTR gx10$[rsp]
	lea	rcx, QWORD PTR $T119[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40e00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy10$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 257  : 		tvec4<T, P> gz10 = floor(gy10) / T(6);

	lea	rdx, QWORD PTR gy10$[rsp]
	lea	rcx, QWORD PTR $T120[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40c00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gz10$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 258  : 		gx10 = fract(gx10) - T(0.5);

	lea	rdx, QWORD PTR gx10$[rsp]
	lea	rcx, QWORD PTR $T121[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T122[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gx10$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 259  : 		gy10 = fract(gy10) - T(0.5);

	lea	rdx, QWORD PTR gy10$[rsp]
	lea	rcx, QWORD PTR $T123[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T124[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gy10$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 260  : 		gz10 = fract(gz10) - T(0.5);

	lea	rdx, QWORD PTR gz10$[rsp]
	lea	rcx, QWORD PTR $T125[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T126[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gz10$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 261  : 		tvec4<T, P> gw10 = tvec4<T, P>(0.75) - abs(gx10) - abs(gy10) - abs(gz10);

	lea	rdx, QWORD PTR gz10$[rsp]
	lea	rcx, QWORD PTR $T127[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv513[rsp], rax
	lea	rdx, QWORD PTR gy10$[rsp]
	lea	rcx, QWORD PTR $T128[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv518[rsp], rax
	lea	rdx, QWORD PTR gx10$[rsp]
	lea	rcx, QWORD PTR $T129[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv523[rsp], rax
	movss	xmm1, DWORD PTR __real@3f400000
	lea	rcx, QWORD PTR $T130[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv523[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T131[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv518[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T132[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv513[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gw10$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 262  : 		tvec4<T, P> sw10 = step(gw10, tvec4<T, P>(0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T133[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gw10$[rsp]
	lea	rcx, QWORD PTR sw10$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 263  : 		gx10 -= sw10 * (step(T(0), gx10) - T(0.5));

	lea	r8, QWORD PTR gx10$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T134[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T135[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw10$[rsp]
	lea	rcx, QWORD PTR $T136[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx10$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 264  : 		gy10 -= sw10 * (step(T(0), gy10) - T(0.5));

	lea	r8, QWORD PTR gy10$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T137[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T138[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw10$[rsp]
	lea	rcx, QWORD PTR $T139[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy10$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 265  : 
; 266  : 		tvec4<T, P> gx11 = ixy11 / T(7);

	movss	xmm2, DWORD PTR __real@40e00000
	lea	rdx, QWORD PTR ixy11$[rsp]
	lea	rcx, QWORD PTR gx11$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 267  : 		tvec4<T, P> gy11 = floor(gx11) / T(7);

	lea	rdx, QWORD PTR gx11$[rsp]
	lea	rcx, QWORD PTR $T140[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40e00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy11$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 268  : 		tvec4<T, P> gz11 = floor(gy11) / T(6);

	lea	rdx, QWORD PTR gy11$[rsp]
	lea	rcx, QWORD PTR $T141[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40c00000
	mov	rdx, rax
	lea	rcx, QWORD PTR gz11$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 269  : 		gx11 = fract(gx11) - T(0.5);

	lea	rdx, QWORD PTR gx11$[rsp]
	lea	rcx, QWORD PTR $T142[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T143[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gx11$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 270  : 		gy11 = fract(gy11) - T(0.5);

	lea	rdx, QWORD PTR gy11$[rsp]
	lea	rcx, QWORD PTR $T144[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T145[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gy11$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 271  : 		gz11 = fract(gz11) - T(0.5);

	lea	rdx, QWORD PTR gz11$[rsp]
	lea	rcx, QWORD PTR $T146[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T147[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gz11$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 272  : 		tvec4<T, P> gw11 = tvec4<T, P>(0.75) - abs(gx11) - abs(gy11) - abs(gz11);

	lea	rdx, QWORD PTR gz11$[rsp]
	lea	rcx, QWORD PTR $T148[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv641[rsp], rax
	lea	rdx, QWORD PTR gy11$[rsp]
	lea	rcx, QWORD PTR $T149[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv646[rsp], rax
	lea	rdx, QWORD PTR gx11$[rsp]
	lea	rcx, QWORD PTR $T150[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv651[rsp], rax
	movss	xmm1, DWORD PTR __real@3f400000
	lea	rcx, QWORD PTR $T151[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv651[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T152[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv646[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T153[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv641[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gw11$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 273  : 		tvec4<T, P> sw11 = step(gw11, tvec4<T, P>(0.0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T154[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gw11$[rsp]
	lea	rcx, QWORD PTR sw11$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 274  : 		gx11 -= sw11 * (step(T(0), gx11) - T(0.5));

	lea	r8, QWORD PTR gx11$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T155[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T156[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw11$[rsp]
	lea	rcx, QWORD PTR $T157[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx11$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 275  : 		gy11 -= sw11 * (step(T(0), gy11) - T(0.5));

	lea	r8, QWORD PTR gy11$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T158[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T159[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sw11$[rsp]
	lea	rcx, QWORD PTR $T160[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy11$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 276  : 
; 277  : 		tvec4<T, P> g0000(gx00.x, gy00.x, gz00.x, gw00.x);

	movss	xmm0, DWORD PTR gw00$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz00$[rsp]
	movss	xmm2, DWORD PTR gy00$[rsp]
	movss	xmm1, DWORD PTR gx00$[rsp]
	lea	rcx, QWORD PTR g0000$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 278  : 		tvec4<T, P> g1000(gx00.y, gy00.y, gz00.y, gw00.y);

	movss	xmm0, DWORD PTR gw00$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz00$[rsp+4]
	movss	xmm2, DWORD PTR gy00$[rsp+4]
	movss	xmm1, DWORD PTR gx00$[rsp+4]
	lea	rcx, QWORD PTR g1000$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 279  : 		tvec4<T, P> g0100(gx00.z, gy00.z, gz00.z, gw00.z);

	movss	xmm0, DWORD PTR gw00$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz00$[rsp+8]
	movss	xmm2, DWORD PTR gy00$[rsp+8]
	movss	xmm1, DWORD PTR gx00$[rsp+8]
	lea	rcx, QWORD PTR g0100$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 280  : 		tvec4<T, P> g1100(gx00.w, gy00.w, gz00.w, gw00.w);

	movss	xmm0, DWORD PTR gw00$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz00$[rsp+12]
	movss	xmm2, DWORD PTR gy00$[rsp+12]
	movss	xmm1, DWORD PTR gx00$[rsp+12]
	lea	rcx, QWORD PTR g1100$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 281  : 		tvec4<T, P> g0010(gx10.x, gy10.x, gz10.x, gw10.x);

	movss	xmm0, DWORD PTR gw10$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz10$[rsp]
	movss	xmm2, DWORD PTR gy10$[rsp]
	movss	xmm1, DWORD PTR gx10$[rsp]
	lea	rcx, QWORD PTR g0010$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 282  : 		tvec4<T, P> g1010(gx10.y, gy10.y, gz10.y, gw10.y);

	movss	xmm0, DWORD PTR gw10$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz10$[rsp+4]
	movss	xmm2, DWORD PTR gy10$[rsp+4]
	movss	xmm1, DWORD PTR gx10$[rsp+4]
	lea	rcx, QWORD PTR g1010$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 283  : 		tvec4<T, P> g0110(gx10.z, gy10.z, gz10.z, gw10.z);

	movss	xmm0, DWORD PTR gw10$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz10$[rsp+8]
	movss	xmm2, DWORD PTR gy10$[rsp+8]
	movss	xmm1, DWORD PTR gx10$[rsp+8]
	lea	rcx, QWORD PTR g0110$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 284  : 		tvec4<T, P> g1110(gx10.w, gy10.w, gz10.w, gw10.w);

	movss	xmm0, DWORD PTR gw10$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz10$[rsp+12]
	movss	xmm2, DWORD PTR gy10$[rsp+12]
	movss	xmm1, DWORD PTR gx10$[rsp+12]
	lea	rcx, QWORD PTR g1110$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 285  : 		tvec4<T, P> g0001(gx01.x, gy01.x, gz01.x, gw01.x);

	movss	xmm0, DWORD PTR gw01$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz01$[rsp]
	movss	xmm2, DWORD PTR gy01$[rsp]
	movss	xmm1, DWORD PTR gx01$[rsp]
	lea	rcx, QWORD PTR g0001$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 286  : 		tvec4<T, P> g1001(gx01.y, gy01.y, gz01.y, gw01.y);

	movss	xmm0, DWORD PTR gw01$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz01$[rsp+4]
	movss	xmm2, DWORD PTR gy01$[rsp+4]
	movss	xmm1, DWORD PTR gx01$[rsp+4]
	lea	rcx, QWORD PTR g1001$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 287  : 		tvec4<T, P> g0101(gx01.z, gy01.z, gz01.z, gw01.z);

	movss	xmm0, DWORD PTR gw01$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz01$[rsp+8]
	movss	xmm2, DWORD PTR gy01$[rsp+8]
	movss	xmm1, DWORD PTR gx01$[rsp+8]
	lea	rcx, QWORD PTR g0101$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 288  : 		tvec4<T, P> g1101(gx01.w, gy01.w, gz01.w, gw01.w);

	movss	xmm0, DWORD PTR gw01$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz01$[rsp+12]
	movss	xmm2, DWORD PTR gy01$[rsp+12]
	movss	xmm1, DWORD PTR gx01$[rsp+12]
	lea	rcx, QWORD PTR g1101$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 289  : 		tvec4<T, P> g0011(gx11.x, gy11.x, gz11.x, gw11.x);

	movss	xmm0, DWORD PTR gw11$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz11$[rsp]
	movss	xmm2, DWORD PTR gy11$[rsp]
	movss	xmm1, DWORD PTR gx11$[rsp]
	lea	rcx, QWORD PTR g0011$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 290  : 		tvec4<T, P> g1011(gx11.y, gy11.y, gz11.y, gw11.y);

	movss	xmm0, DWORD PTR gw11$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz11$[rsp+4]
	movss	xmm2, DWORD PTR gy11$[rsp+4]
	movss	xmm1, DWORD PTR gx11$[rsp+4]
	lea	rcx, QWORD PTR g1011$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 291  : 		tvec4<T, P> g0111(gx11.z, gy11.z, gz11.z, gw11.z);

	movss	xmm0, DWORD PTR gw11$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz11$[rsp+8]
	movss	xmm2, DWORD PTR gy11$[rsp+8]
	movss	xmm1, DWORD PTR gx11$[rsp+8]
	lea	rcx, QWORD PTR g0111$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 292  : 		tvec4<T, P> g1111(gx11.w, gy11.w, gz11.w, gw11.w);

	movss	xmm0, DWORD PTR gw11$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR gz11$[rsp+12]
	movss	xmm2, DWORD PTR gy11$[rsp+12]
	movss	xmm1, DWORD PTR gx11$[rsp+12]
	lea	rcx, QWORD PTR g1111$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 293  : 
; 294  : 		tvec4<T, P> norm00 = detail::taylorInvSqrt(tvec4<T, P>(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));

	lea	rdx, QWORD PTR g1100$[rsp]
	lea	rcx, QWORD PTR g1100$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv908[rsp], xmm0
	lea	rdx, QWORD PTR g1000$[rsp]
	lea	rcx, QWORD PTR g1000$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv912[rsp], xmm0
	lea	rdx, QWORD PTR g0100$[rsp]
	lea	rcx, QWORD PTR g0100$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv916[rsp], xmm0
	lea	rdx, QWORD PTR g0000$[rsp]
	lea	rcx, QWORD PTR g0000$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv908[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv912[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv916[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T161[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm00$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 295  : 		g0000 *= norm00.x;

	movss	xmm1, DWORD PTR norm00$[rsp]
	lea	rcx, QWORD PTR g0000$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 296  : 		g0100 *= norm00.y;

	movss	xmm1, DWORD PTR norm00$[rsp+4]
	lea	rcx, QWORD PTR g0100$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 297  : 		g1000 *= norm00.z;

	movss	xmm1, DWORD PTR norm00$[rsp+8]
	lea	rcx, QWORD PTR g1000$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 298  : 		g1100 *= norm00.w;

	movss	xmm1, DWORD PTR norm00$[rsp+12]
	lea	rcx, QWORD PTR g1100$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 299  : 
; 300  : 		tvec4<T, P> norm01 = detail::taylorInvSqrt(tvec4<T, P>(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));

	lea	rdx, QWORD PTR g1101$[rsp]
	lea	rcx, QWORD PTR g1101$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv936[rsp], xmm0
	lea	rdx, QWORD PTR g1001$[rsp]
	lea	rcx, QWORD PTR g1001$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv940[rsp], xmm0
	lea	rdx, QWORD PTR g0101$[rsp]
	lea	rcx, QWORD PTR g0101$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv944[rsp], xmm0
	lea	rdx, QWORD PTR g0001$[rsp]
	lea	rcx, QWORD PTR g0001$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv936[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv940[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv944[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T162[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm01$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 301  : 		g0001 *= norm01.x;

	movss	xmm1, DWORD PTR norm01$[rsp]
	lea	rcx, QWORD PTR g0001$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 302  : 		g0101 *= norm01.y;

	movss	xmm1, DWORD PTR norm01$[rsp+4]
	lea	rcx, QWORD PTR g0101$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 303  : 		g1001 *= norm01.z;

	movss	xmm1, DWORD PTR norm01$[rsp+8]
	lea	rcx, QWORD PTR g1001$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 304  : 		g1101 *= norm01.w;

	movss	xmm1, DWORD PTR norm01$[rsp+12]
	lea	rcx, QWORD PTR g1101$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 305  : 
; 306  : 		tvec4<T, P> norm10 = detail::taylorInvSqrt(tvec4<T, P>(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));

	lea	rdx, QWORD PTR g1110$[rsp]
	lea	rcx, QWORD PTR g1110$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv996[rsp], xmm0
	lea	rdx, QWORD PTR g1010$[rsp]
	lea	rcx, QWORD PTR g1010$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv1000[rsp], xmm0
	lea	rdx, QWORD PTR g0110$[rsp]
	lea	rcx, QWORD PTR g0110$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv1004[rsp], xmm0
	lea	rdx, QWORD PTR g0010$[rsp]
	lea	rcx, QWORD PTR g0010$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv996[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv1000[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv1004[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T163[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm10$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 307  : 		g0010 *= norm10.x;

	movss	xmm1, DWORD PTR norm10$[rsp]
	lea	rcx, QWORD PTR g0010$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 308  : 		g0110 *= norm10.y;

	movss	xmm1, DWORD PTR norm10$[rsp+4]
	lea	rcx, QWORD PTR g0110$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 309  : 		g1010 *= norm10.z;

	movss	xmm1, DWORD PTR norm10$[rsp+8]
	lea	rcx, QWORD PTR g1010$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 310  : 		g1110 *= norm10.w;

	movss	xmm1, DWORD PTR norm10$[rsp+12]
	lea	rcx, QWORD PTR g1110$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 311  : 
; 312  : 		tvec4<T, P> norm11 = detail::taylorInvSqrt(tvec4<T, P>(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));

	lea	rdx, QWORD PTR g1111$[rsp]
	lea	rcx, QWORD PTR g1111$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv1024[rsp], xmm0
	lea	rdx, QWORD PTR g1011$[rsp]
	lea	rcx, QWORD PTR g1011$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv1028[rsp], xmm0
	lea	rdx, QWORD PTR g0111$[rsp]
	lea	rcx, QWORD PTR g0111$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv1032[rsp], xmm0
	lea	rdx, QWORD PTR g0011$[rsp]
	lea	rcx, QWORD PTR g0011$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv1024[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv1028[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv1032[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T164[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm11$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 313  : 		g0011 *= norm11.x;

	movss	xmm1, DWORD PTR norm11$[rsp]
	lea	rcx, QWORD PTR g0011$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 314  : 		g0111 *= norm11.y;

	movss	xmm1, DWORD PTR norm11$[rsp+4]
	lea	rcx, QWORD PTR g0111$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 315  : 		g1011 *= norm11.z;

	movss	xmm1, DWORD PTR norm11$[rsp+8]
	lea	rcx, QWORD PTR g1011$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 316  : 		g1111 *= norm11.w;

	movss	xmm1, DWORD PTR norm11$[rsp+12]
	lea	rcx, QWORD PTR g1111$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 317  : 
; 318  : 		T n0000 = dot(g0000, Pf0);

	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR g0000$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0000$[rsp], xmm0

; 319  : 		T n1000 = dot(g1000, tvec4<T, P>(Pf1.x, Pf0.y, Pf0.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T165[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1000$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1000$[rsp], xmm0

; 320  : 		T n0100 = dot(g0100, tvec4<T, P>(Pf0.x, Pf1.y, Pf0.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T166[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0100$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0100$[rsp], xmm0

; 321  : 		T n1100 = dot(g1100, tvec4<T, P>(Pf1.x, Pf1.y, Pf0.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T167[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1100$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1100$[rsp], xmm0

; 322  : 		T n0010 = dot(g0010, tvec4<T, P>(Pf0.x, Pf0.y, Pf1.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T168[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0010$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0010$[rsp], xmm0

; 323  : 		T n1010 = dot(g1010, tvec4<T, P>(Pf1.x, Pf0.y, Pf1.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T169[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1010$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1010$[rsp], xmm0

; 324  : 		T n0110 = dot(g0110, tvec4<T, P>(Pf0.x, Pf1.y, Pf1.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T170[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0110$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0110$[rsp], xmm0

; 325  : 		T n1110 = dot(g1110, tvec4<T, P>(Pf1.x, Pf1.y, Pf1.z, Pf0.w));

	movss	xmm0, DWORD PTR Pf0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T171[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1110$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1110$[rsp], xmm0

; 326  : 		T n0001 = dot(g0001, tvec4<T, P>(Pf0.x, Pf0.y, Pf0.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T172[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0001$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0001$[rsp], xmm0

; 327  : 		T n1001 = dot(g1001, tvec4<T, P>(Pf1.x, Pf0.y, Pf0.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T173[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1001$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1001$[rsp], xmm0

; 328  : 		T n0101 = dot(g0101, tvec4<T, P>(Pf0.x, Pf1.y, Pf0.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T174[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0101$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0101$[rsp], xmm0

; 329  : 		T n1101 = dot(g1101, tvec4<T, P>(Pf1.x, Pf1.y, Pf0.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T175[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1101$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1101$[rsp], xmm0

; 330  : 		T n0011 = dot(g0011, tvec4<T, P>(Pf0.x, Pf0.y, Pf1.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T176[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0011$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0011$[rsp], xmm0

; 331  : 		T n1011 = dot(g1011, tvec4<T, P>(Pf1.x, Pf0.y, Pf1.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T177[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g1011$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1011$[rsp], xmm0

; 332  : 		T n0111 = dot(g0111, tvec4<T, P>(Pf0.x, Pf1.y, Pf1.z, Pf1.w));

	movss	xmm0, DWORD PTR Pf1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T178[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g0111$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n0111$[rsp], xmm0

; 333  : 		T n1111 = dot(g1111, Pf1);

	lea	rdx, QWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR g1111$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR n1111$[rsp], xmm0

; 334  : 
; 335  : 		tvec4<T, P> fade_xyzw = detail::fade(Pf0);

	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR fade_xyzw$[rsp]
	call	??$fade@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::fade<float,0>

; 336  : 		tvec4<T, P> n_0w = mix(tvec4<T, P>(n0000, n1000, n0100, n1100), tvec4<T, P>(n0001, n1001, n0101, n1101), fade_xyzw.w);

	movss	xmm0, DWORD PTR n1101$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n0101$[rsp]
	movss	xmm2, DWORD PTR n1001$[rsp]
	movss	xmm1, DWORD PTR n0001$[rsp]
	lea	rcx, QWORD PTR $T179[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv1250[rsp], rax
	movss	xmm0, DWORD PTR n1100$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n0100$[rsp]
	movss	xmm2, DWORD PTR n1000$[rsp]
	movss	xmm1, DWORD PTR n0000$[rsp]
	lea	rcx, QWORD PTR $T180[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm3, DWORD PTR fade_xyzw$[rsp+12]
	mov	rcx, QWORD PTR tv1250[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_0w$[rsp]
	call	??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec4>

; 337  : 		tvec4<T, P> n_1w = mix(tvec4<T, P>(n0010, n1010, n0110, n1110), tvec4<T, P>(n0011, n1011, n0111, n1111), fade_xyzw.w);

	movss	xmm0, DWORD PTR n1111$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n0111$[rsp]
	movss	xmm2, DWORD PTR n1011$[rsp]
	movss	xmm1, DWORD PTR n0011$[rsp]
	lea	rcx, QWORD PTR $T181[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv1266[rsp], rax
	movss	xmm0, DWORD PTR n1110$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n0110$[rsp]
	movss	xmm2, DWORD PTR n1010$[rsp]
	movss	xmm1, DWORD PTR n0010$[rsp]
	lea	rcx, QWORD PTR $T182[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm3, DWORD PTR fade_xyzw$[rsp+12]
	mov	rcx, QWORD PTR tv1266[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_1w$[rsp]
	call	??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec4>

; 338  : 		tvec4<T, P> n_zw = mix(n_0w, n_1w, fade_xyzw.z);

	movss	xmm3, DWORD PTR fade_xyzw$[rsp+8]
	lea	r8, QWORD PTR n_1w$[rsp]
	lea	rdx, QWORD PTR n_0w$[rsp]
	lea	rcx, QWORD PTR n_zw$[rsp]
	call	??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec4>

; 339  : 		tvec2<T, P> n_yzw = mix(tvec2<T, P>(n_zw.x, n_zw.y), tvec2<T, P>(n_zw.z, n_zw.w), fade_xyzw.y);

	movss	xmm2, DWORD PTR n_zw$[rsp+12]
	movss	xmm1, DWORD PTR n_zw$[rsp+8]
	lea	rcx, QWORD PTR $T183[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv1286[rsp], rax
	movss	xmm2, DWORD PTR n_zw$[rsp+4]
	movss	xmm1, DWORD PTR n_zw$[rsp]
	lea	rcx, QWORD PTR $T184[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm3, DWORD PTR fade_xyzw$[rsp+4]
	mov	rcx, QWORD PTR tv1286[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_yzw$[rsp]
	call	??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec2>

; 340  : 		T n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);

	movss	xmm2, DWORD PTR fade_xyzw$[rsp]
	movss	xmm1, DWORD PTR n_yzw$[rsp+4]
	movss	xmm0, DWORD PTR n_yzw$[rsp]
	call	??$mix@MM@glm@@YAMMMM@Z			; glm::mix<float,float>
	movss	DWORD PTR n_xyzw$[rsp], xmm0

; 341  : 		return T(2.2) * n_xyzw;

	movss	xmm0, DWORD PTR __real@400ccccd
	mulss	xmm0, DWORD PTR n_xyzw$[rsp]

; 342  : 	}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 5160				; 00001428H
	pop	rdi
	pop	rsi
	ret	0
??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ENDP	; glm::perlin<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\noise.inl
;	COMDAT ??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
Pi0$ = 72
Pi1$ = 120
Pf0$ = 168
Pf1$ = 216
ix$ = 264
iy$ = 312
iz0$ = 360
iz1$ = 408
ixy$ = 456
ixy0$ = 504
ixy1$ = 552
gx0$ = 600
gy0$ = 648
gz0$ = 696
sz0$ = 744
gx1$ = 792
gy1$ = 840
gz1$ = 888
sz1$ = 936
g000$ = 984
g100$ = 1032
g010$ = 1080
g110$ = 1128
g001$ = 1176
g101$ = 1224
g011$ = 1272
g111$ = 1320
norm0$ = 1368
norm1$ = 1416
n000$ = 1444
n100$ = 1448
n010$ = 1452
n110$ = 1456
n001$ = 1460
n101$ = 1464
n011$ = 1468
n111$ = 1472
fade_xyz$ = 1496
n_z$ = 1544
n_yz$ = 1592
n_xyz$ = 1604
$T35 = 1608
$T36 = 1620
$T37 = 1632
$T38 = 1640
$T39 = 1648
$T40 = 1664
$T41 = 1680
$T42 = 1696
$T43 = 1712
$T44 = 1728
$T45 = 1744
$T46 = 1760
$T47 = 1776
$T48 = 1792
$T49 = 1808
$T50 = 1824
$T51 = 1840
$T52 = 1856
$T53 = 1872
$T54 = 1888
$T55 = 1904
$T56 = 1920
$T57 = 1936
$T58 = 1952
$T59 = 1968
$T60 = 1984
$T61 = 2000
$T62 = 2016
$T63 = 2032
$T64 = 2048
$T65 = 2064
$T66 = 2080
$T67 = 2096
$T68 = 2112
$T69 = 2128
$T70 = 2144
$T71 = 2160
$T72 = 2176
$T73 = 2192
$T74 = 2208
$T75 = 2224
$T76 = 2236
$T77 = 2248
$T78 = 2260
$T79 = 2272
$T80 = 2284
$T81 = 2296
$T82 = 2312
$T83 = 2328
$T84 = 2336
tv90 = 2344
tv174 = 2352
tv179 = 2360
tv276 = 2368
tv281 = 2376
tv424 = 2384
tv428 = 2388
tv432 = 2392
tv452 = 2396
tv456 = 2400
tv460 = 2404
tv568 = 2408
tv616 = 2416
Position$ = 2464
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z PROC	; glm::perlin<float,0>, COMDAT

; 67   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 2440				; 00000988H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 594				; 00000252H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2464]

; 68   : 		tvec3<T, P> Pi0 = floor(Position); // Integer part for indexing

	mov	rdx, QWORD PTR Position$[rsp]
	lea	rcx, QWORD PTR Pi0$[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>

; 69   : 		tvec3<T, P> Pi1 = Pi0 + T(1); // Integer part + 1

	movss	xmm2, DWORD PTR __real@3f800000
	lea	rdx, QWORD PTR Pi0$[rsp]
	lea	rcx, QWORD PTR Pi1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 70   : 		Pi0 = detail::mod289(Pi0);

	lea	rdx, QWORD PTR Pi0$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$mod289@U?$tvec3@M$0A@@glm@@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ; glm::detail::mod289<glm::tvec3<float,0> >
	lea	rcx, QWORD PTR Pi0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 71   : 		Pi1 = detail::mod289(Pi1);

	lea	rdx, QWORD PTR Pi1$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$mod289@U?$tvec3@M$0A@@glm@@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ; glm::detail::mod289<glm::tvec3<float,0> >
	lea	rcx, QWORD PTR Pi1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 72   : 		tvec3<T, P> Pf0 = fract(Position); // Fractional part for interpolation

	mov	rdx, QWORD PTR Position$[rsp]
	lea	rcx, QWORD PTR Pf0$[rsp]
	call	??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec3>

; 73   : 		tvec3<T, P> Pf1 = Pf0 - T(1); // Fractional part - 1.0

	movss	xmm2, DWORD PTR __real@3f800000
	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR Pf1$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 74   : 		tvec4<T, P> ix(Pi0.x, Pi1.x, Pi0.x, Pi1.x);

	movss	xmm0, DWORD PTR Pi1$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pi0$[rsp]
	movss	xmm2, DWORD PTR Pi1$[rsp]
	movss	xmm1, DWORD PTR Pi0$[rsp]
	lea	rcx, QWORD PTR ix$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 75   : 		tvec4<T, P> iy = tvec4<T, P>(tvec2<T, P>(Pi0.y), tvec2<T, P>(Pi1.y));

	movss	xmm1, DWORD PTR Pi1$[rsp+4]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv90[rsp], rax
	movss	xmm1, DWORD PTR Pi0$[rsp+4]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR iy$[rsp]
	call	??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>

; 76   : 		tvec4<T, P> iz0(Pi0.z);

	movss	xmm1, DWORD PTR Pi0$[rsp+8]
	lea	rcx, QWORD PTR iz0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 77   : 		tvec4<T, P> iz1(Pi1.z);

	movss	xmm1, DWORD PTR Pi1$[rsp+8]
	lea	rcx, QWORD PTR iz1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 78   : 
; 79   : 		tvec4<T, P> ixy = detail::permute(detail::permute(ix) + iy);

	lea	rdx, QWORD PTR ix$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	lea	r8, QWORD PTR iy$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 80   : 		tvec4<T, P> ixy0 = detail::permute(ixy + iz0);

	lea	r8, QWORD PTR iz0$[rsp]
	lea	rdx, QWORD PTR ixy$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy0$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 81   : 		tvec4<T, P> ixy1 = detail::permute(ixy + iz1);

	lea	r8, QWORD PTR iz1$[rsp]
	lea	rdx, QWORD PTR ixy$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ixy1$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 82   : 
; 83   : 		tvec4<T, P> gx0 = ixy0 * T(1.0 / 7.0);

	movss	xmm2, DWORD PTR __real@3e124925
	lea	rdx, QWORD PTR ixy0$[rsp]
	lea	rcx, QWORD PTR gx0$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>

; 84   : 		tvec4<T, P> gy0 = fract(floor(gx0) * T(1.0 / 7.0)) - T(0.5);

	lea	rdx, QWORD PTR gx0$[rsp]
	lea	rcx, QWORD PTR $T43[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3e124925
	mov	rdx, rax
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T45[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy0$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 85   : 		gx0 = fract(gx0);

	lea	rdx, QWORD PTR gx0$[rsp]
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	lea	rcx, QWORD PTR gx0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 86   : 		tvec4<T, P> gz0 = tvec4<T, P>(0.5) - abs(gx0) - abs(gy0);

	lea	rdx, QWORD PTR gy0$[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv174[rsp], rax
	lea	rdx, QWORD PTR gx0$[rsp]
	lea	rcx, QWORD PTR $T48[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv179[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T49[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv179[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T50[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv174[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gz0$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 87   : 		tvec4<T, P> sz0 = step(gz0, tvec4<T, P>(0.0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T51[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gz0$[rsp]
	lea	rcx, QWORD PTR sz0$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 88   : 		gx0 -= sz0 * (step(T(0), gx0) - T(0.5));

	lea	r8, QWORD PTR gx0$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T52[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T53[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sz0$[rsp]
	lea	rcx, QWORD PTR $T54[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx0$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 89   : 		gy0 -= sz0 * (step(T(0), gy0) - T(0.5));

	lea	r8, QWORD PTR gy0$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T55[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T56[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sz0$[rsp]
	lea	rcx, QWORD PTR $T57[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy0$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 90   : 
; 91   : 		tvec4<T, P> gx1 = ixy1 * T(1.0 / 7.0);

	movss	xmm2, DWORD PTR __real@3e124925
	lea	rdx, QWORD PTR ixy1$[rsp]
	lea	rcx, QWORD PTR gx1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>

; 92   : 		tvec4<T, P> gy1 = fract(floor(gx1) * T(1.0 / 7.0)) - T(0.5);

	lea	rdx, QWORD PTR gx1$[rsp]
	lea	rcx, QWORD PTR $T58[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3e124925
	mov	rdx, rax
	lea	rcx, QWORD PTR $T59[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T60[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy1$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 93   : 		gx1 = fract(gx1);

	lea	rdx, QWORD PTR gx1$[rsp]
	lea	rcx, QWORD PTR $T61[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	lea	rcx, QWORD PTR gx1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 94   : 		tvec4<T, P> gz1 = tvec4<T, P>(0.5) - abs(gx1) - abs(gy1);

	lea	rdx, QWORD PTR gy1$[rsp]
	lea	rcx, QWORD PTR $T62[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv276[rsp], rax
	lea	rdx, QWORD PTR gx1$[rsp]
	lea	rcx, QWORD PTR $T63[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv281[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T64[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv281[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T65[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv276[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR gz1$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 95   : 		tvec4<T, P> sz1 = step(gz1, tvec4<T, P>(0.0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T66[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR gz1$[rsp]
	lea	rcx, QWORD PTR sz1$[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 96   : 		gx1 -= sz1 * (step(T(0), gx1) - T(0.5));

	lea	r8, QWORD PTR gx1$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T67[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T68[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sz1$[rsp]
	lea	rcx, QWORD PTR $T69[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gx1$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 97   : 		gy1 -= sz1 * (step(T(0), gy1) - T(0.5));

	lea	r8, QWORD PTR gy1$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T70[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T71[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR sz1$[rsp]
	lea	rcx, QWORD PTR $T72[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR gy1$[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>

; 98   : 
; 99   : 		tvec3<T, P> g000(gx0.x, gy0.x, gz0.x);

	movss	xmm3, DWORD PTR gz0$[rsp]
	movss	xmm2, DWORD PTR gy0$[rsp]
	movss	xmm1, DWORD PTR gx0$[rsp]
	lea	rcx, QWORD PTR g000$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 100  : 		tvec3<T, P> g100(gx0.y, gy0.y, gz0.y);

	movss	xmm3, DWORD PTR gz0$[rsp+4]
	movss	xmm2, DWORD PTR gy0$[rsp+4]
	movss	xmm1, DWORD PTR gx0$[rsp+4]
	lea	rcx, QWORD PTR g100$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 101  : 		tvec3<T, P> g010(gx0.z, gy0.z, gz0.z);

	movss	xmm3, DWORD PTR gz0$[rsp+8]
	movss	xmm2, DWORD PTR gy0$[rsp+8]
	movss	xmm1, DWORD PTR gx0$[rsp+8]
	lea	rcx, QWORD PTR g010$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 102  : 		tvec3<T, P> g110(gx0.w, gy0.w, gz0.w);

	movss	xmm3, DWORD PTR gz0$[rsp+12]
	movss	xmm2, DWORD PTR gy0$[rsp+12]
	movss	xmm1, DWORD PTR gx0$[rsp+12]
	lea	rcx, QWORD PTR g110$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 103  : 		tvec3<T, P> g001(gx1.x, gy1.x, gz1.x);

	movss	xmm3, DWORD PTR gz1$[rsp]
	movss	xmm2, DWORD PTR gy1$[rsp]
	movss	xmm1, DWORD PTR gx1$[rsp]
	lea	rcx, QWORD PTR g001$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 104  : 		tvec3<T, P> g101(gx1.y, gy1.y, gz1.y);

	movss	xmm3, DWORD PTR gz1$[rsp+4]
	movss	xmm2, DWORD PTR gy1$[rsp+4]
	movss	xmm1, DWORD PTR gx1$[rsp+4]
	lea	rcx, QWORD PTR g101$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 105  : 		tvec3<T, P> g011(gx1.z, gy1.z, gz1.z);

	movss	xmm3, DWORD PTR gz1$[rsp+8]
	movss	xmm2, DWORD PTR gy1$[rsp+8]
	movss	xmm1, DWORD PTR gx1$[rsp+8]
	lea	rcx, QWORD PTR g011$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 106  : 		tvec3<T, P> g111(gx1.w, gy1.w, gz1.w);

	movss	xmm3, DWORD PTR gz1$[rsp+12]
	movss	xmm2, DWORD PTR gy1$[rsp+12]
	movss	xmm1, DWORD PTR gx1$[rsp+12]
	lea	rcx, QWORD PTR g111$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 107  : 
; 108  : 		tvec4<T, P> norm0 = detail::taylorInvSqrt(tvec4<T, P>(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));

	lea	rdx, QWORD PTR g110$[rsp]
	lea	rcx, QWORD PTR g110$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv424[rsp], xmm0
	lea	rdx, QWORD PTR g100$[rsp]
	lea	rcx, QWORD PTR g100$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv428[rsp], xmm0
	lea	rdx, QWORD PTR g010$[rsp]
	lea	rcx, QWORD PTR g010$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv432[rsp], xmm0
	lea	rdx, QWORD PTR g000$[rsp]
	lea	rcx, QWORD PTR g000$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR tv424[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv428[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv432[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T73[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm0$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 109  : 		g000 *= norm0.x;

	movss	xmm1, DWORD PTR norm0$[rsp]
	lea	rcx, QWORD PTR g000$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 110  : 		g010 *= norm0.y;

	movss	xmm1, DWORD PTR norm0$[rsp+4]
	lea	rcx, QWORD PTR g010$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 111  : 		g100 *= norm0.z;

	movss	xmm1, DWORD PTR norm0$[rsp+8]
	lea	rcx, QWORD PTR g100$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 112  : 		g110 *= norm0.w;

	movss	xmm1, DWORD PTR norm0$[rsp+12]
	lea	rcx, QWORD PTR g110$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 113  : 		tvec4<T, P> norm1 = detail::taylorInvSqrt(tvec4<T, P>(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));

	lea	rdx, QWORD PTR g111$[rsp]
	lea	rcx, QWORD PTR g111$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv452[rsp], xmm0
	lea	rdx, QWORD PTR g101$[rsp]
	lea	rcx, QWORD PTR g101$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv456[rsp], xmm0
	lea	rdx, QWORD PTR g011$[rsp]
	lea	rcx, QWORD PTR g011$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv460[rsp], xmm0
	lea	rdx, QWORD PTR g001$[rsp]
	lea	rcx, QWORD PTR g001$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR tv452[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv456[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv460[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T74[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm1$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 114  : 		g001 *= norm1.x;

	movss	xmm1, DWORD PTR norm1$[rsp]
	lea	rcx, QWORD PTR g001$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 115  : 		g011 *= norm1.y;

	movss	xmm1, DWORD PTR norm1$[rsp+4]
	lea	rcx, QWORD PTR g011$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 116  : 		g101 *= norm1.z;

	movss	xmm1, DWORD PTR norm1$[rsp+8]
	lea	rcx, QWORD PTR g101$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 117  : 		g111 *= norm1.w;

	movss	xmm1, DWORD PTR norm1$[rsp+12]
	lea	rcx, QWORD PTR g111$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 118  : 
; 119  : 		T n000 = dot(g000, Pf0);

	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR g000$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n000$[rsp], xmm0

; 120  : 		T n100 = dot(g100, tvec3<T, P>(Pf1.x, Pf0.y, Pf0.z));

	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T75[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g100$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n100$[rsp], xmm0

; 121  : 		T n010 = dot(g010, tvec3<T, P>(Pf0.x, Pf1.y, Pf0.z));

	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T76[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g010$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n010$[rsp], xmm0

; 122  : 		T n110 = dot(g110, tvec3<T, P>(Pf1.x, Pf1.y, Pf0.z));

	movss	xmm3, DWORD PTR Pf0$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T77[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g110$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n110$[rsp], xmm0

; 123  : 		T n001 = dot(g001, tvec3<T, P>(Pf0.x, Pf0.y, Pf1.z));

	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T78[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g001$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n001$[rsp], xmm0

; 124  : 		T n101 = dot(g101, tvec3<T, P>(Pf1.x, Pf0.y, Pf1.z));

	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf0$[rsp+4]
	movss	xmm1, DWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR $T79[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g101$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n101$[rsp], xmm0

; 125  : 		T n011 = dot(g011, tvec3<T, P>(Pf0.x, Pf1.y, Pf1.z));

	movss	xmm3, DWORD PTR Pf1$[rsp+8]
	movss	xmm2, DWORD PTR Pf1$[rsp+4]
	movss	xmm1, DWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR $T80[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g011$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n011$[rsp], xmm0

; 126  : 		T n111 = dot(g111, Pf1);

	lea	rdx, QWORD PTR Pf1$[rsp]
	lea	rcx, QWORD PTR g111$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR n111$[rsp], xmm0

; 127  : 
; 128  : 		tvec3<T, P> fade_xyz = detail::fade(Pf0);

	lea	rdx, QWORD PTR Pf0$[rsp]
	lea	rcx, QWORD PTR fade_xyz$[rsp]
	call	??$fade@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ; glm::detail::fade<float,0>

; 129  : 		tvec4<T, P> n_z = mix(tvec4<T, P>(n000, n100, n010, n110), tvec4<T, P>(n001, n101, n011, n111), fade_xyz.z);

	movss	xmm0, DWORD PTR n111$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n011$[rsp]
	movss	xmm2, DWORD PTR n101$[rsp]
	movss	xmm1, DWORD PTR n001$[rsp]
	lea	rcx, QWORD PTR $T81[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv568[rsp], rax
	movss	xmm0, DWORD PTR n110$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR n010$[rsp]
	movss	xmm2, DWORD PTR n100$[rsp]
	movss	xmm1, DWORD PTR n000$[rsp]
	lea	rcx, QWORD PTR $T82[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm3, DWORD PTR fade_xyz$[rsp+8]
	mov	rcx, QWORD PTR tv568[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_z$[rsp]
	call	??$mix@MM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec4>

; 130  : 		tvec2<T, P> n_yz = mix(tvec2<T, P>(n_z.x, n_z.y), tvec2<T, P>(n_z.z, n_z.w), fade_xyz.y);

	movss	xmm2, DWORD PTR n_z$[rsp+12]
	movss	xmm1, DWORD PTR n_z$[rsp+8]
	lea	rcx, QWORD PTR $T83[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv616[rsp], rax
	movss	xmm2, DWORD PTR n_z$[rsp+4]
	movss	xmm1, DWORD PTR n_z$[rsp]
	lea	rcx, QWORD PTR $T84[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm3, DWORD PTR fade_xyz$[rsp+4]
	mov	rcx, QWORD PTR tv616[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_yz$[rsp]
	call	??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec2>

; 131  : 		T n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 

	movss	xmm2, DWORD PTR fade_xyz$[rsp]
	movss	xmm1, DWORD PTR n_yz$[rsp+4]
	movss	xmm0, DWORD PTR n_yz$[rsp]
	call	??$mix@MM@glm@@YAMMMM@Z			; glm::mix<float,float>
	movss	DWORD PTR n_xyz$[rsp], xmm0

; 132  : 		return T(2.2) * n_xyz;

	movss	xmm0, DWORD PTR __real@400ccccd
	mulss	xmm0, DWORD PTR n_xyz$[rsp]

; 133  : 	}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 2440				; 00000988H
	pop	rdi
	pop	rsi
	ret	0
??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ENDP	; glm::perlin<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\noise.inl
;	COMDAT ??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
Pi$ = 72
Pf$ = 120
ix$ = 168
iy$ = 216
fx$ = 264
fy$ = 312
i$ = 360
gx$ = 408
gy$ = 456
tx$ = 504
g00$ = 552
g10$ = 584
g01$ = 616
g11$ = 648
norm$ = 680
n00$ = 708
n10$ = 712
n01$ = 716
n11$ = 720
fade_xy$ = 744
n_x$ = 776
n_xy$ = 788
$T20 = 792
$T21 = 808
$T22 = 824
$T23 = 840
$T24 = 856
$T25 = 872
$T26 = 888
$T27 = 904
$T28 = 920
$T29 = 936
$T30 = 952
$T31 = 968
$T32 = 984
$T33 = 1000
$T34 = 1016
$T35 = 1032
$T36 = 1048
$T37 = 1064
$T38 = 1072
$T39 = 1080
$T40 = 1088
$T41 = 1096
$T42 = 1104
$T43 = 1112
tv66 = 1120
tv88 = 1128
tv255 = 1136
tv259 = 1140
tv263 = 1144
tv349 = 1152
Position$ = 1200
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z PROC	; glm::perlin<float,0>, COMDAT

; 26   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1176				; 00000498H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 278				; 00000116H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1200]

; 27   : 		tvec4<T, P> Pi = glm::floor(tvec4<T, P>(Position.x, Position.y, Position.x, Position.y)) + tvec4<T, P>(0.0, 0.0, 1.0, 1.0);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR __real@3ff0000000000000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z ; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>
	mov	QWORD PTR tv66[rsp], rax
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm2, DWORD PTR [rcx+4]
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm1, DWORD PTR [rcx]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Pi$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 28   : 		tvec4<T, P> Pf = glm::fract(tvec4<T, P>(Position.x, Position.y, Position.x, Position.y)) - tvec4<T, P>(0.0, 0.0, 1.0, 1.0);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR __real@3ff0000000000000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z ; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>
	mov	QWORD PTR tv88[rsp], rax
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm2, DWORD PTR [rcx+4]
	mov	rcx, QWORD PTR Position$[rsp]
	movss	xmm1, DWORD PTR [rcx]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv88[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Pf$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 29   : 		Pi = mod(Pi, tvec4<T, P>(289)); // To avoid truncation effects in permutation

	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T26[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Pi$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>
	lea	rcx, QWORD PTR Pi$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 30   : 		tvec4<T, P> ix(Pi.x, Pi.z, Pi.x, Pi.z);

	movss	xmm0, DWORD PTR Pi$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pi$[rsp]
	movss	xmm2, DWORD PTR Pi$[rsp+8]
	movss	xmm1, DWORD PTR Pi$[rsp]
	lea	rcx, QWORD PTR ix$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 31   : 		tvec4<T, P> iy(Pi.y, Pi.y, Pi.w, Pi.w);

	movss	xmm0, DWORD PTR Pi$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pi$[rsp+12]
	movss	xmm2, DWORD PTR Pi$[rsp+4]
	movss	xmm1, DWORD PTR Pi$[rsp+4]
	lea	rcx, QWORD PTR iy$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 32   : 		tvec4<T, P> fx(Pf.x, Pf.z, Pf.x, Pf.z);

	movss	xmm0, DWORD PTR Pf$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf$[rsp]
	movss	xmm2, DWORD PTR Pf$[rsp+8]
	movss	xmm1, DWORD PTR Pf$[rsp]
	lea	rcx, QWORD PTR fx$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 33   : 		tvec4<T, P> fy(Pf.y, Pf.y, Pf.w, Pf.w);

	movss	xmm0, DWORD PTR Pf$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Pf$[rsp+12]
	movss	xmm2, DWORD PTR Pf$[rsp+4]
	movss	xmm1, DWORD PTR Pf$[rsp+4]
	lea	rcx, QWORD PTR fy$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 34   : 
; 35   : 		tvec4<T, P> i = detail::permute(detail::permute(ix) + iy);

	lea	rdx, QWORD PTR ix$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	lea	r8, QWORD PTR iy$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR i$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 36   : 
; 37   : 		tvec4<T, P> gx = static_cast<T>(2) * glm::fract(i / T(41)) - T(1);

	movss	xmm2, DWORD PTR __real@42240000
	lea	rdx, QWORD PTR i$[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR gx$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 38   : 		tvec4<T, P> gy = glm::abs(gx) - T(0.5);

	lea	rdx, QWORD PTR gx$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR gy$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 39   : 		tvec4<T, P> tx = glm::floor(gx + T(0.5));

	movss	xmm2, DWORD PTR __real@3f000000
	lea	rdx, QWORD PTR gx$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR tx$[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>

; 40   : 		gx = gx - tx;

	lea	r8, QWORD PTR tx$[rsp]
	lea	rdx, QWORD PTR gx$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR gx$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 41   : 
; 42   : 		tvec2<T, P> g00(gx.x, gy.x);

	movss	xmm2, DWORD PTR gy$[rsp]
	movss	xmm1, DWORD PTR gx$[rsp]
	lea	rcx, QWORD PTR g00$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 43   : 		tvec2<T, P> g10(gx.y, gy.y);

	movss	xmm2, DWORD PTR gy$[rsp+4]
	movss	xmm1, DWORD PTR gx$[rsp+4]
	lea	rcx, QWORD PTR g10$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 44   : 		tvec2<T, P> g01(gx.z, gy.z);

	movss	xmm2, DWORD PTR gy$[rsp+8]
	movss	xmm1, DWORD PTR gx$[rsp+8]
	lea	rcx, QWORD PTR g01$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 45   : 		tvec2<T, P> g11(gx.w, gy.w);

	movss	xmm2, DWORD PTR gy$[rsp+12]
	movss	xmm1, DWORD PTR gx$[rsp+12]
	lea	rcx, QWORD PTR g11$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 46   : 
; 47   : 		tvec4<T, P> norm = detail::taylorInvSqrt(tvec4<T, P>(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));

	lea	rdx, QWORD PTR g11$[rsp]
	lea	rcx, QWORD PTR g11$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR tv255[rsp], xmm0
	lea	rdx, QWORD PTR g10$[rsp]
	lea	rcx, QWORD PTR g10$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR tv259[rsp], xmm0
	lea	rdx, QWORD PTR g01$[rsp]
	lea	rcx, QWORD PTR g01$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR tv263[rsp], xmm0
	lea	rdx, QWORD PTR g00$[rsp]
	lea	rcx, QWORD PTR g00$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	xmm1, DWORD PTR tv255[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv259[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv263[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T36[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 48   : 		g00 *= norm.x;

	movss	xmm1, DWORD PTR norm$[rsp]
	lea	rcx, QWORD PTR g00$[rsp]
	call	??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec2<float,0>::operator*=<float>

; 49   : 		g01 *= norm.y;

	movss	xmm1, DWORD PTR norm$[rsp+4]
	lea	rcx, QWORD PTR g01$[rsp]
	call	??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec2<float,0>::operator*=<float>

; 50   : 		g10 *= norm.z;

	movss	xmm1, DWORD PTR norm$[rsp+8]
	lea	rcx, QWORD PTR g10$[rsp]
	call	??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec2<float,0>::operator*=<float>

; 51   : 		g11 *= norm.w;

	movss	xmm1, DWORD PTR norm$[rsp+12]
	lea	rcx, QWORD PTR g11$[rsp]
	call	??$?XM@?$tvec2@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec2<float,0>::operator*=<float>

; 52   : 
; 53   : 		T n00 = dot(g00, tvec2<T, P>(fx.x, fy.x));

	movss	xmm2, DWORD PTR fy$[rsp]
	movss	xmm1, DWORD PTR fx$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g00$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR n00$[rsp], xmm0

; 54   : 		T n10 = dot(g10, tvec2<T, P>(fx.y, fy.y));

	movss	xmm2, DWORD PTR fy$[rsp+4]
	movss	xmm1, DWORD PTR fx$[rsp+4]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g10$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR n10$[rsp], xmm0

; 55   : 		T n01 = dot(g01, tvec2<T, P>(fx.z, fy.z));

	movss	xmm2, DWORD PTR fy$[rsp+8]
	movss	xmm1, DWORD PTR fx$[rsp+8]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g01$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR n01$[rsp], xmm0

; 56   : 		T n11 = dot(g11, tvec2<T, P>(fx.w, fy.w));

	movss	xmm2, DWORD PTR fy$[rsp+12]
	movss	xmm1, DWORD PTR fx$[rsp+12]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR g11$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR n11$[rsp], xmm0

; 57   : 
; 58   : 		tvec2<T, P> fade_xy = detail::fade(tvec2<T, P>(Pf.x, Pf.y));

	movss	xmm2, DWORD PTR Pf$[rsp+4]
	movss	xmm1, DWORD PTR Pf$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR fade_xy$[rsp]
	call	??$fade@M$0A@@detail@glm@@YA?AU?$tvec2@M$0A@@1@AEBU21@@Z ; glm::detail::fade<float,0>

; 59   : 		tvec2<T, P> n_x = mix(tvec2<T, P>(n00, n01), tvec2<T, P>(n10, n11), fade_xy.x);

	movss	xmm2, DWORD PTR n11$[rsp]
	movss	xmm1, DWORD PTR n10$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv349[rsp], rax
	movss	xmm2, DWORD PTR n01$[rsp]
	movss	xmm1, DWORD PTR n00$[rsp]
	lea	rcx, QWORD PTR $T43[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm3, DWORD PTR fade_xy$[rsp]
	mov	rcx, QWORD PTR tv349[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR n_x$[rsp]
	call	??$mix@MM$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z ; glm::mix<float,float,0,glm::tvec2>

; 60   : 		T n_xy = mix(n_x.x, n_x.y, fade_xy.y);

	movss	xmm2, DWORD PTR fade_xy$[rsp+4]
	movss	xmm1, DWORD PTR n_x$[rsp+4]
	movss	xmm0, DWORD PTR n_x$[rsp]
	call	??$mix@MM@glm@@YAMMMM@Z			; glm::mix<float,float>
	movss	DWORD PTR n_xy$[rsp], xmm0

; 61   : 		return T(2.3) * n_xy;

	movss	xmm0, DWORD PTR __real@40133333
	mulss	xmm0, DWORD PTR n_xy$[rsp]

; 62   : 	}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 1176				; 00000498H
	pop	rdi
	pop	rsi
	ret	0
??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ENDP	; glm::perlin<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_noise.cpp
_TEXT	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?test_perlin@@YAHXZ PROC				; test_perlin

; 64   : {

$LN45:
	push	rdi
	sub	rsp, 1088				; 00000440H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 260				; 00000104H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 65   : 	{
; 66   : 		std::vector<glm::byte> ImageData(Size * Size * 3);

	lea	rcx, QWORD PTR $T24[rsp]
	call	??0?$allocator@E@std@@QEAA@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	r8, rax
	mov	edx, 12288				; 00003000H
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	npad	1

; 67   : 		
; 68   : 		for(std::size_t y = 0; y < Size; ++y)

	mov	QWORD PTR y$10[rsp], 0
	jmp	SHORT $LN4@test_perli
$LN2@test_perli:
	mov	rax, QWORD PTR y$10[rsp]
	inc	rax
	mov	QWORD PTR y$10[rsp], rax
$LN4@test_perli:
	cmp	QWORD PTR y$10[rsp], 64			; 00000040H
	jae	$LN3@test_perli

; 69   : 		for(std::size_t x = 0; x < Size; ++x)

	mov	QWORD PTR x$11[rsp], 0
	jmp	SHORT $LN7@test_perli
$LN5@test_perli:
	mov	rax, QWORD PTR x$11[rsp]
	inc	rax
	mov	QWORD PTR x$11[rsp], rax
$LN7@test_perli:
	cmp	QWORD PTR x$11[rsp], 64			; 00000040H
	jae	$LN6@test_perli

; 70   : 		{
; 71   : 			ImageData[(x + y * Size) * 3 + 0] = glm::byte(glm::perlin(glm::vec2(x / 64.f, y / 64.f)) * 128.f + 127.f);

	mov	rax, QWORD PTR y$10[rsp]
	test	rax, rax
	jl	SHORT $LN43@test_perli
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN44@test_perli
$LN43@test_perli:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN44@test_perli:
	divss	xmm0, DWORD PTR __real@42800000
	mov	rax, QWORD PTR x$11[rsp]
	test	rax, rax
	jl	SHORT $LN41@test_perli
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN42@test_perli
$LN41@test_perli:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN42@test_perli:
	divss	xmm1, DWORD PTR __real@42800000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T25[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, rax
	call	??$perlin@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::perlin<float,0>
	mulss	xmm0, DWORD PTR __real@43000000
	addss	xmm0, DWORD PTR __real@42fe0000
	cvttss2si eax, xmm0
	mov	BYTE PTR tv383[rsp], al
	imul	rcx, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	ecx, BYTE PTR tv383[rsp]
	mov	BYTE PTR [rax], cl

; 72   : 			ImageData[(x + y * Size) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv134[rsp], rax
	imul	rcx, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	inc	rcx
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv134[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 73   : 			ImageData[(x + y * Size) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv147[rsp], rax
	imul	rcx, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	add	rcx, 2
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv147[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 74   : 		}

	jmp	$LN5@test_perli
$LN6@test_perli:
	jmp	$LN2@test_perli
$LN3@test_perli:

; 75   : 
; 76   : 		gli::texture2D Texture(1);

	mov	QWORD PTR $T26[rsp], 1
	lea	rdx, QWORD PTR $T26[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??0texture2D@gli@@QEAA@AEB_K@Z		; gli::texture2D::texture2D
	npad	1

; 77   : 		Texture[0] = gli::image2D(glm::uvec2(Size), gli::RGB8U);

	mov	DWORD PTR $T29[rsp], 3
	mov	QWORD PTR $T27[rsp], 0
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T30[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	lea	r8, QWORD PTR $T29[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T28[rsp]
	call	??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z ; gli::image2D::image2D
	mov	QWORD PTR tv153[rsp], rax
	mov	rax, QWORD PTR tv153[rsp]
	mov	QWORD PTR tv413[rsp], rax
	lea	rdx, QWORD PTR $T27[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rdx, QWORD PTR tv413[rsp]
	mov	rcx, rax
	call	??4image2D@gli@@QEAAAEAV01@AEBV01@@Z
	npad	1
	lea	rcx, QWORD PTR $T28[rsp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D

; 78   : 		memcpy(Texture[0].data(), &ImageData[0], ImageData.size());

	mov	QWORD PTR $T31[rsp], 0
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	QWORD PTR tv172[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv175[rsp], rax
	lea	rdx, QWORD PTR $T31[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rcx, rax
	call	?data@image2D@gli@@QEAAPEAEXZ		; gli::image2D::data
	mov	rcx, QWORD PTR tv172[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR tv175[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	memcpy

; 79   : 		gli::saveDDS9(Texture, "texture_perlin2d_256.dds");

	lea	rdx, OFFSET FLAT:$SG79968
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; gli::gtx::loader_dds9::saveDDS9
	npad	1
	lea	rcx, QWORD PTR $T13[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 80   : 	}

	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	npad	1
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >

; 81   : 
; 82   : 	{
; 83   : 		std::vector<glm::byte> ImageData(Size * Size * 3);

	lea	rcx, QWORD PTR $T32[rsp]
	call	??0?$allocator@E@std@@QEAA@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	r8, rax
	mov	edx, 12288				; 00003000H
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	npad	1

; 84   : 		
; 85   : 		for(std::size_t y = 0; y < Size; ++y)

	mov	QWORD PTR y$15[rsp], 0
	jmp	SHORT $LN10@test_perli
$LN8@test_perli:
	mov	rax, QWORD PTR y$15[rsp]
	inc	rax
	mov	QWORD PTR y$15[rsp], rax
$LN10@test_perli:
	cmp	QWORD PTR y$15[rsp], 64			; 00000040H
	jae	$LN9@test_perli

; 86   : 		for(std::size_t x = 0; x < Size; ++x)

	mov	QWORD PTR x$16[rsp], 0
	jmp	SHORT $LN13@test_perli
$LN11@test_perli:
	mov	rax, QWORD PTR x$16[rsp]
	inc	rax
	mov	QWORD PTR x$16[rsp], rax
$LN13@test_perli:
	cmp	QWORD PTR x$16[rsp], 64			; 00000040H
	jae	$LN12@test_perli

; 87   : 		{
; 88   : 			ImageData[(x + y * Size) * 3 + 0] = glm::byte(glm::perlin(glm::vec3(x / 64.f, y / 64.f, 0.5f)) * 128.f + 127.f);

	mov	rax, QWORD PTR y$15[rsp]
	test	rax, rax
	jl	SHORT $LN39@test_perli
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN40@test_perli
$LN39@test_perli:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN40@test_perli:
	divss	xmm0, DWORD PTR __real@42800000
	mov	rax, QWORD PTR x$16[rsp]
	test	rax, rax
	jl	SHORT $LN37@test_perli
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN38@test_perli
$LN37@test_perli:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN38@test_perli:
	divss	xmm1, DWORD PTR __real@42800000
	movss	xmm3, DWORD PTR __real@3f000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T33[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, rax
	call	??$perlin@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::perlin<float,0>
	mulss	xmm0, DWORD PTR __real@43000000
	addss	xmm0, DWORD PTR __real@42fe0000
	cvttss2si eax, xmm0
	mov	BYTE PTR tv162[rsp], al
	imul	rcx, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$16[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	ecx, BYTE PTR tv162[rsp]
	mov	BYTE PTR [rax], cl

; 89   : 			ImageData[(x + y * Size) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$16[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv228[rsp], rax
	imul	rcx, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$16[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	inc	rcx
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv228[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 90   : 			ImageData[(x + y * Size) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$16[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv241[rsp], rax
	imul	rcx, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$16[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	add	rcx, 2
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv241[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 91   : 		}

	jmp	$LN11@test_perli
$LN12@test_perli:
	jmp	$LN8@test_perli
$LN9@test_perli:

; 92   : 
; 93   : 		gli::texture2D Texture(1);

	mov	QWORD PTR $T34[rsp], 1
	lea	rdx, QWORD PTR $T34[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??0texture2D@gli@@QEAA@AEB_K@Z		; gli::texture2D::texture2D
	npad	1

; 94   : 		Texture[0] = gli::image2D(glm::uvec2(Size), gli::RGB8U);

	mov	DWORD PTR $T37[rsp], 3
	mov	QWORD PTR $T35[rsp], 0
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T38[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	lea	r8, QWORD PTR $T37[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T36[rsp]
	call	??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z ; gli::image2D::image2D
	mov	QWORD PTR tv247[rsp], rax
	mov	rax, QWORD PTR tv247[rsp]
	mov	QWORD PTR tv418[rsp], rax
	lea	rdx, QWORD PTR $T35[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rdx, QWORD PTR tv418[rsp]
	mov	rcx, rax
	call	??4image2D@gli@@QEAAAEAV01@AEBV01@@Z
	npad	1
	lea	rcx, QWORD PTR $T36[rsp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D

; 95   : 		memcpy(Texture[0].data(), &ImageData[0], ImageData.size());

	mov	QWORD PTR $T39[rsp], 0
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	QWORD PTR tv266[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv269[rsp], rax
	lea	rdx, QWORD PTR $T39[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rcx, rax
	call	?data@image2D@gli@@QEAAPEAEXZ		; gli::image2D::data
	mov	rcx, QWORD PTR tv266[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR tv269[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	memcpy

; 96   : 		gli::saveDDS9(Texture, "texture_perlin3d_256.dds");

	lea	rdx, OFFSET FLAT:$SG79969
	lea	rcx, QWORD PTR $T18[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rdx, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; gli::gtx::loader_dds9::saveDDS9
	npad	1
	lea	rcx, QWORD PTR $T18[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 97   : 	}

	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	npad	1
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >

; 98   : 	
; 99   : 	{
; 100  : 		std::vector<glm::byte> ImageData(Size * Size * 3);

	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$allocator@E@std@@QEAA@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	r8, rax
	mov	edx, 12288				; 00003000H
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	npad	1

; 101  : 		
; 102  : 		for(std::size_t y = 0; y < Size; ++y)

	mov	QWORD PTR y$20[rsp], 0
	jmp	SHORT $LN16@test_perli
$LN14@test_perli:
	mov	rax, QWORD PTR y$20[rsp]
	inc	rax
	mov	QWORD PTR y$20[rsp], rax
$LN16@test_perli:
	cmp	QWORD PTR y$20[rsp], 64			; 00000040H
	jae	$LN15@test_perli

; 103  : 		for(std::size_t x = 0; x < Size; ++x)

	mov	QWORD PTR x$21[rsp], 0
	jmp	SHORT $LN19@test_perli
$LN17@test_perli:
	mov	rax, QWORD PTR x$21[rsp]
	inc	rax
	mov	QWORD PTR x$21[rsp], rax
$LN19@test_perli:
	cmp	QWORD PTR x$21[rsp], 64			; 00000040H
	jae	$LN18@test_perli

; 104  : 		{
; 105  : 			ImageData[(x + y * Size) * 3 + 0] = glm::byte(glm::perlin(glm::vec4(x / 64.f, y / 64.f, 0.5f, 0.5f)) * 128.f + 127.f);

	mov	rax, QWORD PTR y$20[rsp]
	test	rax, rax
	jl	SHORT $LN35@test_perli
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN36@test_perli
$LN35@test_perli:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN36@test_perli:
	divss	xmm0, DWORD PTR __real@42800000
	mov	rax, QWORD PTR x$21[rsp]
	test	rax, rax
	jl	SHORT $LN33@test_perli
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN34@test_perli
$LN33@test_perli:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN34@test_perli:
	divss	xmm1, DWORD PTR __real@42800000
	movss	xmm2, DWORD PTR __real@3f000000
	movss	DWORD PTR [rsp+32], xmm2
	movss	xmm3, DWORD PTR __real@3f000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T41[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, rax
	call	??$perlin@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ; glm::perlin<float,0>
	mulss	xmm0, DWORD PTR __real@43000000
	addss	xmm0, DWORD PTR __real@42fe0000
	cvttss2si eax, xmm0
	mov	BYTE PTR tv556[rsp], al
	imul	rcx, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$21[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	ecx, BYTE PTR tv556[rsp]
	mov	BYTE PTR [rax], cl

; 106  : 			ImageData[(x + y * Size) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$21[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv355[rsp], rax
	imul	rcx, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$21[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	inc	rcx
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv355[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 107  : 			ImageData[(x + y * Size) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$21[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv368[rsp], rax
	imul	rcx, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$21[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	add	rcx, 2
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv368[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 108  : 		}

	jmp	$LN17@test_perli
$LN18@test_perli:
	jmp	$LN14@test_perli
$LN15@test_perli:

; 109  : 
; 110  : 		gli::texture2D Texture(1);

	mov	QWORD PTR $T42[rsp], 1
	lea	rdx, QWORD PTR $T42[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??0texture2D@gli@@QEAA@AEB_K@Z		; gli::texture2D::texture2D
	npad	1

; 111  : 		Texture[0] = gli::image2D(glm::uvec2(Size), gli::RGB8U);

	mov	DWORD PTR $T45[rsp], 3
	mov	QWORD PTR $T43[rsp], 0
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T46[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	lea	r8, QWORD PTR $T45[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T44[rsp]
	call	??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z ; gli::image2D::image2D
	mov	QWORD PTR tv374[rsp], rax
	mov	rax, QWORD PTR tv374[rsp]
	mov	QWORD PTR tv423[rsp], rax
	lea	rdx, QWORD PTR $T43[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rdx, QWORD PTR tv423[rsp]
	mov	rcx, rax
	call	??4image2D@gli@@QEAAAEAV01@AEBV01@@Z
	npad	1
	lea	rcx, QWORD PTR $T44[rsp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D

; 112  : 		memcpy(Texture[0].data(), &ImageData[0], ImageData.size());

	mov	QWORD PTR $T47[rsp], 0
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	QWORD PTR tv393[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv396[rsp], rax
	lea	rdx, QWORD PTR $T47[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rcx, rax
	call	?data@image2D@gli@@QEAAPEAEXZ		; gli::image2D::data
	mov	rcx, QWORD PTR tv393[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR tv396[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	memcpy

; 113  : 		gli::saveDDS9(Texture, "texture_perlin4d_256.dds");

	lea	rdx, OFFSET FLAT:$SG79970
	lea	rcx, QWORD PTR $T23[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; gli::gtx::loader_dds9::saveDDS9
	npad	1
	lea	rcx, QWORD PTR $T23[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 114  : 	}

	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	npad	1
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >

; 115  : 
; 116  : 	return 0;

	xor	eax, eax

; 117  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_perlin@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1088				; 00000440H
	pop	rdi
	ret	0
?test_perlin@@YAHXZ ENDP				; test_perlin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$0@?0??test_perlin@@YAHXZ@4HA PROC			; `test_perlin'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR ImageData$9[rbp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_perlin@@YAHXZ@4HA ENDP			; `test_perlin'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$1@?0??test_perlin@@YAHXZ@4HA PROC			; `test_perlin'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Texture$12[rbp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??test_perlin@@YAHXZ@4HA ENDP			; `test_perlin'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$2@?0??test_perlin@@YAHXZ@4HA PROC			; `test_perlin'::`1'::dtor$2
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T28[rbp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$2@?0??test_perlin@@YAHXZ@4HA ENDP			; `test_perlin'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$3@?0??test_perlin@@YAHXZ@4HA PROC			; `test_perlin'::`1'::dtor$3
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T13[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$3@?0??test_perlin@@YAHXZ@4HA ENDP			; `test_perlin'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$4@?0??test_perlin@@YAHXZ@4HA PROC			; `test_perlin'::`1'::dtor$4
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR ImageData$14[rbp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$4@?0??test_perlin@@YAHXZ@4HA ENDP			; `test_perlin'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$5@?0??test_perlin@@YAHXZ@4HA PROC			; `test_perlin'::`1'::dtor$5
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Texture$17[rbp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$5@?0??test_perlin@@YAHXZ@4HA ENDP			; `test_perlin'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$6@?0??test_perlin@@YAHXZ@4HA PROC			; `test_perlin'::`1'::dtor$6
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T36[rbp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$6@?0??test_perlin@@YAHXZ@4HA ENDP			; `test_perlin'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$7@?0??test_perlin@@YAHXZ@4HA PROC			; `test_perlin'::`1'::dtor$7
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T18[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$7@?0??test_perlin@@YAHXZ@4HA ENDP			; `test_perlin'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$8@?0??test_perlin@@YAHXZ@4HA PROC			; `test_perlin'::`1'::dtor$8
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR ImageData$19[rbp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$8@?0??test_perlin@@YAHXZ@4HA ENDP			; `test_perlin'::`1'::dtor$8
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$9@?0??test_perlin@@YAHXZ@4HA PROC			; `test_perlin'::`1'::dtor$9
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Texture$22[rbp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$9@?0??test_perlin@@YAHXZ@4HA ENDP			; `test_perlin'::`1'::dtor$9
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$10@?0??test_perlin@@YAHXZ@4HA PROC		; `test_perlin'::`1'::dtor$10
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T44[rbp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$10@?0??test_perlin@@YAHXZ@4HA ENDP		; `test_perlin'::`1'::dtor$10
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$11@?0??test_perlin@@YAHXZ@4HA PROC		; `test_perlin'::`1'::dtor$11
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T23[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$11@?0??test_perlin@@YAHXZ@4HA ENDP		; `test_perlin'::`1'::dtor$11
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\noise.inl
;	COMDAT ??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
C$ = 72
F4$ = 100
i$ = 120
x0$ = 168
i0$ = 216
isX$ = 264
isYZ$ = 312
i3$ = 360
i2$ = 408
i1$ = 456
x1$ = 504
x2$ = 552
x3$ = 600
x4$ = 648
j0$ = 692
j1$ = 728
ip$ = 776
p0$ = 824
p1$ = 872
p2$ = 920
p3$ = 968
p4$ = 1016
norm$ = 1064
m0$ = 1112
m1$ = 1160
$T27 = 1172
$T28 = 1188
$T29 = 1204
$T30 = 1220
$T31 = 1236
$T32 = 1248
$T33 = 1260
$T34 = 1272
$T35 = 1284
$T36 = 1300
$T37 = 1312
$T38 = 1328
$T39 = 1344
$T40 = 1360
$T41 = 1376
$T42 = 1392
$T43 = 1408
$T44 = 1424
$T45 = 1428
$T46 = 1432
$T47 = 1436
$T48 = 1452
$T49 = 1468
$T50 = 1484
$T51 = 1500
$T52 = 1516
$T53 = 1532
$T54 = 1548
$T55 = 1564
$T56 = 1580
$T57 = 1596
$T58 = 1612
$T59 = 1628
$T60 = 1644
$T61 = 1660
$T62 = 1676
$T63 = 1680
$T64 = 1692
$T65 = 1704
$T66 = 1716
$T67 = 1724
$T68 = 1732
$T69 = 1740
$T70 = 1752
$T71 = 1760
$T72 = 1772
$T73 = 1784
$T74 = 1792
tv82 = 1800
tv129 = 1808
tv140 = 1816
tv301 = 1824
tv312 = 1832
tv323 = 1840
tv416 = 1848
tv420 = 1852
tv424 = 1856
tv482 = 1864
tv488 = 1872
tv492 = 1876
tv506 = 1880
tv512 = 1888
tv537 = 1892
tv541 = 1896
tv536 = 1904
tv534 = 1912
tv558 = 1916
tv557 = 1920
v$ = 1968
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z PROC	; glm::simplex<float,0>, COMDAT

; 725  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1944				; 00000798H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 470				; 000001d6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1968]

; 726  : 		tvec4<T, P> const C(

	movsd	xmm0, QWORD PTR __real@bfdc9f25c5bfedda
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR __real@3fda88a3abb00da5
	movsd	xmm2, QWORD PTR __real@3fd1b06d1d200913
	movsd	xmm1, QWORD PTR __real@3fc1b06d1d200925
	lea	rcx, QWORD PTR C$[rsp]
	call	??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z ; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>

; 727  : 			0.138196601125011,  // (5 - sqrt(5))/20  G4
; 728  : 			0.276393202250021,  // 2 * G4
; 729  : 			0.414589803375032,  // 3 * G4
; 730  : 			-0.447213595499958); // -1 + 4 * G4
; 731  : 
; 732  : 		// (sqrt(5) - 1)/4 = F4, used once below
; 733  : 		T const F4 = static_cast<T>(0.309016994374947451);

	movss	xmm0, DWORD PTR __real@3e9e377a
	movss	DWORD PTR F4$[rsp], xmm0

; 734  : 
; 735  : 		// First corner
; 736  : 		tvec4<T, P> i  = floor(v + dot(v, vec4(F4)));

	movss	xmm1, DWORD PTR __real@3e9e377a
	lea	rcx, QWORD PTR $T27[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR i$[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>

; 737  : 		tvec4<T, P> x0 = v -   i + dot(i, vec4(C.x));

	movss	xmm1, DWORD PTR C$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR i$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv82[rsp], xmm0
	lea	r8, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	movss	xmm0, DWORD PTR tv82[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR x0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 738  : 
; 739  : 		// Other corners
; 740  : 
; 741  : 		// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)
; 742  : 		tvec4<T, P> i0;

	lea	rcx, QWORD PTR i0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@XZ		; glm::tvec4<float,0>::tvec4<float,0>

; 743  : 		tvec3<T, P> isX = step(tvec3<T, P>(x0.y, x0.z, x0.w), tvec3<T, P>(x0.x));

	movss	xmm1, DWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv129[rsp], rax
	movss	xmm3, DWORD PTR x0$[rsp+12]
	movss	xmm2, DWORD PTR x0$[rsp+8]
	movss	xmm1, DWORD PTR x0$[rsp+4]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv129[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR isX$[rsp]
	call	??$step@Utvec3@glm@@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec3,float,0>

; 744  : 		tvec3<T, P> isYZ = step(tvec3<T, P>(x0.z, x0.w, x0.w), tvec3<T, P>(x0.y, x0.y, x0.z));

	movss	xmm3, DWORD PTR x0$[rsp+8]
	movss	xmm2, DWORD PTR x0$[rsp+4]
	movss	xmm1, DWORD PTR x0$[rsp+4]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv140[rsp], rax
	movss	xmm3, DWORD PTR x0$[rsp+12]
	movss	xmm2, DWORD PTR x0$[rsp+12]
	movss	xmm1, DWORD PTR x0$[rsp+8]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv140[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR isYZ$[rsp]
	call	??$step@Utvec3@glm@@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec3,float,0>

; 745  : 		//  i0.x = dot(isX, vec3(1.0));
; 746  : 		//i0.x = isX.x + isX.y + isX.z;
; 747  : 		//i0.yzw = static_cast<T>(1) - isX;
; 748  : 		i0 = tvec4<T, P>(isX.x + isX.y + isX.z, T(1) - isX);

	lea	r8, QWORD PTR isX$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	movss	xmm0, DWORD PTR isX$[rsp]
	addss	xmm0, DWORD PTR isX$[rsp+4]
	addss	xmm0, DWORD PTR isX$[rsp+8]
	mov	r8, rax
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@MAEBU?$tvec3@M$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
	lea	rcx, QWORD PTR i0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 749  : 		//  i0.y += dot(isYZ.xy, vec2(1.0));
; 750  : 		i0.y += isYZ.x + isYZ.y;

	movss	xmm0, DWORD PTR isYZ$[rsp]
	addss	xmm0, DWORD PTR isYZ$[rsp+4]
	movss	xmm1, DWORD PTR i0$[rsp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR i0$[rsp+4], xmm0

; 751  : 		//i0.zw += 1.0 - tvec2<T, P>(isYZ.x, isYZ.y);
; 752  : 		i0.z += static_cast<T>(1) - isYZ.x;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR isYZ$[rsp]
	movss	xmm1, DWORD PTR i0$[rsp+8]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR i0$[rsp+8], xmm0

; 753  : 		i0.w += static_cast<T>(1) - isYZ.y;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR isYZ$[rsp+4]
	movss	xmm1, DWORD PTR i0$[rsp+12]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR i0$[rsp+12], xmm0

; 754  : 		i0.z += isYZ.z;

	movss	xmm0, DWORD PTR i0$[rsp+8]
	addss	xmm0, DWORD PTR isYZ$[rsp+8]
	movss	DWORD PTR i0$[rsp+8], xmm0

; 755  : 		i0.w += static_cast<T>(1) - isYZ.z;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR isYZ$[rsp+8]
	movss	xmm1, DWORD PTR i0$[rsp+12]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR i0$[rsp+12], xmm0

; 756  : 
; 757  : 		// i0 now contains the unique values 0,1,2,3 in each channel
; 758  : 		tvec4<T, P> i3 = clamp(i0, T(0), T(1));

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	lea	rdx, QWORD PTR i0$[rsp]
	lea	rcx, QWORD PTR i3$[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>

; 759  : 		tvec4<T, P> i2 = clamp(i0 - T(1), T(0), T(1));

	movss	xmm2, DWORD PTR __real@3f800000
	lea	rdx, QWORD PTR i0$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, rax
	lea	rcx, QWORD PTR i2$[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>

; 760  : 		tvec4<T, P> i1 = clamp(i0 - T(2), T(0), T(1));

	movss	xmm2, DWORD PTR __real@40000000
	lea	rdx, QWORD PTR i0$[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, rax
	lea	rcx, QWORD PTR i1$[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>

; 761  : 
; 762  : 		//  x0 = x0 - 0.0 + 0.0 * C.xxxx
; 763  : 		//  x1 = x0 - i1  + 0.0 * C.xxxx
; 764  : 		//  x2 = x0 - i2  + 0.0 * C.xxxx
; 765  : 		//  x3 = x0 - i3  + 0.0 * C.xxxx
; 766  : 		//  x4 = x0 - 1.0 + 4.0 * C.xxxx
; 767  : 		tvec4<T, P> x1 = x0 - i1 + C.x;

	lea	r8, QWORD PTR i1$[rsp]
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	movss	xmm2, DWORD PTR C$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR x1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 768  : 		tvec4<T, P> x2 = x0 - i2 + C.y;

	lea	r8, QWORD PTR i2$[rsp]
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	movss	xmm2, DWORD PTR C$[rsp+4]
	mov	rdx, rax
	lea	rcx, QWORD PTR x2$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 769  : 		tvec4<T, P> x3 = x0 - i3 + C.z;

	lea	r8, QWORD PTR i3$[rsp]
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	movss	xmm2, DWORD PTR C$[rsp+8]
	mov	rdx, rax
	lea	rcx, QWORD PTR x3$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 770  : 		tvec4<T, P> x4 = x0 + C.w;

	movss	xmm2, DWORD PTR C$[rsp+12]
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR x4$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 771  : 
; 772  : 		// Permutations
; 773  : 		i = mod(i, tvec4<T, P>(289)); 

	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T42[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR i$[rsp]
	lea	rcx, QWORD PTR $T43[rsp]
	call	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>
	lea	rcx, QWORD PTR i$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 774  : 		T j0 = detail::permute(detail::permute(detail::permute(detail::permute(i.w) + i.z) + i.y) + i.x);

	lea	rcx, QWORD PTR i$[rsp+12]
	call	??$permute@M@detail@glm@@YAMAEBM@Z	; glm::detail::permute<float>
	addss	xmm0, DWORD PTR i$[rsp+8]
	movss	DWORD PTR $T46[rsp], xmm0
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$permute@M@detail@glm@@YAMAEBM@Z	; glm::detail::permute<float>
	addss	xmm0, DWORD PTR i$[rsp+4]
	movss	DWORD PTR $T45[rsp], xmm0
	lea	rcx, QWORD PTR $T45[rsp]
	call	??$permute@M@detail@glm@@YAMAEBM@Z	; glm::detail::permute<float>
	addss	xmm0, DWORD PTR i$[rsp]
	movss	DWORD PTR $T44[rsp], xmm0
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$permute@M@detail@glm@@YAMAEBM@Z	; glm::detail::permute<float>
	movss	DWORD PTR j0$[rsp], xmm0

; 775  : 		tvec4<T, P> j1 = detail::permute(detail::permute(detail::permute(detail::permute(

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR i3$[rsp]
	movss	xmm2, DWORD PTR i2$[rsp]
	movss	xmm1, DWORD PTR i1$[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv301[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR i3$[rsp+4]
	movss	xmm2, DWORD PTR i2$[rsp+4]
	movss	xmm1, DWORD PTR i1$[rsp+4]
	lea	rcx, QWORD PTR $T48[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv312[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR i3$[rsp+8]
	movss	xmm2, DWORD PTR i2$[rsp+8]
	movss	xmm1, DWORD PTR i1$[rsp+8]
	lea	rcx, QWORD PTR $T49[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv323[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR i3$[rsp+12]
	movss	xmm2, DWORD PTR i2$[rsp+12]
	movss	xmm1, DWORD PTR i1$[rsp+12]
	lea	rcx, QWORD PTR $T50[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR i$[rsp+12]
	lea	rcx, QWORD PTR $T51[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T52[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	movss	xmm2, DWORD PTR i$[rsp+8]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T53[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv323[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T54[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T55[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	movss	xmm2, DWORD PTR i$[rsp+4]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T56[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv312[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T57[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T58[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	movss	xmm2, DWORD PTR i$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T59[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv301[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T60[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR j1$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 776  : 			i.w + tvec4<T, P>(i1.w, i2.w, i3.w, T(1))) +
; 777  : 			i.z + tvec4<T, P>(i1.z, i2.z, i3.z, T(1))) +
; 778  : 			i.y + tvec4<T, P>(i1.y, i2.y, i3.y, T(1))) +
; 779  : 			i.x + tvec4<T, P>(i1.x, i2.x, i3.x, T(1)));
; 780  : 
; 781  : 		// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope
; 782  : 		// 7*7*6 = 294, which is close to the ring size 17*17 = 289.
; 783  : 		tvec4<T, P> ip = tvec4<T, P>(T(1) / T(294), T(1) / T(49), T(1) / T(7), T(0));

	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e124925
	movss	xmm2, DWORD PTR __real@3ca72f05
	movss	xmm1, DWORD PTR __real@3b5ee95c
	lea	rcx, QWORD PTR ip$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 784  : 
; 785  : 		tvec4<T, P> p0 = gtc::grad4(j0,   ip);

	lea	r8, QWORD PTR ip$[rsp]
	lea	rdx, QWORD PTR j0$[rsp]
	lea	rcx, QWORD PTR p0$[rsp]
	call	??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z ; glm::gtc::grad4<float,0>

; 786  : 		tvec4<T, P> p1 = gtc::grad4(j1.x, ip);

	lea	r8, QWORD PTR ip$[rsp]
	lea	rdx, QWORD PTR j1$[rsp]
	lea	rcx, QWORD PTR p1$[rsp]
	call	??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z ; glm::gtc::grad4<float,0>

; 787  : 		tvec4<T, P> p2 = gtc::grad4(j1.y, ip);

	lea	r8, QWORD PTR ip$[rsp]
	lea	rdx, QWORD PTR j1$[rsp+4]
	lea	rcx, QWORD PTR p2$[rsp]
	call	??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z ; glm::gtc::grad4<float,0>

; 788  : 		tvec4<T, P> p3 = gtc::grad4(j1.z, ip);

	lea	r8, QWORD PTR ip$[rsp]
	lea	rdx, QWORD PTR j1$[rsp+8]
	lea	rcx, QWORD PTR p3$[rsp]
	call	??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z ; glm::gtc::grad4<float,0>

; 789  : 		tvec4<T, P> p4 = gtc::grad4(j1.w, ip);

	lea	r8, QWORD PTR ip$[rsp]
	lea	rdx, QWORD PTR j1$[rsp+12]
	lea	rcx, QWORD PTR p4$[rsp]
	call	??$grad4@M$0A@@gtc@glm@@YA?AU?$tvec4@M$0A@@1@AEBMAEBU21@@Z ; glm::gtc::grad4<float,0>

; 790  : 
; 791  : 		// Normalise gradients
; 792  : 		tvec4<T, P> norm = detail::taylorInvSqrt(tvec4<T, P>(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));

	lea	rdx, QWORD PTR p3$[rsp]
	lea	rcx, QWORD PTR p3$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv416[rsp], xmm0
	lea	rdx, QWORD PTR p2$[rsp]
	lea	rcx, QWORD PTR p2$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv420[rsp], xmm0
	lea	rdx, QWORD PTR p1$[rsp]
	lea	rcx, QWORD PTR p1$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv424[rsp], xmm0
	lea	rdx, QWORD PTR p0$[rsp]
	lea	rcx, QWORD PTR p0$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv416[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv420[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv424[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T61[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 793  : 		p0 *= norm.x;

	movss	xmm1, DWORD PTR norm$[rsp]
	lea	rcx, QWORD PTR p0$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 794  : 		p1 *= norm.y;

	movss	xmm1, DWORD PTR norm$[rsp+4]
	lea	rcx, QWORD PTR p1$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 795  : 		p2 *= norm.z;

	movss	xmm1, DWORD PTR norm$[rsp+8]
	lea	rcx, QWORD PTR p2$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 796  : 		p3 *= norm.w;

	movss	xmm1, DWORD PTR norm$[rsp+12]
	lea	rcx, QWORD PTR p3$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 797  : 		p4 *= detail::taylorInvSqrt(dot(p4, p4));

	lea	rdx, QWORD PTR p4$[rsp]
	lea	rcx, QWORD PTR p4$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR $T62[rsp], xmm0
	lea	rcx, QWORD PTR $T62[rsp]
	call	??$taylorInvSqrt@M@detail@glm@@YAMAEBM@Z ; glm::detail::taylorInvSqrt<float>
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR p4$[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>

; 798  : 
; 799  : 		// Mix contributions from the five corners
; 800  : 		tvec3<T, P> m0 = max(T(0.6) - tvec3<T, P>(dot(x0, x0), dot(x1, x1), dot(x2, x2)), tvec3<T, P>(0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T63[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv482[rsp], rax
	lea	rdx, QWORD PTR x2$[rsp]
	lea	rcx, QWORD PTR x2$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv488[rsp], xmm0
	lea	rdx, QWORD PTR x1$[rsp]
	lea	rcx, QWORD PTR x1$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv492[rsp], xmm0
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR x0$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv488[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv492[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T64[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T65[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv482[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m0$[rsp]
	call	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec3>

; 801  : 		tvec2<T, P> m1 = max(T(0.6) - tvec2<T, P>(dot(x3, x3), dot(x4, x4)             ), tvec2<T, P>(0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T66[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv506[rsp], rax
	lea	rdx, QWORD PTR x4$[rsp]
	lea	rcx, QWORD PTR x4$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv512[rsp], xmm0
	lea	rdx, QWORD PTR x3$[rsp]
	lea	rcx, QWORD PTR x3$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv512[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T67[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T68[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv506[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m1$[rsp]
	call	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec2>

; 802  : 		m0 = m0 * m0;

	lea	r8, QWORD PTR m0$[rsp]
	lea	rdx, QWORD PTR m0$[rsp]
	lea	rcx, QWORD PTR $T69[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	rcx, QWORD PTR m0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 803  : 		m1 = m1 * m1;

	lea	r8, QWORD PTR m1$[rsp]
	lea	rdx, QWORD PTR m1$[rsp]
	lea	rcx, QWORD PTR $T70[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR m1$[rsp], rax

; 804  : 		return T(49) * 

	lea	rdx, QWORD PTR x2$[rsp]
	lea	rcx, QWORD PTR p2$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv537[rsp], xmm0
	lea	rdx, QWORD PTR x1$[rsp]
	lea	rcx, QWORD PTR p1$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv541[rsp], xmm0
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR p0$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv537[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv541[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T71[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv536[rsp], rax
	lea	r8, QWORD PTR m0$[rsp]
	lea	rdx, QWORD PTR m0$[rsp]
	lea	rcx, QWORD PTR $T72[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv536[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv534[rsp], xmm0
	lea	rdx, QWORD PTR x4$[rsp]
	lea	rcx, QWORD PTR p4$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR tv558[rsp], xmm0
	lea	rdx, QWORD PTR x3$[rsp]
	lea	rcx, QWORD PTR p3$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR tv558[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T73[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv557[rsp], rax
	lea	r8, QWORD PTR m1$[rsp]
	lea	rdx, QWORD PTR m1$[rsp]
	lea	rcx, QWORD PTR $T74[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv557[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	xmm1, DWORD PTR tv534[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@42440000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1

; 805  : 			(dot(m0 * m0, tvec3<T, P>(dot(p0, x0), dot(p1, x1), dot(p2, x2))) + 
; 806  : 			dot(m1 * m1, tvec2<T, P>(dot(p3, x3), dot(p4, x4))));
; 807  : 	}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 1944				; 00000798H
	pop	rdi
	pop	rsi
	ret	0
??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ENDP	; glm::simplex<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\noise.inl
;	COMDAT ??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
C$ = 72
D$ = 104
i$ = 152
x0$ = 200
g$ = 248
l$ = 296
i1$ = 344
i2$ = 392
x1$ = 440
x2$ = 488
x3$ = 536
p$ = 584
n_$ = 612
ns$ = 632
j$ = 680
x_$ = 728
y_$ = 776
x$ = 824
y$ = 872
h$ = 920
b0$ = 968
b1$ = 1016
s0$ = 1064
s1$ = 1112
sh$ = 1160
a0$ = 1208
a1$ = 1256
p0$ = 1304
p1$ = 1352
p2$ = 1400
p3$ = 1448
norm$ = 1496
m$ = 1544
$T35 = 1572
$T36 = 1584
$T37 = 1596
$T38 = 1608
$T39 = 1620
$T40 = 1632
$T41 = 1644
$T42 = 1656
$T43 = 1668
$T44 = 1680
$T45 = 1692
$T46 = 1708
$T47 = 1724
$T48 = 1740
$T49 = 1756
$T50 = 1772
$T51 = 1788
$T52 = 1804
$T53 = 1820
$T54 = 1836
$T55 = 1852
$T56 = 1864
$T57 = 1876
$T58 = 1888
$T59 = 1904
$T60 = 1920
$T61 = 1936
$T62 = 1952
$T63 = 1968
$T64 = 1984
$T65 = 2000
$T66 = 2016
$T67 = 2032
$T68 = 2048
$T69 = 2064
$T70 = 2080
$T71 = 2096
$T72 = 2112
$T73 = 2128
$T74 = 2144
$T75 = 2160
$T76 = 2176
$T77 = 2192
$T78 = 2208
$T79 = 2224
$T80 = 2240
$T81 = 2256
$T82 = 2272
$T83 = 2288
$T84 = 2304
$T85 = 2320
$T86 = 2336
$T87 = 2352
$T88 = 2368
$T89 = 2384
$T90 = 2400
tv85 = 2416
tv180 = 2424
tv191 = 2432
tv289 = 2440
tv353 = 2448
tv439 = 2456
tv437 = 2464
tv496 = 2472
tv494 = 2480
tv537 = 2488
tv541 = 2492
tv609 = 2496
tv628 = 2504
tv634 = 2512
tv638 = 2516
tv642 = 2520
tv662 = 2524
tv666 = 2528
tv670 = 2532
tv661 = 2536
v$ = 2576
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z PROC	; glm::simplex<float,0>, COMDAT

; 650  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 2552				; 000009f8H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 622				; 0000026eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2576]

; 651  : 		tvec2<T, P> const C(1.0 / 6.0, 1.0 / 3.0);

	movsd	xmm2, QWORD PTR __real@3fd5555555555555
	movsd	xmm1, QWORD PTR __real@3fc5555555555555
	lea	rcx, QWORD PTR C$[rsp]
	call	??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z	; glm::tvec2<float,0>::tvec2<float,0><double,double>

; 652  : 		tvec4<T, P> const D(0.0, 0.5, 1.0, 2.0);

	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR __real@3ff0000000000000
	movsd	xmm2, QWORD PTR __real@3fe0000000000000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR D$[rsp]
	call	??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z ; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>

; 653  : 
; 654  : 		// First corner
; 655  : 		tvec3<T, P> i(floor(v + dot(v, tvec3<T, P>(C.y))));

	movss	xmm1, DWORD PTR C$[rsp+4]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR i$[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>

; 656  : 		tvec3<T, P> x0(v - i + dot(i, tvec3<T, P>(C.x)));

	movss	xmm1, DWORD PTR C$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR i$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv85[rsp], xmm0
	lea	r8, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	movss	xmm0, DWORD PTR tv85[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR x0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 657  : 
; 658  : 		// Other corners
; 659  : 		tvec3<T, P> g(step(tvec3<T, P>(x0.y, x0.z, x0.x), x0));

	movss	xmm3, DWORD PTR x0$[rsp]
	movss	xmm2, DWORD PTR x0$[rsp+8]
	movss	xmm1, DWORD PTR x0$[rsp+4]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	lea	r8, QWORD PTR x0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR g$[rsp]
	call	??$step@Utvec3@glm@@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec3,float,0>

; 660  : 		tvec3<T, P> l(T(1) - g);

	lea	r8, QWORD PTR g$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR l$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>

; 661  : 		tvec3<T, P> i1(min(g, tvec3<T, P>(l.z, l.x, l.y)));

	movss	xmm3, DWORD PTR l$[rsp+4]
	movss	xmm2, DWORD PTR l$[rsp]
	movss	xmm1, DWORD PTR l$[rsp+8]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR g$[rsp]
	lea	rcx, QWORD PTR i1$[rsp]
	call	??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec3>

; 662  : 		tvec3<T, P> i2(max(g, tvec3<T, P>(l.z, l.x, l.y)));

	movss	xmm3, DWORD PTR l$[rsp+4]
	movss	xmm2, DWORD PTR l$[rsp]
	movss	xmm1, DWORD PTR l$[rsp+8]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR g$[rsp]
	lea	rcx, QWORD PTR i2$[rsp]
	call	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec3>

; 663  : 
; 664  : 		//   x0 = x0 - 0.0 + 0.0 * C.xxx;
; 665  : 		//   x1 = x0 - i1  + 1.0 * C.xxx;
; 666  : 		//   x2 = x0 - i2  + 2.0 * C.xxx;
; 667  : 		//   x3 = x0 - 1.0 + 3.0 * C.xxx;
; 668  : 		tvec3<T, P> x1(x0 - i1 + C.x);

	lea	r8, QWORD PTR i1$[rsp]
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	movss	xmm2, DWORD PTR C$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR x1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 669  : 		tvec3<T, P> x2(x0 - i2 + C.y); // 2.0*C.x = 1/3 = C.y

	lea	r8, QWORD PTR i2$[rsp]
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR $T43[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	movss	xmm2, DWORD PTR C$[rsp+4]
	mov	rdx, rax
	lea	rcx, QWORD PTR x2$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 670  : 		tvec3<T, P> x3(x0 - D.y);      // -1.0+3.0*C.x = -0.5 = -D.y

	movss	xmm2, DWORD PTR D$[rsp+4]
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR x3$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 671  : 
; 672  : 		// Permutations
; 673  : 		i = detail::mod289(i);

	lea	rdx, QWORD PTR i$[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$mod289@U?$tvec3@M$0A@@glm@@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ; glm::detail::mod289<glm::tvec3<float,0> >
	lea	rcx, QWORD PTR i$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 674  : 		tvec4<T, P> p(detail::permute(detail::permute(detail::permute(

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR i2$[rsp]
	movss	xmm2, DWORD PTR i1$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T45[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv180[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR i2$[rsp+4]
	movss	xmm2, DWORD PTR i1$[rsp+4]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T46[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv191[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR i2$[rsp+8]
	movss	xmm2, DWORD PTR i1$[rsp+8]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T47[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR i$[rsp+8]
	lea	rcx, QWORD PTR $T48[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T49[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	movss	xmm2, DWORD PTR i$[rsp+4]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T50[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv191[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T51[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T52[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	movss	xmm2, DWORD PTR i$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T53[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv180[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T54[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR p$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 675  : 			i.z + tvec4<T, P>(T(0), i1.z, i2.z, T(1))) +
; 676  : 			i.y + tvec4<T, P>(T(0), i1.y, i2.y, T(1))) +
; 677  : 			i.x + tvec4<T, P>(T(0), i1.x, i2.x, T(1))));
; 678  : 
; 679  : 		// Gradients: 7x7 points over a square, mapped onto an octahedron.
; 680  : 		// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
; 681  : 		T n_ = static_cast<T>(0.142857142857); // 1.0/7.0

	movss	xmm0, DWORD PTR __real@3e124925
	movss	DWORD PTR n_$[rsp], xmm0

; 682  : 		tvec3<T, P> ns(n_ * tvec3<T, P>(D.w, D.y, D.z) - tvec3<T, P>(D.x, D.z, D.x));

	movss	xmm3, DWORD PTR D$[rsp]
	movss	xmm2, DWORD PTR D$[rsp+8]
	movss	xmm1, DWORD PTR D$[rsp]
	lea	rcx, QWORD PTR $T55[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv289[rsp], rax
	movss	xmm3, DWORD PTR D$[rsp+8]
	movss	xmm2, DWORD PTR D$[rsp+4]
	movss	xmm1, DWORD PTR D$[rsp+12]
	lea	rcx, QWORD PTR $T56[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR n_$[rsp]
	lea	rcx, QWORD PTR $T57[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv289[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR ns$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 683  : 
; 684  : 		tvec4<T, P> j(p - T(49) * floor(p * ns.z * ns.z));  //  mod(p,7*7)

	movss	xmm2, DWORD PTR ns$[rsp+8]
	lea	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR $T58[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR ns$[rsp+8]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T59[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T60[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@42440000
	lea	rcx, QWORD PTR $T61[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR j$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 685  : 
; 686  : 		tvec4<T, P> x_(floor(j * ns.z));

	movss	xmm2, DWORD PTR ns$[rsp+8]
	lea	rdx, QWORD PTR j$[rsp]
	lea	rcx, QWORD PTR $T62[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR x_$[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>

; 687  : 		tvec4<T, P> y_(floor(j - T(7) * x_));    // mod(j,N)

	lea	r8, QWORD PTR x_$[rsp]
	movss	xmm1, DWORD PTR __real@40e00000
	lea	rcx, QWORD PTR $T63[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR j$[rsp]
	lea	rcx, QWORD PTR $T64[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR y_$[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>

; 688  : 
; 689  : 		tvec4<T, P> x(x_ * ns.x + ns.y);

	movss	xmm2, DWORD PTR ns$[rsp]
	lea	rdx, QWORD PTR x_$[rsp]
	lea	rcx, QWORD PTR $T65[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR ns$[rsp+4]
	mov	rdx, rax
	lea	rcx, QWORD PTR x$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 690  : 		tvec4<T, P> y(y_ * ns.x + ns.y);

	movss	xmm2, DWORD PTR ns$[rsp]
	lea	rdx, QWORD PTR y_$[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR ns$[rsp+4]
	mov	rdx, rax
	lea	rcx, QWORD PTR y$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 691  : 		tvec4<T, P> h(T(1) - abs(x) - abs(y));

	lea	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T67[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	QWORD PTR tv353[rsp], rax
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T68[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T69[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv353[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR h$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 692  : 
; 693  : 		tvec4<T, P> b0(x.x, x.y, y.x, y.y);

	movss	xmm0, DWORD PTR y$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR x$[rsp+4]
	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR b0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 694  : 		tvec4<T, P> b1(x.z, x.w, y.z, y.w);

	movss	xmm0, DWORD PTR y$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR y$[rsp+8]
	movss	xmm2, DWORD PTR x$[rsp+12]
	movss	xmm1, DWORD PTR x$[rsp+8]
	lea	rcx, QWORD PTR b1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 695  : 
; 696  : 		// vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
; 697  : 		// vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
; 698  : 		tvec4<T, P> s0(floor(b0) * T(2) + T(1));

	lea	rdx, QWORD PTR b0$[rsp]
	lea	rcx, QWORD PTR $T70[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T71[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR s0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 699  : 		tvec4<T, P> s1(floor(b1) * T(2) + T(1));

	lea	rdx, QWORD PTR b1$[rsp]
	lea	rcx, QWORD PTR $T72[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@40000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T73[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR s1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 700  : 		tvec4<T, P> sh(-step(h, tvec4<T, P>(0.0)));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T74[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR h$[rsp]
	lea	rcx, QWORD PTR $T75[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR sh$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::operator-<float,0>

; 701  : 
; 702  : 		tvec4<T, P> a0 = tvec4<T, P>(b0.x, b0.z, b0.y, b0.w) + tvec4<T, P>(s0.x, s0.z, s0.y, s0.w) * tvec4<T, P>(sh.x, sh.x, sh.y, sh.y);

	movss	xmm0, DWORD PTR sh$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR sh$[rsp+4]
	movss	xmm2, DWORD PTR sh$[rsp]
	movss	xmm1, DWORD PTR sh$[rsp]
	lea	rcx, QWORD PTR $T76[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv439[rsp], rax
	movss	xmm0, DWORD PTR s0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s0$[rsp+4]
	movss	xmm2, DWORD PTR s0$[rsp+8]
	movss	xmm1, DWORD PTR s0$[rsp]
	lea	rcx, QWORD PTR $T77[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv439[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T78[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv437[rsp], rax
	movss	xmm0, DWORD PTR b0$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR b0$[rsp+4]
	movss	xmm2, DWORD PTR b0$[rsp+8]
	movss	xmm1, DWORD PTR b0$[rsp]
	lea	rcx, QWORD PTR $T79[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv437[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR a0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 703  : 		tvec4<T, P> a1 = tvec4<T, P>(b1.x, b1.z, b1.y, b1.w) + tvec4<T, P>(s1.x, s1.z, s1.y, s1.w) * tvec4<T, P>(sh.z, sh.z, sh.w, sh.w);

	movss	xmm0, DWORD PTR sh$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR sh$[rsp+12]
	movss	xmm2, DWORD PTR sh$[rsp+8]
	movss	xmm1, DWORD PTR sh$[rsp+8]
	lea	rcx, QWORD PTR $T80[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv496[rsp], rax
	movss	xmm0, DWORD PTR s1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s1$[rsp+4]
	movss	xmm2, DWORD PTR s1$[rsp+8]
	movss	xmm1, DWORD PTR s1$[rsp]
	lea	rcx, QWORD PTR $T81[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv496[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T82[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv494[rsp], rax
	movss	xmm0, DWORD PTR b1$[rsp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR b1$[rsp+4]
	movss	xmm2, DWORD PTR b1$[rsp+8]
	movss	xmm1, DWORD PTR b1$[rsp]
	lea	rcx, QWORD PTR $T83[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv494[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR a1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 704  : 
; 705  : 		tvec3<T, P> p0(a0.x, a0.y, h.x);

	movss	xmm3, DWORD PTR h$[rsp]
	movss	xmm2, DWORD PTR a0$[rsp+4]
	movss	xmm1, DWORD PTR a0$[rsp]
	lea	rcx, QWORD PTR p0$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 706  : 		tvec3<T, P> p1(a0.z, a0.w, h.y);

	movss	xmm3, DWORD PTR h$[rsp+4]
	movss	xmm2, DWORD PTR a0$[rsp+12]
	movss	xmm1, DWORD PTR a0$[rsp+8]
	lea	rcx, QWORD PTR p1$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 707  : 		tvec3<T, P> p2(a1.x, a1.y, h.z);

	movss	xmm3, DWORD PTR h$[rsp+8]
	movss	xmm2, DWORD PTR a1$[rsp+4]
	movss	xmm1, DWORD PTR a1$[rsp]
	lea	rcx, QWORD PTR p2$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 708  : 		tvec3<T, P> p3(a1.z, a1.w, h.w);

	movss	xmm3, DWORD PTR h$[rsp+12]
	movss	xmm2, DWORD PTR a1$[rsp+12]
	movss	xmm1, DWORD PTR a1$[rsp+8]
	lea	rcx, QWORD PTR p3$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 709  : 
; 710  : 		// Normalise gradients
; 711  : 		tvec4<T, P> norm = detail::taylorInvSqrt(tvec4<T, P>(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));

	lea	rdx, QWORD PTR p3$[rsp]
	lea	rcx, QWORD PTR p3$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv537[rsp], xmm0
	lea	rdx, QWORD PTR p2$[rsp]
	lea	rcx, QWORD PTR p2$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv541[rsp], xmm0
	lea	rdx, QWORD PTR p1$[rsp]
	lea	rcx, QWORD PTR p1$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv609[rsp], xmm0
	lea	rdx, QWORD PTR p0$[rsp]
	lea	rcx, QWORD PTR p0$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR tv537[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv541[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv609[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T84[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR norm$[rsp]
	call	??$taylorInvSqrt@M$0A@@detail@glm@@YA?AU?$tvec4@M$0A@@1@AEBU21@@Z ; glm::detail::taylorInvSqrt<float,0>

; 712  : 		p0 *= norm.x;

	movss	xmm1, DWORD PTR norm$[rsp]
	lea	rcx, QWORD PTR p0$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 713  : 		p1 *= norm.y;

	movss	xmm1, DWORD PTR norm$[rsp+4]
	lea	rcx, QWORD PTR p1$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 714  : 		p2 *= norm.z;

	movss	xmm1, DWORD PTR norm$[rsp+8]
	lea	rcx, QWORD PTR p2$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 715  : 		p3 *= norm.w;

	movss	xmm1, DWORD PTR norm$[rsp+12]
	lea	rcx, QWORD PTR p3$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 716  : 
; 717  : 		// Mix final noise value
; 718  : 		tvec4<T, P> m = max(T(0.6) - tvec4<T, P>(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), tvec4<T, P>(0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T85[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv628[rsp], rax
	lea	rdx, QWORD PTR x3$[rsp]
	lea	rcx, QWORD PTR x3$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv634[rsp], xmm0
	lea	rdx, QWORD PTR x2$[rsp]
	lea	rcx, QWORD PTR x2$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv638[rsp], xmm0
	lea	rdx, QWORD PTR x1$[rsp]
	lea	rcx, QWORD PTR x1$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv642[rsp], xmm0
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR x0$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR tv634[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv638[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv642[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T86[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T87[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv628[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m$[rsp]
	call	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec4>

; 719  : 		m = m * m;

	lea	r8, QWORD PTR m$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T88[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 720  : 		return T(42) * dot(m * m, tvec4<T, P>(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));

	lea	rdx, QWORD PTR x3$[rsp]
	lea	rcx, QWORD PTR p3$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv662[rsp], xmm0
	lea	rdx, QWORD PTR x2$[rsp]
	lea	rcx, QWORD PTR p2$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv666[rsp], xmm0
	lea	rdx, QWORD PTR x1$[rsp]
	lea	rcx, QWORD PTR p1$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR tv670[rsp], xmm0
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR p0$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR tv662[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv666[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv670[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T89[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv661[rsp], rax
	lea	r8, QWORD PTR m$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T90[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv661[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	xmm1, DWORD PTR __real@42280000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1

; 721  : 	}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 2552				; 000009f8H
	pop	rdi
	pop	rsi
	ret	0
??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ENDP	; glm::simplex<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\noise.inl
;	COMDAT ??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
C$ = 72
i$ = 120
x0$ = 152
i1$ = 184
x12$ = 216
p$ = 264
m$ = 312
x$ = 360
h$ = 408
ox$ = 456
a0$ = 504
g$ = 552
$T15 = 580
$T16 = 588
$T17 = 596
$T18 = 604
$T19 = 616
$T20 = 624
$T21 = 632
$T22 = 640
$T23 = 656
$T24 = 672
$T25 = 688
$T26 = 696
$T27 = 704
$T28 = 712
$T29 = 720
$T30 = 732
$T31 = 744
$T32 = 756
$T33 = 768
$T34 = 780
$T35 = 792
$T36 = 804
$T37 = 816
$T38 = 824
$T39 = 832
$T40 = 840
$T41 = 848
$T42 = 860
$T43 = 872
$T44 = 884
$T45 = 896
$T46 = 908
$T47 = 920
$T48 = 932
$T49 = 944
$T50 = 956
$T51 = 968
$T52 = 980
$T53 = 992
$T54 = 1004
tv85 = 1016
tv141 = 1024
tv145 = 1032
tv182 = 1040
tv240 = 1048
tv248 = 1056
tv246 = 1064
tv260 = 1072
tv258 = 1080
tv245 = 1088
tv357 = 1096
v$ = 1136
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z PROC	; glm::simplex<float,0>, COMDAT

; 593  : 	{

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1112				; 00000458H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 262				; 00000106H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1136]

; 594  : 		tvec4<T, P> const C = tvec4<T, P>(

	movss	xmm0, DWORD PTR __real@3cc7ce0c
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@bf13cd3a
	movss	xmm2, DWORD PTR __real@3ebb67af
	movss	xmm1, DWORD PTR __real@3e58658c
	lea	rcx, QWORD PTR C$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 595  : 			T( 0.211324865405187),  // (3.0 -  sqrt(3.0)) / 6.0
; 596  : 			T( 0.366025403784439),  //  0.5 * (sqrt(3.0)  - 1.0)
; 597  : 			T(-0.577350269189626),	// -1.0 + 2.0 * C.x
; 598  : 			T( 0.024390243902439)); //  1.0 / 41.0
; 599  : 
; 600  : 		// First corner
; 601  : 		tvec2<T, P> i  = floor(v + dot(v, tvec2<T, P>(C[1])));

	mov	edx, 1
	lea	rcx, QWORD PTR C$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR i$[rsp]
	call	??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec2>

; 602  : 		tvec2<T, P> x0 = v -   i + dot(i, tvec2<T, P>(C[0]));

	xor	edx, edx
	lea	rcx, QWORD PTR C$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR i$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR tv85[rsp], xmm0
	lea	r8, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	movss	xmm0, DWORD PTR tv85[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR x0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>

; 603  : 
; 604  : 		// Other corners
; 605  : 		//i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
; 606  : 		//i1.y = 1.0 - i1.x;
; 607  : 		tvec2<T, P> i1 = (x0.x > x0.y) ? tvec2<T, P>(1, 0) : tvec2<T, P>(0, 1);

	movss	xmm0, DWORD PTR x0$[rsp]
	comiss	xmm0, DWORD PTR x0$[rsp+4]
	jbe	SHORT $LN3@simplex
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv141[rsp], rax
	jmp	SHORT $LN4@simplex
$LN3@simplex:
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv141[rsp], rax
$LN4@simplex:
	mov	rax, QWORD PTR tv141[rsp]
	mov	QWORD PTR $T19[rsp], rax
	mov	rax, QWORD PTR $T19[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR i1$[rsp], rax

; 608  : 		// x0 = x0 - 0.0 + 0.0 * C.xx ;
; 609  : 		// x1 = x0 - i1 + 1.0 * C.xx ;
; 610  : 		// x2 = x0 - 1.0 + 2.0 * C.xx ;
; 611  : 		tvec4<T, P> x12 = tvec4<T, P>(x0.x, x0.y, x0.x, x0.y) + tvec4<T, P>(C.x, C.x, C.z, C.z);

	movss	xmm0, DWORD PTR C$[rsp+8]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR C$[rsp+8]
	movss	xmm2, DWORD PTR C$[rsp]
	movss	xmm1, DWORD PTR C$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv145[rsp], rax
	movss	xmm0, DWORD PTR x0$[rsp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$[rsp]
	movss	xmm2, DWORD PTR x0$[rsp+4]
	movss	xmm1, DWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv145[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR x12$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 612  : 		x12 = tvec4<T, P>(tvec2<T, P>(x12) - i1, x12.z, x12.w);

	lea	rdx, QWORD PTR x12$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?0M$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><float,0>
	lea	r8, QWORD PTR i1$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	movss	xmm3, DWORD PTR x12$[rsp+12]
	movss	xmm2, DWORD PTR x12$[rsp+8]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?0MMM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@MM@Z ; glm::tvec4<float,0>::tvec4<float,0><float,float,float,0>
	lea	rcx, QWORD PTR x12$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 613  : 
; 614  : 		// Permutations
; 615  : 		i = mod(i, tvec2<T, P>(289)); // Avoid truncation effects in permutation

	movss	xmm1, DWORD PTR __real@43908000
	lea	rcx, QWORD PTR $T27[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR i$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec2>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR i$[rsp], rax

; 616  : 		tvec3<T, P> p = detail::permute(

	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR i1$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T29[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv182[rsp], rax
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR i1$[rsp+4]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T30[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR i$[rsp+4]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>
	movss	xmm2, DWORD PTR i$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv182[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR p$[rsp]
	call	??$permute@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@@Z ; glm::detail::permute<float,0>

; 617  : 			detail::permute(i.y + tvec3<T, P>(T(0), i1.y, T(1)))
; 618  : 			+ i.x + tvec3<T, P>(T(0), i1.x, T(1)));
; 619  : 
; 620  : 		tvec3<T, P> m = max(tvec3<T, P>(0.5) - tvec3<T, P>(

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T35[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv240[rsp], rax
	movss	xmm2, DWORD PTR x12$[rsp+12]
	movss	xmm1, DWORD PTR x12$[rsp+8]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv248[rsp], rax
	movss	xmm2, DWORD PTR x12$[rsp+12]
	movss	xmm1, DWORD PTR x12$[rsp+8]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv248[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR tv246[rsp], xmm0
	movss	xmm2, DWORD PTR x12$[rsp+4]
	movss	xmm1, DWORD PTR x12$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv260[rsp], rax
	movss	xmm2, DWORD PTR x12$[rsp+4]
	movss	xmm1, DWORD PTR x12$[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv260[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR tv258[rsp], xmm0
	lea	rdx, QWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR x0$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	xmm1, DWORD PTR tv246[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv258[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T36[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv245[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T41[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv245[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv240[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m$[rsp]
	call	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec3>

; 621  : 			dot(x0, x0),
; 622  : 			dot(tvec2<T, P>(x12.x, x12.y), tvec2<T, P>(x12.x, x12.y)), 
; 623  : 			dot(tvec2<T, P>(x12.z, x12.w), tvec2<T, P>(x12.z, x12.w))), tvec3<T, P>(0));
; 624  : 		m = m * m ;

	lea	r8, QWORD PTR m$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T43[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 625  : 		m = m * m ;

	lea	r8, QWORD PTR m$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 626  : 
; 627  : 		// Gradients: 41 points uniformly over a line, mapped onto a diamond.
; 628  : 		// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
; 629  : 
; 630  : 		tvec3<T, P> x = static_cast<T>(2) * fract(p * C.w) - T(1);

	movss	xmm2, DWORD PTR C$[rsp+12]
	lea	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec3>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR x$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 631  : 		tvec3<T, P> h = abs(x) - T(0.5);

	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T48[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
	movss	xmm2, DWORD PTR __real@3f000000
	mov	rdx, rax
	lea	rcx, QWORD PTR h$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>

; 632  : 		tvec3<T, P> ox = floor(x + T(0.5));

	movss	xmm2, DWORD PTR __real@3f000000
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T49[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR ox$[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>

; 633  : 		tvec3<T, P> a0 = x - ox;

	lea	r8, QWORD PTR ox$[rsp]
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR a0$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 634  : 
; 635  : 		// Normalise gradients implicitly by scaling m
; 636  : 		// Inlined for speed: m *= taylorInvSqrt( a0*a0 + h*h );
; 637  : 		m *= static_cast<T>(1.79284291400159) - T(0.85373472095314) * (a0 * a0 + h * h);

	lea	r8, QWORD PTR h$[rsp]
	lea	rdx, QWORD PTR h$[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv357[rsp], rax
	lea	r8, QWORD PTR a0$[rsp]
	lea	rdx, QWORD PTR a0$[rsp]
	lea	rcx, QWORD PTR $T51[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv357[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T52[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3f5a8e5c
	lea	rcx, QWORD PTR $T53[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3fe57be0
	lea	rcx, QWORD PTR $T54[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR m$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec3<float,0>::operator*=<float>

; 638  : 
; 639  : 		// Compute final noise value at P
; 640  : 		tvec3<T, P> g;

	lea	rcx, QWORD PTR g$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@XZ		; glm::tvec3<float,0>::tvec3<float,0>

; 641  : 		g.x  = a0.x  * x0.x  + h.x  * x0.y;

	movss	xmm0, DWORD PTR a0$[rsp]
	mulss	xmm0, DWORD PTR x0$[rsp]
	movss	xmm1, DWORD PTR h$[rsp]
	mulss	xmm1, DWORD PTR x0$[rsp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR g$[rsp], xmm0

; 642  : 		//g.yz = a0.yz * x12.xz + h.yz * x12.yw;
; 643  : 		g.y = a0.y * x12.x + h.y * x12.y;

	movss	xmm0, DWORD PTR a0$[rsp+4]
	mulss	xmm0, DWORD PTR x12$[rsp]
	movss	xmm1, DWORD PTR h$[rsp+4]
	mulss	xmm1, DWORD PTR x12$[rsp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR g$[rsp+4], xmm0

; 644  : 		g.z = a0.z * x12.z + h.z * x12.w;

	movss	xmm0, DWORD PTR a0$[rsp+8]
	mulss	xmm0, DWORD PTR x12$[rsp+8]
	movss	xmm1, DWORD PTR h$[rsp+8]
	mulss	xmm1, DWORD PTR x12$[rsp+12]
	addss	xmm0, xmm1
	movss	DWORD PTR g$[rsp+8], xmm0

; 645  : 		return T(130) * dot(m, g);

	lea	rdx, QWORD PTR g$[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR __real@43020000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1

; 646  : 	}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 1112				; 00000458H
	pop	rdi
	pop	rsi
	ret	0
??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ENDP	; glm::simplex<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_noise.cpp
_TEXT	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?test_simplex@@YAHXZ PROC				; test_simplex

; 8    : {

$LN45:
	push	rdi
	sub	rsp, 1088				; 00000440H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 260				; 00000104H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 9    : 	{
; 10   : 		std::vector<glm::byte> ImageData(Size * Size * 3);

	lea	rcx, QWORD PTR $T24[rsp]
	call	??0?$allocator@E@std@@QEAA@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	r8, rax
	mov	edx, 12288				; 00003000H
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	npad	1

; 11   : 		
; 12   : 		for(std::size_t y = 0; y < Size; ++y)

	mov	QWORD PTR y$10[rsp], 0
	jmp	SHORT $LN4@test_simpl
$LN2@test_simpl:
	mov	rax, QWORD PTR y$10[rsp]
	inc	rax
	mov	QWORD PTR y$10[rsp], rax
$LN4@test_simpl:
	cmp	QWORD PTR y$10[rsp], 64			; 00000040H
	jae	$LN3@test_simpl

; 13   : 		for(std::size_t x = 0; x < Size; ++x)

	mov	QWORD PTR x$11[rsp], 0
	jmp	SHORT $LN7@test_simpl
$LN5@test_simpl:
	mov	rax, QWORD PTR x$11[rsp]
	inc	rax
	mov	QWORD PTR x$11[rsp], rax
$LN7@test_simpl:
	cmp	QWORD PTR x$11[rsp], 64			; 00000040H
	jae	$LN6@test_simpl

; 14   : 		{
; 15   : 			ImageData[(x + y * Size) * 3 + 0] = glm::byte(glm::simplex(glm::vec2(x / 64.f, y / 64.f)) * 128.f + 127.f);

	mov	rax, QWORD PTR y$10[rsp]
	test	rax, rax
	jl	SHORT $LN43@test_simpl
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN44@test_simpl
$LN43@test_simpl:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN44@test_simpl:
	divss	xmm0, DWORD PTR __real@42800000
	mov	rax, QWORD PTR x$11[rsp]
	test	rax, rax
	jl	SHORT $LN41@test_simpl
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN42@test_simpl
$LN41@test_simpl:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN42@test_simpl:
	divss	xmm1, DWORD PTR __real@42800000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T25[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, rax
	call	??$simplex@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::simplex<float,0>
	mulss	xmm0, DWORD PTR __real@43000000
	addss	xmm0, DWORD PTR __real@42fe0000
	cvttss2si eax, xmm0
	mov	BYTE PTR tv383[rsp], al
	imul	rcx, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	ecx, BYTE PTR tv383[rsp]
	mov	BYTE PTR [rax], cl

; 16   : 			ImageData[(x + y * Size) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv134[rsp], rax
	imul	rcx, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	inc	rcx
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv134[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 17   : 			ImageData[(x + y * Size) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv147[rsp], rax
	imul	rcx, QWORD PTR y$10[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	add	rcx, 2
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv147[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 18   : 		}

	jmp	$LN5@test_simpl
$LN6@test_simpl:
	jmp	$LN2@test_simpl
$LN3@test_simpl:

; 19   : 
; 20   : 		gli::texture2D Texture(1);

	mov	QWORD PTR $T26[rsp], 1
	lea	rdx, QWORD PTR $T26[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??0texture2D@gli@@QEAA@AEB_K@Z		; gli::texture2D::texture2D
	npad	1

; 21   : 		Texture[0] = gli::image2D(glm::uvec2(Size), gli::RGB8U);

	mov	DWORD PTR $T29[rsp], 3
	mov	QWORD PTR $T27[rsp], 0
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T30[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	lea	r8, QWORD PTR $T29[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T28[rsp]
	call	??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z ; gli::image2D::image2D
	mov	QWORD PTR tv153[rsp], rax
	mov	rax, QWORD PTR tv153[rsp]
	mov	QWORD PTR tv413[rsp], rax
	lea	rdx, QWORD PTR $T27[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rdx, QWORD PTR tv413[rsp]
	mov	rcx, rax
	call	??4image2D@gli@@QEAAAEAV01@AEBV01@@Z
	npad	1
	lea	rcx, QWORD PTR $T28[rsp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D

; 22   : 		memcpy(Texture[0].data(), &ImageData[0], ImageData.size());

	mov	QWORD PTR $T31[rsp], 0
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	QWORD PTR tv172[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv175[rsp], rax
	lea	rdx, QWORD PTR $T31[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rcx, rax
	call	?data@image2D@gli@@QEAAPEAEXZ		; gli::image2D::data
	mov	rcx, QWORD PTR tv172[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR tv175[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	memcpy

; 23   : 		gli::saveDDS9(Texture, "texture_simplex2d_256.dds");

	lea	rdx, OFFSET FLAT:$SG79866
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR Texture$12[rsp]
	call	?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; gli::gtx::loader_dds9::saveDDS9
	npad	1
	lea	rcx, QWORD PTR $T13[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 24   : 	}

	lea	rcx, QWORD PTR Texture$12[rsp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	npad	1
	lea	rcx, QWORD PTR ImageData$9[rsp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >

; 25   : 
; 26   : 	{
; 27   : 		std::vector<glm::byte> ImageData(Size * Size * 3);

	lea	rcx, QWORD PTR $T32[rsp]
	call	??0?$allocator@E@std@@QEAA@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	r8, rax
	mov	edx, 12288				; 00003000H
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	npad	1

; 28   : 		
; 29   : 		for(std::size_t y = 0; y < Size; ++y)

	mov	QWORD PTR y$15[rsp], 0
	jmp	SHORT $LN10@test_simpl
$LN8@test_simpl:
	mov	rax, QWORD PTR y$15[rsp]
	inc	rax
	mov	QWORD PTR y$15[rsp], rax
$LN10@test_simpl:
	cmp	QWORD PTR y$15[rsp], 64			; 00000040H
	jae	$LN9@test_simpl

; 30   : 		for(std::size_t x = 0; x < Size; ++x)

	mov	QWORD PTR x$16[rsp], 0
	jmp	SHORT $LN13@test_simpl
$LN11@test_simpl:
	mov	rax, QWORD PTR x$16[rsp]
	inc	rax
	mov	QWORD PTR x$16[rsp], rax
$LN13@test_simpl:
	cmp	QWORD PTR x$16[rsp], 64			; 00000040H
	jae	$LN12@test_simpl

; 31   : 		{
; 32   : 			ImageData[(x + y * Size) * 3 + 0] = glm::byte(glm::simplex(glm::vec3(x / 64.f, y / 64.f, 0.5f)) * 128.f + 127.f);

	mov	rax, QWORD PTR y$15[rsp]
	test	rax, rax
	jl	SHORT $LN39@test_simpl
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN40@test_simpl
$LN39@test_simpl:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN40@test_simpl:
	divss	xmm0, DWORD PTR __real@42800000
	mov	rax, QWORD PTR x$16[rsp]
	test	rax, rax
	jl	SHORT $LN37@test_simpl
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN38@test_simpl
$LN37@test_simpl:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN38@test_simpl:
	divss	xmm1, DWORD PTR __real@42800000
	movss	xmm3, DWORD PTR __real@3f000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T33[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, rax
	call	??$simplex@M$0A@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::simplex<float,0>
	mulss	xmm0, DWORD PTR __real@43000000
	addss	xmm0, DWORD PTR __real@42fe0000
	cvttss2si eax, xmm0
	mov	BYTE PTR tv162[rsp], al
	imul	rcx, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$16[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	ecx, BYTE PTR tv162[rsp]
	mov	BYTE PTR [rax], cl

; 33   : 			ImageData[(x + y * Size) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$16[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv228[rsp], rax
	imul	rcx, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$16[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	inc	rcx
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv228[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 34   : 			ImageData[(x + y * Size) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$16[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv241[rsp], rax
	imul	rcx, QWORD PTR y$15[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$16[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	add	rcx, 2
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv241[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 35   : 		}

	jmp	$LN11@test_simpl
$LN12@test_simpl:
	jmp	$LN8@test_simpl
$LN9@test_simpl:

; 36   : 
; 37   : 		gli::texture2D Texture(1);

	mov	QWORD PTR $T34[rsp], 1
	lea	rdx, QWORD PTR $T34[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??0texture2D@gli@@QEAA@AEB_K@Z		; gli::texture2D::texture2D
	npad	1

; 38   : 		Texture[0] = gli::image2D(glm::uvec2(Size), gli::RGB8U);

	mov	DWORD PTR $T37[rsp], 3
	mov	QWORD PTR $T35[rsp], 0
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T38[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	lea	r8, QWORD PTR $T37[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T36[rsp]
	call	??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z ; gli::image2D::image2D
	mov	QWORD PTR tv247[rsp], rax
	mov	rax, QWORD PTR tv247[rsp]
	mov	QWORD PTR tv418[rsp], rax
	lea	rdx, QWORD PTR $T35[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rdx, QWORD PTR tv418[rsp]
	mov	rcx, rax
	call	??4image2D@gli@@QEAAAEAV01@AEBV01@@Z
	npad	1
	lea	rcx, QWORD PTR $T36[rsp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D

; 39   : 		memcpy(Texture[0].data(), &ImageData[0], ImageData.size());

	mov	QWORD PTR $T39[rsp], 0
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	QWORD PTR tv266[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv269[rsp], rax
	lea	rdx, QWORD PTR $T39[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rcx, rax
	call	?data@image2D@gli@@QEAAPEAEXZ		; gli::image2D::data
	mov	rcx, QWORD PTR tv266[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR tv269[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	memcpy

; 40   : 		gli::saveDDS9(Texture, "texture_simplex3d_256.dds");

	lea	rdx, OFFSET FLAT:$SG79867
	lea	rcx, QWORD PTR $T18[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rdx, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR Texture$17[rsp]
	call	?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; gli::gtx::loader_dds9::saveDDS9
	npad	1
	lea	rcx, QWORD PTR $T18[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 41   : 	}

	lea	rcx, QWORD PTR Texture$17[rsp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	npad	1
	lea	rcx, QWORD PTR ImageData$14[rsp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >

; 42   : 	
; 43   : 	{
; 44   : 		std::vector<glm::byte> ImageData(Size * Size * 3);

	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$allocator@E@std@@QEAA@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	r8, rax
	mov	edx, 12288				; 00003000H
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	npad	1

; 45   : 		
; 46   : 		for(std::size_t y = 0; y < Size; ++y)

	mov	QWORD PTR y$20[rsp], 0
	jmp	SHORT $LN16@test_simpl
$LN14@test_simpl:
	mov	rax, QWORD PTR y$20[rsp]
	inc	rax
	mov	QWORD PTR y$20[rsp], rax
$LN16@test_simpl:
	cmp	QWORD PTR y$20[rsp], 64			; 00000040H
	jae	$LN15@test_simpl

; 47   : 		for(std::size_t x = 0; x < Size; ++x)

	mov	QWORD PTR x$21[rsp], 0
	jmp	SHORT $LN19@test_simpl
$LN17@test_simpl:
	mov	rax, QWORD PTR x$21[rsp]
	inc	rax
	mov	QWORD PTR x$21[rsp], rax
$LN19@test_simpl:
	cmp	QWORD PTR x$21[rsp], 64			; 00000040H
	jae	$LN18@test_simpl

; 48   : 		{
; 49   : 			ImageData[(x + y * Size) * 3 + 0] = glm::byte(glm::simplex(glm::vec4(x / 64.f, y / 64.f, 0.5f, 0.5f)) * 128.f + 127.f);

	mov	rax, QWORD PTR y$20[rsp]
	test	rax, rax
	jl	SHORT $LN35@test_simpl
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN36@test_simpl
$LN35@test_simpl:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN36@test_simpl:
	divss	xmm0, DWORD PTR __real@42800000
	mov	rax, QWORD PTR x$21[rsp]
	test	rax, rax
	jl	SHORT $LN33@test_simpl
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN34@test_simpl
$LN33@test_simpl:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN34@test_simpl:
	divss	xmm1, DWORD PTR __real@42800000
	movss	xmm2, DWORD PTR __real@3f000000
	movss	DWORD PTR [rsp+32], xmm2
	movss	xmm3, DWORD PTR __real@3f000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T41[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, rax
	call	??$simplex@M$0A@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ; glm::simplex<float,0>
	mulss	xmm0, DWORD PTR __real@43000000
	addss	xmm0, DWORD PTR __real@42fe0000
	cvttss2si eax, xmm0
	mov	BYTE PTR tv556[rsp], al
	imul	rcx, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$21[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	ecx, BYTE PTR tv556[rsp]
	mov	BYTE PTR [rax], cl

; 50   : 			ImageData[(x + y * Size) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$21[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv355[rsp], rax
	imul	rcx, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$21[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	inc	rcx
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv355[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 51   : 			ImageData[(x + y * Size) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

	imul	rax, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR x$21[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	rax, rax, 3
	mov	rdx, rax
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv368[rsp], rax
	imul	rcx, QWORD PTR y$20[rsp], 64		; 00000040H
	mov	rdx, QWORD PTR x$21[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	imul	rcx, rcx, 3
	add	rcx, 2
	mov	rdx, rcx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	rcx, QWORD PTR tv368[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 52   : 		}

	jmp	$LN17@test_simpl
$LN18@test_simpl:
	jmp	$LN14@test_simpl
$LN15@test_simpl:

; 53   : 
; 54   : 		gli::texture2D Texture(1);

	mov	QWORD PTR $T42[rsp], 1
	lea	rdx, QWORD PTR $T42[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??0texture2D@gli@@QEAA@AEB_K@Z		; gli::texture2D::texture2D
	npad	1

; 55   : 		Texture[0] = gli::image2D(glm::uvec2(Size), gli::RGB8U);

	mov	DWORD PTR $T45[rsp], 3
	mov	QWORD PTR $T43[rsp], 0
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T46[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	lea	r8, QWORD PTR $T45[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T44[rsp]
	call	??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z ; gli::image2D::image2D
	mov	QWORD PTR tv374[rsp], rax
	mov	rax, QWORD PTR tv374[rsp]
	mov	QWORD PTR tv423[rsp], rax
	lea	rdx, QWORD PTR $T43[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rdx, QWORD PTR tv423[rsp]
	mov	rcx, rax
	call	??4image2D@gli@@QEAAAEAV01@AEBV01@@Z
	npad	1
	lea	rcx, QWORD PTR $T44[rsp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D

; 56   : 		memcpy(Texture[0].data(), &ImageData[0], ImageData.size());

	mov	QWORD PTR $T47[rsp], 0
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	QWORD PTR tv393[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	QWORD PTR tv396[rsp], rax
	lea	rdx, QWORD PTR $T47[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rcx, rax
	call	?data@image2D@gli@@QEAAPEAEXZ		; gli::image2D::data
	mov	rcx, QWORD PTR tv393[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR tv396[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	memcpy

; 57   : 		gli::saveDDS9(Texture, "texture_simplex4d_256.dds");

	lea	rdx, OFFSET FLAT:$SG79868
	lea	rcx, QWORD PTR $T23[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR Texture$22[rsp]
	call	?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; gli::gtx::loader_dds9::saveDDS9
	npad	1
	lea	rcx, QWORD PTR $T23[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 58   : 	}

	lea	rcx, QWORD PTR Texture$22[rsp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	npad	1
	lea	rcx, QWORD PTR ImageData$19[rsp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >

; 59   : 
; 60   : 	return 0;

	xor	eax, eax

; 61   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_simplex@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1088				; 00000440H
	pop	rdi
	ret	0
?test_simplex@@YAHXZ ENDP				; test_simplex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$0@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR ImageData$9[rbp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$1@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Texture$12[rbp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$2@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$2
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T28[rbp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$2@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$3@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$3
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T13[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$3@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$4@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$4
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR ImageData$14[rbp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$4@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$5@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$5
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Texture$17[rbp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$5@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$6@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$6
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T36[rbp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$6@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$7@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$7
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T18[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$7@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$8@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$8
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR ImageData$19[rbp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$8@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$8
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$9@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$9
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Texture$22[rbp]
	call	??1texture2D@gli@@QEAA@XZ		; gli::texture2D::~texture2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$9@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$9
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$10@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$10
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T44[rbp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$10@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$10
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
ImageData$9 = 56
y$10 = 104
x$11 = 112
Texture$12 = 136
$T13 = 184
ImageData$14 = 232
y$15 = 280
x$16 = 288
Texture$17 = 312
$T18 = 360
ImageData$19 = 408
y$20 = 456
x$21 = 464
Texture$22 = 488
$T23 = 536
$T24 = 584
$T25 = 588
$T26 = 600
$T27 = 608
$T28 = 616
$T29 = 664
$T30 = 668
$T31 = 680
$T32 = 688
$T33 = 692
$T34 = 704
$T35 = 712
$T36 = 720
$T37 = 768
$T38 = 772
$T39 = 784
$T40 = 792
$T41 = 796
$T42 = 816
$T43 = 824
$T44 = 832
$T45 = 880
$T46 = 884
$T47 = 896
tv383 = 904
tv134 = 912
tv147 = 920
tv153 = 928
tv413 = 936
tv172 = 944
tv175 = 952
tv162 = 960
tv228 = 968
tv241 = 976
tv247 = 984
tv418 = 992
tv266 = 1000
tv269 = 1008
tv556 = 1016
tv355 = 1024
tv368 = 1032
tv374 = 1040
tv423 = 1048
tv393 = 1056
tv396 = 1064
__$ArrayPad$ = 1072
?dtor$11@?0??test_simplex@@YAHXZ@4HA PROC		; `test_simplex'::`1'::dtor$11
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T23[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$11@?0??test_simplex@@YAHXZ@4HA ENDP		; `test_simplex'::`1'::dtor$11
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 168				; 000000a8H
	mov	rcx, rax
	call	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 168				; 000000a8H
	mov	rcx, rax
	call	QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	sub	rax, 168				; 000000a8H
	mov	rcx, rax
	call	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	rax, QWORD PTR this$[rsp]
	sub	rax, 168				; 000000a8H
	mov	edx, 264				; 00000108H
	mov	rcx, rax
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	sub	rax, 168				; 000000a8H
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::close, COMDAT

; 1160 :     void close() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1161 :         if (!_Filebuffer.close()) {

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
	test	rax, rax
	jne	SHORT $LN2@close

; 1162 :             _Myios::setstate(ios_base::failbit);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx
	xor	r8d, r8d
	mov	edx, 2
	mov	rcx, rax
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
$LN2@close:

; 1163 :         }
; 1164 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >, COMDAT

; 1129 :     __CLR_OR_THIS_CALL ~basic_ofstream() noexcept override {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax-168]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
	mov	QWORD PTR [rcx+rax-168], rdx
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax-168]
	movsxd	rax, DWORD PTR [rax+4]
	sub	rax, 168				; 000000a8H
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx-168]
	movsxd	rcx, DWORD PTR [rcx+4]
	mov	rdx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rdx+rcx-172], eax
	mov	rax, QWORD PTR this$[rsp]
	sub	rax, 160				; 000000a0H
	mov	rcx, rax
	call	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
	mov	rax, QWORD PTR this$[rsp]
	sub	rax, 152				; 00000098H
	mov	rcx, rax
	call	QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Filename$ = 72
_Mode$ = 80
_Prot$ = 88
$initVBases$ = 96
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >, COMDAT

; 1001 :     explicit basic_ofstream(const char* _Filename, ios_base::openmode _Mode = ios_base::out,

$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	DWORD PTR $T1[rsp], 0

; 1002 :         int _Prot = ios_base::_Default_open_prot)
; 1003 :         : _Mybase(_STD addressof(_Filebuffer)) { // _Prot is an extension

	cmp	DWORD PTR $initVBases$[rsp], 0
	je	SHORT $LN2@basic_ofst
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 168				; 000000a8H
	mov	rcx, rax
	call	QWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ
	npad	1
	mov	eax, DWORD PTR $T1[rsp]
	or	eax, 1
	mov	DWORD PTR $T1[rsp], eax
$LN2@basic_ofst:
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	??$addressof@V?$basic_filebuf@DU?$char_traits@D@std@@@std@@@std@@YAPEAV?$basic_filebuf@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::addressof<std::basic_filebuf<char,std::char_traits<char> > >
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	npad	1
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
	mov	QWORD PTR [rcx+rax], rdx
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	sub	rax, 168				; 000000a8H
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsxd	rcx, DWORD PTR [rcx+4]
	mov	rdx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rdx+rcx-4], eax
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
	npad	1

; 1004 :         if (!_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot)) {

	mov	eax, DWORD PTR _Mode$[rsp]
	or	eax, 2
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, 8
	mov	r9d, DWORD PTR _Prot$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR _Filename$[rsp]
	call	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
	test	rax, rax
	jne	SHORT $LN3@basic_ofst

; 1005 :             _Myios::setstate(ios_base::failbit);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx
	xor	r8d, r8d
	mov	edx, 2
	mov	rcx, rax
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
	npad	1
$LN3@basic_ofst:

; 1006 :         }
; 1007 :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Filename$ = 72
_Mode$ = 80
_Prot$ = 88
$initVBases$ = 96
?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	eax, DWORD PTR $T1[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@dtor$0
	and	DWORD PTR $T1[rbp], -2
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 168				; 000000a8H
	call	QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN6@dtor$0:
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Filename$ = 72
_Mode$ = 80
_Prot$ = 88
$initVBases$ = 96
?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 16
	call	QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Filename$ = 72
_Mode$ = 80
_Prot$ = 88
$initVBases$ = 96
?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$2
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 8
	call	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$2@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 16
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT

; 65   :     operator streamoff() const {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 66   :         // TRANSITION, ABI: We currently always set _Fpos to 0 but older .objs containing old
; 67   :         // basic_filebuf would set _Fpos.
; 68   :         return _Myoff + _Fpos;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 69   :     }

	pop	rdi
	ret	0
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\iosfwd
;	COMDAT ?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ
_TEXT	SEGMENT
this$ = 16
__$ReturnUdt$ = 24
?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ PROC ; std::fpos<_Mbstatet>::state, COMDAT

; 57   :     _NODISCARD _Statetype state() const {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 58   :         return _Mystate;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 59   :     }

	pop	rdi
	ret	0
?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ ENDP ; std::fpos<_Mbstatet>::state
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z
_TEXT	SEGMENT
this$ = 16
_State$ = 24
_Fileposition$ = 32
??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z PROC	; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT

; 55   :     fpos(_Statetype _State, fpos_t _Fileposition) : _Myoff(_Fileposition), _Fpos(0), _Mystate(_State) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Fileposition$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _State$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ENDP	; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 16
_Off$ = 24
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT

; 53   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Off$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 16
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 8
	rep stosb
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 152				; 00000098H
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT

; 791  :     void _Set_back() { // set up putback area

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 792  :         if (_Mysb::eback() != &_Mychar) { // save current get buffer

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, 112				; 00000070H
	cmp	rax, rcx
	je	SHORT $LN2@Set_back

; 793  :             _Set_eback = _Mysb::eback();

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+136], rax

; 794  :             _Set_egptr = _Mysb::egptr();

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+144], rax
$LN2@Set_back:

; 795  :         }
; 796  :         _Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 113				; 00000071H
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, 112				; 00000070H
	mov	rdx, QWORD PTR this$[rsp]
	add	rdx, 112				; 00000070H
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 797  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT

; 785  :     void _Reset_back() { // restore buffer after putback

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 786  :         if (_Mysb::eback() == &_Mychar) {

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, 112				; 00000070H
	cmp	rax, rcx
	jne	SHORT $LN2@Reset_back

; 787  :             _Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);

	mov	rax, QWORD PTR this$[rsp]
	mov	r9, QWORD PTR [rax+144]
	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+136]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+136]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN2@Reset_back:

; 788  :         }
; 789  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z
_TEXT	SEGMENT
this$ = 48
_Newcvt$ = 56
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT

; 768  :     void _Initcvt(const _Cvt& _Newcvt) { // initialize codecvt pointer

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 769  :         if (_Newcvt.always_noconv()) {

	mov	rcx, QWORD PTR _Newcvt$[rsp]
	call	QWORD PTR __imp_?always_noconv@codecvt_base@std@@QEBA_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Initcvt

; 770  :             _Pcvt = nullptr; // nothing to do

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+104], 0

; 771  :         } else { // set up for nontrivial codecvt facet

	jmp	SHORT $LN3@Initcvt
$LN2@Initcvt:

; 772  :             _Pcvt = _STD addressof(_Newcvt);

	mov	rcx, QWORD PTR _Newcvt$[rsp]
	call	??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPEBV?$codecvt@DDU_Mbstatet@@@0@AEBV10@@Z ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+104], rax

; 773  :             _Mysb::_Init(); // reset any buffering

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ
$LN3@Initcvt:

; 774  :         }
; 775  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
_TEXT	SEGMENT
_Codecvt_temp_buf$ = 48
_Str$ = 72
_Dest$ = 136
_Count$5 = 152
$T6 = 168
$T7 = 172
tv146 = 176
tv94 = 184
tv140 = 188
__$ArrayPad$ = 192
this$ = 224
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT

; 732  :     bool _Endwrite() { // put shift to initial conversion state, as needed

$LN15:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+224]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 733  :         if (!_Pcvt || !_Wrotesome) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+104], 0
	je	SHORT $LN5@Endwrite
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+113]
	test	eax, eax
	jne	SHORT $LN4@Endwrite
$LN5@Endwrite:

; 734  :             return true;

	mov	al, 1
	jmp	$LN1@Endwrite
$LN4@Endwrite:

; 735  :         }
; 736  : 
; 737  :         // may have to put
; 738  :         if (_Traits::eq_int_type(_Traits::eof(), overflow())) {

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv146[rsp], rcx
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR tv146[rsp]
	call	QWORD PTR [rax+24]
	mov	DWORD PTR $T6[rsp], eax
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T7[rsp], eax
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@Endwrite

; 739  :             return false;

	xor	al, al
	jmp	$LN1@Endwrite
$LN6@Endwrite:

; 740  :         }
; 741  : 
; 742  :         constexpr size_t _Codecvt_temp_buf = 32;

	mov	QWORD PTR _Codecvt_temp_buf$[rsp], 32	; 00000020H

; 743  :         char _Str[_Codecvt_temp_buf];
; 744  :         char* _Dest;
; 745  :         switch (_Pcvt->unshift(_State, _Str, _Str + _Codecvt_temp_buf, _Dest)) { // test result of homing conversion

	lea	rax, QWORD PTR _Str$[rsp+32]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, 116				; 00000074H
	lea	rdx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	lea	r8, QWORD PTR _Str$[rsp]
	mov	rdx, rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+104]
	call	QWORD PTR __imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
	mov	DWORD PTR tv94[rsp], eax
	cmp	DWORD PTR tv94[rsp], 0
	je	SHORT $LN7@Endwrite
	cmp	DWORD PTR tv94[rsp], 1
	je	SHORT $LN8@Endwrite
	cmp	DWORD PTR tv94[rsp], 3
	je	$LN10@Endwrite
	jmp	$LN11@Endwrite
$LN7@Endwrite:

; 746  :         case codecvt_base::ok:
; 747  :             _Wrotesome = false; // homed successfully

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+113], 0
$LN8@Endwrite:

; 748  : 
; 749  :         case codecvt_base::partial: // fall through
; 750  :             { // put any generated bytes
; 751  :                 const auto _Count = static_cast<size_t>(_Dest - _Str);

	lea	rax, QWORD PTR _Str$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$5[rsp], rax

; 752  :                 if (0 < _Count && _Count != static_cast<size_t>(_CSTD fwrite(_Str, 1, _Count, _Myfile))) {

	cmp	QWORD PTR _Count$5[rsp], 0
	jbe	SHORT $LN9@Endwrite
	mov	rax, QWORD PTR this$[rsp]
	mov	r9, QWORD PTR [rax+128]
	mov	r8, QWORD PTR _Count$5[rsp]
	mov	edx, 1
	lea	rcx, QWORD PTR _Str$[rsp]
	call	QWORD PTR __imp_fwrite
	cmp	QWORD PTR _Count$5[rsp], rax
	je	SHORT $LN9@Endwrite

; 753  :                     return false; // write failed

	xor	al, al
	jmp	SHORT $LN1@Endwrite
$LN9@Endwrite:

; 754  :                 }
; 755  : 
; 756  :                 return !_Wrotesome;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+113]
	test	eax, eax
	jne	SHORT $LN13@Endwrite
	mov	DWORD PTR tv140[rsp], 1
	jmp	SHORT $LN14@Endwrite
$LN13@Endwrite:
	mov	DWORD PTR tv140[rsp], 0
$LN14@Endwrite:
	movzx	eax, BYTE PTR tv140[rsp]
	jmp	SHORT $LN1@Endwrite
$LN10@Endwrite:

; 757  :             }
; 758  : 
; 759  :         case codecvt_base::noconv:
; 760  :             _Wrotesome = false; // homed successfully

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+113], 0

; 761  :             return true; // nothing else to do

	mov	al, 1
	jmp	SHORT $LN1@Endwrite
$LN11@Endwrite:

; 762  : 
; 763  :         default:
; 764  :             return false; // conversion failed

	xor	al, al
$LN1@Endwrite:

; 765  :         }
; 766  :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
_Pb$6 = 72
_Pn$7 = 104
_Nr$8 = 136
_Nw$9 = 152
tv66 = 160
this$ = 192
_File$ = 200
_Which$ = 208
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT

; 705  :     void _Init(FILE* _File, _Initfl _Which) { // initialize to C stream _File after {new, open, close}

$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]

; 706  :         using _State_type = typename _Traits::state_type;
; 707  : 
; 708  :         __PURE_APPDOMAIN_GLOBAL static _State_type _Stinit; // initial state
; 709  : 
; 710  :         _Closef    = _Which == _Openfl;

	cmp	DWORD PTR _Which$[rsp], 1
	jne	SHORT $LN4@Init
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN5@Init
$LN4@Init:
	mov	DWORD PTR tv66[rsp], 0
$LN5@Init:
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR tv66[rsp]
	mov	BYTE PTR [rax+124], cl

; 711  :         _Wrotesome = false;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+113], 0

; 712  : 
; 713  :         _Mysb::_Init(); // initialize stream buffer base object

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ

; 714  : 
; 715  :         if (_File && sizeof(_Elem) == 1) { // point inside C stream with [first, first + count) buffer

	cmp	QWORD PTR _File$[rsp], 0
	je	$LN2@Init
	xor	eax, eax
	cmp	eax, 1
	je	$LN2@Init

; 716  :             _Elem** _Pb = nullptr;

	mov	QWORD PTR _Pb$6[rsp], 0

; 717  :             _Elem** _Pn = nullptr;

	mov	QWORD PTR _Pn$7[rsp], 0

; 718  :             int* _Nr    = nullptr;

	mov	QWORD PTR _Nr$8[rsp], 0

; 719  : 
; 720  :             ::_get_stream_buffer_pointers(

	lea	r9, QWORD PTR _Nr$8[rsp]
	lea	r8, QWORD PTR _Pn$7[rsp]
	lea	rdx, QWORD PTR _Pb$6[rsp]
	mov	rcx, QWORD PTR _File$[rsp]
	call	QWORD PTR __imp__get_stream_buffer_pointers

; 721  :                 _File, reinterpret_cast<char***>(&_Pb), reinterpret_cast<char***>(&_Pn), &_Nr);
; 722  :             int* _Nw = _Nr;

	mov	rax, QWORD PTR _Nr$8[rsp]
	mov	QWORD PTR _Nw$9[rsp], rax

; 723  : 
; 724  :             _Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);

	mov	rax, QWORD PTR _Nw$9[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR _Pn$7[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR _Pb$6[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR _Nr$8[rsp]
	mov	r8, QWORD PTR _Pn$7[rsp]
	mov	rdx, QWORD PTR _Pb$6[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAPEAD0PEAH001@Z
$LN2@Init:

; 725  :         }
; 726  : 
; 727  :         _Myfile = _File;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _File$[rsp]
	mov	QWORD PTR [rax+128], rcx

; 728  :         _State  = _Stinit;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
	mov	QWORD PTR [rax+116], rcx

; 729  :         _Pcvt   = nullptr; // pointer to codecvt facet

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+104], 0

; 730  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
_TEXT	SEGMENT
this$ = 48
_Loc$ = 56
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT

; 700  :     void __CLR_OR_THIS_CALL imbue(const locale& _Loc) override {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 701  :         // set locale to argument (capture nontrivial codecvt facet)
; 702  :         _Initcvt(_STD use_facet<_Cvt>(_Loc));

	mov	rcx, QWORD PTR _Loc$[rsp]
	call	??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt

; 703  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
tv86 = 40
this$ = 64
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT

; 692  :     int __CLR_OR_THIS_CALL sync() override { // synchronize C stream with external file

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 693  :         if (!_Myfile || _Traits::eq_int_type(_Traits::eof(), overflow()) || 0 <= _CSTD fflush(_Myfile)) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN3@sync
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv86[rsp], rcx
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR tv86[rsp]
	call	QWORD PTR [rax+24]
	mov	DWORD PTR $T1[rsp], eax
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T2[rsp], eax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@sync
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+128]
	call	QWORD PTR __imp_fflush
	test	eax, eax
	jl	SHORT $LN2@sync
$LN3@sync:

; 694  :             return 0;

	xor	eax, eax
	jmp	SHORT $LN1@sync
$LN2@sync:

; 695  :         }
; 696  : 
; 697  :         return -1;

	mov	eax, -1
$LN1@sync:

; 698  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z
_TEXT	SEGMENT
_Mode$ = 32
_Size$ = 40
this$ = 64
_Buffer$ = 72
_Count$ = 80
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT

; 673  :     _Mysb* __CLR_OR_THIS_CALL setbuf(_Elem* _Buffer, streamsize _Count) override { // offer _Buffer to C stream

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  :         int _Mode;
; 675  :         if (!_Buffer && _Count == 0) {

	cmp	QWORD PTR _Buffer$[rsp], 0
	jne	SHORT $LN2@setbuf
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN2@setbuf

; 676  :             _Mode = _IONBF;

	mov	DWORD PTR _Mode$[rsp], 4

; 677  :         } else {

	jmp	SHORT $LN3@setbuf
$LN2@setbuf:

; 678  :             _Mode = _IOFBF;

	mov	DWORD PTR _Mode$[rsp], 0
$LN3@setbuf:

; 679  :         }
; 680  : 
; 681  :         const size_t _Size = static_cast<size_t>(_Count) * sizeof(_Elem);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	QWORD PTR _Size$[rsp], rax

; 682  : 
; 683  :         if (!_Myfile || _CSTD setvbuf(_Myfile, reinterpret_cast<char*>(_Buffer), _Mode, _Size) != 0) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN5@setbuf
	mov	r9, QWORD PTR _Size$[rsp]
	mov	r8d, DWORD PTR _Mode$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+128]
	call	QWORD PTR __imp_setvbuf
	test	eax, eax
	je	SHORT $LN4@setbuf
$LN5@setbuf:

; 684  :             return nullptr; // failed

	xor	eax, eax
	jmp	SHORT $LN1@setbuf
$LN4@setbuf:

; 685  :         }
; 686  : 
; 687  :         // new buffer, reinitialize pointers
; 688  :         _Init(_Myfile, _Openfl);

	mov	r8d, 1
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+128]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 689  :         return this;

	mov	rax, QWORD PTR this$[rsp]
$LN1@setbuf:

; 690  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
_Off$ = 40
$T4 = 52
this$ = 80
__$ReturnUdt$ = 88
_Pos$ = 96
__formal$ = 104
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT

; 660  :     pos_type __CLR_OR_THIS_CALL seekpos(pos_type _Pos, ios_base::openmode = ios_base::in | ios_base::out) override {

$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 661  :         // change position to _Pos
; 662  :         off_type _Off = static_cast<off_type>(_Pos);

	mov	rcx, QWORD PTR _Pos$[rsp]
	call	??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ	; std::fpos<_Mbstatet>::operator __int64
	mov	QWORD PTR _Off$[rsp], rax

; 663  : 
; 664  :         if (!_Myfile || !_Endwrite() || _CSTD fsetpos(_Myfile, &_Off) != 0) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN3@seekpos
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@seekpos
	lea	rdx, QWORD PTR _Off$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+128]
	call	QWORD PTR __imp_fsetpos
	test	eax, eax
	je	SHORT $LN2@seekpos
$LN3@seekpos:

; 665  :             return pos_type(-1); // report failure

	mov	rdx, -1
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z	; std::fpos<_Mbstatet>::fpos<_Mbstatet>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	SHORT $LN1@seekpos
$LN2@seekpos:

; 666  :         }
; 667  : 
; 668  :         _State = _Pos.state();

	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR _Pos$[rsp]
	call	?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+116], rax

; 669  :         _Reset_back(); // revert from _Mychar buffer, discarding any putback

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 670  :         return pos_type(_State, _Off); // return new position

	mov	r8, QWORD PTR _Off$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+116]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@seekpos:

; 671  :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
_Fileposition$ = 40
this$ = 80
__$ReturnUdt$ = 88
_Off$ = 96
_Way$ = 104
__formal$ = 112
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT

; 641  :         ios_base::openmode = ios_base::in | ios_base::out) override { // change position by _Off

$LN8:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 642  :         fpos_t _Fileposition;
; 643  : 
; 644  :         if (_Mysb::gptr() == &_Mychar // something putback
; 645  :             && _Way == ios_base::cur // a relative seek
; 646  :             && !_Pcvt) { // not converting

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, 112				; 00000070H
	cmp	rax, rcx
	jne	SHORT $LN2@seekoff
	cmp	DWORD PTR _Way$[rsp], 1
	jne	SHORT $LN2@seekoff
	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+104], 0
	jne	SHORT $LN2@seekoff

; 647  :             _Off -= static_cast<off_type>(sizeof(_Elem)); // back up over _Elem bytes

	mov	rax, QWORD PTR _Off$[rsp]
	dec	rax
	mov	QWORD PTR _Off$[rsp], rax
$LN2@seekoff:

; 648  :         }
; 649  : 
; 650  :         if (!_Myfile || !_Endwrite()
; 651  :             || ((_Off != 0 || _Way != ios_base::cur) && _CSTD _fseeki64(_Myfile, _Off, _Way) != 0)
; 652  :             || _CSTD fgetpos(_Myfile, &_Fileposition) != 0) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN4@seekoff
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@seekoff
	cmp	QWORD PTR _Off$[rsp], 0
	jne	SHORT $LN6@seekoff
	cmp	DWORD PTR _Way$[rsp], 1
	je	SHORT $LN5@seekoff
$LN6@seekoff:
	mov	r8d, DWORD PTR _Way$[rsp]
	mov	rdx, QWORD PTR _Off$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+128]
	call	QWORD PTR __imp__fseeki64
	test	eax, eax
	jne	SHORT $LN4@seekoff
$LN5@seekoff:
	lea	rdx, QWORD PTR _Fileposition$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+128]
	call	QWORD PTR __imp_fgetpos
	test	eax, eax
	je	SHORT $LN3@seekoff
$LN4@seekoff:

; 653  :             return pos_type(-1); // report failure

	mov	rdx, -1
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z	; std::fpos<_Mbstatet>::fpos<_Mbstatet>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	SHORT $LN1@seekoff
$LN3@seekoff:

; 654  :         }
; 655  : 
; 656  :         _Reset_back(); // revert from _Mychar buffer, discarding any putback

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 657  :         return pos_type(_State, _Fileposition); // return new position

	mov	r8, QWORD PTR _Fileposition$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+116]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@seekoff:

; 658  :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
_TEXT	SEGMENT
_Start_count$1 = 32
_Size$2 = 40
this$ = 64
_Ptr$ = 72
_Count$ = 80
?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::xsputn, COMDAT

; 609  :     streamsize __CLR_OR_THIS_CALL xsputn(const _Elem* _Ptr, streamsize _Count) override {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 610  :         // put _Count characters to stream
; 611  :         if constexpr (sizeof(_Elem) == 1) {
; 612  :             if (_Pcvt) { // if we need a nontrivial codecvt transform, do the default expensive thing

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+104], 0
	je	SHORT $LN2@xsputn

; 613  :                 return _Mysb::xsputn(_Ptr, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
	jmp	$LN1@xsputn
$LN2@xsputn:

; 614  :             }
; 615  : 
; 616  :             const streamsize _Start_count = _Count;

	mov	rax, QWORD PTR _Count$[rsp]
	mov	QWORD PTR _Start_count$1[rsp], rax

; 617  :             streamsize _Size              = _Mysb::_Pnavail();

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
	mov	QWORD PTR _Size$2[rsp], rax

; 618  :             if (0 < _Count && 0 < _Size) { // copy to write buffer

	cmp	QWORD PTR _Count$[rsp], 0
	jle	SHORT $LN3@xsputn
	cmp	QWORD PTR _Size$2[rsp], 0
	jle	SHORT $LN3@xsputn

; 619  :                 if (_Count < _Size) {

	mov	rax, QWORD PTR _Size$2[rsp]
	cmp	QWORD PTR _Count$[rsp], rax
	jge	SHORT $LN4@xsputn

; 620  :                     _Size = _Count;

	mov	rax, QWORD PTR _Count$[rsp]
	mov	QWORD PTR _Size$2[rsp], rax
$LN4@xsputn:

; 621  :                 }
; 622  : 
; 623  :                 _Traits::copy(_Mysb::pptr(), _Ptr, static_cast<size_t>(_Size));

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	r8, QWORD PTR _Size$2[rsp]
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, rax
	call	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 624  :                 _Ptr += _Size;

	mov	rax, QWORD PTR _Size$2[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Ptr$[rsp], rax

; 625  :                 _Count -= _Size;

	mov	rax, QWORD PTR _Size$2[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 626  :                 _Mysb::pbump(static_cast<int>(_Size));

	mov	edx, DWORD PTR _Size$2[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z
$LN3@xsputn:

; 627  :             }
; 628  : 
; 629  :             if (0 < _Count && _Myfile) { // open C stream, attempt write

	cmp	QWORD PTR _Count$[rsp], 0
	jle	SHORT $LN5@xsputn
	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN5@xsputn

; 630  :                 _Count -= _CSTD fwrite(_Ptr, sizeof(_Elem), static_cast<size_t>(_Count), _Myfile);

	mov	rax, QWORD PTR this$[rsp]
	mov	r9, QWORD PTR [rax+128]
	mov	r8, QWORD PTR _Count$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	QWORD PTR __imp_fwrite
	mov	rcx, QWORD PTR _Count$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax
$LN5@xsputn:

; 631  :             }
; 632  : 
; 633  :             return _Start_count - _Count;

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Start_count$1[rsp]
	sub	rcx, rax
	mov	rax, rcx
$LN1@xsputn:

; 634  :         } else { // non-chars always get element-by-element processing
; 635  :             return _Mysb::xsputn(_Ptr, _Count);
; 636  :         }
; 637  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
_TEXT	SEGMENT
_Count_s$5 = 40
_Start_count$6 = 56
_Available$7 = 72
_Read_size$8 = 88
_Read_size$9 = 96
_Actual_read$10 = 104
this$ = 128
_Ptr$ = 136
_Count$ = 144
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn, COMDAT

; 561  :     streamsize __CLR_OR_THIS_CALL xsgetn(_Elem* _Ptr, streamsize _Count) override {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 562  :         // get _Count characters from stream
; 563  :         if constexpr (sizeof(_Elem) == 1) {
; 564  :             if (_Count <= 0) {

	cmp	QWORD PTR _Count$[rsp], 0
	jg	SHORT $LN4@xsgetn

; 565  :                 return 0;

	xor	eax, eax
	jmp	$LN1@xsgetn
$LN4@xsgetn:

; 566  :             }
; 567  : 
; 568  :             if (_Pcvt) { // if we need a nontrivial codecvt transform, do the default expensive thing

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+104], 0
	je	SHORT $LN5@xsgetn

; 569  :                 return _Mysb::xsgetn(_Ptr, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
	jmp	$LN1@xsgetn
$LN5@xsgetn:

; 570  :             }
; 571  : 
; 572  :             // assuming this is OK because _Ptr + _Count must be valid
; 573  :             auto _Count_s           = static_cast<size_t>(_Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	QWORD PTR _Count_s$5[rsp], rax

; 574  :             const auto _Start_count = _Count;

	mov	rax, QWORD PTR _Count$[rsp]
	mov	QWORD PTR _Start_count$6[rsp], rax

; 575  :             const auto _Available   = static_cast<size_t>(_Mysb::_Gnavail());

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
	mov	QWORD PTR _Available$7[rsp], rax

; 576  :             if (0 < _Available) { // copy from get area

	cmp	QWORD PTR _Available$7[rsp], 0
	jbe	SHORT $LN6@xsgetn

; 577  :                 const auto _Read_size = (_STD min)(_Count_s, _Available);

	lea	rdx, QWORD PTR _Available$7[rsp]
	lea	rcx, QWORD PTR _Count_s$5[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Read_size$8[rsp], rax

; 578  :                 _Traits::copy(_Ptr, _Mysb::gptr(), _Read_size);

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	r8, QWORD PTR _Read_size$8[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 579  :                 _Ptr += _Read_size;

	mov	rax, QWORD PTR _Read_size$8[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Ptr$[rsp], rax

; 580  :                 _Count_s -= _Read_size;

	mov	rax, QWORD PTR _Read_size$8[rsp]
	mov	rcx, QWORD PTR _Count_s$5[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count_s$5[rsp], rax

; 581  :                 _Mysb::gbump(static_cast<int>(_Read_size));

	mov	edx, DWORD PTR _Read_size$8[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z
$LN6@xsgetn:

; 582  :             }
; 583  : 
; 584  :             if (_Myfile) { // open C stream, attempt read

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	$LN7@xsgetn

; 585  :                 _Reset_back(); // revert from _Mychar buffer

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 586  :                 // process in 4k - 1 chunks to avoid tripping over fread's clobber-the-end behavior when
; 587  :                 // doing \r\n -> \n translation
; 588  :                 constexpr size_t _Read_size = 4095; // _INTERNAL_BUFSIZ - 1

	mov	QWORD PTR _Read_size$9[rsp], 4095	; 00000fffH
$LN2@xsgetn:

; 589  :                 while (_Read_size < _Count_s) {

	cmp	QWORD PTR _Count_s$5[rsp], 4095		; 00000fffH
	jbe	SHORT $LN3@xsgetn

; 590  :                     const auto _Actual_read = _CSTD fread(_Ptr, sizeof(_Elem), _Read_size, _Myfile);

	mov	rax, QWORD PTR this$[rsp]
	mov	r9, QWORD PTR [rax+128]
	mov	r8d, 4095				; 00000fffH
	mov	edx, 1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	QWORD PTR __imp_fread
	mov	QWORD PTR _Actual_read$10[rsp], rax

; 591  :                     _Ptr += _Actual_read;

	mov	rax, QWORD PTR _Actual_read$10[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Ptr$[rsp], rax

; 592  :                     _Count_s -= _Actual_read;

	mov	rax, QWORD PTR _Actual_read$10[rsp]
	mov	rcx, QWORD PTR _Count_s$5[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count_s$5[rsp], rax

; 593  :                     if (_Actual_read != _Read_size) {

	cmp	QWORD PTR _Actual_read$10[rsp], 4095	; 00000fffH
	je	SHORT $LN8@xsgetn

; 594  :                         return static_cast<streamsize>(_Start_count - _Count_s);

	mov	rax, QWORD PTR _Count_s$5[rsp]
	mov	rcx, QWORD PTR _Start_count$6[rsp]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@xsgetn
$LN8@xsgetn:

; 595  :                     }
; 596  :                 }

	jmp	$LN2@xsgetn
$LN3@xsgetn:

; 597  : 
; 598  :                 if (0 < _Count_s) {

	cmp	QWORD PTR _Count_s$5[rsp], 0
	jbe	SHORT $LN9@xsgetn

; 599  :                     _Count_s -= _CSTD fread(_Ptr, sizeof(_Elem), _Count_s, _Myfile);

	mov	rax, QWORD PTR this$[rsp]
	mov	r9, QWORD PTR [rax+128]
	mov	r8, QWORD PTR _Count_s$5[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	QWORD PTR __imp_fread
	mov	rcx, QWORD PTR _Count_s$5[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count_s$5[rsp], rax
$LN9@xsgetn:
$LN7@xsgetn:

; 600  :                 }
; 601  :             }
; 602  : 
; 603  :             return static_cast<streamsize>(_Start_count - _Count_s);

	mov	rax, QWORD PTR _Count_s$5[rsp]
	mov	rcx, QWORD PTR _Start_count$6[rsp]
	sub	rcx, rax
	mov	rax, rcx
$LN1@xsgetn:

; 604  :         } else { // non-chars always get element-by-element processing
; 605  :             return _Mysb::xsgetn(_Ptr, _Count);
; 606  :         }
; 607  :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
_Ch$8 = 68
_Str$ = 104
_Src$9 = 168
_Meta$10 = 180
_Ch$11 = 196
_Dest$12 = 232
_Nleft$13 = 248
$T14 = 264
$T15 = 268
$T16 = 272
$T17 = 276
tv76 = 280
tv139 = 288
tv154 = 296
tv159 = 304
tv162 = 312
tv169 = 320
tv172 = 328
__$ArrayPad$ = 336
this$ = 368
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT

; 502  :     int_type __CLR_OR_THIS_CALL uflow() override { // get an element from stream, point past it

$LN22:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 352				; 00000160H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+368]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 503  :         if (_Mysb::gptr() && _Mysb::gptr() < _Mysb::egptr()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	test	rax, rax
	je	SHORT $LN9@uflow
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	QWORD PTR tv76[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	rcx, QWORD PTR tv76[rsp]
	cmp	rcx, rax
	jae	SHORT $LN9@uflow

; 504  :             return _Traits::to_int_type(*_Mysb::_Gninc()); // return buffered

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
	mov	rcx, rax
	call	?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
	jmp	$LN1@uflow
$LN9@uflow:

; 505  :         }
; 506  : 
; 507  :         if (!_Myfile) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	jne	SHORT $LN10@uflow

; 508  :             return _Traits::eof(); // no open C stream, fail

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	jmp	$LN1@uflow
$LN10@uflow:

; 509  :         }
; 510  : 
; 511  :         _Reset_back(); // revert from _Mychar buffer

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 512  :         if (!_Pcvt) { // no codecvt facet, just get it

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+104], 0
	jne	SHORT $LN11@uflow

; 513  :             _Elem _Ch;
; 514  :             return _Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch) : _Traits::eof();

	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+128]
	lea	rcx, QWORD PTR _Ch$8[rsp]
	call	??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z	; std::_Fgetc<char>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@uflow
	lea	rcx, QWORD PTR _Ch$8[rsp]
	call	?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
	mov	DWORD PTR tv139[rsp], eax
	jmp	SHORT $LN20@uflow
$LN19@uflow:
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR tv139[rsp], eax
$LN20@uflow:
	mov	eax, DWORD PTR tv139[rsp]
	jmp	$LN1@uflow
$LN11@uflow:

; 515  :         }
; 516  : 
; 517  :         // build string until codecvt succeeds
; 518  :         string _Str;

	lea	rcx, QWORD PTR _Str$[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
$LN2@uflow:

; 519  : 
; 520  :         for (;;) { // get using codecvt facet
; 521  :             const char* _Src;
; 522  :             int _Meta = _CSTD fgetc(_Myfile);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+128]
	call	QWORD PTR __imp_fgetc
	mov	DWORD PTR _Meta$10[rsp], eax

; 523  : 
; 524  :             if (_Meta == EOF) {

	cmp	DWORD PTR _Meta$10[rsp], -1
	jne	SHORT $LN12@uflow

; 525  :                 return _Traits::eof(); // partial char?

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T14[rsp], eax
	lea	rcx, QWORD PTR _Str$[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T14[rsp]
	jmp	$LN1@uflow
$LN12@uflow:

; 526  :             }
; 527  : 
; 528  :             _Str.push_back(static_cast<char>(_Meta)); // append byte and convert

	movzx	edx, BYTE PTR _Meta$10[rsp]
	lea	rcx, QWORD PTR _Str$[rsp]
	call	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back

; 529  : 
; 530  :             _Elem _Ch;
; 531  :             _Elem* _Dest;
; 532  : 
; 533  :             // test result of converting one element
; 534  :             switch (_Pcvt->in(_State, _Str.data(), _Str.data() + _Str.size(), _Src, &_Ch, &_Ch + 1, _Dest)) {

	lea	rax, QWORD PTR _Ch$11[rsp+1]
	mov	QWORD PTR tv154[rsp], rax
	lea	rcx, QWORD PTR _Str$[rsp]
	call	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
	mov	QWORD PTR tv159[rsp], rax
	lea	rcx, QWORD PTR _Str$[rsp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	mov	rcx, QWORD PTR tv159[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv162[rsp], rax
	lea	rcx, QWORD PTR _Str$[rsp]
	call	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, 116				; 00000074H
	lea	rdx, QWORD PTR _Dest$12[rsp]
	mov	QWORD PTR [rsp+56], rdx
	mov	rdx, QWORD PTR tv154[rsp]
	mov	QWORD PTR [rsp+48], rdx
	lea	rdx, QWORD PTR _Ch$11[rsp]
	mov	QWORD PTR [rsp+40], rdx
	lea	rdx, QWORD PTR _Src$9[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	rdx, QWORD PTR tv162[rsp]
	mov	r9, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+104]
	call	QWORD PTR __imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z
	mov	DWORD PTR tv169[rsp], eax
	cmp	DWORD PTR tv169[rsp], 0
	je	SHORT $LN14@uflow
	cmp	DWORD PTR tv169[rsp], 1
	je	SHORT $LN14@uflow
	cmp	DWORD PTR tv169[rsp], 3
	je	$LN16@uflow
	jmp	$LN17@uflow
$LN14@uflow:

; 535  :             case codecvt_base::partial:
; 536  :             case codecvt_base::ok:
; 537  :                 if (_Dest != &_Ch) { // got an element, put back excess and deliver it

	lea	rax, QWORD PTR _Ch$11[rsp]
	cmp	QWORD PTR _Dest$12[rsp], rax
	je	$LN15@uflow

; 538  :                     auto _Nleft = _Str.data() + _Str.size() - _Src;

	lea	rcx, QWORD PTR _Str$[rsp]
	call	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
	mov	QWORD PTR tv172[rsp], rax
	lea	rcx, QWORD PTR _Str$[rsp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	mov	rcx, QWORD PTR tv172[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR _Src$9[rsp]
	mov	QWORD PTR _Nleft$13[rsp], rax
$LN7@uflow:

; 539  :                     while (0 < _Nleft) {

	cmp	QWORD PTR _Nleft$13[rsp], 0
	jle	SHORT $LN8@uflow

; 540  :                         _CSTD ungetc(_Src[--_Nleft], _Myfile);

	mov	rax, QWORD PTR _Nleft$13[rsp]
	dec	rax
	mov	QWORD PTR _Nleft$13[rsp], rax
	mov	rax, QWORD PTR _Nleft$13[rsp]
	mov	rcx, QWORD PTR _Src$9[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rcx+128]
	mov	ecx, eax
	call	QWORD PTR __imp_ungetc

; 541  :                     }

	jmp	SHORT $LN7@uflow
$LN8@uflow:

; 542  : 
; 543  :                     return _Traits::to_int_type(_Ch);

	lea	rcx, QWORD PTR _Ch$11[rsp]
	call	?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR _Str$[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T15[rsp]
	jmp	SHORT $LN1@uflow
$LN15@uflow:

; 544  :                 }
; 545  : 
; 546  :                 _Str.erase(0, static_cast<size_t>(_Src - _Str.data())); // partial, discard used input

	lea	rcx, QWORD PTR _Str$[rsp]
	call	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
	mov	rcx, QWORD PTR _Src$9[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	xor	edx, edx
	lea	rcx, QWORD PTR _Str$[rsp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 547  :                 break;

	jmp	SHORT $LN5@uflow
$LN16@uflow:

; 548  : 
; 549  :             case codecvt_base::noconv:
; 550  :                 // noconv is only possible if _Elem is char, so we can use it directly
; 551  :                 return static_cast<int_type>(_Str.front());

	lea	rcx, QWORD PTR _Str$[rsp]
	call	?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR $T16[rsp], eax
	lea	rcx, QWORD PTR _Str$[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T16[rsp]
	jmp	SHORT $LN1@uflow
$LN17@uflow:

; 552  : 
; 553  :             default:
; 554  :                 return _Traits::eof(); // conversion failed

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T17[rsp], eax
	lea	rcx, QWORD PTR _Str$[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T17[rsp]
	jmp	SHORT $LN1@uflow
$LN5@uflow:

; 555  :             }
; 556  :         }

	jmp	$LN2@uflow

; 557  :     }

	lea	rcx, QWORD PTR _Str$[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
$LN1@uflow:
	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 352				; 00000160H
	pop	rdi
	ret	0
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Ch$8 = 68
_Str$ = 104
_Src$9 = 168
_Meta$10 = 180
_Ch$11 = 196
_Dest$12 = 232
_Nleft$13 = 248
$T14 = 264
$T15 = 268
$T16 = 272
$T17 = 276
tv76 = 280
tv139 = 288
tv154 = 296
tv159 = 304
tv162 = 312
tv169 = 320
tv172 = 328
__$ArrayPad$ = 336
this$ = 368
?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Str$[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
_Meta$ = 36
$T4 = 52
tv76 = 56
this$ = 80
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT

; 490  :     int_type __CLR_OR_THIS_CALL underflow() override { // get an element from stream, but don't point past it

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 491  :         int_type _Meta;
; 492  :         if (_Mysb::gptr() && _Mysb::gptr() < _Mysb::egptr()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	test	rax, rax
	je	SHORT $LN2@underflow
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	QWORD PTR tv76[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	rcx, QWORD PTR tv76[rsp]
	cmp	rcx, rax
	jae	SHORT $LN2@underflow

; 493  :             return _Traits::to_int_type(*_Mysb::gptr()); // return buffered

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	rcx, rax
	call	?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
	jmp	SHORT $LN1@underflow
	jmp	SHORT $LN3@underflow
$LN2@underflow:

; 494  :         } else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow())) {

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR [rax+56]
	mov	DWORD PTR _Meta$[rsp], eax
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T4[rsp], eax
	lea	rdx, QWORD PTR _Meta$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@underflow

; 495  :             return _Meta; // uflow failed, return EOF

	mov	eax, DWORD PTR _Meta$[rsp]
	jmp	SHORT $LN1@underflow

; 496  :         } else { // get a char, don't point past it

	jmp	SHORT $LN5@underflow
$LN4@underflow:

; 497  :             pbackfail(_Meta);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	edx, DWORD PTR _Meta$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR [rax+32]

; 498  :             return _Meta;

	mov	eax, DWORD PTR _Meta$[rsp]
$LN5@underflow:
$LN3@underflow:
$LN1@underflow:

; 499  :         }
; 500  :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
tv76 = 48
this$ = 80
_Meta$ = 88
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT

; 469  :     int_type __CLR_OR_THIS_CALL pbackfail(int_type _Meta = _Traits::eof()) override {

$LN13:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 470  :         // put an element back to stream
; 471  :         if (_Mysb::gptr() && _Mysb::eback() < _Mysb::gptr()
; 472  :             && (_Traits::eq_int_type(_Traits::eof(), _Meta)

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	test	rax, rax
	je	$LN2@pbackfail
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	QWORD PTR tv76[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	rcx, QWORD PTR tv76[rsp]
	cmp	rcx, rax
	jae	SHORT $LN2@pbackfail
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T1[rsp], eax
	lea	rdx, QWORD PTR _Meta$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@pbackfail
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	ecx, 1
	imul	rcx, rcx, -1
	add	rax, rcx
	mov	rcx, rax
	call	?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
	mov	DWORD PTR $T2[rsp], eax
	lea	rdx, QWORD PTR _Meta$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@pbackfail
$LN4@pbackfail:

; 473  :                 || _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 474  :                     _Meta))) { // just back up position
; 475  :             _Mysb::_Gndec();

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ

; 476  :             return _Traits::not_eof(_Meta);

	lea	rcx, QWORD PTR _Meta$[rsp]
	call	?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z ; std::_Narrow_char_traits<char,int>::not_eof
	jmp	$LN1@pbackfail
	jmp	$LN3@pbackfail
$LN2@pbackfail:

; 477  :         } else if (!_Myfile || _Traits::eq_int_type(_Traits::eof(), _Meta)) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN7@pbackfail
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T3[rsp], eax
	lea	rdx, QWORD PTR _Meta$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@pbackfail
$LN7@pbackfail:

; 478  :             return _Traits::eof(); // no open C stream or EOF, fail

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	jmp	$LN1@pbackfail
	jmp	$LN6@pbackfail
$LN5@pbackfail:

; 479  :         } else if (!_Pcvt && _Ungetc(_Traits::to_char_type(_Meta), _Myfile)) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+104], 0
	jne	SHORT $LN8@pbackfail
	lea	rcx, QWORD PTR _Meta$[rsp]
	call	?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
	mov	BYTE PTR $T4[rsp], al
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+128]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z ; std::_Ungetc<char>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@pbackfail

; 480  :             return _Meta; // no facet and unget succeeded, return

	mov	eax, DWORD PTR _Meta$[rsp]
	jmp	SHORT $LN1@pbackfail
	jmp	SHORT $LN9@pbackfail
$LN8@pbackfail:

; 481  :         } else if (_Mysb::gptr() != &_Mychar) { // putback to _Mychar

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, 112				; 00000070H
	cmp	rax, rcx
	je	SHORT $LN10@pbackfail

; 482  :             _Mychar = _Traits::to_char_type(_Meta);

	lea	rcx, QWORD PTR _Meta$[rsp]
	call	?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+112], al

; 483  :             _Set_back(); // switch to _Mychar buffer

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back

; 484  :             return _Meta;

	mov	eax, DWORD PTR _Meta$[rsp]
	jmp	SHORT $LN1@pbackfail

; 485  :         } else {

	jmp	SHORT $LN11@pbackfail
$LN10@pbackfail:

; 486  :             return _Traits::eof(); // nowhere to put back

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
$LN11@pbackfail:
$LN9@pbackfail:
$LN6@pbackfail:
$LN3@pbackfail:
$LN1@pbackfail:

; 487  :         }
; 488  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
_TEXT	SEGMENT
_Codecvt_temp_buf$ = 64
_Str$ = 88
_Ch$ = 148
_Src$ = 184
_Dest$ = 216
_Count$7 = 232
$T8 = 248
tv84 = 256
tv178 = 264
tv147 = 268
tv163 = 272
tv184 = 276
__$ArrayPad$ = 280
this$ = 304
_Meta$ = 312
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT

; 416  :     int_type __CLR_OR_THIS_CALL overflow(int_type _Meta = _Traits::eof()) override { // put an element to stream

$LN19:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 288				; 00000120H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+304]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 417  :         if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR $T8[rsp], eax
	lea	rdx, QWORD PTR _Meta$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@overflow

; 418  :             return _Traits::not_eof(_Meta); // EOF, return success code

	lea	rcx, QWORD PTR _Meta$[rsp]
	call	?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z ; std::_Narrow_char_traits<char,int>::not_eof
	jmp	$LN1@overflow
$LN4@overflow:

; 419  :         }
; 420  : 
; 421  :         if (_Mysb::pptr() && _Mysb::pptr() < _Mysb::epptr()) { // room in buffer, store it

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	test	rax, rax
	je	SHORT $LN5@overflow
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	QWORD PTR tv84[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
	mov	rcx, QWORD PTR tv84[rsp]
	cmp	rcx, rax
	jae	SHORT $LN5@overflow

; 422  :             *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

	lea	rcx, QWORD PTR _Meta$[rsp]
	call	?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
	mov	BYTE PTR tv178[rsp], al
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
	movzx	ecx, BYTE PTR tv178[rsp]
	mov	BYTE PTR [rax], cl

; 423  :             return _Meta;

	mov	eax, DWORD PTR _Meta$[rsp]
	jmp	$LN1@overflow
$LN5@overflow:

; 424  :         }
; 425  : 
; 426  :         if (!_Myfile) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	jne	SHORT $LN6@overflow

; 427  :             return _Traits::eof(); // no open C stream, fail

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	jmp	$LN1@overflow
$LN6@overflow:

; 428  :         }
; 429  : 
; 430  :         _Reset_back(); // revert from _Mychar buffer

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 431  :         if (!_Pcvt) { // no codecvt facet, put as is

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+104], 0
	jne	SHORT $LN7@overflow

; 432  :             return _Fputc(_Traits::to_char_type(_Meta), _Myfile) ? _Meta : _Traits::eof();

	lea	rcx, QWORD PTR _Meta$[rsp]
	call	?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rcx+128]
	movzx	ecx, al
	call	??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z	; std::_Fputc<char>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@overflow
	mov	eax, DWORD PTR _Meta$[rsp]
	mov	DWORD PTR tv147[rsp], eax
	jmp	SHORT $LN16@overflow
$LN15@overflow:
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR tv147[rsp], eax
$LN16@overflow:
	mov	eax, DWORD PTR tv147[rsp]
	jmp	$LN1@overflow
$LN7@overflow:

; 433  :         }
; 434  : 
; 435  :         // put using codecvt facet
; 436  :         constexpr size_t _Codecvt_temp_buf = 32;

	mov	QWORD PTR _Codecvt_temp_buf$[rsp], 32	; 00000020H

; 437  :         char _Str[_Codecvt_temp_buf];
; 438  :         const _Elem _Ch = _Traits::to_char_type(_Meta);

	lea	rcx, QWORD PTR _Meta$[rsp]
	call	?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
	mov	BYTE PTR _Ch$[rsp], al

; 439  :         const _Elem* _Src;
; 440  :         char* _Dest;
; 441  : 
; 442  :         // test result of converting one element
; 443  :         switch (_Pcvt->out(_State, &_Ch, &_Ch + 1, _Src, _Str, _Str + _Codecvt_temp_buf, _Dest)) {

	lea	rax, QWORD PTR _Str$[rsp+32]
	lea	rcx, QWORD PTR _Ch$[rsp+1]
	mov	rdx, QWORD PTR this$[rsp]
	add	rdx, 116				; 00000074H
	lea	r8, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rsp+56], r8
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR _Str$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR _Src$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rcx
	lea	r8, QWORD PTR _Ch$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+104]
	call	QWORD PTR __imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z
	mov	DWORD PTR tv163[rsp], eax
	cmp	DWORD PTR tv163[rsp], 0
	je	SHORT $LN9@overflow
	cmp	DWORD PTR tv163[rsp], 1
	je	SHORT $LN8@overflow
	cmp	DWORD PTR tv163[rsp], 3
	je	$LN12@overflow
	jmp	$LN13@overflow
$LN8@overflow:
$LN9@overflow:

; 444  :         case codecvt_base::partial:
; 445  :         case codecvt_base::ok:
; 446  :             { // converted something, try to put it out
; 447  :                 const auto _Count = static_cast<size_t>(_Dest - _Str);

	lea	rax, QWORD PTR _Str$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$7[rsp], rax

; 448  :                 if (0 < _Count && _Count != static_cast<size_t>(_CSTD fwrite(_Str, 1, _Count, _Myfile))) {

	cmp	QWORD PTR _Count$7[rsp], 0
	jbe	SHORT $LN10@overflow
	mov	rax, QWORD PTR this$[rsp]
	mov	r9, QWORD PTR [rax+128]
	mov	r8, QWORD PTR _Count$7[rsp]
	mov	edx, 1
	lea	rcx, QWORD PTR _Str$[rsp]
	call	QWORD PTR __imp_fwrite
	cmp	QWORD PTR _Count$7[rsp], rax
	je	SHORT $LN10@overflow

; 449  :                     return _Traits::eof(); // write failed

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	jmp	SHORT $LN1@overflow
$LN10@overflow:

; 450  :                 }
; 451  : 
; 452  :                 _Wrotesome = true; // write succeeded

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+113], 1

; 453  :                 if (_Src != &_Ch) {

	lea	rax, QWORD PTR _Ch$[rsp]
	cmp	QWORD PTR _Src$[rsp], rax
	je	SHORT $LN11@overflow

; 454  :                     return _Meta; // converted whole element

	mov	eax, DWORD PTR _Meta$[rsp]
	jmp	SHORT $LN1@overflow
$LN11@overflow:

; 455  :                 }
; 456  : 
; 457  :                 return _Traits::eof(); // conversion failed

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	jmp	SHORT $LN1@overflow
$LN12@overflow:

; 458  :             }
; 459  : 
; 460  :         case codecvt_base::noconv:
; 461  :             // no conversion, put as is
; 462  :             return _Fputc(_Ch, _Myfile) ? _Meta : _Traits::eof();

	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+128]
	movzx	ecx, BYTE PTR _Ch$[rsp]
	call	??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z	; std::_Fputc<char>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@overflow
	mov	eax, DWORD PTR _Meta$[rsp]
	mov	DWORD PTR tv184[rsp], eax
	jmp	SHORT $LN18@overflow
$LN17@overflow:
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	DWORD PTR tv184[rsp], eax
$LN18@overflow:
	mov	eax, DWORD PTR tv184[rsp]
	jmp	SHORT $LN1@overflow
$LN13@overflow:

; 463  : 
; 464  :         default:
; 465  :             return _Traits::eof(); // conversion failed

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
$LN1@overflow:

; 466  :         }
; 467  :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 288				; 00000120H
	pop	rdi
	ret	0
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT

; 409  :     void __CLR_OR_THIS_CALL _Unlock() override { // unlock file instead of stream buffer

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 410  :         if (_Myfile) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN2@Unlock

; 411  :             _CSTD _unlock_file(_Myfile);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+128]
	call	QWORD PTR __imp__unlock_file
$LN2@Unlock:

; 412  :         }
; 413  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT

; 403  :     void __CLR_OR_THIS_CALL _Lock() override { // lock file instead of stream buffer

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 404  :         if (_Myfile) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN2@Lock

; 405  :             _CSTD _lock_file(_Myfile);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+128]
	call	QWORD PTR __imp__lock_file
$LN2@Lock:

; 406  :         }
; 407  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ
_TEXT	SEGMENT
_Ans$ = 32
this$ = 64
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT

; 382  :     basic_filebuf* close() {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 383  :         basic_filebuf* _Ans;
; 384  :         if (_Myfile) { // put any homing sequence and close file

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN2@close

; 385  :             _Reset_back(); // revert from _Mychar buffer

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 386  : 
; 387  :             _Ans = this;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _Ans$[rsp], rax

; 388  :             if (!_Endwrite()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@close

; 389  :                 _Ans = nullptr;

	mov	QWORD PTR _Ans$[rsp], 0
$LN4@close:

; 390  :             }
; 391  : 
; 392  :             if (_CSTD fclose(_Myfile) != 0) {

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+128]
	call	QWORD PTR __imp_fclose
	test	eax, eax
	je	SHORT $LN5@close

; 393  :                 _Ans = nullptr;

	mov	QWORD PTR _Ans$[rsp], 0
$LN5@close:

; 394  :             }
; 395  :         } else {

	jmp	SHORT $LN3@close
$LN2@close:

; 396  :             _Ans = nullptr;

	mov	QWORD PTR _Ans$[rsp], 0
$LN3@close:

; 397  :         }
; 398  : 
; 399  :         _Init(nullptr, _Closefl);

	mov	r8d, 2
	xor	edx, edx
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 400  :         return _Ans;

	mov	rax, QWORD PTR _Ans$[rsp]

; 401  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
_TEXT	SEGMENT
_File$ = 32
$T1 = 40
tv89 = 56
tv88 = 64
this$ = 96
_Filename$ = 104
_Mode$ = 112
_Prot$ = 120
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT

; 283  :     basic_filebuf* open(const char* _Filename, ios_base::openmode _Mode, int _Prot = ios_base::_Default_open_prot) {

$LN6:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 284  :         // _Prot is an extension
; 285  :         if (_Myfile) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN2@open

; 286  :             return nullptr;

	xor	eax, eax
	jmp	SHORT $LN1@open
$LN2@open:

; 287  :         }
; 288  : 
; 289  :         const auto _File = _Fiopen(_Filename, _Mode, _Prot);

	mov	r8d, DWORD PTR _Prot$[rsp]
	mov	edx, DWORD PTR _Mode$[rsp]
	mov	rcx, QWORD PTR _Filename$[rsp]
	call	?_Fiopen@std@@YAPEAU_iobuf@@PEBDHH@Z	; std::_Fiopen
	mov	QWORD PTR _File$[rsp], rax

; 290  :         if (!_File) {

	cmp	QWORD PTR _File$[rsp], 0
	jne	SHORT $LN3@open

; 291  :             return nullptr; // open failed

	xor	eax, eax
	jmp	SHORT $LN1@open
$LN3@open:

; 292  :         }
; 293  : 
; 294  :         _Init(_File, _Openfl);

	mov	r8d, 1
	mov	rdx, QWORD PTR _File$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 295  :         _Initcvt(_STD use_facet<_Cvt>(_Mysb::getloc()));

	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEBA?AVlocale@2@XZ
	mov	QWORD PTR tv89[rsp], rax
	mov	rax, QWORD PTR tv89[rsp]
	mov	QWORD PTR tv88[rsp], rax
	mov	rcx, QWORD PTR tv88[rsp]
	call	??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
	npad	1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??1locale@std@@QEAA@XZ			; std::locale::~locale

; 296  :         return this; // open succeeded

	mov	rax, QWORD PTR this$[rsp]
$LN1@open:

; 297  :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_File$ = 32
$T1 = 40
tv89 = 56
tv88 = 64
this$ = 96
_Filename$ = 104
_Mode$ = 112
_Prot$ = 120
?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::open'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR $T1[rbp]
	call	??1locale@std@@QEAA@XZ			; std::locale::~locale
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::open'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT

; 178  :     __CLR_OR_THIS_CALL ~basic_filebuf() noexcept override {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
	mov	QWORD PTR [rax], rcx

; 179  :         if (_Myfile) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN2@basic_file

; 180  :             _Reset_back(); // revert from _Mychar buffer

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
$LN2@basic_file:

; 181  :         }
; 182  : 
; 183  :         if (_Closef) {

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+124]
	test	eax, eax
	je	SHORT $LN3@basic_file

; 184  :             close();

	mov	rcx, QWORD PTR this$[rsp]
	call	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN3@basic_file:

; 185  :         }
; 186  :     }

	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
	npad	1
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT

; 170  :     basic_filebuf() : _Mysb() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ
	npad	1
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
	mov	QWORD PTR [rax], rcx

; 171  :         _Init(nullptr, _Newfl);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	npad	1

; 172  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR this$[rbp]
	call	QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\gtx\loader_dds9.inl
;	COMDAT ?isCompressed@detail@loader_dds9@gtx@gli@@YA_NAEBVtexture2D@4@@Z
_TEXT	SEGMENT
tv66 = 32
Image$ = 64
?isCompressed@detail@loader_dds9@gtx@gli@@YA_NAEBVtexture2D@4@@Z PROC ; gli::gtx::loader_dds9::detail::isCompressed, COMDAT

; 373  : 	{

$LN17:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 374  : 		switch(Image.format())

	mov	rcx, QWORD PTR Image$[rsp]
	call	?format@texture2D@gli@@QEBA?AW402@XZ	; gli::texture2D::format
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR tv66[rsp]
	sub	eax, 44					; 0000002cH
	mov	DWORD PTR tv66[rsp], eax
	cmp	DWORD PTR tv66[rsp], 9
	ja	SHORT $LN4@isCompress
	movsxd	rax, DWORD PTR tv66[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN16@isCompress[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@isCompress:

; 375  : 		{
; 376  : 		default:
; 377  : 			return false;

	xor	al, al
	jmp	SHORT $LN1@isCompress
$LN5@isCompress:
$LN6@isCompress:
$LN7@isCompress:
$LN8@isCompress:
$LN9@isCompress:
$LN10@isCompress:
$LN11@isCompress:
$LN12@isCompress:
$LN13@isCompress:
$LN14@isCompress:

; 378  : 		case DXT1:
; 379  : 		case DXT3:
; 380  : 		case DXT5:
; 381  : 		case ATI1N_UNORM:
; 382  : 		case ATI1N_SNORM:
; 383  : 		case ATI2N_UNORM:
; 384  : 		case ATI2N_SNORM:
; 385  : 		case BP_UF16:
; 386  : 		case BP_SF16:
; 387  : 		case BP:
; 388  : 			return true;

	mov	al, 1
	jmp	SHORT $LN1@isCompress

; 389  : 		}
; 390  : 		return false;

	xor	al, al
$LN1@isCompress:

; 391  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
	npad	2
$LN16@isCompress:
	DD	$LN5@isCompress
	DD	$LN6@isCompress
	DD	$LN7@isCompress
	DD	$LN8@isCompress
	DD	$LN9@isCompress
	DD	$LN10@isCompress
	DD	$LN11@isCompress
	DD	$LN12@isCompress
	DD	$LN13@isCompress
	DD	$LN14@isCompress
?isCompressed@detail@loader_dds9@gtx@gli@@YA_NAEBVtexture2D@4@@Z ENDP ; gli::gtx::loader_dds9::detail::isCompressed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\gtx\loader_dds9.inl
;	COMDAT ?getFormatBPP@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z
_TEXT	SEGMENT
tv66 = 32
Image$ = 64
?getFormatBPP@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z PROC ; gli::gtx::loader_dds9::detail::getFormatBPP, COMDAT

; 335  : 	{

$LN26:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 336  : 		switch(Image.format())

	mov	rcx, QWORD PTR Image$[rsp]
	call	?format@texture2D@gli@@QEBA?AW402@XZ	; gli::texture2D::format
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR tv66[rsp]
	dec	eax
	mov	DWORD PTR tv66[rsp], eax
	cmp	DWORD PTR tv66[rsp], 52			; 00000034H
	ja	SHORT $LN4@getFormatB
	movsxd	rax, DWORD PTR tv66[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN24@getFormatB[rcx+rax]
	mov	eax, DWORD PTR $LN25@getFormatB[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@getFormatB:

; 337  : 		{
; 338  : 		default:
; 339  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN1@getFormatB
$LN5@getFormatB:
$LN6@getFormatB:

; 340  : 		case R8U:
; 341  : 		case R8I:
; 342  : 			return 8;

	mov	eax, 8
	jmp	SHORT $LN1@getFormatB
$LN7@getFormatB:
$LN8@getFormatB:

; 343  : 		case RG8U:
; 344  : 		case RG8I:
; 345  : 			return 16;

	mov	eax, 16
	jmp	SHORT $LN1@getFormatB
$LN9@getFormatB:
$LN10@getFormatB:

; 346  : 		case RGB8U:
; 347  : 		case RGB8I:
; 348  : 			return 24;

	mov	eax, 24
	jmp	SHORT $LN1@getFormatB
$LN11@getFormatB:
$LN12@getFormatB:

; 349  : 		case RGBA8U:
; 350  : 		case RGBA8I:
; 351  : 			return 32;

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@getFormatB
$LN13@getFormatB:

; 352  : 		case DXT1:
; 353  : 			return 4;

	mov	eax, 4
	jmp	SHORT $LN1@getFormatB
$LN14@getFormatB:

; 354  : 		case DXT3:
; 355  : 			return 8;

	mov	eax, 8
	jmp	SHORT $LN1@getFormatB
$LN15@getFormatB:

; 356  : 		case DXT5:
; 357  : 			return 8;

	mov	eax, 8
	jmp	SHORT $LN1@getFormatB
$LN16@getFormatB:
$LN17@getFormatB:

; 358  : 		case ATI1N_UNORM:
; 359  : 		case ATI1N_SNORM:
; 360  : 			return 4;

	mov	eax, 4
	jmp	SHORT $LN1@getFormatB
$LN18@getFormatB:
$LN19@getFormatB:

; 361  : 		case ATI2N_UNORM:
; 362  : 		case ATI2N_SNORM:
; 363  : 			return 8;

	mov	eax, 8
	jmp	SHORT $LN1@getFormatB
$LN20@getFormatB:
$LN21@getFormatB:

; 364  : 		case BP_UF16:
; 365  : 		case BP_SF16:
; 366  : 			return 8;

	mov	eax, 8
	jmp	SHORT $LN1@getFormatB
$LN22@getFormatB:

; 367  : 		case BP:
; 368  : 			return 8;

	mov	eax, 8
$LN1@getFormatB:

; 369  : 		}
; 370  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
	npad	2
$LN25@getFormatB:
	DD	$LN5@getFormatB
	DD	$LN7@getFormatB
	DD	$LN9@getFormatB
	DD	$LN11@getFormatB
	DD	$LN6@getFormatB
	DD	$LN8@getFormatB
	DD	$LN10@getFormatB
	DD	$LN12@getFormatB
	DD	$LN13@getFormatB
	DD	$LN14@getFormatB
	DD	$LN15@getFormatB
	DD	$LN16@getFormatB
	DD	$LN17@getFormatB
	DD	$LN18@getFormatB
	DD	$LN19@getFormatB
	DD	$LN20@getFormatB
	DD	$LN21@getFormatB
	DD	$LN22@getFormatB
	DD	$LN4@getFormatB
$LN24@getFormatB:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	4
	DB	5
	DB	6
	DB	7
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	18
	DB	8
	DB	9
	DB	10
	DB	11
	DB	12
	DB	13
	DB	14
	DB	15
	DB	16
	DB	17
?getFormatBPP@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z ENDP ; gli::gtx::loader_dds9::detail::getFormatBPP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\gtx\loader_dds9.inl
;	COMDAT ?getFormatFlags@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z
_TEXT	SEGMENT
Result$ = 32
tv66 = 36
Image$ = 64
?getFormatFlags@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z PROC ; gli::gtx::loader_dds9::detail::getFormatFlags, COMDAT

; 265  : 	{

$LN60:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 266  : 		glm::uint32 Result = 0;

	mov	DWORD PTR Result$[rsp], 0

; 267  : 
; 268  : 		switch(Image.format())

	mov	rcx, QWORD PTR Image$[rsp]
	call	?format@texture2D@gli@@QEBA?AW402@XZ	; gli::texture2D::format
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR tv66[rsp]
	dec	eax
	mov	DWORD PTR tv66[rsp], eax
	cmp	DWORD PTR tv66[rsp], 52			; 00000034H
	ja	SHORT $LN4@getFormatF
	movsxd	rax, DWORD PTR tv66[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN59@getFormatF[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@getFormatF:

; 269  : 		{
; 270  : 		default: 
; 271  : 			break;

	jmp	SHORT $LN2@getFormatF
$LN5@getFormatF:
$LN6@getFormatF:
$LN7@getFormatF:
$LN8@getFormatF:
$LN9@getFormatF:
$LN10@getFormatF:
$LN11@getFormatF:
$LN12@getFormatF:
$LN13@getFormatF:
$LN14@getFormatF:
$LN15@getFormatF:
$LN16@getFormatF:
$LN17@getFormatF:
$LN18@getFormatF:
$LN19@getFormatF:
$LN20@getFormatF:
$LN21@getFormatF:
$LN22@getFormatF:
$LN23@getFormatF:
$LN24@getFormatF:
$LN25@getFormatF:
$LN26@getFormatF:
$LN27@getFormatF:
$LN28@getFormatF:

; 272  : 		case R8U:
; 273  : 		case RG8U:
; 274  : 		case RGB8U:
; 275  : 		case RGBA8U:
; 276  : 		case R16U:
; 277  : 		case RG16U:
; 278  : 		case RGB16U:
; 279  : 		case RGBA16U:
; 280  : 		case R32U:
; 281  : 		case RG32U:
; 282  : 		case RGB32U:
; 283  : 		case RGBA32U:
; 284  : 		case R8I:
; 285  : 		case RG8I:
; 286  : 		case RGB8I:
; 287  : 		case RGBA8I:
; 288  : 		case R16I:
; 289  : 		case RG16I:
; 290  : 		case RGB16I:
; 291  : 		case RGBA16I:
; 292  : 		case R32I:
; 293  : 		case RG32I:
; 294  : 		case RGB32I:
; 295  : 		case RGBA32I:
; 296  : 			Result |= GLI_DDPF_RGB;

	mov	eax, DWORD PTR Result$[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR Result$[rsp], eax

; 297  : 			break;

	jmp	SHORT $LN2@getFormatF
$LN29@getFormatF:
$LN30@getFormatF:
$LN31@getFormatF:
$LN32@getFormatF:
$LN33@getFormatF:
$LN34@getFormatF:
$LN35@getFormatF:
$LN36@getFormatF:
$LN37@getFormatF:
$LN38@getFormatF:
$LN39@getFormatF:
$LN40@getFormatF:
$LN41@getFormatF:
$LN42@getFormatF:
$LN43@getFormatF:
$LN44@getFormatF:
$LN45@getFormatF:
$LN46@getFormatF:
$LN47@getFormatF:
$LN48@getFormatF:
$LN49@getFormatF:
$LN50@getFormatF:
$LN51@getFormatF:
$LN52@getFormatF:
$LN53@getFormatF:
$LN54@getFormatF:
$LN55@getFormatF:
$LN56@getFormatF:
$LN57@getFormatF:

; 298  : 		case R16F:
; 299  : 		case RG16F:
; 300  : 		case RGB16F:
; 301  : 		case RGBA16F:
; 302  : 		case R32F:
; 303  : 		case RG32F:
; 304  : 		case RGB32F:
; 305  : 		case RGBA32F:
; 306  : 		case RGBE8:
; 307  : 		case RGB9E5:
; 308  : 		case RG11B10F:
; 309  : 		case R5G6B5:
; 310  : 		case RGBA4:
; 311  : 		case RGB10A2:
; 312  : 		case D16:
; 313  : 		case D24X8:
; 314  : 		case D24S8:
; 315  : 		case D32F:
; 316  : 		case D32FS8X24:
; 317  : 		case DXT1:
; 318  : 		case DXT3:
; 319  : 		case DXT5:
; 320  : 		case ATI1N_UNORM:
; 321  : 		case ATI1N_SNORM:
; 322  : 		case ATI2N_UNORM:
; 323  : 		case ATI2N_SNORM:
; 324  : 		case BP_UF16:
; 325  : 		case BP_SF16:
; 326  : 		case BP:
; 327  : 			Result |= GLI_DDPF_FOURCC;

	mov	eax, DWORD PTR Result$[rsp]
	or	eax, 4
	mov	DWORD PTR Result$[rsp], eax
$LN2@getFormatF:

; 328  : 			break;
; 329  : 		};
; 330  : 
; 331  : 		return Result;

	mov	eax, DWORD PTR Result$[rsp]

; 332  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
	npad	3
$LN59@getFormatF:
	DD	$LN5@getFormatF
	DD	$LN6@getFormatF
	DD	$LN7@getFormatF
	DD	$LN8@getFormatF
	DD	$LN9@getFormatF
	DD	$LN10@getFormatF
	DD	$LN11@getFormatF
	DD	$LN12@getFormatF
	DD	$LN13@getFormatF
	DD	$LN14@getFormatF
	DD	$LN15@getFormatF
	DD	$LN16@getFormatF
	DD	$LN17@getFormatF
	DD	$LN18@getFormatF
	DD	$LN19@getFormatF
	DD	$LN20@getFormatF
	DD	$LN21@getFormatF
	DD	$LN22@getFormatF
	DD	$LN23@getFormatF
	DD	$LN24@getFormatF
	DD	$LN25@getFormatF
	DD	$LN26@getFormatF
	DD	$LN27@getFormatF
	DD	$LN28@getFormatF
	DD	$LN29@getFormatF
	DD	$LN30@getFormatF
	DD	$LN31@getFormatF
	DD	$LN32@getFormatF
	DD	$LN33@getFormatF
	DD	$LN34@getFormatF
	DD	$LN35@getFormatF
	DD	$LN36@getFormatF
	DD	$LN37@getFormatF
	DD	$LN38@getFormatF
	DD	$LN39@getFormatF
	DD	$LN40@getFormatF
	DD	$LN41@getFormatF
	DD	$LN42@getFormatF
	DD	$LN43@getFormatF
	DD	$LN44@getFormatF
	DD	$LN45@getFormatF
	DD	$LN46@getFormatF
	DD	$LN47@getFormatF
	DD	$LN48@getFormatF
	DD	$LN49@getFormatF
	DD	$LN50@getFormatF
	DD	$LN51@getFormatF
	DD	$LN52@getFormatF
	DD	$LN53@getFormatF
	DD	$LN54@getFormatF
	DD	$LN55@getFormatF
	DD	$LN56@getFormatF
	DD	$LN57@getFormatF
?getFormatFlags@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z ENDP ; gli::gtx::loader_dds9::detail::getFormatFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\gtx\loader_dds9.inl
;	COMDAT ?getFormatFourCC@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z
_TEXT	SEGMENT
tv66 = 32
Image$ = 64
?getFormatFourCC@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z PROC ; gli::gtx::loader_dds9::detail::getFormatFourCC, COMDAT

; 192  : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 193  : 		switch(Image.format())

	mov	rcx, QWORD PTR Image$[rsp]
	call	?format@texture2D@gli@@QEBA?AW402@XZ	; gli::texture2D::format
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR tv66[rsp]
	sub	eax, 25
	mov	DWORD PTR tv66[rsp], eax
	cmp	DWORD PTR tv66[rsp], 28
	ja	SHORT $LN4@getFormatF
	movsxd	rax, DWORD PTR tv66[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN22@getFormatF[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@getFormatF:

; 194  : 		{
; 195  : 		default:
; 196  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN1@getFormatF
$LN5@getFormatF:

; 197  : 		case DXT1:
; 198  : 			return GLI_FOURCC_DXT1;

	mov	eax, 827611204				; 31545844H
	jmp	SHORT $LN1@getFormatF
$LN6@getFormatF:

; 199  : 		case DXT3:
; 200  : 			return GLI_FOURCC_DXT3;

	mov	eax, 861165636				; 33545844H
	jmp	SHORT $LN1@getFormatF
$LN7@getFormatF:

; 201  : 		case DXT5:
; 202  : 			return GLI_FOURCC_DXT5;

	mov	eax, 894720068				; 35545844H
	jmp	SHORT $LN1@getFormatF
$LN8@getFormatF:
$LN9@getFormatF:
$LN10@getFormatF:
$LN11@getFormatF:
$LN12@getFormatF:
$LN13@getFormatF:
$LN14@getFormatF:

; 203  : 		case ATI1N_UNORM:
; 204  : 		case ATI1N_SNORM:
; 205  : 		case ATI2N_UNORM:
; 206  : 		case ATI2N_SNORM:
; 207  : 		case BP_UF16:
; 208  : 		case BP_SF16:
; 209  : 		case BP:
; 210  : 			return GLI_FOURCC_DX10;

	mov	eax, 808540228				; 30315844H
	jmp	SHORT $LN1@getFormatF
$LN15@getFormatF:

; 211  : 		case R16F:
; 212  : 			return GLI_FOURCC_R16F;

	mov	eax, 111				; 0000006fH
	jmp	SHORT $LN1@getFormatF
$LN16@getFormatF:

; 213  : 		case RG16F:
; 214  : 			return GLI_FOURCC_G16R16F;

	mov	eax, 112				; 00000070H
	jmp	SHORT $LN1@getFormatF
$LN17@getFormatF:

; 215  : 		case RGBA16F:
; 216  : 			return GLI_FOURCC_A16B16G16R16F;

	mov	eax, 113				; 00000071H
	jmp	SHORT $LN1@getFormatF
$LN18@getFormatF:

; 217  : 		case R32F:
; 218  : 			return GLI_FOURCC_R32F;

	mov	eax, 114				; 00000072H
	jmp	SHORT $LN1@getFormatF
$LN19@getFormatF:

; 219  : 		case RG32F:
; 220  : 			return GLI_FOURCC_G32R32F;

	mov	eax, 115				; 00000073H
	jmp	SHORT $LN1@getFormatF
$LN20@getFormatF:

; 221  : 		case RGBA32F:
; 222  : 			return GLI_FOURCC_A32B32G32R32F;

	mov	eax, 116				; 00000074H
$LN1@getFormatF:

; 223  : 		}
; 224  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN22@getFormatF:
	DD	$LN15@getFormatF
	DD	$LN16@getFormatF
	DD	$LN4@getFormatF
	DD	$LN17@getFormatF
	DD	$LN18@getFormatF
	DD	$LN19@getFormatF
	DD	$LN4@getFormatF
	DD	$LN20@getFormatF
	DD	$LN4@getFormatF
	DD	$LN4@getFormatF
	DD	$LN4@getFormatF
	DD	$LN4@getFormatF
	DD	$LN4@getFormatF
	DD	$LN4@getFormatF
	DD	$LN4@getFormatF
	DD	$LN4@getFormatF
	DD	$LN4@getFormatF
	DD	$LN4@getFormatF
	DD	$LN4@getFormatF
	DD	$LN5@getFormatF
	DD	$LN6@getFormatF
	DD	$LN7@getFormatF
	DD	$LN8@getFormatF
	DD	$LN9@getFormatF
	DD	$LN10@getFormatF
	DD	$LN11@getFormatF
	DD	$LN12@getFormatF
	DD	$LN13@getFormatF
	DD	$LN14@getFormatF
?getFormatFourCC@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z ENDP ; gli::gtx::loader_dds9::detail::getFormatFourCC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\gtx\loader_dds9.inl
;	COMDAT ?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
FileOut$ = 64
Magic$ = 344
Caps$ = 352
SurfaceDesc$ = 384
Level$6 = 536
ImageSize$7 = 548
$T8 = 560
$T9 = 568
$T10 = 576
$T11 = 584
$T12 = 592
$T13 = 596
tv130 = 600
tv135 = 604
tv158 = 608
tv171 = 612
tv228 = 616
__$ArrayPad$ = 624
Texture$ = 656
Filename$ = 664
?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; gli::gtx::loader_dds9::saveDDS9, COMDAT

; 695  : 	{

$LN18:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 640				; 00000280H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 148				; 00000094H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+656]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 696  : 		std::ofstream FileOut(Filename.c_str(), std::ios::out | std::ios::binary);

	mov	rcx, QWORD PTR Filename$[rsp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 64					; 00000040H
	mov	r8d, 34					; 00000022H
	mov	rdx, rax
	lea	rcx, QWORD PTR FileOut$[rsp]
	call	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
	npad	1

; 697  : 		if (!FileOut)

	mov	rax, QWORD PTR FileOut$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	lea	rax, QWORD PTR FileOut$[rsp+rax]
	mov	rcx, rax
	call	QWORD PTR __imp_??7ios_base@std@@QEBA_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@saveDDS9

; 698  : 			return;

	lea	rcx, QWORD PTR FileOut$[rsp]
	call	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	jmp	$LN1@saveDDS9
$LN5@saveDDS9:

; 699  : 
; 700  : 		char const * Magic = "DDS ";

	lea	rax, OFFSET FLAT:??_C@_04HLKGINEK@DDS?5@
	mov	QWORD PTR Magic$[rsp], rax

; 701  : 		FileOut.write((char*)Magic, sizeof(char) * 4);

	mov	r8d, 4
	mov	rdx, QWORD PTR Magic$[rsp]
	lea	rcx, QWORD PTR FileOut$[rsp]
	call	QWORD PTR __imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEBD_J@Z

; 702  : 
; 703  : 		glm::uint32 Caps = detail::GLI_DDSD_CAPS | detail::GLI_DDSD_HEIGHT | detail::GLI_DDSD_WIDTH | detail::GLI_DDSD_PIXELFORMAT;

	mov	DWORD PTR Caps$[rsp], 4103		; 00001007H

; 704  : 
; 705  : 		detail::ddsHeader SurfaceDesc;
; 706  : 		SurfaceDesc.size = sizeof(detail::ddsHeader);

	mov	DWORD PTR SurfaceDesc$[rsp], 124	; 0000007cH

; 707  : 		SurfaceDesc.flags = Caps | (detail::isCompressed(Texture) ? detail::GLI_DDSD_LINEARSIZE : detail::GLI_DDSD_PITCH) | (Texture.levels() > 1 ? detail::GLI_DDSD_MIPMAPCOUNT : 0); //659463;

	mov	rcx, QWORD PTR Texture$[rsp]
	call	?isCompressed@detail@loader_dds9@gtx@gli@@YA_NAEBVtexture2D@4@@Z ; gli::gtx::loader_dds9::detail::isCompressed
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@saveDDS9
	mov	DWORD PTR tv130[rsp], 524288		; 00080000H
	jmp	SHORT $LN10@saveDDS9
$LN9@saveDDS9:
	mov	DWORD PTR tv130[rsp], 8
$LN10@saveDDS9:
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?levels@texture2D@gli@@QEBA_KXZ		; gli::texture2D::levels
	cmp	rax, 1
	jbe	SHORT $LN11@saveDDS9
	mov	DWORD PTR tv135[rsp], 131072		; 00020000H
	jmp	SHORT $LN12@saveDDS9
$LN11@saveDDS9:
	mov	DWORD PTR tv135[rsp], 0
$LN12@saveDDS9:
	mov	eax, DWORD PTR tv130[rsp]
	mov	ecx, DWORD PTR Caps$[rsp]
	or	ecx, eax
	mov	eax, ecx
	or	eax, DWORD PTR tv135[rsp]
	mov	DWORD PTR SurfaceDesc$[rsp+4], eax

; 708  : 		SurfaceDesc.width = Texture[0].dimensions().x;

	mov	QWORD PTR $T8[rsp], 0
	lea	rdx, QWORD PTR $T8[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	lea	rdx, QWORD PTR $T9[rsp]
	mov	rcx, rax
	call	?dimensions@image2D@gli@@QEBA?AU?$tvec2@I$0A@@glm@@XZ ; gli::image2D::dimensions
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR SurfaceDesc$[rsp+12], eax

; 709  : 		SurfaceDesc.height = Texture[0].dimensions().y;

	mov	QWORD PTR $T10[rsp], 0
	lea	rdx, QWORD PTR $T10[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	lea	rdx, QWORD PTR $T11[rsp]
	mov	rcx, rax
	call	?dimensions@image2D@gli@@QEBA?AU?$tvec2@I$0A@@glm@@XZ ; gli::image2D::dimensions
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR SurfaceDesc$[rsp+8], eax

; 710  : 		SurfaceDesc.pitch = loader_dds9::detail::isCompressed(Texture) ? size(Texture, LINEAR_SIZE) : 32;

	mov	rcx, QWORD PTR Texture$[rsp]
	call	?isCompressed@detail@loader_dds9@gtx@gli@@YA_NAEBVtexture2D@4@@Z ; gli::gtx::loader_dds9::detail::isCompressed
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@saveDDS9
	mov	DWORD PTR $T12[rsp], 0
	lea	rdx, QWORD PTR $T12[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?size@gli@@YAIAEBVtexture2D@1@AEBI@Z	; gli::size
	mov	DWORD PTR tv158[rsp], eax
	jmp	SHORT $LN14@saveDDS9
$LN13@saveDDS9:
	mov	DWORD PTR tv158[rsp], 32		; 00000020H
$LN14@saveDDS9:
	mov	eax, DWORD PTR tv158[rsp]
	mov	DWORD PTR SurfaceDesc$[rsp+16], eax

; 711  : 		SurfaceDesc.depth = 0;

	mov	DWORD PTR SurfaceDesc$[rsp+20], 0

; 712  : 		SurfaceDesc.mipMapLevels = glm::uint32(Texture.levels());

	mov	rcx, QWORD PTR Texture$[rsp]
	call	?levels@texture2D@gli@@QEBA_KXZ		; gli::texture2D::levels
	mov	DWORD PTR SurfaceDesc$[rsp+24], eax

; 713  : 		SurfaceDesc.format.size = sizeof(detail::ddsPixelFormat);

	mov	DWORD PTR SurfaceDesc$[rsp+72], 32	; 00000020H

; 714  : 		SurfaceDesc.format.flags = detail::getFormatFlags(Texture);

	mov	rcx, QWORD PTR Texture$[rsp]
	call	?getFormatFlags@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z ; gli::gtx::loader_dds9::detail::getFormatFlags
	mov	DWORD PTR SurfaceDesc$[rsp+76], eax

; 715  : 		SurfaceDesc.format.fourCC = detail::getFormatFourCC(Texture);

	mov	rcx, QWORD PTR Texture$[rsp]
	call	?getFormatFourCC@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z ; gli::gtx::loader_dds9::detail::getFormatFourCC
	mov	DWORD PTR SurfaceDesc$[rsp+80], eax

; 716  : 		SurfaceDesc.format.bpp = detail::getFormatBPP(Texture);

	mov	rcx, QWORD PTR Texture$[rsp]
	call	?getFormatBPP@detail@loader_dds9@gtx@gli@@YAIAEBVtexture2D@4@@Z ; gli::gtx::loader_dds9::detail::getFormatBPP
	mov	DWORD PTR SurfaceDesc$[rsp+84], eax

; 717  : 		SurfaceDesc.format.redMask = 0;

	mov	DWORD PTR SurfaceDesc$[rsp+88], 0

; 718  : 		SurfaceDesc.format.greenMask = 0;

	mov	DWORD PTR SurfaceDesc$[rsp+92], 0

; 719  : 		SurfaceDesc.format.blueMask = 0;

	mov	DWORD PTR SurfaceDesc$[rsp+96], 0

; 720  : 		SurfaceDesc.format.alphaMask = 0;

	mov	DWORD PTR SurfaceDesc$[rsp+100], 0

; 721  : 		SurfaceDesc.surfaceFlags = detail::GLI_DDSCAPS_TEXTURE | (Texture.levels() > 1 ? detail::GLI_DDSCAPS_MIPMAP : 0);

	mov	rcx, QWORD PTR Texture$[rsp]
	call	?levels@texture2D@gli@@QEBA_KXZ		; gli::texture2D::levels
	cmp	rax, 1
	jbe	SHORT $LN15@saveDDS9
	mov	DWORD PTR tv171[rsp], 4194304		; 00400000H
	jmp	SHORT $LN16@saveDDS9
$LN15@saveDDS9:
	mov	DWORD PTR tv171[rsp], 0
$LN16@saveDDS9:
	mov	eax, DWORD PTR tv171[rsp]
	bts	eax, 12
	mov	DWORD PTR SurfaceDesc$[rsp+104], eax

; 722  : 		SurfaceDesc.cubemapFlags = 0;

	mov	DWORD PTR SurfaceDesc$[rsp+108], 0

; 723  : 
; 724  : 		FileOut.write((char*)&SurfaceDesc, sizeof(SurfaceDesc));

	mov	r8d, 124				; 0000007cH
	lea	rdx, QWORD PTR SurfaceDesc$[rsp]
	lea	rcx, QWORD PTR FileOut$[rsp]
	call	QWORD PTR __imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEBD_J@Z

; 725  : 
; 726  : 		for(texture2D::level_type Level = 0; Level < Texture.levels(); ++Level)

	mov	QWORD PTR Level$6[rsp], 0
	jmp	SHORT $LN4@saveDDS9
$LN2@saveDDS9:
	mov	rax, QWORD PTR Level$6[rsp]
	inc	rax
	mov	QWORD PTR Level$6[rsp], rax
$LN4@saveDDS9:
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?levels@texture2D@gli@@QEBA_KXZ		; gli::texture2D::levels
	cmp	QWORD PTR Level$6[rsp], rax
	jae	$LN3@saveDDS9

; 727  : 		{
; 728  : 			texture2D::size_type ImageSize = size(Texture[Level], gli::LINEAR_SIZE);

	mov	DWORD PTR $T13[rsp], 0
	lea	rdx, QWORD PTR Level$6[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	lea	rdx, QWORD PTR $T13[rsp]
	mov	rcx, rax
	call	?size@gli@@YAIAEBVimage2D@1@AEBI@Z	; gli::size
	mov	DWORD PTR ImageSize$7[rsp], eax

; 729  : 			FileOut.write((char*)(Texture[Level].data()), ImageSize);

	mov	eax, DWORD PTR ImageSize$7[rsp]
	mov	QWORD PTR tv228[rsp], rax
	lea	rdx, QWORD PTR Level$6[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rcx, rax
	call	?data@image2D@gli@@QEBAQEBEXZ		; gli::image2D::data
	mov	rcx, QWORD PTR tv228[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR FileOut$[rsp]
	call	QWORD PTR __imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEBD_J@Z

; 730  : 		}

	jmp	$LN2@saveDDS9
$LN3@saveDDS9:

; 731  : 
; 732  : 		if(FileOut.fail() || FileOut.bad())

	mov	rax, QWORD PTR FileOut$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	lea	rax, QWORD PTR FileOut$[rsp+rax]
	mov	rcx, rax
	call	QWORD PTR __imp_?fail@ios_base@std@@QEBA_NXZ
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@saveDDS9
	mov	rax, QWORD PTR FileOut$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	lea	rax, QWORD PTR FileOut$[rsp+rax]
	mov	rcx, rax
	call	QWORD PTR __imp_?bad@ios_base@std@@QEBA_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@saveDDS9
$LN7@saveDDS9:

; 733  : 			return;

	lea	rcx, QWORD PTR FileOut$[rsp]
	call	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	jmp	SHORT $LN1@saveDDS9
$LN6@saveDDS9:

; 734  : 
; 735  : 		FileOut.close ();

	lea	rcx, QWORD PTR FileOut$[rsp]
	call	?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close
	npad	1

; 736  : 	}

	lea	rcx, QWORD PTR FileOut$[rsp]
	call	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
$LN1@saveDDS9:
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 640				; 00000280H
	pop	rdi
	ret	0
?saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; gli::gtx::loader_dds9::saveDDS9
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
FileOut$ = 64
Magic$ = 344
Caps$ = 352
SurfaceDesc$ = 384
Level$6 = 536
ImageSize$7 = 548
$T8 = 560
$T9 = 568
$T10 = 576
$T11 = 584
$T12 = 592
$T13 = 596
tv130 = 600
tv135 = 604
tv158 = 608
tv171 = 612
tv228 = 616
__$ArrayPad$ = 624
Texture$ = 656
Filename$ = 664
?dtor$0@?0??saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `gli::gtx::loader_dds9::saveDDS9'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR FileOut$[rbp]
	call	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??saveDDS9@loader_dds9@gtx@gli@@YAXAEBVtexture2D@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `gli::gtx::loader_dds9::saveDDS9'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = 32
_Byte$ = 64
_File$ = 72
??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT

; 138  : inline bool _Ungetc(const char& _Byte, FILE* _File) { // put back a char element to a C stream

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 139  :     return _CSTD ungetc(static_cast<unsigned char>(_Byte), _File) != EOF;

	mov	rax, QWORD PTR _Byte$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rdx, QWORD PTR _File$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_ungetc
	cmp	eax, -1
	je	SHORT $LN3@Ungetc
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@Ungetc
$LN3@Ungetc:
	mov	DWORD PTR tv69[rsp], 0
$LN4@Ungetc:
	movzx	eax, BYTE PTR tv69[rsp]

; 140  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = 32
_Byte$ = 64
_File$ = 72
??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT

; 116  : inline bool _Fputc(char _Byte, FILE* _File) { // put a char element to a C stream

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 48					; 00000030H

; 117  :     return _CSTD fputc(_Byte, _File) != EOF;

	movsx	eax, BYTE PTR _Byte$[rsp]
	mov	rdx, QWORD PTR _File$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
	cmp	eax, -1
	je	SHORT $LN3@Fputc
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@Fputc
$LN3@Fputc:
	mov	DWORD PTR tv69[rsp], 0
$LN4@Fputc:
	movzx	eax, BYTE PTR tv69[rsp]

; 118  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\fstream
;	COMDAT ??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z
_TEXT	SEGMENT
_Meta$ = 32
_Byte$ = 64
_File$ = 72
??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT

; 76   : inline bool _Fgetc(char& _Byte, FILE* _File) { // get a char element from a C stream

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 77   :     int _Meta;
; 78   :     if ((_Meta = _CSTD fgetc(_File)) == EOF) {

	mov	rcx, QWORD PTR _File$[rsp]
	call	QWORD PTR __imp_fgetc
	mov	DWORD PTR _Meta$[rsp], eax
	cmp	DWORD PTR _Meta$[rsp], -1
	jne	SHORT $LN2@Fgetc

; 79   :         return false;

	xor	al, al
	jmp	SHORT $LN1@Fgetc

; 80   :     } else { // got one, convert to char

	jmp	SHORT $LN3@Fgetc
$LN2@Fgetc:

; 81   :         _Byte = static_cast<char>(_Meta);

	mov	rax, QWORD PTR _Byte$[rsp]
	movzx	ecx, BYTE PTR _Meta$[rsp]
	mov	BYTE PTR [rax], cl

; 82   :         return true;

	mov	al, 1
$LN3@Fgetc:
$LN1@Fgetc:

; 83   :     }
; 84   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
_TEXT	SEGMENT
_Facptr$ = 32
_Ptr0$ = 40
tv71 = 48
this$ = 80
_Id$ = 88
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z PROC	; std::locale::_Getfacet, COMDAT

; 368  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 369  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rax, QWORD PTR [rax+24]
	cmp	QWORD PTR _Id$[rsp], rax
	jae	SHORT $LN6@Getfacet
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR _Id$[rsp]
	mov	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR tv71[rsp], rax
	jmp	SHORT $LN7@Getfacet
$LN6@Getfacet:
	mov	QWORD PTR tv71[rsp], 0
$LN7@Getfacet:
	mov	rax, QWORD PTR tv71[rsp]
	mov	QWORD PTR _Facptr$[rsp], rax

; 370  :         if (_Facptr || !_Ptr->_Xparent) {

	cmp	QWORD PTR _Facptr$[rsp], 0
	jne	SHORT $LN3@Getfacet
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	movzx	eax, BYTE PTR [rax+36]
	test	eax, eax
	jne	SHORT $LN2@Getfacet
$LN3@Getfacet:

; 371  :             return _Facptr; // found facet or not transparent

	mov	rax, QWORD PTR _Facptr$[rsp]
	jmp	SHORT $LN1@Getfacet
$LN2@Getfacet:

; 372  :         }
; 373  : 
; 374  :         // look in current locale
; 375  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

	call	?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ ; std::locale::_Getgloballocale
	mov	QWORD PTR _Ptr0$[rsp], rax

; 376  :         if (_Id < _Ptr0->_Facetcount) {

	mov	rax, QWORD PTR _Ptr0$[rsp]
	mov	rax, QWORD PTR [rax+24]
	cmp	QWORD PTR _Id$[rsp], rax
	jae	SHORT $LN4@Getfacet

; 377  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

	mov	rax, QWORD PTR _Ptr0$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR _Id$[rsp]
	mov	rax, QWORD PTR [rax+rcx*8]
	jmp	SHORT $LN1@Getfacet
$LN4@Getfacet:

; 378  :         }
; 379  : 
; 380  :         return nullptr; // no entry in current locale

	xor	eax, eax
$LN1@Getfacet:

; 381  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ENDP	; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xlocale
;	COMDAT ??1locale@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
tv84 = 40
this$ = 64
??1locale@std@@QEAA@XZ PROC				; std::locale::~locale, COMDAT

; 345  :     ~locale() noexcept {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 346  :         if (_Ptr) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@locale

; 347  :             delete _Ptr->_Decref();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 0
	je	SHORT $LN4@locale
	mov	rax, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	edx, 1
	mov	rcx, QWORD PTR $T1[rsp]
	call	QWORD PTR [rax]
	mov	QWORD PTR tv84[rsp], rax
	jmp	SHORT $LN2@locale
$LN4@locale:
	mov	QWORD PTR tv84[rsp], 0
$LN2@locale:

; 348  :         }
; 349  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??1locale@std@@QEAA@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\typeinfo
;	COMDAT ?_Throw_bad_cast@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_cast@std@@YAXXZ PROC			; std::_Throw_bad_cast, COMDAT

; 62   : [[noreturn]] inline void _Throw_bad_cast() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 63   :     _THROW(bad_cast{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_cast@std@@QEAA@XZ		; std::bad_cast::bad_cast
	lea	rdx, OFFSET FLAT:_TI2?AVbad_cast@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 64   : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_cast@std@@YAXXZ ENDP			; std::_Throw_bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_cast@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_cast@std@@UEAAPEAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_cast@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_cast@std@@UEAAPEAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_cast@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_cast@std@@QEAA@AEBV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_cast@std@@QEAA@AEBV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_cast@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_cast@std@@UEAA@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_cast@std@@UEAA@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_cast@std@@QEAA@XZ PROC				; std::bad_cast::bad_cast, COMDAT

; 137  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 136  :         : exception("bad cast", 1)

	mov	r8d, 1
	lea	rdx, OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 137  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
	mov	QWORD PTR [rax], rcx

; 138  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_cast@std@@QEAA@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 4668 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 4669 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4670 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 4664 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 4665 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4666 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_Ptr$1 = 32
_Al$2 = 40
$T3 = 48
this$ = 80
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT

; 4630 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 4631 :         _Mypair._Myval2._Orphan_all();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 4632 :         if (_Mypair._Myval2._Large_string_engaged()) {

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Tidy_deall

; 4633 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR _Ptr$1[rsp], rax

; 4634 :             auto& _Al          = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	QWORD PTR _Al$2[rsp], rax

; 4635 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ; std::_Destroy_in_place<char *>

; 4636 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	inc	rax
	mov	r8, rax
	mov	rdx, QWORD PTR _Ptr$1[rsp]
	mov	rcx, QWORD PTR _Al$2[rsp]
	call	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 4637 :         }
; 4638 : 
; 4639 : #if _HAS_CXX20
; 4640 :         if (_STD is_constant_evaluated()) {
; 4641 :             _Mypair._Myval2._Bx._Ptr = nullptr;
; 4642 :             _Mypair._Myval2._Mysize  = 0;
; 4643 :             _Mypair._Myval2._Myres   = 0;
; 4644 :         } else
; 4645 : #endif // _HAS_CXX20
; 4646 :         {
; 4647 :             _Mypair._Myval2._Mysize = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0

; 4648 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+32], 15

; 4649 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4650 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T3[rsp], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
	npad	1

; 4651 :         }
; 4652 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 32
$T1 = 40
this$ = 64
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT

; 4608 :     _CONSTEXPR20 void _Tidy_init() noexcept { // initialize basic_string data members

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 4609 :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 4610 :         _My_data._Mysize = 0;

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	QWORD PTR [rax+24], 0

; 4611 : 
; 4612 : #if _HAS_CXX20
; 4613 :         if (_STD is_constant_evaluated()) {
; 4614 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4615 :             auto& _Al              = _Getal();
; 4616 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4617 :             _My_data._Bx._Ptr      = _New_ptr;
; 4618 : 
; 4619 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4620 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4621 :         } else
; 4622 : #endif // _HAS_CXX20
; 4623 :         {
; 4624 :             _My_data._Myres = _BUF_SIZE - 1;

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	QWORD PTR [rax+32], 15

; 4625 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4626 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T1[rsp], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR _My_data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 4627 :         }
; 4628 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 48
_Requested$ = 56
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4515 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 4516 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	r8, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR _Requested$[rsp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth

; 4517 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
_TEXT	SEGMENT
_Masked$ = 40
$T4 = 56
_Requested$ = 80
_Old$ = 88
_Max$ = 96
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4502 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 4503 :         const size_type _Masked = _Requested | _ALLOC_MASK;

	mov	rax, QWORD PTR _Requested$[rsp]
	or	rax, 15
	mov	QWORD PTR _Masked$[rsp], rax

; 4504 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

	mov	rax, QWORD PTR _Max$[rsp]
	cmp	QWORD PTR _Masked$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 4505 :             return _Max;

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4506 :         }
; 4507 : 
; 4508 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

	xor	edx, edx
	mov	rax, QWORD PTR _Old$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Old$[rsp], rax
	jbe	SHORT $LN3@Calculate_

; 4509 :             return _Max;

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4510 :         }
; 4511 : 
; 4512 :         return (_STD max)(_Masked, _Old + _Old / 2);

	xor	edx, edx
	mov	rax, QWORD PTR _Old$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Old$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR $T4[rsp], rax
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR _Masked$[rsp]
	call	??$max@_K@std@@YAAEB_KAEB_K0@Z		; std::max<unsigned __int64>
	mov	rax, QWORD PTR [rax]
$LN1@Calculate_:

; 4513 :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Alloc_max$ = 40
_Storage_max$ = 56
$T4 = 64
$T5 = 72
$T6 = 80
this$ = 112
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT

; 3933 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 3934 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
	mov	QWORD PTR _Alloc_max$[rsp], rax

; 3935 :         const size_type _Storage_max = // can always store small string

	mov	QWORD PTR $T4[rsp], 16
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR _Alloc_max$[rsp]
	call	??$max@_K@std@@YAAEB_KAEB_K0@Z		; std::max<unsigned __int64>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Storage_max$[rsp], rax

; 3936 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3937 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	rax, QWORD PTR _Storage_max$[rsp]
	dec	rax
	mov	QWORD PTR $T5[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T6[rsp], rax
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 3938 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3939 :         );
; 3940 :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 16
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT

; 3929 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3930 :         return _Mypair._Myval2._Mysize;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+24]

; 3931 :     }

	pop	rdi
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 48
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT

; 3915 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* data() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 3916 :         return _Mypair._Myval2._Myptr();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3917 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 48
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT

; 3911 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* c_str() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 3912 :         return _Mypair._Myval2._Myptr();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3913 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ
_TEXT	SEGMENT
this$ = 64
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front, COMDAT

; 3879 :     _NODISCARD _CONSTEXPR20 reference front() noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@front:

; 3880 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3881 :         _STL_VERIFY(_Mypair._Myval2._Mysize != 0, "front() called on empty string");

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN7@front
	jmp	SHORT $LN9@front
$LN7@front:
	lea	rax, OFFSET FLAT:??_C@_0BP@PFIPNLNI@front?$CI?$CJ?5called?5on?5empty?5string@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 3881				; 00000f29H
	lea	rdx, OFFSET FLAT:??_C@_0GC@MAJKHLEE@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@front
	int	3
	xor	eax, eax
$LN11@front:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 3881				; 00000f29H
	lea	r8, OFFSET FLAT:??_C@_1ME@IKNKMNDN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EC@DINNLDHA@?$AA?$CC?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@front
$LN9@front:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@front

; 3882 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3883 : 
; 3884 :         return _Mypair._Myval2._Myptr()[0];

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, 1
	imul	rcx, rcx, 0
	add	rax, rcx

; 3885 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
_TEXT	SEGMENT
_Old_size$ = 32
_Ptr$1 = 40
$T2 = 48
$T3 = 49
this$ = 80
_Ch$ = 88
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT

; 3851 :     _CONSTEXPR20 void push_back(const _Elem _Ch) { // insert element at end

$LN4:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 3852 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR _Old_size$[rsp], rax

; 3853 :         if (_Old_size < _Mypair._Myval2._Myres) {

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	cmp	QWORD PTR _Old_size$[rsp], rax
	jae	SHORT $LN2@push_back

; 3854 :             _Mypair._Myval2._Mysize = _Old_size + 1;

	mov	rax, QWORD PTR _Old_size$[rsp]
	inc	rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 3855 :             _Elem* const _Ptr       = _Mypair._Myval2._Myptr();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	QWORD PTR _Ptr$1[rsp], rax

; 3856 :             _Traits::assign(_Ptr[_Old_size], _Ch);

	mov	rax, QWORD PTR _Old_size$[rsp]
	mov	rcx, QWORD PTR _Ptr$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	lea	rdx, QWORD PTR _Ch$[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3857 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

	mov	BYTE PTR $T2[rsp], 0
	mov	rax, QWORD PTR _Ptr$1[rsp]
	mov	rcx, QWORD PTR _Old_size$[rsp]
	lea	rax, QWORD PTR [rax+rcx+1]
	lea	rdx, QWORD PTR $T2[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3858 :             return;

	jmp	SHORT $LN1@push_back
$LN2@push_back:

; 3859 :         }
; 3860 : 
; 3861 :         _Reallocate_grow_by(

	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	movzx	r9d, BYTE PTR _Ch$[rsp]
	movzx	r8d, BYTE PTR $T3[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
$LN1@push_back:

; 3862 :             1,
; 3863 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem _Ch) {
; 3864 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3865 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);
; 3866 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());
; 3867 :             },
; 3868 :             _Ch);
; 3869 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
_Count$ = 64
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT

; 3466 :     _CONSTEXPR20 basic_string& erase(const size_type _Off, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 3467 :         // erase elements [_Off, _Off + _Count)
; 3468 :         _Mypair._Myval2._Check_offset(_Off);

	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR _Off$[rsp]
	mov	rcx, rax
	call	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 3469 :         return _Erase_noexcept(_Off, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _Off$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Erase_noexcept

; 3470 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z
_TEXT	SEGMENT
_Old_size$ = 32
_My_ptr$ = 40
_Erase_at$ = 48
_New_size$ = 56
this$ = 80
_Off$ = 88
_Count$ = 96
?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Erase_noexcept, COMDAT

; 3454 :     _CONSTEXPR20 basic_string& _Erase_noexcept(const size_type _Off, size_type _Count) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 3455 :         _Count                    = _Mypair._Myval2._Clamp_suffix_size(_Off, _Count);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _Off$[rsp]
	mov	rcx, rax
	call	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
	mov	QWORD PTR _Count$[rsp], rax

; 3456 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR _Old_size$[rsp], rax

; 3457 :         _Elem* const _My_ptr      = _Mypair._Myval2._Myptr();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	QWORD PTR _My_ptr$[rsp], rax

; 3458 :         _Elem* const _Erase_at    = _My_ptr + _Off;

	mov	rax, QWORD PTR _Off$[rsp]
	mov	rcx, QWORD PTR _My_ptr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Erase_at$[rsp], rax

; 3459 :         const size_type _New_size = _Old_size - _Count;

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Old_size$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _New_size$[rsp], rax

; 3460 :         _Mypair._Myval2._Mysize   = _New_size;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_size$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 3461 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

	mov	rax, QWORD PTR _Off$[rsp]
	mov	rcx, QWORD PTR _New_size$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	inc	rax
	mov	rcx, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _Erase_at$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR _Erase_at$[rsp]
	call	?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::move

; 3462 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 3463 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Erase_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3257 :     _CONSTEXPR20 basic_string& assign(_In_z_ const _Elem* const _Ptr) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 3258 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
	mov	rcx, rax
	call	??$_Convert_size@_K@std@@YA_K_K@Z	; std::_Convert_size<unsigned __int64>
	mov	r8, rax
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3259 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
_TEXT	SEGMENT
_Old_ptr$1 = 32
$T2 = 40
$T3 = 41
this$ = 64
_Ptr$ = 72
_Count$ = 80
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3238 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 3239 :         // assign [_Ptr, _Ptr + _Count)
; 3240 :         if (_Count <= _Mypair._Myval2._Myres) {

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	cmp	QWORD PTR _Count$[rsp], rax
	ja	SHORT $LN2@assign

; 3241 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	QWORD PTR _Old_ptr$1[rsp], rax

; 3242 :             _Mypair._Myval2._Mysize = _Count;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 3243 :             _Traits::move(_Old_ptr, _Ptr, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Old_ptr$1[rsp]
	call	?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::move

; 3244 :             _Traits::assign(_Old_ptr[_Count], _Elem());

	mov	BYTE PTR $T2[rsp], 0
	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Old_ptr$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	lea	rdx, QWORD PTR $T2[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3245 :             return *this;

	mov	rax, QWORD PTR this$[rsp]
	jmp	SHORT $LN1@assign
$LN2@assign:

; 3246 :         }
; 3247 : 
; 3248 :         return _Reallocate_for(

	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	mov	r9, QWORD PTR _Ptr$[rsp]
	movzx	r8d, BYTE PTR $T3[rsp]
	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
$LN1@assign:

; 3249 :             _Count,
; 3250 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3251 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3252 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3253 :             },
; 3254 :             _Ptr);
; 3255 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S8$ = 52
_To_delete$ = 72
this$ = 96
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2999 :     _CONSTEXPR20 ~basic_string() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 3000 :         _Tidy_deallocate();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 3001 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3002 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S8$[rsp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	rax, QWORD PTR $S8$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 3003 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _To_delete$[rsp], rax

; 3004 :         _Mypair._Myval2._Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 3005 :         _Delete_plain_internal(_Alproxy, _To_delete);

	mov	rdx, QWORD PTR _To_delete$[rsp]
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 3006 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3007 :     }

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
_Alproxy$ = 32
$S10$ = 52
_Proxy$ = 88
$T5 = 116
this$ = 144
_Ptr$ = 152
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2532 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T5[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
	npad	1

; 2533 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S10$[rsp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	rax, QWORD PTR $S10$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 2534 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR _Alproxy$[rsp]
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1

; 2535 :         _Tidy_init();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2536 :         assign(_Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2537 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 2538 :     }

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1
	mov	rax, QWORD PTR this$[rsp]
	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S10$ = 52
_Proxy$ = 88
$T5 = 116
this$ = 144
_Ptr$ = 152
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR this$[rbp]
	call	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S10$ = 52
_Proxy$ = 88
$T5 = 116
this$ = 144
_Ptr$ = 152
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Proxy$[rbp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2484 :         : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>

; 2485 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2486 :         _Tidy_init();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2487 :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT

; 2366 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	pop	rdi
	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT

; 2364 :         _CONSTEXPR20 _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Off$ = 72
_Size$ = 80
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size, COMDAT

; 2358 :     _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 2359 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2360 :         return (_STD min)(_Size, _Mysize - _Off);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Off$[rsp]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR _Size$[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 2361 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2354 :     [[noreturn]] static void _Xran() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 2355 :         _Xout_of_range("invalid string position");

	lea	rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position@
	call	?_Xout_of_range@std@@YAXPEBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2356 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT

; 2340 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2341 :         // checks whether _Off is in the bounds of [0, size()]
; 2342 :         if (_Mysize < _Off) {

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Off$[rsp]
	cmp	QWORD PTR [rax+24], rcx
	jae	SHORT $LN2@Check_offs

; 2343 :             _Xran();

	call	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN2@Check_offs:
$LN3@Check_offs:

; 2344 :         }
; 2345 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 0
this$ = 32
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT

; 2331 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 2332 : #if _HAS_CXX20
; 2333 :         if (_STD is_constant_evaluated()) {
; 2334 :             return true;
; 2335 :         }
; 2336 : #endif // _HAS_CXX20
; 2337 :         return _BUF_SIZE <= _Myres;

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+32], 16
	jb	SHORT $LN3@Large_stri
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@Large_stri
$LN3@Large_stri:
	mov	DWORD PTR tv66[rsp], 0
$LN4@Large_stri:
	movzx	eax, BYTE PTR tv66[rsp]

; 2338 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2322 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 2323 :         const value_type* _Result = _Bx._Buf;

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	QWORD PTR _Result$[rsp], rax

; 2324 :         if (_Large_string_engaged()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Myptr

; 2325 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@D@std@@YAPEADPEAD@Z		; std::_Unfancy<char>
	mov	QWORD PTR _Result$[rsp], rax
$LN2@Myptr:

; 2326 :         }
; 2327 : 
; 2328 :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 2329 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2313 :     _CONSTEXPR20 value_type* _Myptr() noexcept {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 2314 :         value_type* _Result = _Bx._Buf;

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	QWORD PTR _Result$[rsp], rax

; 2315 :         if (_Large_string_engaged()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Myptr

; 2316 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@D@std@@YAPEADPEAD@Z		; std::_Unfancy<char>
	mov	QWORD PTR _Result$[rsp], rax
$LN2@Myptr:

; 2317 :         }
; 2318 : 
; 2319 :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 2320 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT

; 2302 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 2303 : 
; 2304 :     // length of internal buffer, [1, 16]:
; 2305 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2306 :     // roundup mask for allocated buffers, [0, 15]:
; 2307 :     static constexpr size_type _ALLOC_MASK = sizeof(value_type) <= 1 ? 15
; 2308 :                                            : sizeof(value_type) <= 2 ? 7
; 2309 :                                            : sizeof(value_type) <= 4 ? 3
; 2310 :                                            : sizeof(value_type) <= 8 ? 1
; 2311 :                                                                      : 0;
; 2312 : 
; 2313 :     _CONSTEXPR20 value_type* _Myptr() noexcept {
; 2314 :         value_type* _Result = _Bx._Buf;
; 2315 :         if (_Large_string_engaged()) {
; 2316 :             _Result = _Unfancy(_Bx._Ptr);
; 2317 :         }
; 2318 : 
; 2319 :         return _Result;
; 2320 :     }
; 2321 : 
; 2322 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 2323 :         const value_type* _Result = _Bx._Buf;
; 2324 :         if (_Large_string_engaged()) {
; 2325 :             _Result = _Unfancy(_Bx._Ptr);
; 2326 :         }
; 2327 : 
; 2328 :         return _Result;
; 2329 :     }
; 2330 : 
; 2331 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {
; 2332 : #if _HAS_CXX20
; 2333 :         if (_STD is_constant_evaluated()) {
; 2334 :             return true;
; 2335 :         }
; 2336 : #endif // _HAS_CXX20
; 2337 :         return _BUF_SIZE <= _Myres;
; 2338 :     }
; 2339 : 
; 2340 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 2341 :         // checks whether _Off is in the bounds of [0, size()]
; 2342 :         if (_Mysize < _Off) {
; 2343 :             _Xran();
; 2344 :         }
; 2345 :     }
; 2346 : 
; 2347 :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 2348 :         // checks whether _Off is in the bounds of [0, size())
; 2349 :         if (_Mysize <= _Off) {
; 2350 :             _Xran();
; 2351 :         }
; 2352 :     }
; 2353 : 
; 2354 :     [[noreturn]] static void _Xran() {
; 2355 :         _Xout_of_range("invalid string position");
; 2356 :     }
; 2357 : 
; 2358 :     _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2359 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2360 :         return (_STD min)(_Size, _Mysize - _Off);
; 2361 :     }
; 2362 : 
; 2363 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2364 :         _CONSTEXPR20 _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers
; 2365 : 
; 2366 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2367 : 
; 2368 :         value_type _Buf[_BUF_SIZE];
; 2369 :         pointer _Ptr;
; 2370 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2371 :     } _Bx;
; 2372 : 
; 2373 :     size_type _Mysize = 0; // current length of string

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0

; 2374 :     size_type _Myres  = 0; // current storage reserved for string

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+32], 0

; 2302 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, -1

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z PROC		; std::allocator<char>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$00@std@@YA_K_K@Z	; std::_Get_size_of_n<1>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2390 : [[noreturn]] inline void _Xlen_string() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 2391 :     _Xlength_error("string too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlen_strin:

; 2392 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 471  :     _NODISCARD static constexpr int_type eof() noexcept {

$LN3:
	push	rdi

; 472  :         return static_cast<int_type>(EOF);

	mov	eax, -1

; 473  :     }

	pop	rdi
	ret	0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z
_TEXT	SEGMENT
tv69 = 32
tv68 = 36
_Meta$ = 64
?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z PROC	; std::_Narrow_char_traits<char,int>::not_eof, COMDAT

; 467  :     _NODISCARD static constexpr int_type not_eof(const int_type& _Meta) noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 468  :         return _Meta != eof() ? _Meta : !eof();

	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	mov	rcx, QWORD PTR _Meta$[rsp]
	cmp	DWORD PTR [rcx], eax
	je	SHORT $LN5@not_eof
	mov	rax, QWORD PTR _Meta$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN6@not_eof
$LN5@not_eof:
	call	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
	test	eax, eax
	jne	SHORT $LN3@not_eof
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@not_eof
$LN3@not_eof:
	mov	DWORD PTR tv68[rsp], 0
$LN4@not_eof:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR tv69[rsp], eax
$LN6@not_eof:
	mov	eax, DWORD PTR tv69[rsp]

; 469  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z ENDP	; std::_Narrow_char_traits<char,int>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
_Left$ = 32
_Right$ = 40
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 463  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 464  :         return _Left == _Right;

	mov	rax, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR _Right$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@eq_int_typ
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
	mov	DWORD PTR tv65[rsp], 0
$LN4@eq_int_typ:
	movzx	eax, BYTE PTR tv65[rsp]

; 465  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z
_TEXT	SEGMENT
_Ch$ = 16
?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z PROC ; std::_Narrow_char_traits<char,int>::to_int_type, COMDAT

; 459  :     _NODISCARD static constexpr int_type to_int_type(const _Elem& _Ch) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 460  :         return static_cast<unsigned char>(_Ch);

	mov	rax, QWORD PTR _Ch$[rsp]
	movzx	eax, BYTE PTR [rax]

; 461  :     }

	pop	rdi
	ret	0
?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ENDP ; std::_Narrow_char_traits<char,int>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z
_TEXT	SEGMENT
_Meta$ = 16
?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z PROC ; std::_Narrow_char_traits<char,int>::to_char_type, COMDAT

; 455  :     _NODISCARD static constexpr _Elem to_char_type(const int_type& _Meta) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 456  :         return static_cast<_Elem>(_Meta);

	mov	rax, QWORD PTR _Meta$[rsp]
	movzx	eax, BYTE PTR [rax]

; 457  :     }

	pop	rdi
	ret	0
?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ENDP ; std::_Narrow_char_traits<char,int>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
_Left$ = 16
_Right$ = 24
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z PROC ; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 438  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 439  : #if _HAS_CXX20
; 440  :         if (_STD is_constant_evaluated()) {
; 441  :             return _Primary_char_traits::assign(_Left, _Right);
; 442  :         }
; 443  : #endif // _HAS_CXX20
; 444  :         _Left = _Right;

	mov	rax, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR _Right$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 445  :     }

	pop	rdi
	ret	0
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ENDP ; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 48
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 385  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 386  :         // find length of null-terminated string
; 387  : #if _HAS_CXX17
; 388  : #ifdef __cpp_char8_t
; 389  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 390  : #if _HAS_U8_INTRINSICS
; 391  :             return __builtin_u8strlen(_First);
; 392  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 393  :             return _Primary_char_traits::length(_First);
; 394  : #endif // _HAS_U8_INTRINSICS
; 395  :         } else
; 396  : #endif // __cpp_char8_t
; 397  :         {
; 398  :             return __builtin_strlen(_First);
; 399  :         }
; 400  : #else // _HAS_CXX17
; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

	mov	rcx, QWORD PTR _First$[rsp]
	call	strlen

; 402  : #endif // _HAS_CXX17
; 403  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 48
_First2$ = 56
_Count$ = 64
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 79   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 80   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 81   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 82   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 83   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 84   : #if _HAS_CXX20
; 85   :         if (_STD is_constant_evaluated()) {
; 86   :             // dest: [_First1, _First1 + _Count)
; 87   :             // src: [_First2, _First2 + _Count)
; 88   :             // We need to handle overlapping ranges.
; 89   :             // If _First1 is in the src range, we need a backward loop.
; 90   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 91   : 
; 92   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 93   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 94   :             bool _Loop_forward = true;
; 95   : 
; 96   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 97   :                 if (_First1 == _Src) {
; 98   :                     _Loop_forward = false;
; 99   :                     break;
; 100  :                 }
; 101  :             }
; 102  : 
; 103  :             if (_Loop_forward) {
; 104  :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 105  :                     _First1[_Idx] = _First2[_Idx];
; 106  :                 }
; 107  :             } else {
; 108  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 109  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 110  :                 }
; 111  :             }
; 112  : 
; 113  :             return _First1;
; 114  :         }
; 115  : #endif // _HAS_CXX20
; 116  : 
; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First2$[rsp]
	mov	rcx, QWORD PTR _First1$[rsp]
	call	memmove

; 118  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 119  : 
; 120  :         return _First1;

	mov	rax, QWORD PTR _First1$[rsp]

; 121  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 48
_First2$ = 56
_Count$ = 64
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap; see LWG-3085
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First2$[rsp]
	mov	rcx, QWORD PTR _First1$[rsp]
	call	memcpy

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

	mov	rax, QWORD PTR _First1$[rsp]

; 68   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\size.inl
;	COMDAT ?size@gli@@YAIAEBVtexture2D@1@AEBI@Z
_TEXT	SEGMENT
Size$ = 32
Level$4 = 56
Texture$ = 96
SizeType$ = 104
?size@gli@@YAIAEBVtexture2D@1@AEBI@Z PROC		; gli::size, COMDAT

; 39   : 	{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 40   : 		texture2D::size_type Size = 0;

	mov	DWORD PTR Size$[rsp], 0

; 41   : 		for(texture2D::level_type Level = 0; Level < Texture.levels(); ++Level)

	mov	QWORD PTR Level$4[rsp], 0
	jmp	SHORT $LN4@size
$LN2@size:
	mov	rax, QWORD PTR Level$4[rsp]
	inc	rax
	mov	QWORD PTR Level$4[rsp], rax
$LN4@size:
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?levels@texture2D@gli@@QEBA_KXZ		; gli::texture2D::levels
	cmp	QWORD PTR Level$4[rsp], rax
	jae	SHORT $LN3@size

; 42   : 			Size += size(Texture[Level], SizeType);

	lea	rdx, QWORD PTR Level$4[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z ; gli::texture2D::operator[]
	mov	rdx, QWORD PTR SizeType$[rsp]
	mov	rcx, rax
	call	?size@gli@@YAIAEBVimage2D@1@AEBI@Z	; gli::size
	mov	ecx, DWORD PTR Size$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Size$[rsp], eax
	jmp	SHORT $LN2@size
$LN3@size:

; 43   : 
; 44   : 		return Size;

	mov	eax, DWORD PTR Size$[rsp]

; 45   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?size@gli@@YAIAEBVtexture2D@1@AEBI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?size@gli@@YAIAEBVtexture2D@1@AEBI@Z ENDP		; gli::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\size.inl
;	COMDAT ?size@gli@@YAIAEBVimage2D@1@AEBI@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
tv64 = 44
Image$ = 64
SizeType$ = 72
?size@gli@@YAIAEBVimage2D@1@AEBI@Z PROC			; gli::size, COMDAT

; 17   : 	{

$LN11:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 		switch(SizeType)

	mov	rax, QWORD PTR SizeType$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 0
	je	SHORT $LN4@size
	cmp	DWORD PTR tv64[rsp], 1
	je	SHORT $LN5@size
	cmp	DWORD PTR tv64[rsp], 2
	je	SHORT $LN6@size
	cmp	DWORD PTR tv64[rsp], 3
	je	SHORT $LN7@size
	jmp	SHORT $LN8@size
$LN4@size:

; 19   : 		{
; 20   : 		case LINEAR_SIZE:
; 21   : 			return detail::sizeLinear(Image);

	mov	rcx, QWORD PTR Image$[rsp]
	call	?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z ; gli::detail::sizeLinear
	jmp	SHORT $LN1@size
$LN5@size:

; 22   : 		case BLOCK_SIZE:
; 23   : 			return detail::sizeBlock(Image.format());

	mov	rcx, QWORD PTR Image$[rsp]
	call	?format@image2D@gli@@QEBA?AW402@XZ	; gli::image2D::format
	mov	DWORD PTR $T1[rsp], eax
	lea	rcx, QWORD PTR $T1[rsp]
	call	?sizeBlock@detail@gli@@YAIAEBW4format@2@@Z ; gli::detail::sizeBlock
	jmp	SHORT $LN1@size
$LN6@size:

; 24   : 		case BIT_PER_PIXEL:
; 25   : 			return detail::sizeBitPerPixel(Image.format());

	mov	rcx, QWORD PTR Image$[rsp]
	call	?format@image2D@gli@@QEBA?AW402@XZ	; gli::image2D::format
	mov	DWORD PTR $T2[rsp], eax
	lea	rcx, QWORD PTR $T2[rsp]
	call	?sizeBitPerPixel@detail@gli@@YAIAEBW4format@2@@Z ; gli::detail::sizeBitPerPixel
	jmp	SHORT $LN1@size
$LN7@size:

; 26   : 		case COMPONENT:
; 27   : 			return detail::sizeComponent(Image.format());

	mov	rcx, QWORD PTR Image$[rsp]
	call	?format@image2D@gli@@QEBA?AW402@XZ	; gli::image2D::format
	mov	DWORD PTR $T3[rsp], eax
	lea	rcx, QWORD PTR $T3[rsp]
	call	?sizeComponent@detail@gli@@YAIAEBW4format@2@@Z ; gli::detail::sizeComponent
	jmp	SHORT $LN1@size
$LN8@size:

; 28   : 		default:
; 29   : 			assert(0);

	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@size
	mov	r8d, 29
	lea	rdx, OFFSET FLAT:??_C@_1ME@ILJMNGPA@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@size:

; 30   : 			return 0;

	xor	eax, eax
$LN1@size:

; 31   : 		};
; 32   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?size@gli@@YAIAEBVimage2D@1@AEBI@Z ENDP			; gli::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<gli::image2D> >::_Vector_val<std::_Simple_types<gli::image2D> >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<gli::image2D> >::_Vector_val<std::_Simple_types<gli::image2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z@4HA PROC ; `std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z@4HA ENDP ; `std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAXPEAVimage2D@gli@@0@Z ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@CAXXZ PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@CAXXZ ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z ; std::_Destroy_range<std::allocator<gli::image2D> >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	cdq
	mov	ecx, 48					; 00000030H
	idiv	rcx
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@Vimage2D@gli@@@std@@QEAAXQEAVimage2D@gli@@_K@Z ; std::allocator<gli::image2D>::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXQEAVimage2D@gli@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXQEAVimage2D@gli@@_K1@Z PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@Vimage2D@gli@@@std@@@std@@YAXPEAVimage2D@gli@@QEAV12@AEAV?$allocator@Vimage2D@gli@@@0@@Z ; std::_Destroy_range<std::allocator<gli::image2D> >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	cdq
	mov	ecx, 48					; 00000030H
	idiv	rcx
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@Vimage2D@gli@@@std@@QEAAXQEAVimage2D@gli@@_K@Z ; std::allocator<gli::image2D>::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 48	; 00000030H
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 48	; 00000030H
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXQEAVimage2D@gli@@_K1@Z ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBAAEBVimage2D@gli@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBAAEBVimage2D@gli@@_K@Z PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::operator[], COMDAT

; 1738 :     _NODISCARD _CONSTEXPR20 const _Ty& operator[](const size_type _Pos) const noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1739 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1740 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1741 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	cdq
	mov	ecx, 48					; 00000030H
	idiv	rcx
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1742				; 000006ceH
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1742				; 000006ceH
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1742 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1743 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1744 : 
; 1745 :         return _My_data._Myfirst[_Pos];

	imul	rax, QWORD PTR _Pos$[rsp], 48		; 00000030H
	mov	rcx, QWORD PTR _My_data$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 1746 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBAAEBVimage2D@gli@@_K@Z ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAAEAVimage2D@gli@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAAEAVimage2D@gli@@_K@Z PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	cdq
	mov	ecx, 48					; 00000030H
	idiv	rcx
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	imul	rax, QWORD PTR _Pos$[rsp], 48		; 00000030H
	mov	rcx, QWORD PTR _My_data$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAAEAVimage2D@gli@@_K@Z ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	cdq
	mov	ecx, 48					; 00000030H
	idiv	rcx

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEBAAEBV?$allocator@Vimage2D@gli@@@2@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SA_KAEBV?$allocator@Vimage2D@gli@@@2@@Z ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	cdq
	mov	ecx, 48					; 00000030H
	idiv	rcx

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?empty@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
_My_data$ = 0
tv69 = 8
this$ = 32
?empty@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_NXZ PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::empty, COMDAT

; 1708 :     _NODISCARD _CONSTEXPR20 bool empty() const noexcept {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1709 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1710 :         return _My_data._Myfirst == _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv69[rsp], 0
$LN4@empty:
	movzx	eax, BYTE PTR tv69[rsp]

; 1711 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?empty@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_NXZ ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?resize@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Newsize$ = 72
?resize@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAX_K@Z PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::resize, COMDAT

; 1436 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1437 :         // trim or append value-initialized elements, provide strong guarantee
; 1438 :         _Resize(_Newsize, _Value_init_tag{});

	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Resize<std::_Value_init_tag>

; 1439 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?resize@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAX_K@Z ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S15$ = 52
$T4 = 68
this$ = 96
??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::~vector<gli::image2D,std::allocator<gli::image2D> >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAXXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S15$[rsp]
	call	??$?0Vimage2D@gli@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@Vimage2D@gli@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><gli::image2D>
	lea	rax, QWORD PTR $S15$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::~vector<gli::image2D,std::allocator<gli::image2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ PROC ; std::vector<gli::image2D,std::allocator<gli::image2D> >::vector<gli::image2D,std::allocator<gli::image2D> >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@Vimage2D@gli@@@std@@V?$_Vector_val@U?$_Simple_types@Vimage2D@gli@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1>::_Compressed_pair<std::allocator<gli::image2D>,std::_Vector_val<std::_Simple_types<gli::image2D> >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@AEAAAEAV?$allocator@Vimage2D@gli@@@2@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0Vimage2D@gli@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@Vimage2D@gli@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><gli::image2D>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ENDP ; std::vector<gli::image2D,std::allocator<gli::image2D> >::vector<gli::image2D,std::allocator<gli::image2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SA_KAEBV?$allocator@Vimage2D@gli@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SA_KAEBV?$allocator@Vimage2D@gli@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 384307168202282325			; 0555555555555555H

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@Vimage2D@gli@@@std@@@std@@SA_KAEBV?$allocator@Vimage2D@gli@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<gli::image2D> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@Vimage2D@gli@@@std@@QEAAPEAVimage2D@gli@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@Vimage2D@gli@@@std@@QEAAPEAVimage2D@gli@@_K@Z PROC ; std::allocator<gli::image2D>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z	; std::_Get_size_of_n<48>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@Vimage2D@gli@@@std@@QEAAPEAVimage2D@gli@@_K@Z ENDP ; std::allocator<gli::image2D>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@Vimage2D@gli@@@std@@QEAAXQEAVimage2D@gli@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@Vimage2D@gli@@@std@@QEAAXQEAVimage2D@gli@@_K@Z PROC ; std::allocator<gli::image2D>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 48		; 00000030H
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@Vimage2D@gli@@@std@@QEAAXQEAVimage2D@gli@@_K@Z ENDP ; std::allocator<gli::image2D>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@Vimage2D@gli@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@Vimage2D@gli@@@std@@QEAA@XZ PROC		; std::allocator<gli::image2D>::allocator<gli::image2D>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@Vimage2D@gli@@@std@@QEAA@XZ ENDP		; std::allocator<gli::image2D>::allocator<gli::image2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\texture2d.inl
;	COMDAT ?levels@texture2D@gli@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 48
?levels@texture2D@gli@@QEBA_KXZ PROC			; gli::texture2D::levels, COMDAT

; 76   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 77   : 		return this->Images.size();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?size@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_KXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::size

; 78   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?levels@texture2D@gli@@QEBA_KXZ ENDP			; gli::texture2D::levels
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\texture2d.inl
;	COMDAT ?format@texture2D@gli@@QEBA?AW402@XZ
_TEXT	SEGMENT
tv75 = 32
this$ = 64
?format@texture2D@gli@@QEBA?AW402@XZ PROC		; gli::texture2D::format, COMDAT

; 71   : 	{

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 72   : 		return this->Images.empty() ? FORMAT_NULL : this->Images[0].format();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?empty@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBA_NXZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@format
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN4@format
$LN3@format:
	mov	rax, QWORD PTR this$[rsp]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBAAEBVimage2D@gli@@_K@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::operator[]
	mov	rcx, rax
	call	?format@image2D@gli@@QEBA?AW402@XZ	; gli::image2D::format
	mov	DWORD PTR tv75[rsp], eax
$LN4@format:
	mov	eax, DWORD PTR tv75[rsp]

; 73   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?format@texture2D@gli@@QEBA?AW402@XZ ENDP		; gli::texture2D::format
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\texture2d.inl
;	COMDAT ??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z
_TEXT	SEGMENT
this$ = 48
Level$ = 56
??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z PROC	; gli::texture2D::operator[], COMDAT

; 61   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 62   : 		return this->Images[Level];

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR Level$[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, rax
	call	??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEBAAEBVimage2D@gli@@_K@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::operator[]

; 63   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??Atexture2D@gli@@QEBAAEBVimage2D@1@AEB_K@Z ENDP	; gli::texture2D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\texture2d.inl
;	COMDAT ??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z
_TEXT	SEGMENT
this$ = 48
Level$ = 56
??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z PROC	; gli::texture2D::operator[], COMDAT

; 56   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 57   : 		return this->Images[Level];

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR Level$[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, rax
	call	??A?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAAEAVimage2D@gli@@_K@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::operator[]

; 58   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??Atexture2D@gli@@QEAAAEAVimage2D@1@AEB_K@Z ENDP	; gli::texture2D::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\texture2d.inl
;	COMDAT ??1texture2D@gli@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1texture2D@gli@@QEAA@XZ PROC				; gli::texture2D::~texture2D, COMDAT

; 53   : 	{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::~vector<gli::image2D,std::allocator<gli::image2D> >
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1texture2D@gli@@QEAA@XZ ENDP				; gli::texture2D::~texture2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\texture2d.inl
;	COMDAT ??0texture2D@gli@@QEAA@AEB_K@Z
_TEXT	SEGMENT
this$ = 48
Levels$ = 56
??0texture2D@gli@@QEAA@AEB_K@Z PROC			; gli::texture2D::texture2D, COMDAT

; 33   : 	{

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::vector<gli::image2D,std::allocator<gli::image2D> >
	npad	1

; 34   : 		this->Images.resize(Levels);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR Levels$[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, rax
	call	?resize@?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAAX_K@Z ; std::vector<gli::image2D,std::allocator<gli::image2D> >::resize
	npad	1

; 35   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0texture2D@gli@@QEAA@AEB_K@Z ENDP			; gli::texture2D::texture2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
Levels$ = 56
?dtor$0@?0???0texture2D@gli@@QEAA@AEB_K@Z@4HA PROC	; `gli::texture2D::texture2D'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR this$[rbp]
	call	??1?$vector@Vimage2D@gli@@V?$allocator@Vimage2D@gli@@@std@@@std@@QEAA@XZ ; std::vector<gli::image2D,std::allocator<gli::image2D> >::~vector<gli::image2D,std::allocator<gli::image2D> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0texture2D@gli@@QEAA@AEB_K@Z@4HA ENDP	; `gli::texture2D::texture2D'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ??$compMul@I$0A@Utvec2@glm@@@glm@@YAIAEBU?$tvec2@I$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
n$2 = 40
v$ = 64
??$compMul@I$0A@Utvec2@glm@@@glm@@YAIAEBU?$tvec2@I$0A@@0@@Z PROC ; glm::compMul<unsigned int,0,glm::tvec2>, COMDAT

; 104  : 	{

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 105  : 		T Result(1);

	mov	DWORD PTR Result$[rsp], 1

; 106  : 		for(length_t i = 0, n = v.length(); i < n; ++i)

	mov	DWORD PTR i$1[rsp], 0
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	DWORD PTR n$2[rsp], eax
	jmp	SHORT $LN4@compMul
$LN2@compMul:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@compMul:
	mov	eax, DWORD PTR n$2[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@compMul

; 107  : 			Result *= v[i];

	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	ecx, DWORD PTR Result$[rsp]
	imul	ecx, DWORD PTR [rax]
	mov	eax, ecx
	mov	DWORD PTR Result$[rsp], eax
	jmp	SHORT $LN2@compMul
$LN3@compMul:

; 108  : 		return Result;

	mov	eax, DWORD PTR Result$[rsp]

; 109  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$compMul@I$0A@Utvec2@glm@@@glm@@YAIAEBU?$tvec2@I$0A@@0@@Z ENDP ; glm::compMul<unsigned int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z PROC ; glm::max<unsigned int,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<unsigned int,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ENDP ; glm::max<unsigned int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z
_TEXT	SEGMENT
Dimension$ = 40
BlockSize$ = 52
BPP$ = 56
BlockCount$ = 60
$T4 = 64
$T5 = 72
$T6 = 80
$T7 = 84
Image$ = 112
?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z PROC	; gli::detail::sizeLinear, COMDAT

; 129  : 		{

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 130  : 			image2D::dimensions_type Dimension = Image.dimensions();

	lea	rdx, QWORD PTR Dimension$[rsp]
	mov	rcx, QWORD PTR Image$[rsp]
	call	?dimensions@image2D@gli@@QEBA?AU?$tvec2@I$0A@@glm@@XZ ; gli::image2D::dimensions

; 131  : 			Dimension = glm::max(Dimension, image2D::dimensions_type(1));

	mov	edx, 1
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Dimension$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::max<unsigned int,0,glm::tvec2>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR Dimension$[rsp], rax

; 132  : 
; 133  : 			image2D::size_type BlockSize = sizeBlock(Image.format());

	mov	rcx, QWORD PTR Image$[rsp]
	call	?format@image2D@gli@@QEBA?AW402@XZ	; gli::image2D::format
	mov	DWORD PTR $T6[rsp], eax
	lea	rcx, QWORD PTR $T6[rsp]
	call	?sizeBlock@detail@gli@@YAIAEBW4format@2@@Z ; gli::detail::sizeBlock
	mov	DWORD PTR BlockSize$[rsp], eax

; 134  : 			image2D::size_type BPP = sizeBitPerPixel(Image.format());

	mov	rcx, QWORD PTR Image$[rsp]
	call	?format@image2D@gli@@QEBA?AW402@XZ	; gli::image2D::format
	mov	DWORD PTR $T7[rsp], eax
	lea	rcx, QWORD PTR $T7[rsp]
	call	?sizeBitPerPixel@detail@gli@@YAIAEBW4format@2@@Z ; gli::detail::sizeBitPerPixel
	mov	DWORD PTR BPP$[rsp], eax

; 135  : 			image2D::size_type BlockCount = 0;

	mov	DWORD PTR BlockCount$[rsp], 0

; 136  : 			if((BlockSize << 3) == BPP)

	mov	eax, DWORD PTR BlockSize$[rsp]
	shl	eax, 3
	cmp	eax, DWORD PTR BPP$[rsp]
	jne	SHORT $LN2@sizeLinear

; 137  : 				BlockCount = Dimension.x * Dimension.y;

	mov	eax, DWORD PTR Dimension$[rsp]
	imul	eax, DWORD PTR Dimension$[rsp+4]
	mov	DWORD PTR BlockCount$[rsp], eax
	jmp	SHORT $LN3@sizeLinear
$LN2@sizeLinear:

; 138  : 			else
; 139  : 				BlockCount = ((Dimension.x + 3) >> 2) * ((Dimension.y + 3) >> 2);			

	mov	eax, DWORD PTR Dimension$[rsp]
	add	eax, 3
	shr	eax, 2
	mov	ecx, DWORD PTR Dimension$[rsp+4]
	add	ecx, 3
	shr	ecx, 2
	imul	eax, ecx
	mov	DWORD PTR BlockCount$[rsp], eax
$LN3@sizeLinear:

; 140  : 
; 141  : 			return BlockCount * BlockSize;

	mov	eax, DWORD PTR BlockCount$[rsp]
	imul	eax, DWORD PTR BlockSize$[rsp]

; 142  : 		}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?sizeLinear@detail@gli@@YAIAEBVimage2D@2@@Z ENDP	; gli::detail::sizeLinear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ?sizeComponent@detail@gli@@YAIAEBW4format@2@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
__$ArrayPad$ = 72
Format$ = 112
?sizeComponent@detail@gli@@YAIAEBW4format@2@@Z PROC	; gli::detail::sizeComponent, COMDAT

; 121  : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 122  : 			return getFormatInfo(Format).Component;

	mov	rdx, QWORD PTR Format$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z ; gli::detail::getFormatInfo
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	eax, DWORD PTR $T1[rsp+8]

; 123  : 		}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?sizeComponent@detail@gli@@YAIAEBW4format@2@@Z ENDP	; gli::detail::sizeComponent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ?sizeBitPerPixel@detail@gli@@YAIAEBW4format@2@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
__$ArrayPad$ = 72
Format$ = 112
?sizeBitPerPixel@detail@gli@@YAIAEBW4format@2@@Z PROC	; gli::detail::sizeBitPerPixel, COMDAT

; 113  : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 114  : 			return getFormatInfo(Format).BBP;

	mov	rdx, QWORD PTR Format$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z ; gli::detail::getFormatInfo
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	eax, DWORD PTR $T1[rsp+4]

; 115  : 		}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?sizeBitPerPixel@detail@gli@@YAIAEBW4format@2@@Z ENDP	; gli::detail::sizeBitPerPixel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ?sizeBlock@detail@gli@@YAIAEBW4format@2@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
__$ArrayPad$ = 72
Format$ = 112
?sizeBlock@detail@gli@@YAIAEBW4format@2@@Z PROC		; gli::detail::sizeBlock, COMDAT

; 105  : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 106  : 			return getFormatInfo(Format).BlockSize;

	mov	rdx, QWORD PTR Format$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z ; gli::detail::getFormatInfo
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	eax, DWORD PTR $T1[rsp]

; 107  : 		}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?sizeBlock@detail@gli@@YAIAEBW4format@2@@Z ENDP		; gli::detail::sizeBlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z
_TEXT	SEGMENT
Desc$ = 48
__$ArrayPad$ = 720
__$ReturnAddress$ = 768
Format$ = 776
?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z PROC ; gli::detail::getFormatInfo, COMDAT

; 22   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 744				; 000002e8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 178				; 000000b2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+768]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 23   : 			format_desc Desc[FORMAT_MAX] =
; 24   : 			{
; 25   : 				{  0,  0,  0},	//FORMAT_NULL

	mov	DWORD PTR Desc$[rsp], 0
	mov	DWORD PTR Desc$[rsp+4], 0
	mov	DWORD PTR Desc$[rsp+8], 0

; 26   : 
; 27   : 				// Unsigned integer formats
; 28   : 				{  1,   8,  1},	//R8U,

	mov	DWORD PTR Desc$[rsp+12], 1
	mov	DWORD PTR Desc$[rsp+16], 8
	mov	DWORD PTR Desc$[rsp+20], 1

; 29   : 				{  2,  16,  2},	//RG8U,

	mov	DWORD PTR Desc$[rsp+24], 2
	mov	DWORD PTR Desc$[rsp+28], 16
	mov	DWORD PTR Desc$[rsp+32], 2

; 30   : 				{  3,  24,  3},	//RGB8U,

	mov	DWORD PTR Desc$[rsp+36], 3
	mov	DWORD PTR Desc$[rsp+40], 24
	mov	DWORD PTR Desc$[rsp+44], 3

; 31   : 				{  4,  32,  4},	//RGBA8U,

	mov	DWORD PTR Desc$[rsp+48], 4
	mov	DWORD PTR Desc$[rsp+52], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+56], 4

; 32   : 
; 33   : 				{  2,  16,  1},	//R16U,

	mov	DWORD PTR Desc$[rsp+60], 2
	mov	DWORD PTR Desc$[rsp+64], 16
	mov	DWORD PTR Desc$[rsp+68], 1

; 34   : 				{  4,  32,  2},	//RG16U,

	mov	DWORD PTR Desc$[rsp+72], 4
	mov	DWORD PTR Desc$[rsp+76], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+80], 2

; 35   : 				{  6,  48,  3},	//RGB16U,

	mov	DWORD PTR Desc$[rsp+84], 6
	mov	DWORD PTR Desc$[rsp+88], 48		; 00000030H
	mov	DWORD PTR Desc$[rsp+92], 3

; 36   : 				{  8,  64,  4},	//RGBA16U,

	mov	DWORD PTR Desc$[rsp+96], 8
	mov	DWORD PTR Desc$[rsp+100], 64		; 00000040H
	mov	DWORD PTR Desc$[rsp+104], 4

; 37   : 
; 38   : 				{  4,  32,  1},	//R32U,

	mov	DWORD PTR Desc$[rsp+108], 4
	mov	DWORD PTR Desc$[rsp+112], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+116], 1

; 39   : 				{  8,  64,  2},	//RG32U,

	mov	DWORD PTR Desc$[rsp+120], 8
	mov	DWORD PTR Desc$[rsp+124], 64		; 00000040H
	mov	DWORD PTR Desc$[rsp+128], 2

; 40   : 				{ 12,  96,  3},	//RGB32U,

	mov	DWORD PTR Desc$[rsp+132], 12
	mov	DWORD PTR Desc$[rsp+136], 96		; 00000060H
	mov	DWORD PTR Desc$[rsp+140], 3

; 41   : 				{ 16, 128,  4},	//RGBA32U,

	mov	DWORD PTR Desc$[rsp+144], 16
	mov	DWORD PTR Desc$[rsp+148], 128		; 00000080H
	mov	DWORD PTR Desc$[rsp+152], 4

; 42   : 
; 43   : 				//// Signed integer formats
; 44   : 				{  4,  32,  1},	//R8I,

	mov	DWORD PTR Desc$[rsp+156], 4
	mov	DWORD PTR Desc$[rsp+160], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+164], 1

; 45   : 				{  8,  64,  2},	//RG8I,

	mov	DWORD PTR Desc$[rsp+168], 8
	mov	DWORD PTR Desc$[rsp+172], 64		; 00000040H
	mov	DWORD PTR Desc$[rsp+176], 2

; 46   : 				{ 12,  96,  3},	//RGB8I,

	mov	DWORD PTR Desc$[rsp+180], 12
	mov	DWORD PTR Desc$[rsp+184], 96		; 00000060H
	mov	DWORD PTR Desc$[rsp+188], 3

; 47   : 				{ 16, 128,  4},	//RGBA8I,

	mov	DWORD PTR Desc$[rsp+192], 16
	mov	DWORD PTR Desc$[rsp+196], 128		; 00000080H
	mov	DWORD PTR Desc$[rsp+200], 4

; 48   : 
; 49   : 				{  2,  16,  1},	//R16I,

	mov	DWORD PTR Desc$[rsp+204], 2
	mov	DWORD PTR Desc$[rsp+208], 16
	mov	DWORD PTR Desc$[rsp+212], 1

; 50   : 				{  4,  32,  2},	//RG16I,

	mov	DWORD PTR Desc$[rsp+216], 4
	mov	DWORD PTR Desc$[rsp+220], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+224], 2

; 51   : 				{  6,  48,  3},	//RGB16I,

	mov	DWORD PTR Desc$[rsp+228], 6
	mov	DWORD PTR Desc$[rsp+232], 48		; 00000030H
	mov	DWORD PTR Desc$[rsp+236], 3

; 52   : 				{  8,  64,  4},	//RGBA16I,

	mov	DWORD PTR Desc$[rsp+240], 8
	mov	DWORD PTR Desc$[rsp+244], 64		; 00000040H
	mov	DWORD PTR Desc$[rsp+248], 4

; 53   : 
; 54   : 				{  4,  32,  1},	//R32I,

	mov	DWORD PTR Desc$[rsp+252], 4
	mov	DWORD PTR Desc$[rsp+256], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+260], 1

; 55   : 				{  8,  64,  2},	//RG32I,

	mov	DWORD PTR Desc$[rsp+264], 8
	mov	DWORD PTR Desc$[rsp+268], 64		; 00000040H
	mov	DWORD PTR Desc$[rsp+272], 2

; 56   : 				{ 12,  96,  3},	//RGB32I,

	mov	DWORD PTR Desc$[rsp+276], 12
	mov	DWORD PTR Desc$[rsp+280], 96		; 00000060H
	mov	DWORD PTR Desc$[rsp+284], 3

; 57   : 				{ 16, 128,  4},	//RGBA32I,

	mov	DWORD PTR Desc$[rsp+288], 16
	mov	DWORD PTR Desc$[rsp+292], 128		; 00000080H
	mov	DWORD PTR Desc$[rsp+296], 4

; 58   : 
; 59   : 				//// Floating formats
; 60   : 				{  2,  16,  1},	//R16F,

	mov	DWORD PTR Desc$[rsp+300], 2
	mov	DWORD PTR Desc$[rsp+304], 16
	mov	DWORD PTR Desc$[rsp+308], 1

; 61   : 				{  4,  32,  2},	//RG16F,

	mov	DWORD PTR Desc$[rsp+312], 4
	mov	DWORD PTR Desc$[rsp+316], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+320], 2

; 62   : 				{  6,  48,  3},	//RGB16F,

	mov	DWORD PTR Desc$[rsp+324], 6
	mov	DWORD PTR Desc$[rsp+328], 48		; 00000030H
	mov	DWORD PTR Desc$[rsp+332], 3

; 63   : 				{  8,  64,  4},	//RGBA16F,

	mov	DWORD PTR Desc$[rsp+336], 8
	mov	DWORD PTR Desc$[rsp+340], 64		; 00000040H
	mov	DWORD PTR Desc$[rsp+344], 4

; 64   : 
; 65   : 				{  4,  32,  1},	//R32F,

	mov	DWORD PTR Desc$[rsp+348], 4
	mov	DWORD PTR Desc$[rsp+352], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+356], 1

; 66   : 				{  8,  64,  2},	//RG32F,

	mov	DWORD PTR Desc$[rsp+360], 8
	mov	DWORD PTR Desc$[rsp+364], 64		; 00000040H
	mov	DWORD PTR Desc$[rsp+368], 2

; 67   : 				{ 12,  96,  3},	//RGB32F,

	mov	DWORD PTR Desc$[rsp+372], 12
	mov	DWORD PTR Desc$[rsp+376], 96		; 00000060H
	mov	DWORD PTR Desc$[rsp+380], 3

; 68   : 				{ 16, 128,  4},	//RGBA32F,

	mov	DWORD PTR Desc$[rsp+384], 16
	mov	DWORD PTR Desc$[rsp+388], 128		; 00000080H
	mov	DWORD PTR Desc$[rsp+392], 4

; 69   : 
; 70   : 				//// Packed formats
; 71   : 				{  4,  32,  3},	//RGBE8,

	mov	DWORD PTR Desc$[rsp+396], 4
	mov	DWORD PTR Desc$[rsp+400], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+404], 3

; 72   : 				{  4,  32,  3},	//RGB9E5,

	mov	DWORD PTR Desc$[rsp+408], 4
	mov	DWORD PTR Desc$[rsp+412], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+416], 3

; 73   : 				{  4,  32,  3},	//RG11B10F,

	mov	DWORD PTR Desc$[rsp+420], 4
	mov	DWORD PTR Desc$[rsp+424], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+428], 3

; 74   : 				{  2,  16,  3},	//R5G6B5,

	mov	DWORD PTR Desc$[rsp+432], 2
	mov	DWORD PTR Desc$[rsp+436], 16
	mov	DWORD PTR Desc$[rsp+440], 3

; 75   : 				{  2,  16,  4},	//RGBA4,

	mov	DWORD PTR Desc$[rsp+444], 2
	mov	DWORD PTR Desc$[rsp+448], 16
	mov	DWORD PTR Desc$[rsp+452], 4

; 76   : 				{  4,  32,  3},	//RGB10A2,

	mov	DWORD PTR Desc$[rsp+456], 4
	mov	DWORD PTR Desc$[rsp+460], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+464], 3

; 77   : 
; 78   : 				//// Depth formats
; 79   : 				{  2,  16,  1},	//D16,

	mov	DWORD PTR Desc$[rsp+468], 2
	mov	DWORD PTR Desc$[rsp+472], 16
	mov	DWORD PTR Desc$[rsp+476], 1

; 80   : 				{  4,  32,  1},	//D24X8,

	mov	DWORD PTR Desc$[rsp+480], 4
	mov	DWORD PTR Desc$[rsp+484], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+488], 1

; 81   : 				{  4,  32,  2},	//D24S8,

	mov	DWORD PTR Desc$[rsp+492], 4
	mov	DWORD PTR Desc$[rsp+496], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+500], 2

; 82   : 				{  4,  32,  1},	//D32F,

	mov	DWORD PTR Desc$[rsp+504], 4
	mov	DWORD PTR Desc$[rsp+508], 32		; 00000020H
	mov	DWORD PTR Desc$[rsp+512], 1

; 83   : 				{  8,  64,  2},	//D32FS8X24,

	mov	DWORD PTR Desc$[rsp+516], 8
	mov	DWORD PTR Desc$[rsp+520], 64		; 00000040H
	mov	DWORD PTR Desc$[rsp+524], 2

; 84   : 
; 85   : 				//// Compressed formats
; 86   : 				{  8,   4,  4},	//DXT1,

	mov	DWORD PTR Desc$[rsp+528], 8
	mov	DWORD PTR Desc$[rsp+532], 4
	mov	DWORD PTR Desc$[rsp+536], 4

; 87   : 				{ 16,   8,  4},	//DXT3,

	mov	DWORD PTR Desc$[rsp+540], 16
	mov	DWORD PTR Desc$[rsp+544], 8
	mov	DWORD PTR Desc$[rsp+548], 4

; 88   : 				{ 16,   8,  4},	//DXT5,

	mov	DWORD PTR Desc$[rsp+552], 16
	mov	DWORD PTR Desc$[rsp+556], 8
	mov	DWORD PTR Desc$[rsp+560], 4

; 89   : 				{  8,   4,  1},	//ATI1N_UNORM,

	mov	DWORD PTR Desc$[rsp+564], 8
	mov	DWORD PTR Desc$[rsp+568], 4
	mov	DWORD PTR Desc$[rsp+572], 1

; 90   : 				{  8,   4,  1},	//ATI1N_SNORM,

	mov	DWORD PTR Desc$[rsp+576], 8
	mov	DWORD PTR Desc$[rsp+580], 4
	mov	DWORD PTR Desc$[rsp+584], 1

; 91   : 				{ 16,   8,  2},	//ATI2N_UNORM,

	mov	DWORD PTR Desc$[rsp+588], 16
	mov	DWORD PTR Desc$[rsp+592], 8
	mov	DWORD PTR Desc$[rsp+596], 2

; 92   : 				{ 16,   8,  2},	//ATI2N_SNORM,

	mov	DWORD PTR Desc$[rsp+600], 16
	mov	DWORD PTR Desc$[rsp+604], 8
	mov	DWORD PTR Desc$[rsp+608], 2

; 93   : 				{ 16,   8,  3},	//BP_UF16,

	mov	DWORD PTR Desc$[rsp+612], 16
	mov	DWORD PTR Desc$[rsp+616], 8
	mov	DWORD PTR Desc$[rsp+620], 3

; 94   : 				{ 16,   8,  3},	//BP_SF16,

	mov	DWORD PTR Desc$[rsp+624], 16
	mov	DWORD PTR Desc$[rsp+628], 8
	mov	DWORD PTR Desc$[rsp+632], 3

; 95   : 				{ 16,   8,  4},	//BP,

	mov	DWORD PTR Desc$[rsp+636], 16
	mov	DWORD PTR Desc$[rsp+640], 8
	mov	DWORD PTR Desc$[rsp+644], 4

; 96   : 			};
; 97   : 
; 98   : 			return Desc[Format];

	mov	rax, QWORD PTR Format$[rsp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 12
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	lea	rsi, QWORD PTR Desc$[rsp+rax]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]

; 99   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 744				; 000002e8H
	pop	rdi
	pop	rsi
	ret	0
?getFormatInfo@detail@gli@@YA?AUformat_desc@12@AEBW4format@2@@Z ENDP ; gli::detail::getFormatInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gimage2D@gli@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gimage2D@gli@@QEAAPEAXI@Z PROC			; gli::image2D::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1image2D@gli@@QEAA@XZ			; gli::image2D::~image2D
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 48					; 00000030H
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gimage2D@gli@@QEAAPEAXI@Z ENDP			; gli::image2D::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4image2D@gli@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??4image2D@gli@@QEAAAEAV01@AEBV01@@Z PROC		; gli::image2D::operator=, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??4?$vector@EV?$allocator@E@std@@@std@@QEAAAEAV01@AEBV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=
	mov	rax, QWORD PTR __that$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+32], rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR __that$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rax+40], ecx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??4image2D@gli@@QEAAAEAV01@AEBV01@@Z ENDP		; gli::image2D::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEBAAEBV?$allocator@E@2@XZ ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAAAEAV?$allocator@E@2@XZ ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z ; std::allocator<unsigned char>::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newcapacity$ = 56
?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_nonzero, COMDAT

; 1841 :     _CONSTEXPR20 void _Buy_nonzero(const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1842 :         // allocate array with _Newcapacity elements
; 1843 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1844 :         auto& _My_data    = _Mypair._Myval2;
; 1845 :         pointer& _Myfirst = _My_data._Myfirst;
; 1846 :         pointer& _Mylast  = _My_data._Mylast;
; 1847 :         pointer& _Myend   = _My_data._Myend;
; 1848 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1849 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1850 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1851 : 
; 1852 :         if (_Newcapacity > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
	cmp	QWORD PTR _Newcapacity$[rsp], rax
	jbe	SHORT $LN2@Buy_nonzer

; 1853 :             _Xlength();

	call	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
$LN2@Buy_nonzer:

; 1854 :         }
; 1855 : 
; 1856 :         _Buy_raw(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw
$LN3@Buy_nonzer:

; 1857 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Buy_nonzero@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Myend$ = 56
_Newvec$ = 64
this$ = 96
_Newcapacity$ = 104
?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw, COMDAT

; 1825 :     _CONSTEXPR20 void _Buy_raw(const size_type _Newcapacity) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1826 :         // allocate array with _Newcapacity elements
; 1827 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1828 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1829 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1830 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1831 : 
; 1832 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1833 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1834 : 
; 1835 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, rax
	call	?allocate@?$allocator@E@std@@QEAAPEAE_K@Z ; std::allocator<unsigned char>::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1836 :         _Myfirst           = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1837 :         _Mylast            = _Newvec;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1838 :         _Myend             = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1839 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@AEBA_K_K@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@EV?$allocator@E@std@@@std@@QEBAAEBE_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@EV?$allocator@E@std@@@std@@QEBAAEBE_K@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[], COMDAT

; 1738 :     _NODISCARD _CONSTEXPR20 const _Ty& operator[](const size_type _Pos) const noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1739 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1740 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1741 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1742				; 000006ceH
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1742				; 000006ceH
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1742 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1743 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1744 : 
; 1745 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, QWORD PTR _Pos$[rsp]

; 1746 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@EV?$allocator@E@std@@@std@@QEBAAEBE_K@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, QWORD PTR _Pos$[rsp]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
_Newcapacity$ = 72
this$ = 96
_Newsize$ = 104
?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Clear_and_reserve_geometric, COMDAT

; 1492 :     _CONSTEXPR20 void _Clear_and_reserve_geometric(const size_type _Newsize) {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1493 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1494 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1495 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1496 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1497 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1498 : 
; 1499 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1500 :         _STL_INTERNAL_CHECK(_Newsize != 0);
; 1501 :         _Check_all_orphaned();
; 1502 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1503 : 
; 1504 :         if (_Newsize > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@EV?$allocator@E@std@@@std@@QEBA_KXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Clear_and_

; 1505 :             _Xlength();

	call	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
$LN2@Clear_and_:

; 1506 :         }
; 1507 : 
; 1508 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@AEBA_K_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 1509 : 
; 1510 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Clear_and_

; 1511 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPEAEQEAEAEAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >

; 1512 :             _ASAN_VECTOR_REMOVE;
; 1513 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z ; std::allocator<unsigned char>::deallocate

; 1514 : 
; 1515 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1516 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1517 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN3@Clear_and_:

; 1518 :         }
; 1519 : 
; 1520 :         _Buy_raw(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw
$LN4@Clear_and_:

; 1521 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Clear_and_reserve_geometric
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??4?$vector@EV?$allocator@E@std@@@std@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
_Al$ = 32
_Right_al$ = 40
_Right_data$ = 48
this$ = 80
_Right$ = 88
??4?$vector@EV?$allocator@E@std@@@std@@QEAAAEAV01@AEBV01@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=, COMDAT

; 1329 :     _CONSTEXPR20 vector& operator=(const vector& _Right) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1330 :         if (this == _STD addressof(_Right)) {

	mov	rcx, QWORD PTR _Right$[rsp]
	call	??$addressof@$$CBV?$vector@EV?$allocator@E@std@@@std@@@std@@YAPEBV?$vector@EV?$allocator@E@std@@@0@AEBV10@@Z ; std::addressof<std::vector<unsigned char,std::allocator<unsigned char> > const >
	cmp	QWORD PTR this$[rsp], rax
	jne	SHORT $LN2@operator

; 1331 :             return *this;

	mov	rax, QWORD PTR this$[rsp]
	jmp	SHORT $LN1@operator
$LN2@operator:

; 1332 :         }
; 1333 : 
; 1334 :         auto& _Al       = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1335 :         auto& _Right_al = _Right._Getal();

	mov	rcx, QWORD PTR _Right$[rsp]
	call	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
	mov	QWORD PTR _Right_al$[rsp], rax

; 1336 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1337 :             if (_Al != _Right_al) {
; 1338 :                 _Tidy();
; 1339 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1340 :             }
; 1341 :         }
; 1342 : 
; 1343 :         _Pocca(_Al, _Right_al);

	mov	rdx, QWORD PTR _Right_al$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Pocca@V?$allocator@E@std@@@std@@YAXAEAV?$allocator@E@0@AEBV10@@Z ; std::_Pocca<std::allocator<unsigned char> >

; 1344 :         auto& _Right_data = _Right._Mypair._Myval2;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR _Right_data$[rsp], rax

; 1345 :         assign(_Right_data._Myfirst, _Right_data._Mylast);

	mov	rax, QWORD PTR _Right_data$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR _Right_data$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$assign@PEAE$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAAXPEAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::assign<unsigned char *,0>

; 1346 : 
; 1347 :         return *this;

	mov	rax, QWORD PTR this$[rsp]
$LN1@operator:

; 1348 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??4?$vector@EV?$allocator@E@std@@@std@@QEAAAEAV01@AEBV01@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S16$ = 52
$T4 = 68
this$ = 96
??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AEAAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEAAAEAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S16$[rsp]
	call	??$?0E@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@E@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned char>
	lea	rax, QWORD PTR $S16$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
_Right_data$ = 32
_Count$ = 40
$T1 = 48
$T2 = 49
this$ = 80
_Right$ = 88
??0?$vector@EV?$allocator@E@std@@@std@@QEAA@AEBV01@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT

; 707  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rcx, QWORD PTR _Right$[rsp]
	call	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AEBAAEBV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA?AV?$allocator@E@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::select_on_container_copy_construction
	mov	rcx, QWORD PTR this$[rsp]
	mov	r8, rax
	movzx	edx, BYTE PTR $T2[rsp]
	call	??$?0V?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@E@1@@Z ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><std::allocator<unsigned char> >

; 708  :         const auto& _Right_data = _Right._Mypair._Myval2;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR _Right_data$[rsp], rax

; 709  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

	mov	rax, QWORD PTR _Right_data$[rsp]
	mov	rcx, QWORD PTR _Right_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 710  :         _Construct_n(_Count, _Right_data._Myfirst, _Right_data._Mylast);

	mov	rax, QWORD PTR _Right_data$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR _Right_data$[rsp]
	add	rcx, 8
	mov	r9, rax
	mov	r8, rcx
	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Construct_n@AEBQEAEAEBQEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBQEAE1@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<unsigned char * const &,unsigned char * const &>

; 711  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$vector@EV?$allocator@E@std@@@std@@QEAA@AEBV01@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Count$ = 72
_Al$ = 80
??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT

; 668  :         : _Mypair(_One_then_variadic_args_t{}, _Al) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR _Al$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0AEBV?$allocator@E@std@@$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@E@1@@Z ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><std::allocator<unsigned char> const &>

; 669  :         _Construct_n(_Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Construct_n@$$V@?$vector@EV?$allocator@E@std@@@std@@AEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Construct_n<>

; 670  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA?AV?$allocator@E@2@AEBV32@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
_Al$ = 24
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA?AV?$allocator@E@2@AEBV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned char> >::select_on_container_copy_construction, COMDAT

; 697  :     _NODISCARD static _CONSTEXPR20 _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 698  :         return _Al;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 699  :     }

	pop	rdi
	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA?AV?$allocator@E@2@AEBV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned char> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, -1

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SA_KAEBV?$allocator@E@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@E@std@@QEAAPEAE_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@E@std@@QEAAPEAE_K@Z PROC		; std::allocator<unsigned char>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$00@std@@YA_K_K@Z	; std::_Get_size_of_n<1>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@E@std@@QEAAPEAE_K@Z ENDP		; std::allocator<unsigned char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z PROC	; std::allocator<unsigned char>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@E@std@@QEAAXQEAE_K@Z ENDP	; std::allocator<unsigned char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@E@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@E@std@@QEAA@XZ PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@E@std@@QEAA@XZ ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ?data@image2D@gli@@QEBAQEBEXZ
_TEXT	SEGMENT
this$ = 48
?data@image2D@gli@@QEBAQEBEXZ PROC			; gli::image2D::data, COMDAT

; 226  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 227  : 		return &this->Data[0];

	mov	rax, QWORD PTR this$[rsp]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEBAAEBE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]

; 228  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?data@image2D@gli@@QEBAQEBEXZ ENDP			; gli::image2D::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ?data@image2D@gli@@QEAAPEAEXZ
_TEXT	SEGMENT
this$ = 48
?data@image2D@gli@@QEAAPEAEXZ PROC			; gli::image2D::data, COMDAT

; 221  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  : 		return &this->Data[0];

	mov	rax, QWORD PTR this$[rsp]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$vector@EV?$allocator@E@std@@@std@@QEAAAEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]

; 223  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?data@image2D@gli@@QEAAPEAEXZ ENDP			; gli::image2D::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ?format@image2D@gli@@QEBA?AW402@XZ
_TEXT	SEGMENT
this$ = 16
?format@image2D@gli@@QEBA?AW402@XZ PROC			; gli::image2D::format, COMDAT

; 216  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 217  : 		return this->Format;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+40]

; 218  : 	}

	pop	rdi
	ret	0
?format@image2D@gli@@QEBA?AW402@XZ ENDP			; gli::image2D::format
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ?dimensions@image2D@gli@@QEBA?AU?$tvec2@I$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
__$ReturnUdt$ = 24
?dimensions@image2D@gli@@QEBA?AU?$tvec2@I$0A@@glm@@XZ PROC ; gli::image2D::dimensions, COMDAT

; 206  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 207  : 		return this->Dimensions;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 208  : 	}

	pop	rdi
	ret	0
?dimensions@image2D@gli@@QEBA?AU?$tvec2@I$0A@@glm@@XZ ENDP ; gli::image2D::dimensions
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ??1image2D@gli@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1image2D@gli@@QEAA@XZ PROC				; gli::image2D::~image2D, COMDAT

; 182  : 	{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1image2D@gli@@QEAA@XZ ENDP				; gli::image2D::~image2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z
_TEXT	SEGMENT
$T1 = 32
tv68 = 40
tv70 = 48
this$ = 80
Dimensions$ = 88
Format$ = 96
??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z PROC ; gli::image2D::image2D, COMDAT

; 168  : 	{}

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 165  : 		Data((glm::compMul(Dimensions) * detail::sizeBitPerPixel(Format)) >> 3),

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$allocator@E@std@@QEAA@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	QWORD PTR tv68[rsp], rax
	mov	rcx, QWORD PTR Dimensions$[rsp]
	call	??$compMul@I$0A@Utvec2@glm@@@glm@@YAIAEBU?$tvec2@I$0A@@0@@Z ; glm::compMul<unsigned int,0,glm::tvec2>
	mov	DWORD PTR tv70[rsp], eax
	mov	rcx, QWORD PTR Format$[rsp]
	call	?sizeBitPerPixel@detail@gli@@YAIAEBW4format@2@@Z ; gli::detail::sizeBitPerPixel
	mov	ecx, DWORD PTR tv70[rsp]
	imul	ecx, eax
	mov	eax, ecx
	shr	eax, 3
	mov	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR tv68[rsp]
	mov	r8, rdx
	mov	edx, eax
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >

; 166  : 		Dimensions(Dimensions),

	mov	rax, QWORD PTR Dimensions$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+32], rax

; 167  : 		Format(Format)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR Format$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+40], ecx

; 168  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0image2D@gli@@QEAA@AEBU?$tvec2@I$0A@@glm@@AEBW4format@1@@Z ENDP ; gli::image2D::image2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ??0image2D@gli@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
Image$ = 56
??0image2D@gli@@QEAA@AEBV01@@Z PROC			; gli::image2D::image2D, COMDAT

; 158  : 	{}

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 155  : 		Data(Image.Data),

	mov	rax, QWORD PTR Image$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@AEBV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >

; 156  : 		Dimensions(Image.Dimensions),

	mov	rax, QWORD PTR Image$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+32], rax

; 157  : 		Format(Image.Format)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR Image$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rax+40], ecx

; 158  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0image2D@gli@@QEAA@AEBV01@@Z ENDP			; gli::image2D::image2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\external\gli\core\image2d.inl
;	COMDAT ??0image2D@gli@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0image2D@gli@@QEAA@XZ PROC				; gli::image2D::image2D, COMDAT

; 149  : 	{}

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 146  : 		Data(0),

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$allocator@E@std@@QEAA@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	rcx, QWORD PTR this$[rsp]
	mov	r8, rax
	xor	edx, edx
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@_KAEBV?$allocator@E@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	npad	1

; 147  : 		Dimensions(0),

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 32					; 00000020H
	xor	edx, edx
	mov	rcx, rax
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 148  : 		Format(FORMAT_NULL)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+40], 0

; 149  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0image2D@gli@@QEAA@XZ ENDP				; gli::image2D::image2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???0image2D@gli@@QEAA@XZ@4HA PROC		; `gli::image2D::image2D'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR this$[rbp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0image2D@gli@@QEAA@XZ@4HA ENDP		; `gli::image2D::image2D'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@I$0A@@glm@@QEAA@II@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s1$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@II@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@I$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
tv66 = 64
__$ReturnUdt$ = 96
x$ = 104
minVal$ = 112
maxVal$ = 120
??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z PROC ; glm::clamp<float,0,glm::tvec4>, COMDAT

; 551  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 552  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 553  : 		return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, vecType<T, P>(minVal), vecType<T, P>(maxVal));

	movss	xmm1, DWORD PTR maxVal$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR minVal$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 554  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ENDP ; glm::clamp<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 541  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 542  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 543  : 			v.x * scalar,
; 544  : 			v.y * scalar);
; 545  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1297 :     _Container_proxy* _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ PROC ; std::_Basic_container_proxy_ptr12::_Release, COMDAT

; 1299 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1300 :         _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1301 :     }

	pop	rdi
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ENDP ; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1078 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1079 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1080 :         _Orphan_all_unlocked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1081 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1219 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1220 :     if (!_Myproxy) { // no proxy, already done

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@Orphan_all

; 1221 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1222 :     }
; 1223 : 
; 1224 :     // proxy allocated, drain it
; 1225 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1226 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1227 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1228 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1229 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1231 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1232 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1233 : #if _HAS_CXX20
; 1234 :     if (_STD is_constant_evaluated()) {
; 1235 :         _Orphan_all_unlocked_v3();
; 1236 :     } else
; 1237 : #endif // _HAS_CXX20
; 1238 :     {
; 1239 :         _Orphan_all_locked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1240 :     }
; 1241 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1242 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1048 : 
; 1049 :     _Container_base12(const _Container_base12&) = delete;
; 1050 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1051 : 
; 1052 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1053 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1054 : 
; 1055 :     template <class _Alloc>
; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1058 :         _Construct_in_place(*_New_proxy, this);
; 1059 :         _Myproxy            = _New_proxy;
; 1060 :         _New_proxy->_Mycont = this;
; 1061 :     }
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1065 :         // pre: no iterators refer to the existing proxy
; 1066 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1067 :         _Construct_in_place(*_New_proxy, this);
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1070 :     }
; 1071 : 
; 1072 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1040 : 
; 1041 :     const _Container_base12* _Mycont       = nullptr;
; 1042 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 154				; 0000009aH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 166  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 80   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 319  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?floor@@YAMM@Z PROC					; floor, COMDAT

; 124  : _NODISCARD _Check_return_ inline float floor(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 125  : #if _HAS_CMATH_INTRINSICS
; 126  :     return __floorf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	floorf

; 127  : #elif defined(__clang__)
; 128  :     return __builtin_floorf(_Xx);
; 129  : #else // ^^^ defined(__clang__) ^^^ / vvv intrinsics unavailable vvv
; 130  :     return _CSTD floorf(_Xx);
; 131  : #endif // ^^^ intrinsics unavailable ^^^
; 132  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_noise.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 16
__formal$ = 24
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	pop	rdi
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_noise.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 16
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	pop	rdi
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
