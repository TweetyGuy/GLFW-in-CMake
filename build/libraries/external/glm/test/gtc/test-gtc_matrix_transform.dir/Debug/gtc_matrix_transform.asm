; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?epsilon@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::epsilon
PUBLIC	?tan@@YAMM@Z					; tan
PUBLIC	?test_perspective@@YAHXZ			; test_perspective
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??$pi@M@glm@@YAMXZ				; glm::pi<float>
PUBLIC	??$perspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z ; glm::perspective<float>
PUBLIC	?test_pick@@YAHXZ				; test_pick
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec4<int,0>::operator[]
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z ; glm::pickMatrix<float,0,int>
PUBLIC	?test_tweakedInfinitePerspective@@YAHXZ		; test_tweakedInfinitePerspective
PUBLIC	??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMM@Z ; glm::tweakedInfinitePerspective<float>
PUBLIC	??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z ; glm::tweakedInfinitePerspective<float>
PUBLIC	?test_translate@@YAHXZ				; test_translate
PUBLIC	?length@?$tvec3@M$01@glm@@SAHXZ			; glm::tvec3<float,2>::length
PUBLIC	??A?$tvec3@M$01@glm@@QEBAAEBMH@Z		; glm::tvec3<float,2>::operator[]
PUBLIC	??0?$tvec3@M$01@glm@@QEAA@M@Z			; glm::tvec3<float,2>::tvec3<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QEAA@XZ			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QEAA@M@Z			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z		; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	?length@?$tmat4x4@M$01@glm@@SAHXZ		; glm::tmat4x4<float,2>::length
PUBLIC	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
PUBLIC	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
PUBLIC	??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z ; glm::translate<float,2>
PUBLIC	main
PUBLIC	??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z		; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z		; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z		; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>
PUBLIC	??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z ; glm::perspectiveRH<float>
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z ; glm::translate<float,0>
PUBLIC	??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z ; glm::scale<float,0>
PUBLIC	??$epsilon@M@glm@@YAMXZ				; glm::epsilon<float>
PUBLIC	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z	; glm::operator*<float,2>
PUBLIC	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z	; glm::operator+<float,2>
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z		; glm::tvec4<float,2>::operator*=<float>
PUBLIC	??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,2>::operator+=<float>
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,2,0>::call
PUBLIC	?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,2,0>::call
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	??_C@_1LO@ODLBCLDC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1HG@EANPNFE@?$AAd?$AAe?$AAl?$AAt?$AAa?$AA?4?$AAx?$AA?5?$AA?$DO?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAi@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	??_C@_1II@JJEBDBC@?$AAa?$AAb?$AAs?$AA?$CI?$AAa?$AAs?$AAp?$AAe?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAs?$AAt@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@34000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3f800000
PUBLIC	__real@3faaaaab
PUBLIC	__real@40000000
PUBLIC	__real@40490fdb
PUBLIC	__real@42340000
PUBLIC	__real@42c80000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__wassert:PROC
EXTRN	__imp_tanf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?epsilon@?$numeric_limits@M@std@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?epsilon@?$numeric_limits@M@std@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?tan@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?tan@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_perspective@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$?test_perspective@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+331
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pi@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$??$pi@M@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$perspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??$perspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_pick@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$?test_pick@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+760
	DD	imagerel $unwind$??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_tweakedInfinitePerspective@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$?test_tweakedInfinitePerspective@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+643
	DD	imagerel $unwind$??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_translate@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$?test_translate@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$01@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$01@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$01@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$01@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$01@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$01@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$01@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$01@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$01@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$01@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$01@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+331
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$01@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$01@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+545
	DD	imagerel $unwind$??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z DD imagerel $LN4
	DD	imagerel $LN4+654
	DD	imagerel $unwind$??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+545
	DD	imagerel $unwind$??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+558
	DD	imagerel $unwind$??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilon@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??$epsilon@M@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3faaaaab
CONST	SEGMENT
__real@3faaaaab DD 03faaaaabr			; 1.33333
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@34000000
CONST	SEGMENT
__real@34000000 DD 034000000r			; 1.19209e-07
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1II@JJEBDBC@?$AAa?$AAb?$AAs?$AA?$CI?$AAa?$AAs?$AAp?$AAe?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAs?$AAt@
CONST	SEGMENT
??_C@_1II@JJEBDBC@?$AAa?$AAb?$AAs?$AA?$CI?$AAa?$AAs?$AAp?$AAe?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAs?$AAt@ DB 'a'
	DB	00H, 'b', 00H, 's', 00H, '(', 00H, 'a', 00H, 's', 00H, 'p', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, ' ', 00H, '-', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'n', 00H, 'u', 00H
	DB	'm', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'l'
	DB	00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H
	DB	'T', 00H, '>', 00H, ':', 00H, ':', 00H, 'e', 00H, 'p', 00H, 's'
	DB	00H, 'i', 00H, 'l', 00H, 'o', 00H, 'n', 00H, '(', 00H, ')', 00H
	DB	')', 00H, ' ', 00H, '>', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'c', 00H, 'a', 00H
	DB	's', 00H, 't', 00H, '<', 00H, 'T', 00H, '>', 00H, '(', 00H, '0'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@EANPNFE@?$AAd?$AAe?$AAl?$AAt?$AAa?$AA?4?$AAx?$AA?5?$AA?$DO?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAi@
CONST	SEGMENT
??_C@_1HG@EANPNFE@?$AAd?$AAe?$AAl?$AAt?$AAa?$AA?4?$AAx?$AA?5?$AA?$DO?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAi@ DB 'd'
	DB	00H, 'e', 00H, 'l', 00H, 't', 00H, 'a', 00H, '.', 00H, 'x', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'c', 00H, '_', 00H, 'c', 00H, 'a', 00H, 's', 00H
	DB	't', 00H, '<', 00H, 'T', 00H, '>', 00H, '(', 00H, '0', 00H, ')'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	'l', 00H, 't', 00H, 'a', 00H, '.', 00H, 'y', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'c', 00H, '_', 00H, 'c', 00H, 'a', 00H, 's', 00H, 't', 00H, '<'
	DB	00H, 'T', 00H, '>', 00H, '(', 00H, '0', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@ODLBCLDC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LO@ODLBCLDC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'g', 00H, 't', 00H
	DB	'c', 00H, '\', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'x', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	's', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, '.', 00H, 'i'
	DB	00H, 'n', 00H, 'l', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilon@M@glm@@YAMXZ DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0214H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z DD 044319H
	DD	01f0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0e8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::scale<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 030H ; glm::scale<float,0>
	DD	040H
	DQ	FLAT:??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::scale<float,0>
	DD	00H
	DQ	FLAT:??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0207H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z DD 044319H
	DD	0250118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::translate<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 030H ; glm::translate<float,0>
	DD	040H
	DQ	FLAT:??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::translate<float,0>
	DD	00H
	DQ	FLAT:??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	043H
	DW	0274H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z DD 044b19H
	DD	0170120H
	DD	060187019H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcName$0 DB 052H ; glm::perspectiveRH<float>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcVarDesc DD 040H ; glm::perspectiveRH<float>
	DD	040H
	DQ	FLAT:??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcName$0
	ORG $+48
??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcFrameData DD 01H ; glm::perspectiveRH<float>
	DD	00H
	DQ	FLAT:??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0207H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z DD 044319H
	DD	0250118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z$rtcName$0 DB 052H ; glm::translate<float,2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z$rtcVarDesc DD 030H ; glm::translate<float,2>
	DD	040H
	DQ	FLAT:??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z$rtcName$0
	ORG $+48
??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z$rtcFrameData DD 01H ; glm::translate<float,2>
	DD	00H
	DQ	FLAT:??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$01@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$01@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$01@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$01@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$01@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$01@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$01@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	043H
	DW	0269H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z DD 044b19H
	DD	0190120H
	DD	060187019H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcName$0 DB 052H ; glm::tweakedInfinitePerspective<float>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcVarDesc DD 050H ; glm::tweakedInfinitePerspective<float>
	DD	040H
	DQ	FLAT:??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcName$0
	ORG $+48
??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcFrameData DD 01H ; glm::tweakedInfinitePerspective<float>
	DD	00H
	DQ	FLAT:??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMM@Z DD 021c01H
	DD	07018521cH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	02deH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z DD 044819H
	DD	025011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z$rtcName$0 DB 052H ; glm::pickMatrix<float,0,int>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z$rtcName$1 DB 054H ; glm::pickMatrix<float,0,int>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z$rtcVarDesc DD 088H ; glm::pickMatrix<float,0,int>
	DD	0cH
	DQ	FLAT:??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z$rtcName$1
	DD	030H
	DD	040H
	DQ	FLAT:??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z$rtcName$0
	ORG $+96
??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z$rtcFrameData DD 02H ; glm::pickMatrix<float,0,int>
	DD	00H
	DQ	FLAT:??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$perspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z DD 021c01H
	DD	07018521cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pi@M@glm@@YAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_translate@@YAHXZ
	DD	024H
	DD	092H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_tweakedInfinitePerspective@@YAHXZ
	DD	024H
	DD	0a0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_pick@@YAHXZ
	DD	024H
	DD	0ceH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_perspective@@YAHXZ
	DD	024H
	DD	083H
voltbl	ENDS
xdata	SEGMENT
$unwind$?test_perspective@@YAHXZ DD 032c19H
	DD	0160109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$?test_pick@@YAHXZ DD 032c19H
	DD	01c0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?test_tweakedInfinitePerspective@@YAHXZ DD 032c19H
	DD	0220109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$?test_translate@@YAHXZ DD 032c19H
	DD	0260109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0128H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
?test_perspective@@YAHXZ$rtcName$0 DB 050H		; test_perspective
	DB	072H
	DB	06fH
	DB	06aH
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+5
?test_perspective@@YAHXZ$rtcVarDesc DD 050H		; test_perspective
	DD	040H
	DQ	FLAT:?test_perspective@@YAHXZ$rtcName$0
	ORG $+48
?test_perspective@@YAHXZ$rtcFrameData DD 01H		; test_perspective
	DD	00H
	DQ	FLAT:?test_perspective@@YAHXZ$rtcVarDesc
?test_pick@@YAHXZ$rtcName$0 DB 050H			; test_pick
	DB	069H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+3
?test_pick@@YAHXZ$rtcFrameData DD 01H			; test_pick
	DD	00H
	DQ	FLAT:?test_pick@@YAHXZ$rtcVarDesc
?test_translate@@YAHXZ$rtcName$0 DB 076H		; test_translate
	DB	00H
	ORG $+6
?test_pick@@YAHXZ$rtcVarDesc DD 050H			; test_pick
	DD	040H
	DQ	FLAT:?test_pick@@YAHXZ$rtcName$0
	ORG $+48
?test_tweakedInfinitePerspective@@YAHXZ$rtcName$0 DB 050H ; test_tweakedInfinitePerspective
	DB	072H
	DB	06fH
	DB	06aH
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	041H
	DB	00H
?test_translate@@YAHXZ$rtcName$1 DB 06dH		; test_translate
	DB	00H
	ORG $+2
?test_tweakedInfinitePerspective@@YAHXZ$rtcName$1 DB 050H ; test_tweakedInfinitePerspective
	DB	072H
	DB	06fH
	DB	06aH
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	042H
	DB	00H
	ORG $+4
?test_tweakedInfinitePerspective@@YAHXZ$rtcVarDesc DD 0b0H ; test_tweakedInfinitePerspective
	DD	040H
	DQ	FLAT:?test_tweakedInfinitePerspective@@YAHXZ$rtcName$1
	DD	050H
	DD	040H
	DQ	FLAT:?test_tweakedInfinitePerspective@@YAHXZ$rtcName$0
	ORG $+96
?test_tweakedInfinitePerspective@@YAHXZ$rtcFrameData DD 02H ; test_tweakedInfinitePerspective
	DD	00H
	DQ	FLAT:?test_tweakedInfinitePerspective@@YAHXZ$rtcVarDesc
?test_translate@@YAHXZ$rtcName$2 DB 074H		; test_translate
	DB	00H
	ORG $+6
?test_translate@@YAHXZ$rtcFrameData DD 03H		; test_translate
	DD	00H
	DQ	FLAT:?test_translate@@YAHXZ$rtcVarDesc
	ORG $+8
?test_translate@@YAHXZ$rtcVarDesc DD 0d0H		; test_translate
	DD	040H
	DQ	FLAT:?test_translate@@YAHXZ$rtcName$2
	DD	070H
	DD	040H
	DQ	FLAT:?test_translate@@YAHXZ$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:?test_translate@@YAHXZ$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?tan@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?epsilon@?$numeric_limits@M@std@@SAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 021901H
	DD	070155219H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,2,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,2,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,2>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,2,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,2>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,2>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@M@Z		; glm::tvec4<float,2>::tvec4<float,2>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,2,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,2>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT

; 204  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z PROC	; glm::operator+<float,2>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,2>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ENDP	; glm::operator+<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z PROC	; glm::operator*<float,2>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,2>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$epsilon@M@glm@@YAMXZ
_TEXT	SEGMENT
??$epsilon@M@glm@@YAMXZ PROC				; glm::epsilon<float>, COMDAT

; 10   : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 11   : 		return std::numeric_limits<genType>::epsilon();

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon

; 12   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilon@M@glm@@YAMXZ ENDP				; glm::epsilon<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_transform.inl
;	COMDAT ??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 48
$T4 = 128
$T5 = 144
$T6 = 160
tv71 = 176
tv69 = 184
tv85 = 192
tv83 = 200
tv131 = 208
tv129 = 216
tv144 = 224
__$ArrayPad$ = 232
__$ReturnUdt$ = 272
m$ = 280
v$ = 288
??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z PROC ; glm::scale<float,0>, COMDAT

; 80   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+272]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 81   : 		tmat4x4<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 82   : 		Result[0] = m[0] * v[0];

	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv71[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv71[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv69[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv69[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 83   : 		Result[1] = m[1] * v[1];

	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv85[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv85[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv83[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv83[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 84   : 		Result[2] = m[2] * v[2];

	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv131[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv131[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv129[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv129[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 85   : 		Result[3] = m[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv144[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv144[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 86   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 87   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::scale<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_transform.inl
;	COMDAT ??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 48
$T4 = 128
$T5 = 144
$T6 = 160
$T7 = 176
$T8 = 192
$T9 = 208
tv70 = 224
tv76 = 232
tv74 = 240
tv88 = 248
tv86 = 256
tv131 = 264
tv68 = 272
__$ArrayPad$ = 280
__$ReturnUdt$ = 320
m$ = 328
v$ = 336
??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z PROC ; glm::translate<float,0>, COMDAT

; 12   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+320]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 13   : 		tmat4x4<T, P> Result(m);

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb

; 14   : 		Result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv70[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv86[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv131[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv131[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv86[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv70[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv68[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 15   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 16   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::translate<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_transform.inl
;	COMDAT ??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z
_TEXT	SEGMENT
tanHalfFovy$ = 32
Result$ = 64
$T4 = 144
tv85 = 148
tv92 = 152
tv141 = 156
tv153 = 160
__$ArrayPad$ = 168
__$ReturnUdt$ = 208
fovy$ = 216
aspect$ = 224
zNear$ = 232
zFar$ = 240
??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z PROC ; glm::perspectiveRH<float>, COMDAT

; 259  : 	{

$LN4:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+208]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 260  : 		assert(abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0));

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR aspect$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN3@perspectiv
	mov	r8d, 260				; 00000104H
	lea	rdx, OFFSET FLAT:??_C@_1LO@ODLBCLDC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1II@JJEBDBC@?$AAa?$AAb?$AAs?$AA?$CI?$AAa?$AAs?$AAp?$AAe?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAs?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@perspectiv:

; 261  : 
; 262  : 		T const tanHalfFovy = tan(fovy / static_cast<T>(2));

	movss	xmm0, DWORD PTR fovy$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	call	?tan@@YAMM@Z				; tan
	movss	DWORD PTR tanHalfFovy$[rsp], xmm0

; 263  : 
; 264  : 		tmat4x4<T, defaultp> Result(static_cast<T>(0));

	xorps	xmm0, xmm0
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 265  : 		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);

	movss	xmm0, DWORD PTR aspect$[rsp]
	mulss	xmm0, DWORD PTR tanHalfFovy$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv85[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv85[rsp]
	movss	DWORD PTR [rax], xmm0

; 266  : 		Result[1][1] = static_cast<T>(1) / (tanHalfFovy);

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tanHalfFovy$[rsp]
	movss	DWORD PTR tv92[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv92[rsp]
	movss	DWORD PTR [rax], xmm0

; 267  : 		Result[2][3] = - static_cast<T>(1);

	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax], xmm0

; 268  : 
; 269  : #		if GLM_DEPTH_CLIP_SPACE == GLM_DEPTH_ZERO_TO_ONE
; 270  : 			Result[2][2] = zFar / (zNear - zFar);
; 271  : 			Result[3][2] = -(zFar * zNear) / (zFar - zNear);
; 272  : #		else
; 273  : 			Result[2][2] = - (zFar + zNear) / (zFar - zNear);

	movss	xmm0, DWORD PTR zFar$[rsp]
	addss	xmm0, DWORD PTR zNear$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR zFar$[rsp]
	subss	xmm1, DWORD PTR zNear$[rsp]
	divss	xmm0, xmm1
	movss	DWORD PTR tv141[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv141[rsp]
	movss	DWORD PTR [rax], xmm0

; 274  : 			Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR zFar$[rsp]
	mulss	xmm0, DWORD PTR zNear$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR zFar$[rsp]
	subss	xmm1, DWORD PTR zNear$[rsp]
	divss	xmm0, xmm1
	movss	DWORD PTR tv153[rsp], xmm0
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv153[rsp]
	movss	DWORD PTR [rax], xmm0

; 275  : #		endif
; 276  : 
; 277  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 278  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z ENDP ; glm::perspectiveRH<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>, COMDAT

; 204  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_transform.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 45   : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 46   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 47   : 
; 48   : 	Error += test_translate();

	call	?test_translate@@YAHXZ			; test_translate
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 49   : 	Error += test_tweakedInfinitePerspective();

	call	?test_tweakedInfinitePerspective@@YAHXZ	; test_tweakedInfinitePerspective
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 50   : 	Error += test_pick();

	call	?test_pick@@YAHXZ			; test_pick
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 51   : 	Error += test_perspective();

	call	?test_perspective@@YAHXZ		; test_perspective
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 52   : 
; 53   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 54   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_transform.inl
;	COMDAT ??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z
_TEXT	SEGMENT
Result$ = 48
$T4 = 128
$T5 = 144
$T6 = 160
$T7 = 176
$T8 = 192
$T9 = 208
tv70 = 224
tv76 = 232
tv74 = 240
tv88 = 248
tv86 = 256
tv131 = 264
tv68 = 272
__$ArrayPad$ = 280
__$ReturnUdt$ = 320
m$ = 328
v$ = 336
??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z PROC ; glm::translate<float,2>, COMDAT

; 12   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+320]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 13   : 		tmat4x4<T, P> Result(m);

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb

; 14   : 		Result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	QWORD PTR tv70[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$01@glm@@QEBAAEBMH@Z	; glm::tvec3<float,2>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$01@glm@@QEBAAEBMH@Z	; glm::tvec3<float,2>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv86[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$01@glm@@QEBAAEBMH@Z	; glm::tvec3<float,2>::operator[]
	mov	QWORD PTR tv131[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rcx, QWORD PTR tv131[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	rcx, QWORD PTR tv86[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	rcx, QWORD PTR tv70[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv68[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 15   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 16   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z ENDP ; glm::translate<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z PROC	; glm::tmat4x4<float,2>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$01@glm@@SAHXZ	; glm::tmat4x4<float,2>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat4x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z PROC	; glm::tmat4x4<float,2>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$01@glm@@SAHXZ	; glm::tmat4x4<float,2>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat4x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$01@glm@@SAHXZ PROC			; glm::tmat4x4<float,2>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$01@glm@@SAHXZ ENDP			; glm::tmat4x4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
s$ = 152
??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z PROC			; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 50   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$01@glm@@QEAA@XZ ; glm::tvec4<float,2>::tvec4<float,2>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$01@glm@@QEAA@MHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$01@glm@@QEAA@HMHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$01@glm@@QEAA@HHMH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHM@?$tvec4@M$01@glm@@QEAA@HHHM@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,float>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 55   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z ENDP			; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$01@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$01@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$01@glm@@QEAA@M@Z PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$01@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$01@glm@@QEAA@XZ PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$01@glm@@QEAA@XZ ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$01@glm@@QEAA@M@Z PROC			; glm::tvec3<float,2>::tvec3<float,2>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$01@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,2>::tvec3<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$01@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$01@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,2>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$01@glm@@SAHXZ		; glm::tvec3<float,2>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$01@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$01@glm@@SAHXZ PROC			; glm::tvec3<float,2>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$01@glm@@SAHXZ ENDP			; glm::tvec3<float,2>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_transform.cpp
_TEXT	SEGMENT
Error$ = 32
v$ = 56
m$ = 112
t$ = 208
$T6 = 288
__$ArrayPad$ = 296
?test_translate@@YAHXZ PROC				; test_translate

; 34   : {

$LN3:
	push	rdi
	sub	rsp, 304				; 00000130H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 35   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 36   : 
; 37   : 	glm::lowp_vec3 v(1.0);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR v$[rsp]
	call	??0?$tvec3@M$01@glm@@QEAA@M@Z		; glm::tvec3<float,2>::tvec3<float,2>

; 38   : 	glm::lowp_mat4 m(0);

	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp], xmm0
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x4@M$01@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,2>::tmat4x4<float,2>

; 39   : 	glm::lowp_mat4 t = glm::translate(m, v);

	lea	r8, QWORD PTR v$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR t$[rsp]
	call	??$translate@M$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBU?$tvec3@M$01@0@@Z ; glm::translate<float,2>

; 40   : 
; 41   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 42   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_translate@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 304				; 00000130H
	pop	rdi
	ret	0
?test_translate@@YAHXZ ENDP				; test_translate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_transform.inl
;	COMDAT ??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z
_TEXT	SEGMENT
range$ = 32
left$ = 36
right$ = 40
bottom$ = 44
top$ = 48
Result$ = 80
$T4 = 160
tv82 = 164
tv91 = 168
tv130 = 172
tv144 = 176
__$ArrayPad$ = 184
__$ReturnUdt$ = 224
fovy$ = 232
aspect$ = 240
zNear$ = 248
ep$ = 256
??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z PROC ; glm::tweakedInfinitePerspective<float>, COMDAT

; 416  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+224]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 417  : 		T const range = tan(fovy / static_cast<T>(2)) * zNear;	

	movss	xmm0, DWORD PTR fovy$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	call	?tan@@YAMM@Z				; tan
	mulss	xmm0, DWORD PTR zNear$[rsp]
	movss	DWORD PTR range$[rsp], xmm0

; 418  : 		T const left = -range * aspect;

	movss	xmm0, DWORD PTR range$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR aspect$[rsp]
	movss	DWORD PTR left$[rsp], xmm0

; 419  : 		T const right = range * aspect;

	movss	xmm0, DWORD PTR range$[rsp]
	mulss	xmm0, DWORD PTR aspect$[rsp]
	movss	DWORD PTR right$[rsp], xmm0

; 420  : 		T const bottom = -range;

	movss	xmm0, DWORD PTR range$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR bottom$[rsp], xmm0

; 421  : 		T const top = range;

	movss	xmm0, DWORD PTR range$[rsp]
	movss	DWORD PTR top$[rsp], xmm0

; 422  : 
; 423  : 		tmat4x4<T, defaultp> Result(static_cast<T>(0));

	xorps	xmm0, xmm0
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 424  : 		Result[0][0] = (static_cast<T>(2) * zNear) / (right - left);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR zNear$[rsp]
	movss	xmm1, DWORD PTR right$[rsp]
	subss	xmm1, DWORD PTR left$[rsp]
	divss	xmm0, xmm1
	movss	DWORD PTR tv82[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv82[rsp]
	movss	DWORD PTR [rax], xmm0

; 425  : 		Result[1][1] = (static_cast<T>(2) * zNear) / (top - bottom);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR zNear$[rsp]
	movss	xmm1, DWORD PTR top$[rsp]
	subss	xmm1, DWORD PTR bottom$[rsp]
	divss	xmm0, xmm1
	movss	DWORD PTR tv91[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv91[rsp]
	movss	DWORD PTR [rax], xmm0

; 426  : 		Result[2][2] = ep - static_cast<T>(1);

	movss	xmm0, DWORD PTR ep$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv130[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv130[rsp]
	movss	DWORD PTR [rax], xmm0

; 427  : 		Result[2][3] = static_cast<T>(-1);

	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax], xmm0

; 428  : 		Result[3][2] = (ep - static_cast<T>(2)) * zNear;

	movss	xmm0, DWORD PTR ep$[rsp]
	subss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR zNear$[rsp]
	movss	DWORD PTR tv144[rsp], xmm0
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv144[rsp]
	movss	DWORD PTR [rax], xmm0

; 429  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 430  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z ENDP ; glm::tweakedInfinitePerspective<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_transform.inl
;	COMDAT ??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMM@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
fovy$ = 72
aspect$ = 80
zNear$ = 88
??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMM@Z PROC ; glm::tweakedInfinitePerspective<float>, COMDAT

; 434  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 435  : 		return tweakedInfinitePerspective(fovy, aspect, zNear, epsilon<T>());

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR zNear$[rsp]
	movss	xmm2, DWORD PTR aspect$[rsp]
	movss	xmm1, DWORD PTR fovy$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z ; glm::tweakedInfinitePerspective<float>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 436  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMM@Z ENDP ; glm::tweakedInfinitePerspective<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_transform.cpp
_TEXT	SEGMENT
Error$ = 48
ProjectionA$ = 80
ProjectionB$ = 176
__$ArrayPad$ = 256
?test_tweakedInfinitePerspective@@YAHXZ PROC		; test_tweakedInfinitePerspective

; 23   : {

$LN3:
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 24   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 25   : 
; 26   : 	glm::mat4 ProjectionA = glm::tweakedInfinitePerspective(45.f, 640.f/480.f, 1.0f);

	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3faaaaab
	movss	xmm1, DWORD PTR __real@42340000
	lea	rcx, QWORD PTR ProjectionA$[rsp]
	call	??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMM@Z ; glm::tweakedInfinitePerspective<float>

; 27   : 	glm::mat4 ProjectionB = glm::tweakedInfinitePerspective(45.f, 640.f/480.f, 1.0f, 0.001f);

	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3faaaaab
	movss	xmm1, DWORD PTR __real@42340000
	lea	rcx, QWORD PTR ProjectionB$[rsp]
	call	??$tweakedInfinitePerspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z ; glm::tweakedInfinitePerspective<float>

; 28   : 
; 29   : 
; 30   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 31   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_tweakedInfinitePerspective@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 272				; 00000110H
	pop	rdi
	ret	0
?test_tweakedInfinitePerspective@@YAHXZ ENDP		; test_tweakedInfinitePerspective
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_transform.inl
;	COMDAT ??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 48
Temp$ = 136
$T5 = 176
$T6 = 248
$T7 = 252
tv84 = 264
tv94 = 268
tv131 = 272
tv156 = 276
__$ArrayPad$ = 280
__$ReturnUdt$ = 320
center$ = 328
delta$ = 336
viewport$ = 344
??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z PROC ; glm::pickMatrix<float,0,int>, COMDAT

; 493  : 	{

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+320]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 494  : 		assert(delta.x > static_cast<T>(0) && delta.y > static_cast<T>(0));

	mov	rax, QWORD PTR delta$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@pickMatrix
	mov	rax, QWORD PTR delta$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN6@pickMatrix
$LN5@pickMatrix:
	mov	r8d, 494				; 000001eeH
	lea	rdx, OFFSET FLAT:??_C@_1LO@ODLBCLDC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1HG@EANPNFE@?$AAd?$AAe?$AAl?$AAt?$AAa?$AA?4?$AAx?$AA?5?$AA?$DO?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@pickMatrix:

; 495  : 		tmat4x4<T, P> Result(static_cast<T>(1));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T6[rsp], xmm0
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 496  : 
; 497  : 		if(!(delta.x > static_cast<T>(0) && delta.y > static_cast<T>(0)))

	mov	rax, QWORD PTR delta$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@pickMatrix
	mov	rax, QWORD PTR delta$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN2@pickMatrix
$LN3@pickMatrix:

; 498  : 			return Result; // Error

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@pickMatrix
$LN2@pickMatrix:

; 499  : 
; 500  : 		tvec3<T, P> Temp(

	mov	edx, 3
	mov	rcx, QWORD PTR viewport$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	cvtsi2ss xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv84[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR viewport$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR center$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv84[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR delta$[rsp]
	divss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv94[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR viewport$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	cvtsi2ss xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv131[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR viewport$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR center$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv131[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR delta$[rsp]
	divss	xmm0, DWORD PTR [rax]
	xorps	xmm3, xmm3
	movss	xmm1, DWORD PTR tv94[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR Temp$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 501  : 			(static_cast<T>(viewport[2]) - static_cast<T>(2) * (center.x - static_cast<T>(viewport[0]))) / delta.x,
; 502  : 			(static_cast<T>(viewport[3]) - static_cast<T>(2) * (center.y - static_cast<T>(viewport[1]))) / delta.y,
; 503  : 			static_cast<T>(0));
; 504  : 
; 505  : 		// Translate and scale the picked region to the entire window
; 506  : 		Result = translate(Result, Temp);

	lea	r8, QWORD PTR Temp$[rsp]
	lea	rdx, QWORD PTR Result$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z ; glm::translate<float,0>
	lea	rcx, QWORD PTR Result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 507  : 		return scale(Result, tvec3<T, P>(static_cast<T>(viewport[2]) / delta.x, static_cast<T>(viewport[3]) / delta.y, static_cast<T>(1)));

	mov	edx, 3
	mov	rcx, QWORD PTR viewport$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR delta$[rsp]
	divss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv156[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR viewport$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR delta$[rsp]
	divss	xmm0, DWORD PTR [rax]
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR tv156[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Result$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$scale@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z ; glm::scale<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@pickMatrix:

; 508  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z ENDP ; glm::pickMatrix<float,0,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_transform.cpp
_TEXT	SEGMENT
Error$ = 48
Pick$ = 80
$T4 = 160
$T5 = 176
$T6 = 184
tv66 = 192
tv73 = 200
__$ArrayPad$ = 208
?test_pick@@YAHXZ PROC					; test_pick

; 14   : {

$LN3:
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 15   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 16   : 
; 17   : 	glm::mat4 Pick = glm::pickMatrix(glm::vec2(1, 2), glm::vec2(3, 4), glm::ivec4(0, 0, 320, 240));

	mov	DWORD PTR [rsp+32], 240			; 000000f0H
	mov	r9d, 320				; 00000140H
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8d, 4
	mov	edx, 3
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv73[rsp], rax
	mov	r8d, 2
	mov	edx, 1
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv73[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Pick$[rsp]
	call	??$pickMatrix@M$0A@H@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBU?$tvec4@H$0A@@0@@Z ; glm::pickMatrix<float,0,int>

; 18   : 
; 19   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 20   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_pick@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
?test_pick@@YAHXZ ENDP					; test_pick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_transform.inl
;	COMDAT ??$perspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
fovy$ = 72
aspect$ = 80
zNear$ = 88
zFar$ = 96
??$perspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z PROC ; glm::perspective<float>, COMDAT

; 249  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 250  : #		if GLM_COORDINATE_SYSTEM == GLM_LEFT_HANDED
; 251  : 			return perspectiveLH(fovy, aspect, zNear, zFar);
; 252  : #		else
; 253  : 			return perspectiveRH(fovy, aspect, zNear, zFar);

	movss	xmm0, DWORD PTR zFar$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR zNear$[rsp]
	movss	xmm2, DWORD PTR aspect$[rsp]
	movss	xmm1, DWORD PTR fovy$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$perspectiveRH@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z ; glm::perspectiveRH<float>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 254  : #		endif
; 255  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$perspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z ENDP ; glm::perspective<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$pi@M@glm@@YAMXZ
_TEXT	SEGMENT
??$pi@M@glm@@YAMXZ PROC					; glm::pi<float>, COMDAT

; 28   : 	{

$LN3:
	push	rdi
	sub	rsp, 16

; 29   : 		return genType(3.14159265358979323846264338327950288);

	movss	xmm0, DWORD PTR __real@40490fdb

; 30   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$pi@M@glm@@YAMXZ ENDP					; glm::pi<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
s$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 50   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 55   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 46   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_transform.cpp
_TEXT	SEGMENT
Error$ = 48
Projection$ = 80
__$ArrayPad$ = 160
?test_perspective@@YAHXZ PROC				; test_perspective

; 5    : {

$LN3:
	push	rdi
	sub	rsp, 176				; 000000b0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 6    : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 7    : 
; 8    : 	glm::mat4 Projection = glm::perspective(glm::pi<float>() * 0.25f, 4.0f / 3.0f, 0.1f, 100.0f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	xmm1, DWORD PTR __real@42c80000
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR __real@3dcccccd
	movss	xmm2, DWORD PTR __real@3faaaaab
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR Projection$[rsp]
	call	??$perspective@M@glm@@YA?AU?$tmat4x4@M$0A@@0@MMMM@Z ; glm::perspective<float>

; 9    : 
; 10   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 11   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_perspective@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?test_perspective@@YAHXZ ENDP				; test_perspective
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?tan@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?tan@@YAMM@Z PROC					; tan, COMDAT

; 268  : _NODISCARD _Check_return_ inline float tan(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 269  :     return _CSTD tanf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_tanf

; 270  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?tan@@YAMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?epsilon@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?epsilon@?$numeric_limits@M@std@@SAMXZ PROC		; std::numeric_limits<float>::epsilon, COMDAT

; 872  :     _NODISCARD static constexpr float epsilon() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 873  :         return FLT_EPSILON;

	movss	xmm0, DWORD PTR __real@34000000

; 874  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?epsilon@?$numeric_limits@M@std@@SAMXZ ENDP		; std::numeric_limits<float>::epsilon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
tv67 = 40
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rsp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
