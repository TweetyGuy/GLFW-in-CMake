; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?test_mat2x2_row_set@@YAHXZ			; test_mat2x2_row_set
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@XZ			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	?length@?$tmat2x2@M$0A@@glm@@SAHXZ		; glm::tmat2x2<float,0>::length
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	?length@?$tmat3x4@M$0A@@glm@@SAHXZ		; glm::tmat3x4<float,0>::length
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	?length@?$tmat4x2@M$0A@@glm@@SAHXZ		; glm::tmat4x2<float,0>::length
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	?length@?$tmat2x4@M$0A@@glm@@SAHXZ		; glm::tmat2x4<float,0>::length
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	?length@?$tmat3x2@M$0A@@glm@@SAHXZ		; glm::tmat3x2<float,0>::length
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	?length@?$tmat2x3@M$0A@@glm@@SAHXZ		; glm::tmat2x3<float,0>::length
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	?length@?$tmat4x3@M$0A@@glm@@SAHXZ		; glm::tmat4x3<float,0>::length
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x2<float,0> >
PUBLIC	??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z ; glm::row<glm::tmat2x2<float,0> >
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?test_mat2x2_col_set@@YAHXZ			; test_mat2x2_col_set
PUBLIC	??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat2x2<float,0> >
PUBLIC	??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z ; glm::column<glm::tmat2x2<float,0> >
PUBLIC	?test_mat2x3_row_set@@YAHXZ			; test_mat2x3_row_set
PUBLIC	??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x3<float,0> >
PUBLIC	??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z ; glm::row<glm::tmat2x3<float,0> >
PUBLIC	?test_mat2x3_col_set@@YAHXZ			; test_mat2x3_col_set
PUBLIC	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
PUBLIC	??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat2x3<float,0> >
PUBLIC	??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z ; glm::column<glm::tmat2x3<float,0> >
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?test_mat2x4_row_set@@YAHXZ			; test_mat2x4_row_set
PUBLIC	??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x4<float,0> >
PUBLIC	??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z ; glm::row<glm::tmat2x4<float,0> >
PUBLIC	?test_mat2x4_col_set@@YAHXZ			; test_mat2x4_col_set
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat2x4<float,0> >
PUBLIC	??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z ; glm::column<glm::tmat2x4<float,0> >
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?test_mat3x2_row_set@@YAHXZ			; test_mat3x2_row_set
PUBLIC	??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x2<float,0> >
PUBLIC	??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z ; glm::row<glm::tmat3x2<float,0> >
PUBLIC	?test_mat3x2_col_set@@YAHXZ			; test_mat3x2_col_set
PUBLIC	??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat3x2<float,0> >
PUBLIC	??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z ; glm::column<glm::tmat3x2<float,0> >
PUBLIC	?test_mat3x3_row_set@@YAHXZ			; test_mat3x3_row_set
PUBLIC	??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x3<float,0> >
PUBLIC	??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z ; glm::row<glm::tmat3x3<float,0> >
PUBLIC	?test_mat3x3_col_set@@YAHXZ			; test_mat3x3_col_set
PUBLIC	??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat3x3<float,0> >
PUBLIC	??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z ; glm::column<glm::tmat3x3<float,0> >
PUBLIC	?test_mat3x4_row_set@@YAHXZ			; test_mat3x4_row_set
PUBLIC	??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x4<float,0> >
PUBLIC	??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z ; glm::row<glm::tmat3x4<float,0> >
PUBLIC	?test_mat3x4_col_set@@YAHXZ			; test_mat3x4_col_set
PUBLIC	??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat3x4<float,0> >
PUBLIC	??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z ; glm::column<glm::tmat3x4<float,0> >
PUBLIC	?test_mat4x2_row_set@@YAHXZ			; test_mat4x2_row_set
PUBLIC	??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x2<float,0> >
PUBLIC	??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z ; glm::row<glm::tmat4x2<float,0> >
PUBLIC	?test_mat4x2_col_set@@YAHXZ			; test_mat4x2_col_set
PUBLIC	??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat4x2<float,0> >
PUBLIC	??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z ; glm::column<glm::tmat4x2<float,0> >
PUBLIC	?test_mat4x3_row_set@@YAHXZ			; test_mat4x3_row_set
PUBLIC	??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x3<float,0> >
PUBLIC	??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z ; glm::row<glm::tmat4x3<float,0> >
PUBLIC	?test_mat4x3_col_set@@YAHXZ			; test_mat4x3_col_set
PUBLIC	??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat4x3<float,0> >
PUBLIC	??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z ; glm::column<glm::tmat4x3<float,0> >
PUBLIC	?test_mat4x4_row_set@@YAHXZ			; test_mat4x4_row_set
PUBLIC	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x4<float,0> >
PUBLIC	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::row<glm::tmat4x4<float,0> >
PUBLIC	?test_mat4x4_col_set@@YAHXZ			; test_mat4x4_col_set
PUBLIC	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat4x4<float,0> >
PUBLIC	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::column<glm::tmat4x4<float,0> >
PUBLIC	?test_mat4x4_row_get@@YAHXZ			; test_mat4x4_row_get
PUBLIC	?test_mat4x4_col_get@@YAHXZ			; test_mat4x4_col_get
PUBLIC	main
PUBLIC	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z		; glm::tvec2<float,0>::tvec2<float,0><float,int>
PUBLIC	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z		; glm::tvec2<float,0>::tvec2<float,0><int,float>
PUBLIC	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
PUBLIC	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
PUBLIC	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call
PUBLIC	??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ ; `string'
PUBLIC	??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ ; `string'
PUBLIC	??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	__real@3f800000
EXTRN	__imp__wassert:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat2x2_row_set@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+490
	DD	imagerel $unwind$?test_mat2x2_row_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+256
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+209
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+205
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+173
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+331
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+208
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+262
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+325
	DD	imagerel $unwind$??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z DD imagerel $LN8
	DD	imagerel $LN8+246
	DD	imagerel $unwind$??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+85
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat2x2_col_set@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+490
	DD	imagerel $unwind$?test_mat2x2_col_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+254
	DD	imagerel $unwind$??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z DD imagerel $LN5
	DD	imagerel $LN5+102
	DD	imagerel $unwind$??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat2x3_row_set@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+684
	DD	imagerel $unwind$?test_mat2x3_row_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+325
	DD	imagerel $unwind$??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z DD imagerel $LN8
	DD	imagerel $LN8+246
	DD	imagerel $unwind$??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat2x3_col_set@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+514
	DD	imagerel $unwind$?test_mat2x3_col_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+248
	DD	imagerel $unwind$??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat2x4_row_set@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+881
	DD	imagerel $unwind$?test_mat2x4_row_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+325
	DD	imagerel $unwind$??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z DD imagerel $LN8
	DD	imagerel $LN8+246
	DD	imagerel $unwind$??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat2x4_col_set@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+549
	DD	imagerel $unwind$?test_mat2x4_col_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+248
	DD	imagerel $unwind$??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat3x2_row_set@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+514
	DD	imagerel $unwind$?test_mat3x2_row_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+325
	DD	imagerel $unwind$??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z DD imagerel $LN8
	DD	imagerel $LN8+264
	DD	imagerel $unwind$??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat3x2_col_set@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+684
	DD	imagerel $unwind$?test_mat3x2_col_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+254
	DD	imagerel $unwind$??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z DD imagerel $LN5
	DD	imagerel $LN5+102
	DD	imagerel $unwind$??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat3x3_row_set@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+723
	DD	imagerel $unwind$?test_mat3x3_row_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+325
	DD	imagerel $unwind$??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z DD imagerel $LN8
	DD	imagerel $LN8+264
	DD	imagerel $unwind$??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat3x3_col_set@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+723
	DD	imagerel $unwind$?test_mat3x3_col_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+248
	DD	imagerel $unwind$??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat3x4_row_set@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+929
	DD	imagerel $unwind$?test_mat3x4_row_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+331
	DD	imagerel $unwind$??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z DD imagerel $LN8
	DD	imagerel $LN8+264
	DD	imagerel $unwind$??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat3x4_col_set@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+774
	DD	imagerel $unwind$?test_mat3x4_col_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+254
	DD	imagerel $unwind$??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat4x2_row_set@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+549
	DD	imagerel $unwind$?test_mat4x2_row_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+325
	DD	imagerel $unwind$??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z DD imagerel $LN8
	DD	imagerel $LN8+264
	DD	imagerel $unwind$??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat4x2_col_set@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+881
	DD	imagerel $unwind$?test_mat4x2_col_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+254
	DD	imagerel $unwind$??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z DD imagerel $LN5
	DD	imagerel $LN5+102
	DD	imagerel $unwind$??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat4x3_row_set@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+791
	DD	imagerel $unwind$?test_mat4x3_row_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+331
	DD	imagerel $unwind$??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z DD imagerel $LN8
	DD	imagerel $LN8+264
	DD	imagerel $unwind$??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat4x3_col_set@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+946
	DD	imagerel $unwind$?test_mat4x3_col_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+254
	DD	imagerel $unwind$??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat4x4_row_set@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+1013
	DD	imagerel $unwind$?test_mat4x4_row_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+343
	DD	imagerel $unwind$??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z DD imagerel $LN8
	DD	imagerel $LN8+264
	DD	imagerel $unwind$??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat4x4_col_set@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+1013
	DD	imagerel $unwind$?test_mat4x4_col_set@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+260
	DD	imagerel $unwind$??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat4x4_row_get@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+617
	DD	imagerel $unwind$?test_mat4x4_row_get@@YAHXZ
$pdata$?test_mat4x4_col_get@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+617
	DD	imagerel $unwind$?test_mat4x4_col_get@@YAHXZ
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+364
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
CONST	SEGMENT
??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ DB 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 'm', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n'
	DB	00H, 'g', 00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
CONST	SEGMENT
??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ DB 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 'm', 00H, '[', 00H, '0', 00H, ']', 00H, '.'
	DB	00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	'(', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'g', 00H, 't', 00H
	DB	'c', 00H, '\', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'x', 00H, '_', 00H, 'a', 00H, 'c', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 's', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0eaH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD 044819H
	DD	013011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::column<glm::tmat4x4<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc DD 030H ; glm::column<glm::tmat4x4<float,0> >
	DD	040H
	DQ	FLAT:??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::column<glm::tmat4x4<float,0> >
	DD	00H
	DQ	FLAT:??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z$rtcName$0 DB 052H ; glm::row<glm::tmat4x4<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat4x4<float,0> >
	DD	010H
	DQ	FLAT:??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z$rtcName$0
	ORG $+48
??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z$rtcFrameData DD 01H ; glm::row<glm::tmat4x4<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	013dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD 044819H
	DD	013011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	088H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::row<glm::tmat4x4<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc DD 030H ; glm::row<glm::tmat4x4<float,0> >
	DD	040H
	DQ	FLAT:??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::row<glm::tmat4x4<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0e7H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD 044519H
	DD	011011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::column<glm::tmat4x3<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::column<glm::tmat4x3<float,0> >
	DD	030H
	DQ	FLAT:??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::column<glm::tmat4x3<float,0> >
	DD	00H
	DQ	FLAT:??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z$rtcName$0 DB 052H ; glm::row<glm::tmat4x3<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat4x3<float,0> >
	DD	010H
	DQ	FLAT:??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z$rtcName$0
	ORG $+48
??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z$rtcFrameData DD 01H ; glm::row<glm::tmat4x3<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0134H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD 044519H
	DD	011011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	078H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::row<glm::tmat4x3<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat4x3<float,0> >
	DD	030H
	DQ	FLAT:??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::row<glm::tmat4x3<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03dH
	DB	0eaH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD 034219H
	DD	07016e21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::column<glm::tmat4x2<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::column<glm::tmat4x2<float,0> >
	DD	020H
	DQ	FLAT:??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::column<glm::tmat4x2<float,0> >
	DD	00H
	DQ	FLAT:??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z$rtcName$0 DB 052H ; glm::row<glm::tmat4x2<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat4x2<float,0> >
	DD	010H
	DQ	FLAT:??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z$rtcName$0
	ORG $+48
??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z$rtcFrameData DD 01H ; glm::row<glm::tmat4x2<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03dH
	DW	0131H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD 034219H
	DD	07016e21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::row<glm::tmat4x2<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat4x2<float,0> >
	DD	020H
	DQ	FLAT:??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::row<glm::tmat4x2<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0e7H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD 044519H
	DD	011011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::column<glm::tmat3x4<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::column<glm::tmat3x4<float,0> >
	DD	030H
	DQ	FLAT:??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::column<glm::tmat3x4<float,0> >
	DD	00H
	DQ	FLAT:??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z$rtcName$0 DB 052H ; glm::row<glm::tmat3x4<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat3x4<float,0> >
	DD	0cH
	DQ	FLAT:??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z$rtcName$0
	ORG $+48
??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z$rtcFrameData DD 01H ; glm::row<glm::tmat3x4<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0134H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD 044519H
	DD	011011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	078H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::row<glm::tmat3x4<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat3x4<float,0> >
	DD	030H
	DQ	FLAT:??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::row<glm::tmat3x4<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03dH
	DB	0e4H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD 034219H
	DD	07016e21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::column<glm::tmat3x3<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::column<glm::tmat3x3<float,0> >
	DD	024H
	DQ	FLAT:??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::column<glm::tmat3x3<float,0> >
	DD	00H
	DQ	FLAT:??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z$rtcName$0 DB 052H ; glm::row<glm::tmat3x3<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat3x3<float,0> >
	DD	0cH
	DQ	FLAT:??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z$rtcName$0
	ORG $+48
??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z$rtcFrameData DD 01H ; glm::row<glm::tmat3x3<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03dH
	DW	0131H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD 034219H
	DD	07016e21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::row<glm::tmat3x3<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat3x3<float,0> >
	DD	024H
	DQ	FLAT:??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::row<glm::tmat3x3<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03dH
	DB	0eaH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD 034219H
	DD	07016c21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::column<glm::tmat3x2<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::column<glm::tmat3x2<float,0> >
	DD	018H
	DQ	FLAT:??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::column<glm::tmat3x2<float,0> >
	DD	00H
	DQ	FLAT:??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z$rtcName$0 DB 052H ; glm::row<glm::tmat3x2<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat3x2<float,0> >
	DD	0cH
	DQ	FLAT:??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z$rtcName$0
	ORG $+48
??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z$rtcFrameData DD 01H ; glm::row<glm::tmat3x2<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03dH
	DW	0131H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD 034219H
	DD	07016c21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::row<glm::tmat3x2<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat3x2<float,0> >
	DD	018H
	DQ	FLAT:??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::row<glm::tmat3x2<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03dH
	DB	0e4H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z DD 034219H
	DD	07016e21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::column<glm::tmat2x4<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::column<glm::tmat2x4<float,0> >
	DD	020H
	DQ	FLAT:??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::column<glm::tmat2x4<float,0> >
	DD	00H
	DQ	FLAT:??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z DD 022a01H
	DD	070107214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z$rtcName$0 DB 052H ; glm::row<glm::tmat2x4<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat2x4<float,0> >
	DD	08H
	DQ	FLAT:??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z$rtcName$0
	ORG $+48
??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z$rtcFrameData DD 01H ; glm::row<glm::tmat2x4<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03dH
	DW	0131H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD 034219H
	DD	07016e21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::row<glm::tmat2x4<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat2x4<float,0> >
	DD	020H
	DQ	FLAT:??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::row<glm::tmat2x4<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03dH
	DB	0e4H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z DD 034219H
	DD	07016c21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::column<glm::tmat2x3<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::column<glm::tmat2x3<float,0> >
	DD	018H
	DQ	FLAT:??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::column<glm::tmat2x3<float,0> >
	DD	00H
	DQ	FLAT:??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z DD 022a01H
	DD	070107214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z$rtcName$0 DB 052H ; glm::row<glm::tmat2x3<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat2x3<float,0> >
	DD	08H
	DQ	FLAT:??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z$rtcName$0
	ORG $+48
??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z$rtcFrameData DD 01H ; glm::row<glm::tmat2x3<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03dH
	DW	0131H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD 034219H
	DD	07016c21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::row<glm::tmat2x3<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat2x3<float,0> >
	DD	018H
	DQ	FLAT:??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::row<glm::tmat2x3<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03dH
	DB	0eaH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD 034219H
	DD	07016c21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::column<glm::tmat2x2<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::column<glm::tmat2x2<float,0> >
	DD	010H
	DQ	FLAT:??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::column<glm::tmat2x2<float,0> >
	DD	00H
	DQ	FLAT:??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z DD 022a01H
	DD	070107214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z$rtcName$0 DB 052H ; glm::row<glm::tmat2x2<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat2x2<float,0> >
	DD	08H
	DQ	FLAT:??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z$rtcName$0
	ORG $+48
??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z$rtcFrameData DD 01H ; glm::row<glm::tmat2x2<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03dH
	DW	0131H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z DD 034219H
	DD	07016c21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::row<glm::tmat2x2<float,0> >
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::row<glm::tmat2x2<float,0> >
	DD	010H
	DQ	FLAT:??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::row<glm::tmat2x2<float,0> >
	DD	00H
	DQ	FLAT:??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700da211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z DD 021001H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700dc211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z DD 021001H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700dc211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z DD 021001H
	DD	0700c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat4x4_col_get@@YAHXZ
	DD	024H
	DD	0250H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat4x4_row_get@@YAHXZ
	DD	024H
	DD	0250H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat4x4_col_set@@YAHXZ
	DD	025H
	DD	03dbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat4x4_row_set@@YAHXZ
	DD	025H
	DD	03dbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat4x3_col_set@@YAHXZ
	DD	025H
	DD	0398H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat4x3_row_set@@YAHXZ
	DD	025H
	DD	02fdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat4x2_col_set@@YAHXZ
	DD	025H
	DD	0357H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat4x2_row_set@@YAHXZ
	DD	025H
	DD	020bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat3x4_col_set@@YAHXZ
	DD	025H
	DD	02ecH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat3x4_row_set@@YAHXZ
	DD	025H
	DD	0387H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat3x3_col_set@@YAHXZ
	DD	025H
	DD	02b9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat3x3_row_set@@YAHXZ
	DD	025H
	DD	02b9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat3x2_col_set@@YAHXZ
	DD	025H
	DD	0292H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat3x2_row_set@@YAHXZ
	DD	025H
	DD	01e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat2x4_col_set@@YAHXZ
	DD	025H
	DD	020bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat2x4_row_set@@YAHXZ
	DD	025H
	DD	0357H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat2x3_col_set@@YAHXZ
	DD	025H
	DD	01e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat2x3_row_set@@YAHXZ
	DD	025H
	DD	0292H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat2x2_col_set@@YAHXZ
	DD	025H
	DD	01d0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat2x2_row_set@@YAHXZ
	DD	025H
	DD	01d0H
voltbl	ENDS
xdata	SEGMENT
$unwind$?test_mat2x2_row_set@@YAHXZ DD 042d19H
	DD	01d010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?test_mat2x2_col_set@@YAHXZ DD 042d19H
	DD	01d010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?test_mat2x3_row_set@@YAHXZ DD 042d19H
	DD	027010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$?test_mat2x3_col_set@@YAHXZ DD 042d19H
	DD	021010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
$unwind$?test_mat2x4_row_set@@YAHXZ DD 042d19H
	DD	035010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$?test_mat2x4_col_set@@YAHXZ DD 042d19H
	DD	02b010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0140H
$unwind$?test_mat3x2_row_set@@YAHXZ DD 042d19H
	DD	021010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
$unwind$?test_mat3x2_col_set@@YAHXZ DD 042d19H
	DD	027010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$?test_mat3x3_row_set@@YAHXZ DD 042d19H
	DD	033010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0188H
$unwind$?test_mat3x3_col_set@@YAHXZ DD 042d19H
	DD	033010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0188H
$unwind$?test_mat3x4_row_set@@YAHXZ DD 042d19H
	DD	045010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0210H
$unwind$?test_mat3x4_col_set@@YAHXZ DD 042d19H
	DD	03f010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$?test_mat4x2_row_set@@YAHXZ DD 042d19H
	DD	02b010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0140H
$unwind$?test_mat4x2_col_set@@YAHXZ DD 042d19H
	DD	035010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$?test_mat4x3_row_set@@YAHXZ DD 042d19H
	DD	03f010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	01e8H
$unwind$?test_mat4x3_col_set@@YAHXZ DD 042d19H
	DD	045010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0218H
$unwind$?test_mat4x4_row_set@@YAHXZ DD 042d19H
	DD	059010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	02b0H
$unwind$?test_mat4x4_col_set@@YAHXZ DD 042d19H
	DD	059010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	02b0H
$unwind$?test_mat4x4_row_get@@YAHXZ DD 032c19H
	DD	0380109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	01b8H
$unwind$?test_mat4x4_col_get@@YAHXZ DD 032c19H
	DD	0380109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	01b8H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
?test_mat2x2_row_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat2x2_row_set
	DB	00H
	ORG $+14
?test_mat2x2_row_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat2x2_row_set
	DD	010H
	DQ	FLAT:?test_mat2x2_row_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat2x2_row_set@@YAHXZ$rtcFrameData DD 01H		; test_mat2x2_row_set
	DD	00H
	DQ	FLAT:?test_mat2x2_row_set@@YAHXZ$rtcVarDesc
?test_mat2x2_col_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat2x2_col_set
	DB	00H
	ORG $+6
?test_mat2x2_col_set@@YAHXZ$rtcFrameData DD 01H		; test_mat2x2_col_set
	DD	00H
	DQ	FLAT:?test_mat2x2_col_set@@YAHXZ$rtcVarDesc
?test_mat2x3_row_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat2x3_row_set
	DB	00H
	ORG $+6
?test_mat2x2_col_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat2x2_col_set
	DD	010H
	DQ	FLAT:?test_mat2x2_col_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat2x3_row_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat2x3_row_set
	DD	018H
	DQ	FLAT:?test_mat2x3_row_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat2x3_row_set@@YAHXZ$rtcFrameData DD 01H		; test_mat2x3_row_set
	DD	00H
	DQ	FLAT:?test_mat2x3_row_set@@YAHXZ$rtcVarDesc
?test_mat2x3_col_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat2x3_col_set
	DB	00H
	ORG $+6
?test_mat2x3_col_set@@YAHXZ$rtcFrameData DD 01H		; test_mat2x3_col_set
	DD	00H
	DQ	FLAT:?test_mat2x3_col_set@@YAHXZ$rtcVarDesc
?test_mat2x4_row_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat2x4_row_set
	DB	00H
	ORG $+6
?test_mat2x3_col_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat2x3_col_set
	DD	018H
	DQ	FLAT:?test_mat2x3_col_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat2x4_row_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat2x4_row_set
	DD	020H
	DQ	FLAT:?test_mat2x4_row_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat2x4_row_set@@YAHXZ$rtcFrameData DD 01H		; test_mat2x4_row_set
	DD	00H
	DQ	FLAT:?test_mat2x4_row_set@@YAHXZ$rtcVarDesc
?test_mat2x4_col_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat2x4_col_set
	DB	00H
	ORG $+6
?test_mat2x4_col_set@@YAHXZ$rtcFrameData DD 01H		; test_mat2x4_col_set
	DD	00H
	DQ	FLAT:?test_mat2x4_col_set@@YAHXZ$rtcVarDesc
?test_mat3x2_row_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat3x2_row_set
	DB	00H
	ORG $+6
?test_mat2x4_col_set@@YAHXZ$rtcVarDesc DD 048H		; test_mat2x4_col_set
	DD	020H
	DQ	FLAT:?test_mat2x4_col_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat3x2_row_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat3x2_row_set
	DD	018H
	DQ	FLAT:?test_mat3x2_row_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat3x2_row_set@@YAHXZ$rtcFrameData DD 01H		; test_mat3x2_row_set
	DD	00H
	DQ	FLAT:?test_mat3x2_row_set@@YAHXZ$rtcVarDesc
?test_mat3x2_col_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat3x2_col_set
	DB	00H
	ORG $+6
?test_mat3x2_col_set@@YAHXZ$rtcFrameData DD 01H		; test_mat3x2_col_set
	DD	00H
	DQ	FLAT:?test_mat3x2_col_set@@YAHXZ$rtcVarDesc
?test_mat3x3_row_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat3x3_row_set
	DB	00H
	ORG $+6
?test_mat3x2_col_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat3x2_col_set
	DD	018H
	DQ	FLAT:?test_mat3x2_col_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat3x3_row_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat3x3_row_set
	DD	024H
	DQ	FLAT:?test_mat3x3_row_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat3x3_row_set@@YAHXZ$rtcFrameData DD 01H		; test_mat3x3_row_set
	DD	00H
	DQ	FLAT:?test_mat3x3_row_set@@YAHXZ$rtcVarDesc
?test_mat3x3_col_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat3x3_col_set
	DB	00H
	ORG $+6
?test_mat3x3_col_set@@YAHXZ$rtcFrameData DD 01H		; test_mat3x3_col_set
	DD	00H
	DQ	FLAT:?test_mat3x3_col_set@@YAHXZ$rtcVarDesc
?test_mat3x4_row_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat3x4_row_set
	DB	00H
	ORG $+6
?test_mat3x3_col_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat3x3_col_set
	DD	024H
	DQ	FLAT:?test_mat3x3_col_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat3x4_row_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat3x4_row_set
	DD	030H
	DQ	FLAT:?test_mat3x4_row_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat3x4_row_set@@YAHXZ$rtcFrameData DD 01H		; test_mat3x4_row_set
	DD	00H
	DQ	FLAT:?test_mat3x4_row_set@@YAHXZ$rtcVarDesc
?test_mat3x4_col_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat3x4_col_set
	DB	00H
	ORG $+6
?test_mat3x4_col_set@@YAHXZ$rtcFrameData DD 01H		; test_mat3x4_col_set
	DD	00H
	DQ	FLAT:?test_mat3x4_col_set@@YAHXZ$rtcVarDesc
?test_mat4x2_row_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat4x2_row_set
	DB	00H
	ORG $+6
?test_mat3x4_col_set@@YAHXZ$rtcVarDesc DD 048H		; test_mat3x4_col_set
	DD	030H
	DQ	FLAT:?test_mat3x4_col_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat4x2_row_set@@YAHXZ$rtcVarDesc DD 048H		; test_mat4x2_row_set
	DD	020H
	DQ	FLAT:?test_mat4x2_row_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat4x2_row_set@@YAHXZ$rtcFrameData DD 01H		; test_mat4x2_row_set
	DD	00H
	DQ	FLAT:?test_mat4x2_row_set@@YAHXZ$rtcVarDesc
?test_mat4x2_col_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat4x2_col_set
	DB	00H
	ORG $+6
?test_mat4x2_col_set@@YAHXZ$rtcFrameData DD 01H		; test_mat4x2_col_set
	DD	00H
	DQ	FLAT:?test_mat4x2_col_set@@YAHXZ$rtcVarDesc
?test_mat4x3_row_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat4x3_row_set
	DB	00H
	ORG $+6
?test_mat4x2_col_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat4x2_col_set
	DD	020H
	DQ	FLAT:?test_mat4x2_col_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat4x3_row_set@@YAHXZ$rtcVarDesc DD 048H		; test_mat4x3_row_set
	DD	030H
	DQ	FLAT:?test_mat4x3_row_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat4x3_row_set@@YAHXZ$rtcFrameData DD 01H		; test_mat4x3_row_set
	DD	00H
	DQ	FLAT:?test_mat4x3_row_set@@YAHXZ$rtcVarDesc
?test_mat4x3_col_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat4x3_col_set
	DB	00H
	ORG $+6
?test_mat4x3_col_set@@YAHXZ$rtcFrameData DD 01H		; test_mat4x3_col_set
	DD	00H
	DQ	FLAT:?test_mat4x3_col_set@@YAHXZ$rtcVarDesc
?test_mat4x4_row_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat4x4_row_set
	DB	00H
	ORG $+6
?test_mat4x3_col_set@@YAHXZ$rtcVarDesc DD 038H		; test_mat4x3_col_set
	DD	030H
	DQ	FLAT:?test_mat4x3_col_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat4x4_row_set@@YAHXZ$rtcVarDesc DD 050H		; test_mat4x4_row_set
	DD	040H
	DQ	FLAT:?test_mat4x4_row_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat4x4_row_set@@YAHXZ$rtcFrameData DD 01H		; test_mat4x4_row_set
	DD	00H
	DQ	FLAT:?test_mat4x4_row_set@@YAHXZ$rtcVarDesc
?test_mat4x4_col_set@@YAHXZ$rtcName$0 DB 06dH		; test_mat4x4_col_set
	DB	00H
	ORG $+6
?test_mat4x4_col_set@@YAHXZ$rtcFrameData DD 01H		; test_mat4x4_col_set
	DD	00H
	DQ	FLAT:?test_mat4x4_col_set@@YAHXZ$rtcVarDesc
?test_mat4x4_row_get@@YAHXZ$rtcName$0 DB 06dH		; test_mat4x4_row_get
	DB	00H
	ORG $+6
?test_mat4x4_col_set@@YAHXZ$rtcVarDesc DD 050H		; test_mat4x4_col_set
	DD	040H
	DQ	FLAT:?test_mat4x4_col_set@@YAHXZ$rtcName$0
	ORG $+48
?test_mat4x4_row_get@@YAHXZ$rtcName$1 DB 041H		; test_mat4x4_row_get
	DB	00H
	ORG $+2
?test_mat4x4_row_get@@YAHXZ$rtcName$2 DB 042H		; test_mat4x4_row_get
	DB	00H
	ORG $+2
?test_mat4x4_row_get@@YAHXZ$rtcName$3 DB 043H		; test_mat4x4_row_get
	DB	00H
	ORG $+2
?test_mat4x4_row_get@@YAHXZ$rtcName$4 DB 044H		; test_mat4x4_row_get
	DB	00H
	ORG $+2
?test_mat4x4_row_get@@YAHXZ$rtcVarDesc DD 0138H		; test_mat4x4_row_get
	DD	010H
	DQ	FLAT:?test_mat4x4_row_get@@YAHXZ$rtcName$4
	DD	0108H
	DD	010H
	DQ	FLAT:?test_mat4x4_row_get@@YAHXZ$rtcName$3
	DD	0d8H
	DD	010H
	DQ	FLAT:?test_mat4x4_row_get@@YAHXZ$rtcName$2
	DD	0a8H
	DD	010H
	DQ	FLAT:?test_mat4x4_row_get@@YAHXZ$rtcName$1
	DD	050H
	DD	040H
	DQ	FLAT:?test_mat4x4_row_get@@YAHXZ$rtcName$0
	ORG $+240
?test_mat4x4_row_get@@YAHXZ$rtcFrameData DD 05H		; test_mat4x4_row_get
	DD	00H
	DQ	FLAT:?test_mat4x4_row_get@@YAHXZ$rtcVarDesc
?test_mat4x4_col_get@@YAHXZ$rtcName$0 DB 06dH		; test_mat4x4_col_get
	DB	00H
	ORG $+2
?test_mat4x4_col_get@@YAHXZ$rtcName$1 DB 041H		; test_mat4x4_col_get
	DB	00H
	ORG $+2
?test_mat4x4_col_get@@YAHXZ$rtcName$2 DB 042H		; test_mat4x4_col_get
	DB	00H
	ORG $+2
?test_mat4x4_col_get@@YAHXZ$rtcName$3 DB 043H		; test_mat4x4_col_get
	DB	00H
	ORG $+2
?test_mat4x4_col_get@@YAHXZ$rtcName$4 DB 044H		; test_mat4x4_col_get
	DB	00H
	ORG $+6
?test_mat4x4_col_get@@YAHXZ$rtcFrameData DD 05H		; test_mat4x4_col_get
	DD	00H
	DQ	FLAT:?test_mat4x4_col_get@@YAHXZ$rtcVarDesc
	ORG $+8
?test_mat4x4_col_get@@YAHXZ$rtcVarDesc DD 0138H		; test_mat4x4_col_get
	DD	010H
	DQ	FLAT:?test_mat4x4_col_get@@YAHXZ$rtcName$4
	DD	0108H
	DD	010H
	DQ	FLAT:?test_mat4x4_col_get@@YAHXZ$rtcName$3
	DD	0d8H
	DD	010H
	DQ	FLAT:?test_mat4x4_col_get@@YAHXZ$rtcName$2
	DD	0a8H
	DD	010H
	DQ	FLAT:?test_mat4x4_col_get@@YAHXZ$rtcName$1
	DD	050H
	DD	040H
	DQ	FLAT:?test_mat4x4_col_get@@YAHXZ$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 021901H
	DD	070155219H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
tv76 = 0
v1$ = 32
v2$ = 40
?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call, COMDAT

; 131  : 		{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 132  : 			return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z) && (v1.w == v2.w);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv76[rsp], 0
$LN4@call:
	movzx	eax, BYTE PTR tv76[rsp]

; 133  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT

; 204  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>, COMDAT

; 80   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,float>, COMDAT

; 66   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><float,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 355  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 356  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 357  : 
; 358  : 	Error += test_mat2x2_row_set();

	call	?test_mat2x2_row_set@@YAHXZ		; test_mat2x2_row_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 359  : 	Error += test_mat2x2_col_set();

	call	?test_mat2x2_col_set@@YAHXZ		; test_mat2x2_col_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 360  : 	Error += test_mat2x3_row_set();

	call	?test_mat2x3_row_set@@YAHXZ		; test_mat2x3_row_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 361  : 	Error += test_mat2x3_col_set();

	call	?test_mat2x3_col_set@@YAHXZ		; test_mat2x3_col_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 362  : 	Error += test_mat2x4_row_set();

	call	?test_mat2x4_row_set@@YAHXZ		; test_mat2x4_row_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 363  : 	Error += test_mat2x4_col_set();

	call	?test_mat2x4_col_set@@YAHXZ		; test_mat2x4_col_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 364  : 	Error += test_mat3x2_row_set();

	call	?test_mat3x2_row_set@@YAHXZ		; test_mat3x2_row_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 365  : 	Error += test_mat3x2_col_set();

	call	?test_mat3x2_col_set@@YAHXZ		; test_mat3x2_col_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 366  : 	Error += test_mat3x3_row_set();

	call	?test_mat3x3_row_set@@YAHXZ		; test_mat3x3_row_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 367  : 	Error += test_mat3x3_col_set();

	call	?test_mat3x3_col_set@@YAHXZ		; test_mat3x3_col_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 368  : 	Error += test_mat3x4_row_set();

	call	?test_mat3x4_row_set@@YAHXZ		; test_mat3x4_row_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 369  : 	Error += test_mat3x4_col_set();

	call	?test_mat3x4_col_set@@YAHXZ		; test_mat3x4_col_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 370  : 	Error += test_mat4x2_row_set();

	call	?test_mat4x2_row_set@@YAHXZ		; test_mat4x2_row_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 371  : 	Error += test_mat4x2_col_set();

	call	?test_mat4x2_col_set@@YAHXZ		; test_mat4x2_col_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 372  : 	Error += test_mat4x3_row_set();

	call	?test_mat4x3_row_set@@YAHXZ		; test_mat4x3_row_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 373  : 	Error += test_mat4x3_col_set();

	call	?test_mat4x3_col_set@@YAHXZ		; test_mat4x3_col_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 374  : 	Error += test_mat4x4_row_set();

	call	?test_mat4x4_row_set@@YAHXZ		; test_mat4x4_row_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 375  : 	Error += test_mat4x4_col_set();

	call	?test_mat4x4_col_set@@YAHXZ		; test_mat4x4_col_set
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 376  : 
; 377  : 	Error += test_mat4x4_row_get();

	call	?test_mat4x4_row_get@@YAHXZ		; test_mat4x4_row_get
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 378  : 	Error += test_mat4x4_col_get();

	call	?test_mat4x4_col_get@@YAHXZ		; test_mat4x4_col_get
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 379  : 
; 380  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 381  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 48
m$ = 80
A$ = 168
B$ = 216
C$ = 264
D$ = 312
$T8 = 352
$T9 = 356
$T10 = 372
$T11 = 388
$T12 = 404
tv80 = 420
tv128 = 424
tv144 = 428
tv160 = 432
__$ArrayPad$ = 440
?test_mat4x4_col_get@@YAHXZ PROC			; test_mat4x4_col_get

; 337  : {

$LN11:
	push	rdi
	sub	rsp, 448				; 000001c0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 338  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 339  : 
; 340  : 	glm::mat4 m(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 341  : 
; 342  : 	glm::vec4 A = glm::column(m, 0);

	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::column<glm::tmat4x4<float,0> >

; 343  : 	Error += A == glm::vec4(1, 0, 0, 0) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat4x
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN4@test_mat4x
$LN3@test_mat4x:
	mov	DWORD PTR tv80[rsp], 1
$LN4@test_mat4x:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 344  : 	glm::vec4 B = glm::column(m, 1);

	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::column<glm::tmat4x4<float,0> >

; 345  : 	Error += B == glm::vec4(0, 1, 0, 0) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR B$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat4x
	mov	DWORD PTR tv128[rsp], 0
	jmp	SHORT $LN6@test_mat4x
$LN5@test_mat4x:
	mov	DWORD PTR tv128[rsp], 1
$LN6@test_mat4x:
	mov	eax, DWORD PTR tv128[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 346  : 	glm::vec4 C = glm::column(m, 2);

	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::column<glm::tmat4x4<float,0> >

; 347  : 	Error += C == glm::vec4(0, 0, 1, 0) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR C$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat4x
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN8@test_mat4x
$LN7@test_mat4x:
	mov	DWORD PTR tv144[rsp], 1
$LN8@test_mat4x:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 348  : 	glm::vec4 D = glm::column(m, 3);

	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR D$[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::column<glm::tmat4x4<float,0> >

; 349  : 	Error += D == glm::vec4(0, 0, 0, 1) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR D$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_mat4x
	mov	DWORD PTR tv160[rsp], 0
	jmp	SHORT $LN10@test_mat4x
$LN9@test_mat4x:
	mov	DWORD PTR tv160[rsp], 1
$LN10@test_mat4x:
	mov	eax, DWORD PTR tv160[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 350  : 
; 351  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 352  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat4x4_col_get@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 448				; 000001c0H
	pop	rdi
	ret	0
?test_mat4x4_col_get@@YAHXZ ENDP			; test_mat4x4_col_get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 48
m$ = 80
A$ = 168
B$ = 216
C$ = 264
D$ = 312
$T8 = 352
$T9 = 356
$T10 = 372
$T11 = 388
$T12 = 404
tv80 = 420
tv128 = 424
tv144 = 428
tv160 = 432
__$ArrayPad$ = 440
?test_mat4x4_row_get@@YAHXZ PROC			; test_mat4x4_row_get

; 319  : {

$LN11:
	push	rdi
	sub	rsp, 448				; 000001c0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 320  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 321  : 
; 322  : 	glm::mat4 m(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 323  : 
; 324  : 	glm::vec4 A = glm::row(m, 0);

	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::row<glm::tmat4x4<float,0> >

; 325  : 	Error += A == glm::vec4(1, 0, 0, 0) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat4x
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN4@test_mat4x
$LN3@test_mat4x:
	mov	DWORD PTR tv80[rsp], 1
$LN4@test_mat4x:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 326  : 	glm::vec4 B = glm::row(m, 1);

	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::row<glm::tmat4x4<float,0> >

; 327  : 	Error += B == glm::vec4(0, 1, 0, 0) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR B$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat4x
	mov	DWORD PTR tv128[rsp], 0
	jmp	SHORT $LN6@test_mat4x
$LN5@test_mat4x:
	mov	DWORD PTR tv128[rsp], 1
$LN6@test_mat4x:
	mov	eax, DWORD PTR tv128[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 328  : 	glm::vec4 C = glm::row(m, 2);

	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::row<glm::tmat4x4<float,0> >

; 329  : 	Error += C == glm::vec4(0, 0, 1, 0) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR C$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat4x
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN8@test_mat4x
$LN7@test_mat4x:
	mov	DWORD PTR tv144[rsp], 1
$LN8@test_mat4x:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 330  : 	glm::vec4 D = glm::row(m, 3);

	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR D$[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::row<glm::tmat4x4<float,0> >

; 331  : 	Error += D == glm::vec4(0, 0, 0, 1) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR D$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_mat4x
	mov	DWORD PTR tv160[rsp], 0
	jmp	SHORT $LN10@test_mat4x
$LN9@test_mat4x:
	mov	DWORD PTR tv160[rsp], 1
$LN10@test_mat4x:
	mov	eax, DWORD PTR tv160[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 332  : 
; 333  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 334  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat4x4_row_get@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 448				; 000001c0H
	pop	rdi
	ret	0
?test_mat4x4_row_get@@YAHXZ ENDP			; test_mat4x4_row_get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
m$ = 72
index$ = 80
??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z PROC ; glm::column<glm::tmat4x4<float,0> >, COMDAT

; 58   : 	{

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H

; 59   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 59					; 0000003bH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 60   : 
; 61   : 		return m[index];

	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ENDP ; glm::column<glm::tmat4x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 48
__$ArrayPad$ = 128
__$ReturnUdt$ = 176
m$ = 184
index$ = 192
x$ = 200
??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z PROC ; glm::column<glm::tmat4x4<float,0> >, COMDAT

; 44   : 	{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 45   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 46   : 
; 47   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb

; 48   : 		Result[index] = x;

	mov	edx, DWORD PTR index$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rsi, QWORD PTR x$[rsp]
	mov	ecx, 16
	rep movsb

; 49   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::column<glm::tmat4x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 48
m$ = 80
$T4 = 160
$T5 = 224
$T6 = 288
$T7 = 352
$T8 = 424
$T9 = 428
$T10 = 444
$T11 = 460
$T12 = 476
$T13 = 492
$T14 = 508
$T15 = 524
$T16 = 540
$T17 = 556
$T18 = 572
$T19 = 588
$T20 = 604
tv148 = 624
tv161 = 632
tv165 = 640
tv178 = 648
tv182 = 656
tv195 = 664
tv199 = 672
tv212 = 680
__$ArrayPad$ = 688
?test_mat4x4_col_set@@YAHXZ PROC			; test_mat4x4_col_set

; 300  : {

$LN11:
	push	rsi
	push	rdi
	sub	rsp, 712				; 000002c8H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 166				; 000000a6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 301  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 302  : 
; 303  : 	glm::mat4 m(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 304  : 
; 305  : 	m = glm::column(m, 0, glm::vec4( 0,  1,  2,  3));

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat4x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 306  : 	m = glm::column(m, 1, glm::vec4( 4,  5,  6,  7));

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat4x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 307  : 	m = glm::column(m, 2, glm::vec4( 8,  9, 10, 11));

	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat4x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 308  : 	m = glm::column(m, 3, glm::vec4(12, 13, 14, 15));

	mov	DWORD PTR [rsp+32], 15
	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat4x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 309  : 
; 310  : 	Error += glm::column(m, 0) == glm::vec4( 0,  1,  2,  3) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv148[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::column<glm::tmat4x4<float,0> >
	mov	rcx, QWORD PTR tv148[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat4x
	mov	DWORD PTR tv161[rsp], 0
	jmp	SHORT $LN4@test_mat4x
$LN3@test_mat4x:
	mov	DWORD PTR tv161[rsp], 1
$LN4@test_mat4x:
	mov	eax, DWORD PTR tv161[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 311  : 	Error += glm::column(m, 1) == glm::vec4( 4,  5,  6,  7) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv165[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::column<glm::tmat4x4<float,0> >
	mov	rcx, QWORD PTR tv165[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat4x
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN6@test_mat4x
$LN5@test_mat4x:
	mov	DWORD PTR tv178[rsp], 1
$LN6@test_mat4x:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 312  : 	Error += glm::column(m, 2) == glm::vec4( 8,  9, 10, 11) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv182[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::column<glm::tmat4x4<float,0> >
	mov	rcx, QWORD PTR tv182[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat4x
	mov	DWORD PTR tv195[rsp], 0
	jmp	SHORT $LN8@test_mat4x
$LN7@test_mat4x:
	mov	DWORD PTR tv195[rsp], 1
$LN8@test_mat4x:
	mov	eax, DWORD PTR tv195[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 313  : 	Error += glm::column(m, 3) == glm::vec4(12, 13, 14, 15) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 15
	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv199[rsp], rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$column@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::column<glm::tmat4x4<float,0> >
	mov	rcx, QWORD PTR tv199[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_mat4x
	mov	DWORD PTR tv212[rsp], 0
	jmp	SHORT $LN10@test_mat4x
$LN9@test_mat4x:
	mov	DWORD PTR tv212[rsp], 1
$LN10@test_mat4x:
	mov	eax, DWORD PTR tv212[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 314  : 
; 315  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 316  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat4x4_col_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 712				; 000002c8H
	pop	rdi
	pop	rsi
	ret	0
?test_mat4x4_col_set@@YAHXZ ENDP			; test_mat4x4_col_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv84 = 72
__$ReturnUdt$ = 112
m$ = 120
index$ = 128
??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z PROC ; glm::row<glm::tmat4x4<float,0> >, COMDAT

; 28   : 	{

$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 29   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 29
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 30   : 
; 31   : 		typename genType::row_type Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@XZ		; glm::tvec4<float,0>::tvec4<float,0>

; 32   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 33   : 			Result[i] = m[i][index];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 34   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 35   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ENDP ; glm::row<glm::tmat4x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 48
i$4 = 116
tv84 = 128
__$ArrayPad$ = 136
__$ReturnUdt$ = 176
m$ = 184
index$ = 192
x$ = 200
??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z PROC ; glm::row<glm::tmat4x4<float,0> >, COMDAT

; 13   : 	{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 14   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 15   : 
; 16   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb

; 17   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 18   : 			Result[i][index] = x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 19   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 20   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::row<glm::tmat4x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 48
m$ = 80
$T4 = 160
$T5 = 224
$T6 = 288
$T7 = 352
$T8 = 424
$T9 = 428
$T10 = 444
$T11 = 460
$T12 = 476
$T13 = 492
$T14 = 508
$T15 = 524
$T16 = 540
$T17 = 556
$T18 = 572
$T19 = 588
$T20 = 604
tv148 = 624
tv161 = 632
tv165 = 640
tv178 = 648
tv182 = 656
tv195 = 664
tv199 = 672
tv212 = 680
__$ArrayPad$ = 688
?test_mat4x4_row_set@@YAHXZ PROC			; test_mat4x4_row_set

; 281  : {

$LN11:
	push	rsi
	push	rdi
	sub	rsp, 712				; 000002c8H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 166				; 000000a6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 282  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 283  : 
; 284  : 	glm::mat4 m(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 285  : 
; 286  : 	m = glm::row(m, 0, glm::vec4( 0,  1,  2,  3));

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 287  : 	m = glm::row(m, 1, glm::vec4( 4,  5,  6,  7));

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 288  : 	m = glm::row(m, 2, glm::vec4( 8,  9, 10, 11));

	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 289  : 	m = glm::row(m, 3, glm::vec4(12, 13, 14, 15));

	mov	DWORD PTR [rsp+32], 15
	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 290  : 
; 291  : 	Error += glm::row(m, 0) == glm::vec4( 0,  1,  2,  3) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv148[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::row<glm::tmat4x4<float,0> >
	mov	rcx, QWORD PTR tv148[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat4x
	mov	DWORD PTR tv161[rsp], 0
	jmp	SHORT $LN4@test_mat4x
$LN3@test_mat4x:
	mov	DWORD PTR tv161[rsp], 1
$LN4@test_mat4x:
	mov	eax, DWORD PTR tv161[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 292  : 	Error += glm::row(m, 1) == glm::vec4( 4,  5,  6,  7) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv165[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::row<glm::tmat4x4<float,0> >
	mov	rcx, QWORD PTR tv165[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat4x
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN6@test_mat4x
$LN5@test_mat4x:
	mov	DWORD PTR tv178[rsp], 1
$LN6@test_mat4x:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 293  : 	Error += glm::row(m, 2) == glm::vec4( 8,  9, 10, 11) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv182[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::row<glm::tmat4x4<float,0> >
	mov	rcx, QWORD PTR tv182[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat4x
	mov	DWORD PTR tv195[rsp], 0
	jmp	SHORT $LN8@test_mat4x
$LN7@test_mat4x:
	mov	DWORD PTR tv195[rsp], 1
$LN8@test_mat4x:
	mov	eax, DWORD PTR tv195[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 294  : 	Error += glm::row(m, 3) == glm::vec4(12, 13, 14, 15) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 15
	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv199[rsp], rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$row@U?$tmat4x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@H@Z ; glm::row<glm::tmat4x4<float,0> >
	mov	rcx, QWORD PTR tv199[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_mat4x
	mov	DWORD PTR tv212[rsp], 0
	jmp	SHORT $LN10@test_mat4x
$LN9@test_mat4x:
	mov	DWORD PTR tv212[rsp], 1
$LN10@test_mat4x:
	mov	eax, DWORD PTR tv212[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 295  : 
; 296  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 297  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat4x4_row_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 712				; 000002c8H
	pop	rdi
	pop	rsi
	ret	0
?test_mat4x4_row_set@@YAHXZ ENDP			; test_mat4x4_row_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
m$ = 72
index$ = 80
??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z PROC ; glm::column<glm::tmat4x3<float,0> >, COMDAT

; 58   : 	{

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H

; 59   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 59					; 0000003bH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 60   : 
; 61   : 		return m[index];

	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z ENDP ; glm::column<glm::tmat4x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
__$ArrayPad$ = 112
__$ReturnUdt$ = 160
m$ = 168
index$ = 176
x$ = 184
??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::column<glm::tmat4x3<float,0> >, COMDAT

; 44   : 	{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 45   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 46   : 
; 47   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 48					; 00000030H
	rep movsb

; 48   : 		Result[index] = x;

	mov	edx, DWORD PTR index$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	rdi, rax
	mov	rsi, QWORD PTR x$[rsp]
	mov	ecx, 12
	rep movsb

; 49   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::column<glm::tmat4x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 120
$T5 = 168
$T6 = 216
$T7 = 264
$T8 = 320
$T9 = 324
$T10 = 336
$T11 = 348
$T12 = 360
$T13 = 372
$T14 = 384
$T15 = 396
$T16 = 408
$T17 = 420
$T18 = 432
$T19 = 444
$T20 = 456
tv144 = 472
tv156 = 480
tv160 = 488
tv172 = 496
tv176 = 504
tv188 = 512
tv192 = 520
tv204 = 528
__$ArrayPad$ = 536
?test_mat4x3_col_set@@YAHXZ PROC			; test_mat4x3_col_set

; 262  : {

$LN11:
	push	rsi
	push	rdi
	sub	rsp, 552				; 00000228H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 263  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 264  : 
; 265  : 	glm::mat4x3 m(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x3<float,0>::tmat4x3<float,0>

; 266  : 
; 267  : 	m = glm::column(m, 0, glm::vec3( 0,  1,  2));

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat4x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 268  : 	m = glm::column(m, 1, glm::vec3( 4,  5,  6));

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat4x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 269  : 	m = glm::column(m, 2, glm::vec3( 8,  9, 10));

	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat4x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 270  : 	m = glm::column(m, 3, glm::vec3(12, 13, 14));

	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat4x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 271  : 
; 272  : 	Error += glm::column(m, 0) == glm::vec3( 0,  1,  2) ? 0 : 1;

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv144[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z ; glm::column<glm::tmat4x3<float,0> >
	mov	rcx, QWORD PTR tv144[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat4x
	mov	DWORD PTR tv156[rsp], 0
	jmp	SHORT $LN4@test_mat4x
$LN3@test_mat4x:
	mov	DWORD PTR tv156[rsp], 1
$LN4@test_mat4x:
	mov	eax, DWORD PTR tv156[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 273  : 	Error += glm::column(m, 1) == glm::vec3( 4,  5,  6) ? 0 : 1;

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv160[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z ; glm::column<glm::tmat4x3<float,0> >
	mov	rcx, QWORD PTR tv160[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat4x
	mov	DWORD PTR tv172[rsp], 0
	jmp	SHORT $LN6@test_mat4x
$LN5@test_mat4x:
	mov	DWORD PTR tv172[rsp], 1
$LN6@test_mat4x:
	mov	eax, DWORD PTR tv172[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 274  : 	Error += glm::column(m, 2) == glm::vec3( 8,  9, 10) ? 0 : 1;

	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv176[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z ; glm::column<glm::tmat4x3<float,0> >
	mov	rcx, QWORD PTR tv176[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat4x
	mov	DWORD PTR tv188[rsp], 0
	jmp	SHORT $LN8@test_mat4x
$LN7@test_mat4x:
	mov	DWORD PTR tv188[rsp], 1
$LN8@test_mat4x:
	mov	eax, DWORD PTR tv188[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 275  : 	Error += glm::column(m, 3) == glm::vec3(12, 13, 14) ? 0 : 1;

	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv192[rsp], rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$column@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z ; glm::column<glm::tmat4x3<float,0> >
	mov	rcx, QWORD PTR tv192[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_mat4x
	mov	DWORD PTR tv204[rsp], 0
	jmp	SHORT $LN10@test_mat4x
$LN9@test_mat4x:
	mov	DWORD PTR tv204[rsp], 1
$LN10@test_mat4x:
	mov	eax, DWORD PTR tv204[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 276  : 
; 277  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 278  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat4x3_col_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 552				; 00000228H
	pop	rdi
	pop	rsi
	ret	0
?test_mat4x3_col_set@@YAHXZ ENDP			; test_mat4x3_col_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv84 = 72
__$ReturnUdt$ = 112
m$ = 120
index$ = 128
??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z PROC ; glm::row<glm::tmat4x3<float,0> >, COMDAT

; 28   : 	{

$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 29   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 29
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 30   : 
; 31   : 		typename genType::row_type Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@XZ		; glm::tvec4<float,0>::tvec4<float,0>

; 32   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 33   : 			Result[i] = m[i][index];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 34   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 35   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z ENDP ; glm::row<glm::tmat4x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 100
tv84 = 112
__$ArrayPad$ = 120
__$ReturnUdt$ = 160
m$ = 168
index$ = 176
x$ = 184
??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z PROC ; glm::row<glm::tmat4x3<float,0> >, COMDAT

; 13   : 	{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 14   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 15   : 
; 16   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 48					; 00000030H
	rep movsb

; 17   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 18   : 			Result[i][index] = x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 19   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 20   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::row<glm::tmat4x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 48
m$ = 72
$T4 = 136
$T5 = 184
$T6 = 232
$T7 = 288
$T8 = 292
$T9 = 308
$T10 = 324
$T11 = 340
$T12 = 356
$T13 = 372
$T14 = 388
$T15 = 404
$T16 = 420
tv136 = 440
tv149 = 448
tv153 = 456
tv166 = 464
tv170 = 472
tv183 = 480
__$ArrayPad$ = 488
?test_mat4x3_row_set@@YAHXZ PROC			; test_mat4x3_row_set

; 245  : {

$LN9:
	push	rsi
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 246  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 247  : 
; 248  : 	glm::mat4x3 m(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T7[rsp], xmm0
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x3<float,0>::tmat4x3<float,0>

; 249  : 
; 250  : 	m = glm::row(m, 0, glm::vec4( 0,  1,  2,  3));

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 251  : 	m = glm::row(m, 1, glm::vec4( 4,  5,  6,  7));

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 252  : 	m = glm::row(m, 2, glm::vec4( 8,  9, 10, 11));

	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 253  : 
; 254  : 	Error += glm::row(m, 0) == glm::vec4( 0,  1,  2,  3) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv136[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z ; glm::row<glm::tmat4x3<float,0> >
	mov	rcx, QWORD PTR tv136[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat4x
	mov	DWORD PTR tv149[rsp], 0
	jmp	SHORT $LN4@test_mat4x
$LN3@test_mat4x:
	mov	DWORD PTR tv149[rsp], 1
$LN4@test_mat4x:
	mov	eax, DWORD PTR tv149[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 255  : 	Error += glm::row(m, 1) == glm::vec4( 4,  5,  6,  7) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv153[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z ; glm::row<glm::tmat4x3<float,0> >
	mov	rcx, QWORD PTR tv153[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat4x
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN6@test_mat4x
$LN5@test_mat4x:
	mov	DWORD PTR tv166[rsp], 1
$LN6@test_mat4x:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 256  : 	Error += glm::row(m, 2) == glm::vec4( 8,  9, 10, 11) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv170[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$row@U?$tmat4x3@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@H@Z ; glm::row<glm::tmat4x3<float,0> >
	mov	rcx, QWORD PTR tv170[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat4x
	mov	DWORD PTR tv183[rsp], 0
	jmp	SHORT $LN8@test_mat4x
$LN7@test_mat4x:
	mov	DWORD PTR tv183[rsp], 1
$LN8@test_mat4x:
	mov	eax, DWORD PTR tv183[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 257  : 
; 258  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 259  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat4x3_row_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 504				; 000001f8H
	pop	rdi
	pop	rsi
	ret	0
?test_mat4x3_row_set@@YAHXZ ENDP			; test_mat4x3_row_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
index$ = 64
??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z PROC ; glm::column<glm::tmat4x2<float,0> >, COMDAT

; 58   : 	{

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 59   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 59					; 0000003bH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 60   : 
; 61   : 		return m[index];

	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z ENDP ; glm::column<glm::tmat4x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
tv75 = 96
__$ArrayPad$ = 104
__$ReturnUdt$ = 144
m$ = 152
index$ = 160
x$ = 168
??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z PROC ; glm::column<glm::tmat4x2<float,0> >, COMDAT

; 44   : 	{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 45   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 46   : 
; 47   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb

; 48   : 		Result[index] = x;

	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, DWORD PTR index$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	QWORD PTR [rax], rcx

; 49   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::column<glm::tmat4x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 104
$T5 = 136
$T6 = 168
$T7 = 200
$T8 = 240
$T9 = 248
$T10 = 256
$T11 = 264
$T12 = 272
$T13 = 280
$T14 = 288
$T15 = 296
$T16 = 304
$T17 = 312
$T18 = 320
$T19 = 328
tv140 = 336
tv151 = 344
tv155 = 352
tv166 = 360
tv170 = 368
tv181 = 376
tv185 = 384
tv196 = 392
__$ArrayPad$ = 400
?test_mat4x2_col_set@@YAHXZ PROC			; test_mat4x2_col_set

; 226  : {

$LN11:
	push	rsi
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 227  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 228  : 
; 229  : 	glm::mat4x2 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat4x2<float,0>::tmat4x2<float,0>

; 230  : 
; 231  : 	m = glm::column(m, 0, glm::vec2( 0,  1));

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat4x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 232  : 	m = glm::column(m, 1, glm::vec2( 4,  5));

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat4x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 233  : 	m = glm::column(m, 2, glm::vec2( 8,  9));

	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat4x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 234  : 	m = glm::column(m, 3, glm::vec2(12, 13));

	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat4x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 235  : 
; 236  : 	Error += glm::column(m, 0) == glm::vec2( 0,  1) ? 0 : 1;

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv140[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z ; glm::column<glm::tmat4x2<float,0> >
	mov	rcx, QWORD PTR tv140[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat4x
	mov	DWORD PTR tv151[rsp], 0
	jmp	SHORT $LN4@test_mat4x
$LN3@test_mat4x:
	mov	DWORD PTR tv151[rsp], 1
$LN4@test_mat4x:
	mov	eax, DWORD PTR tv151[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 237  : 	Error += glm::column(m, 1) == glm::vec2( 4,  5) ? 0 : 1;

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv155[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z ; glm::column<glm::tmat4x2<float,0> >
	mov	rcx, QWORD PTR tv155[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat4x
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN6@test_mat4x
$LN5@test_mat4x:
	mov	DWORD PTR tv166[rsp], 1
$LN6@test_mat4x:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 238  : 	Error += glm::column(m, 2) == glm::vec2( 8,  9) ? 0 : 1;

	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv170[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z ; glm::column<glm::tmat4x2<float,0> >
	mov	rcx, QWORD PTR tv170[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat4x
	mov	DWORD PTR tv181[rsp], 0
	jmp	SHORT $LN8@test_mat4x
$LN7@test_mat4x:
	mov	DWORD PTR tv181[rsp], 1
$LN8@test_mat4x:
	mov	eax, DWORD PTR tv181[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 239  : 	Error += glm::column(m, 3) == glm::vec2(12, 13) ? 0 : 1;

	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv185[rsp], rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$column@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z ; glm::column<glm::tmat4x2<float,0> >
	mov	rcx, QWORD PTR tv185[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_mat4x
	mov	DWORD PTR tv196[rsp], 0
	jmp	SHORT $LN10@test_mat4x
$LN9@test_mat4x:
	mov	DWORD PTR tv196[rsp], 1
$LN10@test_mat4x:
	mov	eax, DWORD PTR tv196[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 240  : 
; 241  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 242  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat4x2_col_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rsi
	ret	0
?test_mat4x2_col_set@@YAHXZ ENDP			; test_mat4x2_col_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv84 = 72
__$ReturnUdt$ = 112
m$ = 120
index$ = 128
??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z PROC ; glm::row<glm::tmat4x2<float,0> >, COMDAT

; 28   : 	{

$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 29   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 29
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 30   : 
; 31   : 		typename genType::row_type Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@XZ		; glm::tvec4<float,0>::tvec4<float,0>

; 32   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 33   : 			Result[i] = m[i][index];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 34   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 35   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z ENDP ; glm::row<glm::tmat4x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 84
tv84 = 96
__$ArrayPad$ = 104
__$ReturnUdt$ = 144
m$ = 152
index$ = 160
x$ = 168
??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z PROC ; glm::row<glm::tmat4x2<float,0> >, COMDAT

; 13   : 	{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 14   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 15   : 
; 16   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb

; 17   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 18   : 			Result[i][index] = x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 19   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 20   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::row<glm::tmat4x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 48
m$ = 72
$T4 = 120
$T5 = 152
$T6 = 192
$T7 = 208
$T8 = 224
$T9 = 240
$T10 = 256
$T11 = 272
tv92 = 288
tv137 = 296
tv141 = 304
tv154 = 312
__$ArrayPad$ = 320
?test_mat4x2_row_set@@YAHXZ PROC			; test_mat4x2_row_set

; 211  : {

$LN7:
	push	rsi
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 212  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 213  : 
; 214  : 	glm::mat4x2 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat4x2<float,0>::tmat4x2<float,0>

; 215  : 
; 216  : 	m = glm::row(m, 0, glm::vec4( 0,  1,  2,  3));

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 217  : 	m = glm::row(m, 1, glm::vec4( 4,  5,  6,  7));

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::row<glm::tmat4x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 218  : 
; 219  : 	Error += glm::row(m, 0) == glm::vec4( 0,  1,  2,  3) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv92[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z ; glm::row<glm::tmat4x2<float,0> >
	mov	rcx, QWORD PTR tv92[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat4x
	mov	DWORD PTR tv137[rsp], 0
	jmp	SHORT $LN4@test_mat4x
$LN3@test_mat4x:
	mov	DWORD PTR tv137[rsp], 1
$LN4@test_mat4x:
	mov	eax, DWORD PTR tv137[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 220  : 	Error += glm::row(m, 1) == glm::vec4( 4,  5,  6,  7) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv141[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$row@U?$tmat4x2@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@H@Z ; glm::row<glm::tmat4x2<float,0> >
	mov	rcx, QWORD PTR tv141[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat4x
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN6@test_mat4x
$LN5@test_mat4x:
	mov	DWORD PTR tv154[rsp], 1
$LN6@test_mat4x:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 221  : 
; 222  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 223  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat4x2_row_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 344				; 00000158H
	pop	rdi
	pop	rsi
	ret	0
?test_mat4x2_row_set@@YAHXZ ENDP			; test_mat4x2_row_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
m$ = 72
index$ = 80
??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z PROC ; glm::column<glm::tmat3x4<float,0> >, COMDAT

; 58   : 	{

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H

; 59   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 59					; 0000003bH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 60   : 
; 61   : 		return m[index];

	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z ENDP ; glm::column<glm::tmat3x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
__$ArrayPad$ = 112
__$ReturnUdt$ = 160
m$ = 168
index$ = 176
x$ = 184
??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z PROC ; glm::column<glm::tmat3x4<float,0> >, COMDAT

; 44   : 	{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 45   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 46   : 
; 47   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 48					; 00000030H
	rep movsb

; 48   : 		Result[index] = x;

	mov	edx, DWORD PTR index$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	rdi, rax
	mov	rsi, QWORD PTR x$[rsp]
	mov	ecx, 16
	rep movsb

; 49   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::column<glm::tmat3x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 48
m$ = 72
$T4 = 136
$T5 = 184
$T6 = 232
$T7 = 288
$T8 = 304
$T9 = 320
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
tv136 = 432
tv149 = 440
tv153 = 448
tv166 = 456
tv170 = 464
tv183 = 472
__$ArrayPad$ = 480
?test_mat3x4_col_set@@YAHXZ PROC			; test_mat3x4_col_set

; 194  : {

$LN9:
	push	rsi
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 195  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 196  : 
; 197  : 	glm::mat3x4 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x4<float,0>::tmat3x4<float,0>

; 198  : 
; 199  : 	m = glm::column(m, 0, glm::vec4( 0,  1,  2, 3));

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat3x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 200  : 	m = glm::column(m, 1, glm::vec4( 4,  5,  6, 7));

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat3x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 201  : 	m = glm::column(m, 2, glm::vec4( 8,  9, 10, 11));

	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat3x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 202  : 
; 203  : 	Error += glm::column(m, 0) == glm::vec4( 0,  1,  2, 3) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv136[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z ; glm::column<glm::tmat3x4<float,0> >
	mov	rcx, QWORD PTR tv136[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat3x
	mov	DWORD PTR tv149[rsp], 0
	jmp	SHORT $LN4@test_mat3x
$LN3@test_mat3x:
	mov	DWORD PTR tv149[rsp], 1
$LN4@test_mat3x:
	mov	eax, DWORD PTR tv149[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 204  : 	Error += glm::column(m, 1) == glm::vec4( 4,  5,  6, 7) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv153[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z ; glm::column<glm::tmat3x4<float,0> >
	mov	rcx, QWORD PTR tv153[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat3x
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN6@test_mat3x
$LN5@test_mat3x:
	mov	DWORD PTR tv166[rsp], 1
$LN6@test_mat3x:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 205  : 	Error += glm::column(m, 2) == glm::vec4( 8,  9, 10, 11) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv170[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$column@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z ; glm::column<glm::tmat3x4<float,0> >
	mov	rcx, QWORD PTR tv170[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat3x
	mov	DWORD PTR tv183[rsp], 0
	jmp	SHORT $LN8@test_mat3x
$LN7@test_mat3x:
	mov	DWORD PTR tv183[rsp], 1
$LN8@test_mat3x:
	mov	eax, DWORD PTR tv183[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 206  : 
; 207  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 208  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat3x4_col_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 504				; 000001f8H
	pop	rdi
	pop	rsi
	ret	0
?test_mat3x4_col_set@@YAHXZ ENDP			; test_mat3x4_col_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv84 = 72
__$ReturnUdt$ = 112
m$ = 120
index$ = 128
??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z PROC ; glm::row<glm::tmat3x4<float,0> >, COMDAT

; 28   : 	{

$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 29   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 29
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 30   : 
; 31   : 		typename genType::row_type Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@XZ		; glm::tvec3<float,0>::tvec3<float,0>

; 32   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 33   : 			Result[i] = m[i][index];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 34   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 35   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z ENDP ; glm::row<glm::tmat3x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 100
tv84 = 112
__$ArrayPad$ = 120
__$ReturnUdt$ = 160
m$ = 168
index$ = 176
x$ = 184
??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::row<glm::tmat3x4<float,0> >, COMDAT

; 13   : 	{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 14   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 15   : 
; 16   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 48					; 00000030H
	rep movsb

; 17   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 18   : 			Result[i][index] = x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 19   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 20   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::row<glm::tmat3x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 120
$T5 = 168
$T6 = 216
$T7 = 264
$T8 = 320
$T9 = 332
$T10 = 344
$T11 = 356
$T12 = 368
$T13 = 380
$T14 = 392
$T15 = 404
$T16 = 416
$T17 = 428
$T18 = 440
$T19 = 452
tv144 = 464
tv156 = 472
tv160 = 480
tv172 = 488
tv176 = 496
tv188 = 504
tv192 = 512
tv204 = 520
__$ArrayPad$ = 528
?test_mat3x4_row_set@@YAHXZ PROC			; test_mat3x4_row_set

; 175  : {

$LN11:
	push	rsi
	push	rdi
	sub	rsp, 552				; 00000228H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 176  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 177  : 
; 178  : 	glm::mat3x4 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x4<float,0>::tmat3x4<float,0>

; 179  : 
; 180  : 	m = glm::row(m, 0, glm::vec3( 0,  1,  2));

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 181  : 	m = glm::row(m, 1, glm::vec3( 4,  5,  6));

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 182  : 	m = glm::row(m, 2, glm::vec3( 8,  9, 10));

	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 183  : 	m = glm::row(m, 3, glm::vec3(12, 13, 14));

	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb

; 184  : 
; 185  : 	Error += glm::row(m, 0) == glm::vec3( 0,  1,  2) ? 0 : 1;

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv144[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z ; glm::row<glm::tmat3x4<float,0> >
	mov	rcx, QWORD PTR tv144[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat3x
	mov	DWORD PTR tv156[rsp], 0
	jmp	SHORT $LN4@test_mat3x
$LN3@test_mat3x:
	mov	DWORD PTR tv156[rsp], 1
$LN4@test_mat3x:
	mov	eax, DWORD PTR tv156[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 186  : 	Error += glm::row(m, 1) == glm::vec3( 4,  5,  6) ? 0 : 1;

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv160[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z ; glm::row<glm::tmat3x4<float,0> >
	mov	rcx, QWORD PTR tv160[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat3x
	mov	DWORD PTR tv172[rsp], 0
	jmp	SHORT $LN6@test_mat3x
$LN5@test_mat3x:
	mov	DWORD PTR tv172[rsp], 1
$LN6@test_mat3x:
	mov	eax, DWORD PTR tv172[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 187  : 	Error += glm::row(m, 2) == glm::vec3( 8,  9, 10) ? 0 : 1;

	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv176[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z ; glm::row<glm::tmat3x4<float,0> >
	mov	rcx, QWORD PTR tv176[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat3x
	mov	DWORD PTR tv188[rsp], 0
	jmp	SHORT $LN8@test_mat3x
$LN7@test_mat3x:
	mov	DWORD PTR tv188[rsp], 1
$LN8@test_mat3x:
	mov	eax, DWORD PTR tv188[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 188  : 	Error += glm::row(m, 3) == glm::vec3(12, 13, 14) ? 0 : 1;

	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv192[rsp], rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$row@U?$tmat3x4@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@H@Z ; glm::row<glm::tmat3x4<float,0> >
	mov	rcx, QWORD PTR tv192[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_mat3x
	mov	DWORD PTR tv204[rsp], 0
	jmp	SHORT $LN10@test_mat3x
$LN9@test_mat3x:
	mov	DWORD PTR tv204[rsp], 1
$LN10@test_mat3x:
	mov	eax, DWORD PTR tv204[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 189  : 
; 190  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 191  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat3x4_row_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 552				; 00000228H
	pop	rdi
	pop	rsi
	ret	0
?test_mat3x4_row_set@@YAHXZ ENDP			; test_mat3x4_row_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
m$ = 72
index$ = 80
??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z PROC ; glm::column<glm::tmat3x3<float,0> >, COMDAT

; 58   : 	{

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H

; 59   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 59					; 0000003bH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 60   : 
; 61   : 		return m[index];

	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z ENDP ; glm::column<glm::tmat3x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
__$ArrayPad$ = 96
__$ReturnUdt$ = 144
m$ = 152
index$ = 160
x$ = 168
??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::column<glm::tmat3x3<float,0> >, COMDAT

; 44   : 	{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 45   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 46   : 
; 47   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 36					; 00000024H
	rep movsb

; 48   : 		Result[index] = x;

	mov	edx, DWORD PTR index$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rdi, rax
	mov	rsi, QWORD PTR x$[rsp]
	mov	ecx, 12
	rep movsb

; 49   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::column<glm::tmat3x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 104
$T5 = 144
$T6 = 184
$T7 = 232
$T8 = 244
$T9 = 256
$T10 = 268
$T11 = 280
$T12 = 292
$T13 = 304
$T14 = 316
$T15 = 328
tv133 = 344
tv145 = 352
tv149 = 360
tv161 = 368
tv165 = 376
tv177 = 384
__$ArrayPad$ = 392
?test_mat3x3_col_set@@YAHXZ PROC			; test_mat3x3_col_set

; 158  : {

$LN9:
	push	rsi
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 159  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 160  : 
; 161  : 	glm::mat3x3 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 162  : 
; 163  : 	m = glm::column(m, 0, glm::vec3( 0,  1,  2));

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat3x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb

; 164  : 	m = glm::column(m, 1, glm::vec3( 4,  5,  6));

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat3x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb

; 165  : 	m = glm::column(m, 2, glm::vec3( 8,  9, 10));

	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat3x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb

; 166  : 
; 167  : 	Error += glm::column(m, 0) == glm::vec3( 0,  1,  2) ? 0 : 1;

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv133[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z ; glm::column<glm::tmat3x3<float,0> >
	mov	rcx, QWORD PTR tv133[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat3x
	mov	DWORD PTR tv145[rsp], 0
	jmp	SHORT $LN4@test_mat3x
$LN3@test_mat3x:
	mov	DWORD PTR tv145[rsp], 1
$LN4@test_mat3x:
	mov	eax, DWORD PTR tv145[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 168  : 	Error += glm::column(m, 1) == glm::vec3( 4,  5,  6) ? 0 : 1;

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv149[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z ; glm::column<glm::tmat3x3<float,0> >
	mov	rcx, QWORD PTR tv149[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat3x
	mov	DWORD PTR tv161[rsp], 0
	jmp	SHORT $LN6@test_mat3x
$LN5@test_mat3x:
	mov	DWORD PTR tv161[rsp], 1
$LN6@test_mat3x:
	mov	eax, DWORD PTR tv161[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 169  : 	Error += glm::column(m, 2) == glm::vec3( 8,  9, 10) ? 0 : 1;

	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv165[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$column@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z ; glm::column<glm::tmat3x3<float,0> >
	mov	rcx, QWORD PTR tv165[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat3x
	mov	DWORD PTR tv177[rsp], 0
	jmp	SHORT $LN8@test_mat3x
$LN7@test_mat3x:
	mov	DWORD PTR tv177[rsp], 1
$LN8@test_mat3x:
	mov	eax, DWORD PTR tv177[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 170  : 
; 171  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 172  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat3x3_col_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rsi
	ret	0
?test_mat3x3_col_set@@YAHXZ ENDP			; test_mat3x3_col_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv84 = 72
__$ReturnUdt$ = 112
m$ = 120
index$ = 128
??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z PROC ; glm::row<glm::tmat3x3<float,0> >, COMDAT

; 28   : 	{

$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 29   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 29
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 30   : 
; 31   : 		typename genType::row_type Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@XZ		; glm::tvec3<float,0>::tvec3<float,0>

; 32   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 33   : 			Result[i] = m[i][index];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 34   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 35   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z ENDP ; glm::row<glm::tmat3x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 84
tv84 = 96
__$ArrayPad$ = 104
__$ReturnUdt$ = 144
m$ = 152
index$ = 160
x$ = 168
??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::row<glm::tmat3x3<float,0> >, COMDAT

; 13   : 	{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 14   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 15   : 
; 16   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 36					; 00000024H
	rep movsb

; 17   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 18   : 			Result[i][index] = x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 19   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 20   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::row<glm::tmat3x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 104
$T5 = 144
$T6 = 184
$T7 = 232
$T8 = 244
$T9 = 256
$T10 = 268
$T11 = 280
$T12 = 292
$T13 = 304
$T14 = 316
$T15 = 328
tv133 = 344
tv145 = 352
tv149 = 360
tv161 = 368
tv165 = 376
tv177 = 384
__$ArrayPad$ = 392
?test_mat3x3_row_set@@YAHXZ PROC			; test_mat3x3_row_set

; 141  : {

$LN9:
	push	rsi
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 143  : 
; 144  : 	glm::mat3x3 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 145  : 
; 146  : 	m = glm::row(m, 0, glm::vec3( 0,  1,  2));

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb

; 147  : 	m = glm::row(m, 1, glm::vec3( 4,  5,  6));

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb

; 148  : 	m = glm::row(m, 2, glm::vec3( 8,  9, 10));

	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb

; 149  : 
; 150  : 	Error += glm::row(m, 0) == glm::vec3( 0,  1,  2) ? 0 : 1;

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv133[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z ; glm::row<glm::tmat3x3<float,0> >
	mov	rcx, QWORD PTR tv133[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat3x
	mov	DWORD PTR tv145[rsp], 0
	jmp	SHORT $LN4@test_mat3x
$LN3@test_mat3x:
	mov	DWORD PTR tv145[rsp], 1
$LN4@test_mat3x:
	mov	eax, DWORD PTR tv145[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 151  : 	Error += glm::row(m, 1) == glm::vec3( 4,  5,  6) ? 0 : 1;

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv149[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z ; glm::row<glm::tmat3x3<float,0> >
	mov	rcx, QWORD PTR tv149[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat3x
	mov	DWORD PTR tv161[rsp], 0
	jmp	SHORT $LN6@test_mat3x
$LN5@test_mat3x:
	mov	DWORD PTR tv161[rsp], 1
$LN6@test_mat3x:
	mov	eax, DWORD PTR tv161[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 152  : 	Error += glm::row(m, 2) == glm::vec3( 8,  9, 10) ? 0 : 1;

	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv165[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$row@U?$tmat3x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@H@Z ; glm::row<glm::tmat3x3<float,0> >
	mov	rcx, QWORD PTR tv165[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat3x
	mov	DWORD PTR tv177[rsp], 0
	jmp	SHORT $LN8@test_mat3x
$LN7@test_mat3x:
	mov	DWORD PTR tv177[rsp], 1
$LN8@test_mat3x:
	mov	eax, DWORD PTR tv177[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 153  : 
; 154  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 155  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat3x3_row_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rsi
	ret	0
?test_mat3x3_row_set@@YAHXZ ENDP			; test_mat3x3_row_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
index$ = 64
??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z PROC ; glm::column<glm::tmat3x2<float,0> >, COMDAT

; 58   : 	{

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 59   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 59					; 0000003bH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 60   : 
; 61   : 		return m[index];

	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z ENDP ; glm::column<glm::tmat3x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
tv75 = 80
__$ArrayPad$ = 88
__$ReturnUdt$ = 128
m$ = 136
index$ = 144
x$ = 152
??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z PROC ; glm::column<glm::tmat3x2<float,0> >, COMDAT

; 44   : 	{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 45   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 46   : 
; 47   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 24
	rep movsb

; 48   : 		Result[index] = x;

	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, DWORD PTR index$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	QWORD PTR [rax], rcx

; 49   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::column<glm::tmat3x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 88
$T5 = 112
$T6 = 136
$T7 = 168
$T8 = 176
$T9 = 184
$T10 = 192
$T11 = 200
$T12 = 208
$T13 = 216
$T14 = 224
$T15 = 232
tv130 = 240
tv141 = 248
tv145 = 256
tv156 = 264
tv160 = 272
tv171 = 280
__$ArrayPad$ = 288
?test_mat3x2_col_set@@YAHXZ PROC			; test_mat3x2_col_set

; 124  : {

$LN9:
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 125  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 126  : 
; 127  : 	glm::mat3x2 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x2<float,0>::tmat3x2<float,0>

; 128  : 
; 129  : 	m = glm::column(m, 0, glm::vec2( 0,  1));

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat3x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 130  : 	m = glm::column(m, 1, glm::vec2( 4,  5));

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat3x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 131  : 	m = glm::column(m, 2, glm::vec2( 8,  9));

	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat3x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 132  : 
; 133  : 	Error += glm::column(m, 0) == glm::vec2( 0,  1) ? 0 : 1;

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv130[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z ; glm::column<glm::tmat3x2<float,0> >
	mov	rcx, QWORD PTR tv130[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat3x
	mov	DWORD PTR tv141[rsp], 0
	jmp	SHORT $LN4@test_mat3x
$LN3@test_mat3x:
	mov	DWORD PTR tv141[rsp], 1
$LN4@test_mat3x:
	mov	eax, DWORD PTR tv141[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 134  : 	Error += glm::column(m, 1) == glm::vec2( 4,  5) ? 0 : 1;

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv145[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z ; glm::column<glm::tmat3x2<float,0> >
	mov	rcx, QWORD PTR tv145[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat3x
	mov	DWORD PTR tv156[rsp], 0
	jmp	SHORT $LN6@test_mat3x
$LN5@test_mat3x:
	mov	DWORD PTR tv156[rsp], 1
$LN6@test_mat3x:
	mov	eax, DWORD PTR tv156[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 135  : 	Error += glm::column(m, 2) == glm::vec2( 8,  9) ? 0 : 1;

	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv160[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$column@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z ; glm::column<glm::tmat3x2<float,0> >
	mov	rcx, QWORD PTR tv160[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat3x
	mov	DWORD PTR tv171[rsp], 0
	jmp	SHORT $LN8@test_mat3x
$LN7@test_mat3x:
	mov	DWORD PTR tv171[rsp], 1
$LN8@test_mat3x:
	mov	eax, DWORD PTR tv171[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 136  : 
; 137  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 138  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat3x2_col_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
?test_mat3x2_col_set@@YAHXZ ENDP			; test_mat3x2_col_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv84 = 72
__$ReturnUdt$ = 112
m$ = 120
index$ = 128
??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z PROC ; glm::row<glm::tmat3x2<float,0> >, COMDAT

; 28   : 	{

$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 29   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 29
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 30   : 
; 31   : 		typename genType::row_type Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@XZ		; glm::tvec3<float,0>::tvec3<float,0>

; 32   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 33   : 			Result[i] = m[i][index];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 34   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 35   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z ENDP ; glm::row<glm::tmat3x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv84 = 80
__$ArrayPad$ = 88
__$ReturnUdt$ = 128
m$ = 136
index$ = 144
x$ = 152
??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::row<glm::tmat3x2<float,0> >, COMDAT

; 13   : 	{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 14   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 15   : 
; 16   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 24
	rep movsb

; 17   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 18   : 			Result[i][index] = x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 19   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 20   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::row<glm::tmat3x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 88
$T5 = 112
$T6 = 144
$T7 = 156
$T8 = 168
$T9 = 180
$T10 = 192
$T11 = 204
tv90 = 216
tv134 = 224
tv138 = 232
tv150 = 240
__$ArrayPad$ = 248
?test_mat3x2_row_set@@YAHXZ PROC			; test_mat3x2_row_set

; 109  : {

$LN7:
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 110  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 111  : 
; 112  : 	glm::mat3x2 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x2<float,0>::tmat3x2<float,0>

; 113  : 
; 114  : 	m = glm::row(m, 0, glm::vec3( 0,  1,  2));

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 115  : 	m = glm::row(m, 1, glm::vec3( 4,  5,  6));

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::row<glm::tmat3x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 116  : 
; 117  : 	Error += glm::row(m, 0) == glm::vec3( 0,  1,  2) ? 0 : 1;

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv90[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z ; glm::row<glm::tmat3x2<float,0> >
	mov	rcx, QWORD PTR tv90[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat3x
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN4@test_mat3x
$LN3@test_mat3x:
	mov	DWORD PTR tv134[rsp], 1
$LN4@test_mat3x:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 118  : 	Error += glm::row(m, 1) == glm::vec3( 4,  5,  6) ? 0 : 1;

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv138[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$row@U?$tmat3x2@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@H@Z ; glm::row<glm::tmat3x2<float,0> >
	mov	rcx, QWORD PTR tv138[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat3x
	mov	DWORD PTR tv150[rsp], 0
	jmp	SHORT $LN6@test_mat3x
$LN5@test_mat3x:
	mov	DWORD PTR tv150[rsp], 1
$LN6@test_mat3x:
	mov	eax, DWORD PTR tv150[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 119  : 
; 120  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 121  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat3x2_row_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?test_mat3x2_row_set@@YAHXZ ENDP			; test_mat3x2_row_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
v1$ = 48
v2$ = 56
??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 944  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 945  : 		return detail::compute_vec4_equal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);

	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR v1$[rsp]
	call	?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call

; 946  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
m$ = 72
index$ = 80
??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z PROC ; glm::column<glm::tmat2x4<float,0> >, COMDAT

; 58   : 	{

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H

; 59   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 59					; 0000003bH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 60   : 
; 61   : 		return m[index];

	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z ENDP ; glm::column<glm::tmat2x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
__$ArrayPad$ = 96
__$ReturnUdt$ = 144
m$ = 152
index$ = 160
x$ = 168
??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z PROC ; glm::column<glm::tmat2x4<float,0> >, COMDAT

; 44   : 	{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 45   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 46   : 
; 47   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb

; 48   : 		Result[index] = x;

	mov	edx, DWORD PTR index$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	rdi, rax
	mov	rsi, QWORD PTR x$[rsp]
	mov	ecx, 16
	rep movsb

; 49   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::column<glm::tmat2x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 48
m$ = 72
$T4 = 120
$T5 = 152
$T6 = 192
$T7 = 208
$T8 = 224
$T9 = 240
$T10 = 256
$T11 = 272
tv92 = 288
tv137 = 296
tv141 = 304
tv154 = 312
__$ArrayPad$ = 320
?test_mat2x4_col_set@@YAHXZ PROC			; test_mat2x4_col_set

; 94   : {

$LN7:
	push	rsi
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 95   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 96   : 
; 97   : 	glm::mat2x4 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x4<float,0>::tmat2x4<float,0>

; 98   : 
; 99   : 	m = glm::column(m, 0, glm::vec4( 0,  1,  2, 3));

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat2x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 100  : 	m = glm::column(m, 1, glm::vec4( 4,  5,  6, 7));

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec4@M$0A@@0@@Z ; glm::column<glm::tmat2x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 101  : 
; 102  : 	Error += glm::column(m, 0) == glm::vec4( 0,  1,  2, 3) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv92[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z ; glm::column<glm::tmat2x4<float,0> >
	mov	rcx, QWORD PTR tv92[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat2x
	mov	DWORD PTR tv137[rsp], 0
	jmp	SHORT $LN4@test_mat2x
$LN3@test_mat2x:
	mov	DWORD PTR tv137[rsp], 1
$LN4@test_mat2x:
	mov	eax, DWORD PTR tv137[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 103  : 	Error += glm::column(m, 1) == glm::vec4( 4,  5,  6, 7) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv141[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$column@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z ; glm::column<glm::tmat2x4<float,0> >
	mov	rcx, QWORD PTR tv141[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat2x
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN6@test_mat2x
$LN5@test_mat2x:
	mov	DWORD PTR tv154[rsp], 1
$LN6@test_mat2x:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 104  : 
; 105  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 106  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat2x4_col_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 344				; 00000158H
	pop	rdi
	pop	rsi
	ret	0
?test_mat2x4_col_set@@YAHXZ ENDP			; test_mat2x4_col_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 52
tv84 = 56
__$ReturnUdt$ = 80
m$ = 88
index$ = 96
??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z PROC ; glm::row<glm::tmat2x4<float,0> >, COMDAT

; 28   : 	{

$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 29   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 29
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 30   : 
; 31   : 		typename genType::row_type Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@XZ		; glm::tvec2<float,0>::tvec2<float,0>

; 32   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 33   : 			Result[i] = m[i][index];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 34   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR Result$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 35   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z ENDP ; glm::row<glm::tmat2x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 84
tv84 = 96
__$ArrayPad$ = 104
__$ReturnUdt$ = 144
m$ = 152
index$ = 160
x$ = 168
??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z PROC ; glm::row<glm::tmat2x4<float,0> >, COMDAT

; 13   : 	{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 14   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 15   : 
; 16   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb

; 17   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 18   : 			Result[i][index] = x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 19   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 20   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::row<glm::tmat2x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 104
$T5 = 136
$T6 = 168
$T7 = 200
$T8 = 240
$T9 = 248
$T10 = 256
$T11 = 264
$T12 = 272
$T13 = 280
$T14 = 288
$T15 = 296
$T16 = 304
$T17 = 312
$T18 = 320
$T19 = 328
tv140 = 336
tv151 = 344
tv155 = 352
tv166 = 360
tv170 = 368
tv181 = 376
tv185 = 384
tv196 = 392
__$ArrayPad$ = 400
?test_mat2x4_row_set@@YAHXZ PROC			; test_mat2x4_row_set

; 75   : {

$LN11:
	push	rsi
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 76   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 77   : 
; 78   : 	glm::mat2x4 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x4<float,0>::tmat2x4<float,0>

; 79   : 
; 80   : 	m = glm::row(m, 0, glm::vec2( 0,  1));

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 81   : 	m = glm::row(m, 1, glm::vec2( 4,  5));

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 82   : 	m = glm::row(m, 2, glm::vec2( 8,  9));

	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 83   : 	m = glm::row(m, 3, glm::vec2(12, 13));

	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x4<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 84   : 
; 85   : 	Error += glm::row(m, 0) == glm::vec2( 0,  1) ? 0 : 1;

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv140[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z ; glm::row<glm::tmat2x4<float,0> >
	mov	rcx, QWORD PTR tv140[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat2x
	mov	DWORD PTR tv151[rsp], 0
	jmp	SHORT $LN4@test_mat2x
$LN3@test_mat2x:
	mov	DWORD PTR tv151[rsp], 1
$LN4@test_mat2x:
	mov	eax, DWORD PTR tv151[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 86   : 	Error += glm::row(m, 1) == glm::vec2( 4,  5) ? 0 : 1;

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv155[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z ; glm::row<glm::tmat2x4<float,0> >
	mov	rcx, QWORD PTR tv155[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat2x
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN6@test_mat2x
$LN5@test_mat2x:
	mov	DWORD PTR tv166[rsp], 1
$LN6@test_mat2x:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 87   : 	Error += glm::row(m, 2) == glm::vec2( 8,  9) ? 0 : 1;

	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv170[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z ; glm::row<glm::tmat2x4<float,0> >
	mov	rcx, QWORD PTR tv170[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat2x
	mov	DWORD PTR tv181[rsp], 0
	jmp	SHORT $LN8@test_mat2x
$LN7@test_mat2x:
	mov	DWORD PTR tv181[rsp], 1
$LN8@test_mat2x:
	mov	eax, DWORD PTR tv181[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 88   : 	Error += glm::row(m, 3) == glm::vec2(12, 13) ? 0 : 1;

	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv185[rsp], rax
	mov	r8d, 3
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$row@U?$tmat2x4@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@H@Z ; glm::row<glm::tmat2x4<float,0> >
	mov	rcx, QWORD PTR tv185[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_mat2x
	mov	DWORD PTR tv196[rsp], 0
	jmp	SHORT $LN10@test_mat2x
$LN9@test_mat2x:
	mov	DWORD PTR tv196[rsp], 1
$LN10@test_mat2x:
	mov	eax, DWORD PTR tv196[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 89   : 
; 90   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 91   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat2x4_row_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rsi
	ret	0
?test_mat2x4_row_set@@YAHXZ ENDP			; test_mat2x4_row_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
tv73 = 0
v1$ = 32
v2$ = 40
??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 1001 : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1002 : 		return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv73[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv73[rsp]

; 1003 : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
m$ = 72
index$ = 80
??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z PROC ; glm::column<glm::tmat2x3<float,0> >, COMDAT

; 58   : 	{

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H

; 59   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 59					; 0000003bH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 60   : 
; 61   : 		return m[index];

	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z ENDP ; glm::column<glm::tmat2x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
__$ArrayPad$ = 80
__$ReturnUdt$ = 128
m$ = 136
index$ = 144
x$ = 152
??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::column<glm::tmat2x3<float,0> >, COMDAT

; 44   : 	{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 45   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 46   : 
; 47   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 24
	rep movsb

; 48   : 		Result[index] = x;

	mov	edx, DWORD PTR index$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	rdi, rax
	mov	rsi, QWORD PTR x$[rsp]
	mov	ecx, 12
	rep movsb

; 49   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::column<glm::tmat2x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 88
$T5 = 112
$T6 = 144
$T7 = 156
$T8 = 168
$T9 = 180
$T10 = 192
$T11 = 204
tv90 = 216
tv134 = 224
tv138 = 232
tv150 = 240
__$ArrayPad$ = 248
?test_mat2x3_col_set@@YAHXZ PROC			; test_mat2x3_col_set

; 60   : {

$LN7:
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 61   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 62   : 
; 63   : 	glm::mat2x3 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x3<float,0>::tmat2x3<float,0>

; 64   : 
; 65   : 	m = glm::column(m, 0, glm::vec3( 0,  1,  2));

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat2x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 66   : 	m = glm::column(m, 1, glm::vec3( 4,  5,  6));

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec3@M$0A@@0@@Z ; glm::column<glm::tmat2x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 67   : 
; 68   : 	Error += glm::column(m, 0) == glm::vec3( 0,  1,  2) ? 0 : 1;

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv90[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z ; glm::column<glm::tmat2x3<float,0> >
	mov	rcx, QWORD PTR tv90[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat2x
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN4@test_mat2x
$LN3@test_mat2x:
	mov	DWORD PTR tv134[rsp], 1
$LN4@test_mat2x:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 69   : 	Error += glm::column(m, 1) == glm::vec3( 4,  5,  6) ? 0 : 1;

	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv138[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$column@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z ; glm::column<glm::tmat2x3<float,0> >
	mov	rcx, QWORD PTR tv138[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat2x
	mov	DWORD PTR tv150[rsp], 0
	jmp	SHORT $LN6@test_mat2x
$LN5@test_mat2x:
	mov	DWORD PTR tv150[rsp], 1
$LN6@test_mat2x:
	mov	eax, DWORD PTR tv150[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 70   : 
; 71   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 72   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat2x3_col_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?test_mat2x3_col_set@@YAHXZ ENDP			; test_mat2x3_col_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 52
tv84 = 56
__$ReturnUdt$ = 80
m$ = 88
index$ = 96
??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z PROC ; glm::row<glm::tmat2x3<float,0> >, COMDAT

; 28   : 	{

$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 29   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 29
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 30   : 
; 31   : 		typename genType::row_type Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@XZ		; glm::tvec2<float,0>::tvec2<float,0>

; 32   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 33   : 			Result[i] = m[i][index];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 34   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR Result$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 35   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z ENDP ; glm::row<glm::tmat2x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv84 = 80
__$ArrayPad$ = 88
__$ReturnUdt$ = 128
m$ = 136
index$ = 144
x$ = 152
??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z PROC ; glm::row<glm::tmat2x3<float,0> >, COMDAT

; 13   : 	{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 14   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 15   : 
; 16   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 24
	rep movsb

; 17   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 18   : 			Result[i][index] = x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 19   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 20   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::row<glm::tmat2x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 88
$T5 = 112
$T6 = 136
$T7 = 168
$T8 = 176
$T9 = 184
$T10 = 192
$T11 = 200
$T12 = 208
$T13 = 216
$T14 = 224
$T15 = 232
tv130 = 240
tv141 = 248
tv145 = 256
tv156 = 264
tv160 = 272
tv171 = 280
__$ArrayPad$ = 288
?test_mat2x3_row_set@@YAHXZ PROC			; test_mat2x3_row_set

; 43   : {

$LN9:
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 44   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 45   : 
; 46   : 	glm::mat2x3 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x3<float,0>::tmat2x3<float,0>

; 47   : 
; 48   : 	m = glm::row(m, 0, glm::vec2( 0,  1));

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 49   : 	m = glm::row(m, 1, glm::vec2( 4,  5));

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 50   : 	m = glm::row(m, 2, glm::vec2( 8,  9));

	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x3<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 51   : 
; 52   : 	Error += glm::row(m, 0) == glm::vec2( 0,  1) ? 0 : 1;

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv130[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z ; glm::row<glm::tmat2x3<float,0> >
	mov	rcx, QWORD PTR tv130[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat2x
	mov	DWORD PTR tv141[rsp], 0
	jmp	SHORT $LN4@test_mat2x
$LN3@test_mat2x:
	mov	DWORD PTR tv141[rsp], 1
$LN4@test_mat2x:
	mov	eax, DWORD PTR tv141[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 53   : 	Error += glm::row(m, 1) == glm::vec2( 4,  5) ? 0 : 1;

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv145[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z ; glm::row<glm::tmat2x3<float,0> >
	mov	rcx, QWORD PTR tv145[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat2x
	mov	DWORD PTR tv156[rsp], 0
	jmp	SHORT $LN6@test_mat2x
$LN5@test_mat2x:
	mov	DWORD PTR tv156[rsp], 1
$LN6@test_mat2x:
	mov	eax, DWORD PTR tv156[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 54   : 	Error += glm::row(m, 2) == glm::vec2( 8,  9) ? 0 : 1;

	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv160[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$row@U?$tmat2x3@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@H@Z ; glm::row<glm::tmat2x3<float,0> >
	mov	rcx, QWORD PTR tv160[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_mat2x
	mov	DWORD PTR tv171[rsp], 0
	jmp	SHORT $LN8@test_mat2x
$LN7@test_mat2x:
	mov	DWORD PTR tv171[rsp], 1
$LN8@test_mat2x:
	mov	eax, DWORD PTR tv171[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 55   : 
; 56   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 57   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat2x3_row_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
?test_mat2x3_row_set@@YAHXZ ENDP			; test_mat2x3_row_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
index$ = 64
??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z PROC ; glm::column<glm::tmat2x2<float,0> >, COMDAT

; 58   : 	{

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 59   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 59					; 0000003bH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 60   : 
; 61   : 		return m[index];

	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z ENDP ; glm::column<glm::tmat2x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
tv75 = 80
__$ArrayPad$ = 88
__$ReturnUdt$ = 128
m$ = 136
index$ = 144
x$ = 152
??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z PROC ; glm::column<glm::tmat2x2<float,0> >, COMDAT

; 44   : 	{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 45   : 		assert(index >= 0 && index < m.length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN3@column
	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN4@column
$LN3@column:
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EC@JICLCAOD@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@column:

; 46   : 
; 47   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 16
	rep movsb

; 48   : 		Result[index] = x;

	mov	rax, QWORD PTR x$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, DWORD PTR index$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	QWORD PTR [rax], rcx

; 49   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::column<glm::tmat2x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 88
$T5 = 104
$T6 = 128
$T7 = 136
$T8 = 144
$T9 = 152
$T10 = 160
$T11 = 168
tv88 = 176
tv131 = 184
tv135 = 192
tv146 = 200
__$ArrayPad$ = 208
?test_mat2x2_col_set@@YAHXZ PROC			; test_mat2x2_col_set

; 28   : {

$LN7:
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 29   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 30   : 
; 31   : 	glm::mat2x2 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x2<float,0>::tmat2x2<float,0>

; 32   : 
; 33   : 	m = glm::column(m, 0, glm::vec2( 0,  1));

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat2x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 34   : 	m = glm::column(m, 1, glm::vec2( 4,  5));

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::column<glm::tmat2x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 35   : 
; 36   : 	Error += glm::column(m, 0) == glm::vec2( 0,  1) ? 0 : 1;

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv88[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z ; glm::column<glm::tmat2x2<float,0> >
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat2x
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN4@test_mat2x
$LN3@test_mat2x:
	mov	DWORD PTR tv131[rsp], 1
$LN4@test_mat2x:
	mov	eax, DWORD PTR tv131[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 37   : 	Error += glm::column(m, 1) == glm::vec2( 4,  5) ? 0 : 1;

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv135[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$column@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z ; glm::column<glm::tmat2x2<float,0> >
	mov	rcx, QWORD PTR tv135[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat2x
	mov	DWORD PTR tv146[rsp], 0
	jmp	SHORT $LN6@test_mat2x
$LN5@test_mat2x:
	mov	DWORD PTR tv146[rsp], 1
$LN6@test_mat2x:
	mov	eax, DWORD PTR tv146[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 38   : 
; 39   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 40   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat2x2_col_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
?test_mat2x2_col_set@@YAHXZ ENDP			; test_mat2x2_col_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
tv70 = 0
v1$ = 32
v2$ = 40
??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 873  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 874  : 		return (v1.x == v2.x) && (v1.y == v2.y);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv70[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv70[rsp]

; 875  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 52
tv84 = 56
__$ReturnUdt$ = 80
m$ = 88
index$ = 96
??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z PROC ; glm::row<glm::tmat2x2<float,0> >, COMDAT

; 28   : 	{

$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 29   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 29
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 30   : 
; 31   : 		typename genType::row_type Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@XZ		; glm::tvec2<float,0>::tvec2<float,0>

; 32   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 33   : 			Result[i] = m[i][index];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 34   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR Result$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 35   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z ENDP ; glm::row<glm::tmat2x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_access.inl
;	COMDAT ??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv84 = 80
__$ArrayPad$ = 88
__$ReturnUdt$ = 128
m$ = 136
index$ = 144
x$ = 152
??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z PROC ; glm::row<glm::tmat2x2<float,0> >, COMDAT

; 13   : 	{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 14   : 		assert(index >= 0 && index < m[0].length());

	cmp	DWORD PTR index$[rsp], 0
	jl	SHORT $LN6@row
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN7@row
$LN6@row:
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:??_C@_1LI@ENJGLEAI@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1EI@MABFCMEO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@row:

; 15   : 
; 16   : 		genType Result = m;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 16
	rep movsb

; 17   : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@row
$LN2@row:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@row:
	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@row

; 18   : 			Result[i][index] = x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@row
$LN3@row:

; 19   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 20   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::row<glm::tmat2x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat4x3<float,0>::operator[], COMDAT

; 218  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 219  : 		assert(i < this->length());

	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 219				; 000000dbH
	lea	rdx, OFFSET FLAT:??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 220  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 221  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat4x3<float,0>::operator[], COMDAT

; 211  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 212  : 		assert(i < this->length());

	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 212				; 000000d4H
	lea	rdx, OFFSET FLAT:??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 213  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 214  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
$T4 = 68
this$ = 112
s$ = 120
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 48   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 4
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 49   : 		this->value[0] = col_type(s, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 50   : 		this->value[1] = col_type(0, s, 0);

	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 51   : 		this->value[2] = col_type(0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 52   : 		this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 53   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 198  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 199  : 		assert(i < this->length());

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 199				; 000000c7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 200  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 201  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 191  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 192  : 		assert(i < this->length());

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 192				; 000000c0H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 193  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 194  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
scalar$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 47   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	movss	xmm3, DWORD PTR scalar$[rsp]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 51   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
s$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 50   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 55   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat2x3<float,0>::operator[], COMDAT

; 166  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 167  : 		assert(i < this->length());

	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 167				; 000000a7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 168  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 169  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat2x3<float,0>::operator[], COMDAT

; 159  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 160  : 		assert(i < this->length());

	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 160				; 000000a0H
	lea	rdx, OFFSET FLAT:??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 161  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 162  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<float,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
this$ = 96
scalar$ = 104
??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 42   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 2
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 45   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat3x2<float,0>::operator[], COMDAT

; 196  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 197  : 		assert(i < this->length());

	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 197				; 000000c5H
	lea	rdx, OFFSET FLAT:??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 198  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat3x2<float,0>::operator[], COMDAT

; 189  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 190  : 		assert(i < this->length());

	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 190				; 000000beH
	lea	rdx, OFFSET FLAT:??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 191  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 192  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
this$ = 80
scalar$ = 88
??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 45   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 3
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 46   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 47   : 		this->value[1] = col_type(0, scalar);

	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 48   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 49   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat2x4<float,0>::operator[], COMDAT

; 167  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 168  : 		assert(i < this->length());

	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 168				; 000000a8H
	lea	rdx, OFFSET FLAT:??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 169  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 170  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat2x4<float,0>::operator[], COMDAT

; 160  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 161  : 		assert(i < this->length());

	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 161				; 000000a1H
	lea	rdx, OFFSET FLAT:??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 162  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 163  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<float,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
Zero$ = 48
$T1 = 52
$T2 = 68
this$ = 128
scalar$ = 136
??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 42   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 2
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 43   : 		value_type const Zero(0);

	xorps	xmm0, xmm0
	movss	DWORD PTR Zero$[rsp], xmm0

; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);

	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR scalar$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 46   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat4x2<float,0>::operator[], COMDAT

; 225  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 226  : 		assert(i < this->length());

	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 226				; 000000e2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 227  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 228  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat4x2<float,0>::operator[], COMDAT

; 218  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 219  : 		assert(i < this->length());

	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 219				; 000000dbH
	lea	rdx, OFFSET FLAT:??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 220  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 221  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
this$ = 80
scalar$ = 88
??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 55   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 4
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 56   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 57   : 		this->value[1] = col_type(0, scalar);

	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 58   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 59   : 		this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 60   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat3x4<float,0>::operator[], COMDAT

; 196  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 197  : 		assert(i < this->length());

	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 197				; 000000c5H
	lea	rdx, OFFSET FLAT:??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 198  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat3x4<float,0>::operator[], COMDAT

; 189  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 190  : 		assert(i < this->length());

	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 190				; 000000beH
	lea	rdx, OFFSET FLAT:??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 191  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 192  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
this$ = 128
scalar$ = 136
??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 45   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 3
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);

	mov	DWORD PTR [rsp+32], 0
	movss	xmm3, DWORD PTR scalar$[rsp]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 49   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat2x2<float,0>::operator[], COMDAT

; 166  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 167  : 		assert(i < this->length());

	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 167				; 000000a7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 168  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 169  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat2x2<float,0>::operator[], COMDAT

; 159  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 160  : 		assert(i < this->length());

	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 160				; 000000a0H
	lea	rdx, OFFSET FLAT:??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 161  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 162  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<float,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
scalar$ = 72
??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 44   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 2
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 45   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 46   : 		this->value[1] = col_type(0, scalar);

	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 47   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_matrix_access.cpp
_TEXT	SEGMENT
Error$ = 32
m$ = 56
$T4 = 88
$T5 = 104
$T6 = 128
$T7 = 136
$T8 = 144
$T9 = 152
$T10 = 160
$T11 = 168
tv88 = 176
tv131 = 184
tv135 = 192
tv146 = 200
__$ArrayPad$ = 208
?test_mat2x2_row_set@@YAHXZ PROC			; test_mat2x2_row_set

; 13   : {

$LN7:
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 14   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 15   : 
; 16   : 	glm::mat2x2 m(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x2<float,0>::tmat2x2<float,0>

; 17   : 
; 18   : 	m = glm::row(m, 0, glm::vec2( 0,  1));

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 19   : 	m = glm::row(m, 1, glm::vec2( 4,  5));

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	r9, rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@HAEBU?$tvec2@M$0A@@0@@Z ; glm::row<glm::tmat2x2<float,0> >
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 20   : 
; 21   : 	Error += glm::row(m, 0) == glm::vec2( 0,  1) ? 0 : 1;

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv88[rsp], rax
	xor	r8d, r8d
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z ; glm::row<glm::tmat2x2<float,0> >
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_mat2x
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN4@test_mat2x
$LN3@test_mat2x:
	mov	DWORD PTR tv131[rsp], 1
$LN4@test_mat2x:
	mov	eax, DWORD PTR tv131[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 22   : 	Error += glm::row(m, 1) == glm::vec2( 4,  5) ? 0 : 1;

	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv135[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$row@U?$tmat2x2@M$0A@@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tmat2x2@M$0A@@0@H@Z ; glm::row<glm::tmat2x2<float,0> >
	mov	rcx, QWORD PTR tv135[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_mat2x
	mov	DWORD PTR tv146[rsp], 0
	jmp	SHORT $LN6@test_mat2x
$LN5@test_mat2x:
	mov	DWORD PTR tv146[rsp], 1
$LN6@test_mat2x:
	mov	eax, DWORD PTR tv146[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 23   : 
; 24   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 25   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat2x2_row_set@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
?test_mat2x2_row_set@@YAHXZ ENDP			; test_mat2x2_row_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
tv67 = 40
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rsp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
