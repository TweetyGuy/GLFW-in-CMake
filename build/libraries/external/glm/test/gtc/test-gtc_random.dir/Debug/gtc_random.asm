; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG28304 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28305 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28306 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28307 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28310 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28311 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28312 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28313 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28316 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28317 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28318 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28319 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28322 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28323 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28324 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28325 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28328 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28329 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28330 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28331 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28334 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28335 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28336 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28337 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28340 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28341 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28342 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28343 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28346 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28347 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28348 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28349 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28354 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28355 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28356 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28357 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28436 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28437 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28840 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28841 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28863 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28864 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG28886 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'c', 00H, '\', 00H, 'g', 00H, 't', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG28887 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
CONST	ENDS
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?min@?$numeric_limits@C@std@@SACXZ		; std::numeric_limits<signed char>::min
PUBLIC	?max@?$numeric_limits@C@std@@SACXZ		; std::numeric_limits<signed char>::max
PUBLIC	?min@?$numeric_limits@E@std@@SAEXZ		; std::numeric_limits<unsigned char>::min
PUBLIC	?max@?$numeric_limits@E@std@@SAEXZ		; std::numeric_limits<unsigned char>::max
PUBLIC	?min@?$numeric_limits@F@std@@SAFXZ		; std::numeric_limits<short>::min
PUBLIC	?max@?$numeric_limits@F@std@@SAFXZ		; std::numeric_limits<short>::max
PUBLIC	?min@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::min
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?min@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::min
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	?min@?$numeric_limits@G@std@@SAGXZ		; std::numeric_limits<unsigned short>::min
PUBLIC	?max@?$numeric_limits@G@std@@SAGXZ		; std::numeric_limits<unsigned short>::max
PUBLIC	?min@?$numeric_limits@I@std@@SAIXZ		; std::numeric_limits<unsigned int>::min
PUBLIC	?max@?$numeric_limits@I@std@@SAIXZ		; std::numeric_limits<unsigned int>::max
PUBLIC	?min@?$numeric_limits@_K@std@@SA_KXZ		; std::numeric_limits<unsigned __int64>::min
PUBLIC	?max@?$numeric_limits@_K@std@@SA_KXZ		; std::numeric_limits<unsigned __int64>::max
PUBLIC	??$epsilonEqual@M@glm@@YA_NAEBM00@Z		; glm::epsilonEqual<float>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??$epsilonEqual@N@glm@@YA_NAEBN00@Z		; glm::epsilonEqual<double>
PUBLIC	??$abs@N@glm@@YANN@Z				; glm::abs<double>
PUBLIC	?test_linearRand@@YAHXZ				; test_linearRand
PUBLIC	?length@?$tvec2@E$0A@@glm@@SAHXZ		; glm::tvec2<unsigned char,0>::length
PUBLIC	??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z		; glm::tvec2<unsigned char,0>::operator[]
PUBLIC	??0?$tvec2@E$0A@@glm@@QEAA@E@Z			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??0?$tvec2@E$0A@@glm@@QEAA@EE@Z			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
PUBLIC	??$linearRand@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ; glm::linearRand<unsigned char,0,glm::tvec2>
PUBLIC	??$min@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ; glm::min<unsigned char,0,glm::tvec2>
PUBLIC	??$max@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ; glm::max<unsigned char,0,glm::tvec2>
PUBLIC	??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ; glm::lessThanEqual<unsigned char,0,glm::tvec2>
PUBLIC	?length@?$tvec2@_N$0A@@glm@@SAHXZ		; glm::tvec2<bool,0>::length
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
PUBLIC	??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ; glm::greaterThanEqual<unsigned char,0,glm::tvec2>
PUBLIC	??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec2>
PUBLIC	?length@?$tvec2@G$0A@@glm@@SAHXZ		; glm::tvec2<unsigned short,0>::length
PUBLIC	??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z		; glm::tvec2<unsigned short,0>::operator[]
PUBLIC	??0?$tvec2@G$0A@@glm@@QEAA@G@Z			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??0?$tvec2@G$0A@@glm@@QEAA@GG@Z			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
PUBLIC	??$linearRand@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ; glm::linearRand<unsigned short,0,glm::tvec2>
PUBLIC	??$min@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ; glm::min<unsigned short,0,glm::tvec2>
PUBLIC	??$max@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ; glm::max<unsigned short,0,glm::tvec2>
PUBLIC	??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ; glm::lessThanEqual<unsigned short,0,glm::tvec2>
PUBLIC	??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ; glm::greaterThanEqual<unsigned short,0,glm::tvec2>
PUBLIC	??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec2>
PUBLIC	?length@?$tvec2@I$0A@@glm@@SAHXZ		; glm::tvec2<unsigned int,0>::length
PUBLIC	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@I@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@II@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??$linearRand@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::linearRand<unsigned int,0,glm::tvec2>
PUBLIC	??$min@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::min<unsigned int,0,glm::tvec2>
PUBLIC	??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::max<unsigned int,0,glm::tvec2>
PUBLIC	??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::lessThanEqual<unsigned int,0,glm::tvec2>
PUBLIC	??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
PUBLIC	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
PUBLIC	?length@?$tvec2@_K$0A@@glm@@SAHXZ		; glm::tvec2<unsigned __int64,0>::length
PUBLIC	??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z		; glm::tvec2<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??$linearRand@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::linearRand<unsigned __int64,0,glm::tvec2>
PUBLIC	??$min@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::min<unsigned __int64,0,glm::tvec2>
PUBLIC	??$max@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::max<unsigned __int64,0,glm::tvec2>
PUBLIC	??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ; glm::lessThanEqual<unsigned __int64,0,glm::tvec2>
PUBLIC	??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ; glm::greaterThanEqual<unsigned __int64,0,glm::tvec2>
PUBLIC	??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec2>
PUBLIC	?length@?$tvec2@C$0A@@glm@@SAHXZ		; glm::tvec2<signed char,0>::length
PUBLIC	??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z		; glm::tvec2<signed char,0>::operator[]
PUBLIC	??0?$tvec2@C$0A@@glm@@QEAA@C@Z			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??0?$tvec2@C$0A@@glm@@QEAA@CC@Z			; glm::tvec2<signed char,0>::tvec2<signed char,0>
PUBLIC	??$linearRand@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ; glm::linearRand<signed char,0,glm::tvec2>
PUBLIC	??$min@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ; glm::min<signed char,0,glm::tvec2>
PUBLIC	??$max@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ; glm::max<signed char,0,glm::tvec2>
PUBLIC	??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ; glm::lessThanEqual<signed char,0,glm::tvec2>
PUBLIC	??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ; glm::greaterThanEqual<signed char,0,glm::tvec2>
PUBLIC	??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec2>
PUBLIC	?length@?$tvec2@F$0A@@glm@@SAHXZ		; glm::tvec2<short,0>::length
PUBLIC	??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z		; glm::tvec2<short,0>::operator[]
PUBLIC	??0?$tvec2@F$0A@@glm@@QEAA@F@Z			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??0?$tvec2@F$0A@@glm@@QEAA@FF@Z			; glm::tvec2<short,0>::tvec2<short,0>
PUBLIC	??$linearRand@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ; glm::linearRand<short,0,glm::tvec2>
PUBLIC	??$min@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ; glm::min<short,0,glm::tvec2>
PUBLIC	??$max@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ; glm::max<short,0,glm::tvec2>
PUBLIC	??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ; glm::lessThanEqual<short,0,glm::tvec2>
PUBLIC	??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ; glm::greaterThanEqual<short,0,glm::tvec2>
PUBLIC	??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec2>
PUBLIC	?length@?$tvec2@H$0A@@glm@@SAHXZ		; glm::tvec2<int,0>::length
PUBLIC	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec2<int,0>::operator[]
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@H@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??$linearRand@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ; glm::linearRand<int,0,glm::tvec2>
PUBLIC	??$min@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ; glm::min<int,0,glm::tvec2>
PUBLIC	??$max@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ; glm::max<int,0,glm::tvec2>
PUBLIC	??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::lessThanEqual<int,0,glm::tvec2>
PUBLIC	??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::greaterThanEqual<int,0,glm::tvec2>
PUBLIC	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
PUBLIC	?length@?$tvec2@_J$0A@@glm@@SAHXZ		; glm::tvec2<__int64,0>::length
PUBLIC	??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z		; glm::tvec2<__int64,0>::operator[]
PUBLIC	??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z		; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z		; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??$linearRand@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::linearRand<__int64,0,glm::tvec2>
PUBLIC	??$min@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::min<__int64,0,glm::tvec2>
PUBLIC	??$max@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::max<__int64,0,glm::tvec2>
PUBLIC	??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ; glm::lessThanEqual<__int64,0,glm::tvec2>
PUBLIC	??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ; glm::greaterThanEqual<__int64,0,glm::tvec2>
PUBLIC	??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec2>
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??$linearRand@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::linearRand<float,0,glm::tvec2>
PUBLIC	??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThanEqual<float,0,glm::tvec2>
PUBLIC	??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::greaterThanEqual<float,0,glm::tvec2>
PUBLIC	?length@?$tvec2@N$0A@@glm@@SAHXZ		; glm::tvec2<double,0>::length
PUBLIC	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec2<double,0>::operator[]
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@N@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??$linearRand@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::linearRand<double,0,glm::tvec2>
PUBLIC	??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ; glm::lessThanEqual<double,0,glm::tvec2>
PUBLIC	??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ; glm::greaterThanEqual<double,0,glm::tvec2>
PUBLIC	??$linearRand@M@glm@@YAMMM@Z			; glm::linearRand<float>
PUBLIC	??$linearRand@N@glm@@YANNN@Z			; glm::linearRand<double>
PUBLIC	?test_circularRand@@YAHXZ			; test_circularRand
PUBLIC	??$circularRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z	; glm::circularRand<float>
PUBLIC	??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::length<float,0,glm::tvec2>
PUBLIC	??$circularRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z	; glm::circularRand<double>
PUBLIC	??$length@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@@Z ; glm::length<double,0,glm::tvec2>
PUBLIC	?test_sphericalRand@@YAHXZ			; test_sphericalRand
PUBLIC	??$sphericalRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z ; glm::sphericalRand<float>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
PUBLIC	??$sphericalRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z ; glm::sphericalRand<double>
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@N@Z			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z		; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z ; glm::length<double,0,glm::tvec3>
PUBLIC	?test_diskRand@@YAHXZ				; test_diskRand
PUBLIC	??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z	; glm::diskRand<float>
PUBLIC	??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z	; glm::diskRand<double>
PUBLIC	?test_ballRand@@YAHXZ				; test_ballRand
PUBLIC	??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z	; glm::ballRand<float>
PUBLIC	??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z	; glm::ballRand<double>
PUBLIC	main
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?call@?$compute_abs@N$00@detail@glm@@SANN@Z	; glm::detail::compute_abs<double,1>::call
PUBLIC	?call@?$compute_linearRand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<unsigned char,0,glm::tvec2>::call
PUBLIC	?call@?$compute_min_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<unsigned char,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_max_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<unsigned char,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_linearRand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<unsigned short,0,glm::tvec2>::call
PUBLIC	?call@?$compute_min_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<unsigned short,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_max_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<unsigned short,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_linearRand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<unsigned int,0,glm::tvec2>::call
PUBLIC	?call@?$compute_min_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<unsigned int,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<unsigned int,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_linearRand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<unsigned __int64,0,glm::tvec2>::call
PUBLIC	?call@?$compute_min_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<unsigned __int64,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_max_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<unsigned __int64,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_linearRand@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<signed char,0,glm::tvec2>::call
PUBLIC	?call@?$compute_min_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<signed char,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_max_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<signed char,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_linearRand@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<short,0,glm::tvec2>::call
PUBLIC	?call@?$compute_min_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<short,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_max_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<short,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_linearRand@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<int,0,glm::tvec2>::call
PUBLIC	?call@?$compute_min_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<int,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_max_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<int,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_linearRand@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<__int64,0,glm::tvec2>::call
PUBLIC	?call@?$compute_min_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<__int64,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_max_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<__int64,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_linearRand@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<float,0,glm::tvec2>::call
PUBLIC	?call@?$compute_linearRand@N$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<double,0,glm::tvec2>::call
PUBLIC	?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<float,0,glm::tvec1>::call
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	?call@?$compute_linearRand@N$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<double,0,glm::tvec1>::call
PUBLIC	??0?$tvec1@N$0A@@glm@@QEAA@N@Z			; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec2,float,0,0>::call
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z	; glm::operator*<double,0>
PUBLIC	?call@?$compute_length@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@@Z ; glm::detail::compute_length<glm::tvec2,double,0,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,float,0,0>::call
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z	; glm::operator*<double,0>
PUBLIC	?call@?$compute_length@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,double,0,0>::call
PUBLIC	??$linearRand@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::linearRand<float,0,glm::tvec3>
PUBLIC	??$linearRand@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ; glm::linearRand<double,0,glm::tvec3>
PUBLIC	??$dot@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@0@Z ; glm::dot<double,0,glm::tvec3>
PUBLIC	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
PUBLIC	??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z ; glm::dot<double,0,glm::tvec2>
PUBLIC	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
PUBLIC	?call@?$compute_rand@_K$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@_K$0A@@3@XZ ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec1>::call
PUBLIC	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??$?0_K$0A@@?$tvec1@N$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z ; glm::tvec1<double,0>::tvec1<double,0><unsigned __int64,0>
PUBLIC	??$?KN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@N@Z	; glm::operator/<double,0>
PUBLIC	??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z	; glm::operator-<double,0>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z	; glm::operator*<double,0>
PUBLIC	??$?HN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z	; glm::operator+<double,0>
PUBLIC	?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec1>::call
PUBLIC	??0?$tvec1@I$0A@@glm@@QEAA@I@Z			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<float,0>::tvec1<float,0><unsigned int,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	?call@?$compute_rand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@XZ ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec2>::call
PUBLIC	??$?0_K$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><unsigned __int64,0>
PUBLIC	??$?KN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z	; glm::operator/<double,0>
PUBLIC	??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z	; glm::operator-<double,0>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z	; glm::operator*<double,0>
PUBLIC	??$?HN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z	; glm::operator+<double,0>
PUBLIC	?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec2>::call
PUBLIC	??$?0I$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><unsigned int,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	?call@?$functor2@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@P6A_J_J0@ZAEBU43@2@Z ; glm::detail::functor2<__int64,0,glm::tvec2>::call
PUBLIC	??$max@_J@glm@@YA_J_J0@Z			; glm::max<__int64>
PUBLIC	??$min@_J@glm@@YA_J_J0@Z			; glm::min<__int64>
PUBLIC	??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z ; glm::operator+<__int64,0>
PUBLIC	??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::operator-<__int64,0>
PUBLIC	??$?0_J$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><__int64,0>
PUBLIC	??$?L_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::operator%<unsigned __int64,0>
PUBLIC	??$?0_K$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><unsigned __int64,0>
PUBLIC	??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::operator+<__int64,0>
PUBLIC	?call@?$functor2@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHHH@ZAEBU43@1@Z ; glm::detail::functor2<int,0,glm::tvec2>::call
PUBLIC	??$max@H@glm@@YAHHH@Z				; glm::max<int>
PUBLIC	??$min@H@glm@@YAHHH@Z				; glm::min<int>
PUBLIC	??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z	; glm::operator+<int,0>
PUBLIC	??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z	; glm::operator-<int,0>
PUBLIC	??$?0H$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><int,0>
PUBLIC	??$?LI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z	; glm::operator%<unsigned int,0>
PUBLIC	??$?0I$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<int,0>::tvec2<int,0><unsigned int,0>
PUBLIC	??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z	; glm::operator+<int,0>
PUBLIC	?call@?$functor2@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@P6AFFF@ZAEBU43@1@Z ; glm::detail::functor2<short,0,glm::tvec2>::call
PUBLIC	??$max@F@glm@@YAFFF@Z				; glm::max<short>
PUBLIC	??$min@F@glm@@YAFFF@Z				; glm::min<short>
PUBLIC	?call@?$compute_rand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec2>::call
PUBLIC	??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@F@Z	; glm::operator+<short,0>
PUBLIC	??$?GF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z	; glm::operator-<short,0>
PUBLIC	??$?0F$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><short,0>
PUBLIC	??$?LG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z	; glm::operator%<unsigned short,0>
PUBLIC	??$?0G$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ; glm::tvec2<short,0>::tvec2<short,0><unsigned short,0>
PUBLIC	??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z	; glm::operator+<short,0>
PUBLIC	?call@?$functor2@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@P6ACCC@ZAEBU43@1@Z ; glm::detail::functor2<signed char,0,glm::tvec2>::call
PUBLIC	??$max@C@glm@@YACCC@Z				; glm::max<signed char>
PUBLIC	??$min@C@glm@@YACCC@Z				; glm::min<signed char>
PUBLIC	?call@?$compute_rand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec2>::call
PUBLIC	??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@C@Z	; glm::operator+<signed char,0>
PUBLIC	??$?GC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z	; glm::operator-<signed char,0>
PUBLIC	??$?0C$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><signed char,0>
PUBLIC	??$?LE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z	; glm::operator%<unsigned char,0>
PUBLIC	??$?0E$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ; glm::tvec2<signed char,0>::tvec2<signed char,0><unsigned char,0>
PUBLIC	??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z	; glm::operator+<signed char,0>
PUBLIC	?call@?$functor2@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@P6A_K_K0@ZAEBU43@2@Z ; glm::detail::functor2<unsigned __int64,0,glm::tvec2>::call
PUBLIC	??$max@_K@glm@@YA_K_K0@Z			; glm::max<unsigned __int64>
PUBLIC	??$min@_K@glm@@YA_K_K0@Z			; glm::min<unsigned __int64>
PUBLIC	??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z ; glm::operator+<unsigned __int64,0>
PUBLIC	??$?G_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::operator-<unsigned __int64,0>
PUBLIC	??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned __int64,0>
PUBLIC	?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z ; glm::detail::functor2<unsigned int,0,glm::tvec2>::call
PUBLIC	??$max@I@glm@@YAIII@Z				; glm::max<unsigned int>
PUBLIC	??$min@I@glm@@YAIII@Z				; glm::min<unsigned int>
PUBLIC	??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z	; glm::operator+<unsigned int,0>
PUBLIC	??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z	; glm::operator-<unsigned int,0>
PUBLIC	??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z	; glm::operator+<unsigned int,0>
PUBLIC	?call@?$functor2@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@P6AGGG@ZAEBU43@1@Z ; glm::detail::functor2<unsigned short,0,glm::tvec2>::call
PUBLIC	??$max@G@glm@@YAGGG@Z				; glm::max<unsigned short>
PUBLIC	??$min@G@glm@@YAGGG@Z				; glm::min<unsigned short>
PUBLIC	??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z	; glm::operator+<unsigned short,0>
PUBLIC	??$?GG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z	; glm::operator-<unsigned short,0>
PUBLIC	??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z	; glm::operator+<unsigned short,0>
PUBLIC	?call@?$functor2@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@P6AEEE@ZAEBU43@1@Z ; glm::detail::functor2<unsigned char,0,glm::tvec2>::call
PUBLIC	??$max@E@glm@@YAEEE@Z				; glm::max<unsigned char>
PUBLIC	??$min@E@glm@@YAEEE@Z				; glm::min<unsigned char>
PUBLIC	??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@E@Z	; glm::operator+<unsigned char,0>
PUBLIC	??$?GE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z	; glm::operator-<unsigned char,0>
PUBLIC	??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z	; glm::operator+<unsigned char,0>
PUBLIC	??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><int,int>
PUBLIC	??$?0E$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><unsigned char,0>
PUBLIC	??$?6G$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z	; glm::operator<<<unsigned short,0>
PUBLIC	??$?UG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z	; glm::operator|<unsigned short,0>
PUBLIC	??$?0G$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><unsigned short,0>
PUBLIC	??$?6I$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z	; glm::operator<<<unsigned int,0>
PUBLIC	??$?UI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z	; glm::operator|<unsigned int,0>
PUBLIC	??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><unsigned int,0>
PUBLIC	??$?6_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
PUBLIC	??$?U_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned __int64,0>
PUBLIC	?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec1>::call
PUBLIC	??0?$tvec1@G$0A@@glm@@QEAA@G@Z			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned short,0>
PUBLIC	??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z	; glm::operator<<<unsigned int,0>
PUBLIC	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z	; glm::operator|<unsigned int,0>
PUBLIC	??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>
PUBLIC	??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
PUBLIC	??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned __int64,0>
PUBLIC	?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec1>::call
PUBLIC	??0?$tvec1@E$0A@@glm@@QEAA@E@Z			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z ; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0><unsigned char,0>
PUBLIC	??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z	; glm::operator<<<unsigned short,0>
PUBLIC	??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z	; glm::operator|<unsigned short,0>
PUBLIC	?call@?$compute_linearRand@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<float,0,glm::tvec3>::call
PUBLIC	?call@?$compute_linearRand@N$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<double,0,glm::tvec3>::call
PUBLIC	?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
PUBLIC	??$?0HH@?$tvec2@F$0A@@glm@@QEAA@HH@Z		; glm::tvec2<short,0>::tvec2<short,0><int,int>
PUBLIC	??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><int,int>
PUBLIC	??$?0HH@?$tvec2@C$0A@@glm@@QEAA@HH@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0><int,int>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z	; glm::operator*<double,0>
PUBLIC	?call@?$compute_rand@_K$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_K$0A@@3@XZ ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec3>::call
PUBLIC	??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??$?0_K$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><unsigned __int64,0>
PUBLIC	??$?KN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z	; glm::operator/<double,0>
PUBLIC	??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z	; glm::operator-<double,0>
PUBLIC	??$?HN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z	; glm::operator+<double,0>
PUBLIC	?call@?$compute_rand@I$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec3>::call
PUBLIC	??0?$tvec3@I$0A@@glm@@QEAA@III@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??$?0I$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><unsigned int,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	?call@?$compute_rand@G$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec3>::call
PUBLIC	??$?0G$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><unsigned short,0>
PUBLIC	??$?6I$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@I@Z	; glm::operator<<<unsigned int,0>
PUBLIC	??$?UI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z	; glm::operator|<unsigned int,0>
PUBLIC	??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><unsigned int,0>
PUBLIC	??$?6_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
PUBLIC	??$?U_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned __int64,0>
PUBLIC	?call@?$compute_rand@E$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec3>::call
PUBLIC	??$?0E$0A@@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><unsigned char,0>
PUBLIC	??$?6G$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@G@Z	; glm::operator<<<unsigned short,0>
PUBLIC	??$?UG$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@0@Z	; glm::operator|<unsigned short,0>
PUBLIC	??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><int,int,int>
PUBLIC	??$?0HHH@?$tvec3@G$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><int,int,int>
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@38d1b717
PUBLIC	__real@3c23d70a
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@401921fb60000000
PUBLIC	__real@4030000000000000
PUBLIC	__real@40400000
PUBLIC	__real@4040000000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40d3880000000000
PUBLIC	__real@41800000
PUBLIC	__real@42000000
PUBLIC	__real@469c4000
PUBLIC	__real@bf800000
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__wassert:PROC
EXTRN	cos:PROC
EXTRN	sin:PROC
EXTRN	sqrt:PROC
EXTRN	__imp_cosf:PROC
EXTRN	__imp_sinf:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	__imp_rand:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?cos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sin@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sin@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@C@std@@SACXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?min@?$numeric_limits@C@std@@SACXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@C@std@@SACXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?max@?$numeric_limits@C@std@@SACXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@E@std@@SAEXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?min@?$numeric_limits@E@std@@SAEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@E@std@@SAEXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?max@?$numeric_limits@E@std@@SAEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@F@std@@SAFXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?min@?$numeric_limits@F@std@@SAFXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@F@std@@SAFXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?max@?$numeric_limits@F@std@@SAFXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@H@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?min@?$numeric_limits@H@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@H@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?max@?$numeric_limits@H@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?min@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@G@std@@SAGXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?min@?$numeric_limits@G@std@@SAGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@G@std@@SAGXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?max@?$numeric_limits@G@std@@SAGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@I@std@@SAIXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?min@?$numeric_limits@I@std@@SAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@I@std@@SAIXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?max@?$numeric_limits@I@std@@SAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@_K@std@@SA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?min@?$numeric_limits@_K@std@@SA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_K@std@@SA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$?max@?$numeric_limits@_K@std@@SA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@N@glm@@YA_NAEBN00@Z DD imagerel $LN5
	DD	imagerel $LN5+87
	DD	imagerel $unwind$??$epsilonEqual@N@glm@@YA_NAEBN00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@N@glm@@YANN@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@N@glm@@YANN@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_linearRand@@YAHXZ DD imagerel $LN103
	DD	imagerel $LN103+6108
	DD	imagerel $unwind$?test_linearRand@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@E$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@E$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@E$0A@@glm@@QEAA@E@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??0?$tvec2@E$0A@@glm@@QEAA@E@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@E$0A@@glm@@QEAA@EE@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??0?$tvec2@E$0A@@glm@@QEAA@EE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@G$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@G$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@G$0A@@glm@@QEAA@G@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@G$0A@@glm@@QEAA@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@G$0A@@glm@@QEAA@GG@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec2@G$0A@@glm@@QEAA@GG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@II@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_K$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_K$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@C$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@C$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@C$0A@@glm@@QEAA@C@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??0?$tvec2@C$0A@@glm@@QEAA@C@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@C$0A@@glm@@QEAA@CC@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??0?$tvec2@C$0A@@glm@@QEAA@CC@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@F$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@F$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@F$0A@@glm@@QEAA@F@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@F$0A@@glm@@QEAA@F@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@F$0A@@glm@@QEAA@FF@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec2@F$0A@@glm@@QEAA@FF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??0?$tvec2@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_J$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_J$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@N$0A@@glm@@QEAA@N@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@N$0A@@glm@@QEAA@NN@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@N$0A@@glm@@QEAA@NN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+269
	DD	imagerel $unwind$??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+269
	DD	imagerel $unwind$??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@M@glm@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$linearRand@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@N@glm@@YANNN@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$linearRand@N@glm@@YANNN@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_circularRand@@YAHXZ DD imagerel $LN15
	DD	imagerel $LN15+565
	DD	imagerel $unwind$?test_circularRand@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$circularRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$??$circularRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$circularRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$??$circularRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_sphericalRand@@YAHXZ DD imagerel $LN31
	DD	imagerel $LN31+1417
	DD	imagerel $unwind$?test_sphericalRand@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sphericalRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z DD imagerel $LN3
	DD	imagerel $LN3+221
	DD	imagerel $unwind$??$sphericalRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sphericalRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z DD imagerel $LN3
	DD	imagerel $LN3+221
	DD	imagerel $unwind$??$sphericalRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@N$0A@@glm@@QEAA@N@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_diskRand@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+303
	DD	imagerel $unwind$?test_diskRand@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z DD imagerel $LN6
	DD	imagerel $LN6+210
	DD	imagerel $unwind$??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z DD imagerel $LN6
	DD	imagerel $LN6+264
	DD	imagerel $unwind$??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ballRand@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+303
	DD	imagerel $unwind$?test_ballRand@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z DD imagerel $LN6
	DD	imagerel $LN6+253
	DD	imagerel $unwind$??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z DD imagerel $LN6
	DD	imagerel $LN6+267
	DD	imagerel $unwind$??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@N$00@detail@glm@@SANN@Z DD imagerel $LN5
	DD	imagerel $LN5+72
	DD	imagerel $unwind$?call@?$compute_abs@N$00@detail@glm@@SANN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$?call@?$compute_linearRand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$?call@?$compute_linearRand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$?call@?$compute_linearRand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$?call@?$compute_linearRand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$compute_linearRand@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?call@?$compute_linearRand@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+153
	DD	imagerel $unwind$?call@?$compute_linearRand@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+177
	DD	imagerel $unwind$?call@?$compute_linearRand@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?call@?$compute_linearRand@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@N$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z DD imagerel $LN5
	DD	imagerel $LN5+215
	DD	imagerel $unwind$?call@?$compute_linearRand@N$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@N$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@0@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?call@?$compute_linearRand@N$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@N$0A@@glm@@QEAA@N@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$linearRand@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@_K$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@_K$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$?call@?$compute_rand@_K$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@_K$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_K$0A@@?$tvec1@N$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+72
	DD	imagerel $unwind$??$?0_K$0A@@?$tvec1@N$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@N@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?KN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?HN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@I$0A@@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0?$tvec1@I$0A@@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$?call@?$compute_rand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_K$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z DD imagerel $LN7
	DD	imagerel $LN7+128
	DD	imagerel $unwind$??$?0_K$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?KN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?HN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?0I$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@P6A_J_J0@ZAEBU43@2@Z DD imagerel $LN3
	DD	imagerel $LN3+104
	DD	imagerel $unwind$?call@?$functor2@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@P6A_J_J0@ZAEBU43@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_J@glm@@YA_J_J0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$??$max@_J@glm@@YA_J_J0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_J@glm@@YA_J_J0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$??$min@_J@glm@@YA_J_J0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_J$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0_J$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?L_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$?L_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_K$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0_K$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHHH@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?call@?$functor2@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHHH@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@H@glm@@YAHHH@Z DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$??$max@H@glm@@YAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@H@glm@@YAHHH@Z DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$??$min@H@glm@@YAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0H$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?LI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?LI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0I$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@P6AFFF@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?call@?$functor2@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@P6AFFF@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@F@glm@@YAFFF@Z DD imagerel $LN5
	DD	imagerel $LN5+59
	DD	imagerel $unwind$??$max@F@glm@@YAFFF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@F@glm@@YAFFF@Z DD imagerel $LN5
	DD	imagerel $LN5+59
	DD	imagerel $unwind$??$min@F@glm@@YAFFF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?call@?$compute_rand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@F@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@F@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?GF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0F$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0F$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?LG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?LG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0G$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0G$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@P6ACCC@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+104
	DD	imagerel $unwind$?call@?$functor2@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@P6ACCC@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@C@glm@@YACCC@Z DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$??$max@C@glm@@YACCC@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@C@glm@@YACCC@Z DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$??$min@C@glm@@YACCC@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$?call@?$compute_rand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@C@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@C@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?GC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0C$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0C$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?LE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?LE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0E$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0E$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@P6A_K_K0@ZAEBU43@2@Z DD imagerel $LN3
	DD	imagerel $LN3+104
	DD	imagerel $unwind$?call@?$functor2@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@P6A_K_K0@ZAEBU43@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K@glm@@YA_K_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$??$max@_K@glm@@YA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@glm@@YA_K_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$??$min@_K@glm@@YA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?G_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$?G_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@I@glm@@YAIII@Z DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$??$max@I@glm@@YAIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@I@glm@@YAIII@Z DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$??$min@I@glm@@YAIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@P6AGGG@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?call@?$functor2@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@P6AGGG@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@G@glm@@YAGGG@Z DD imagerel $LN5
	DD	imagerel $LN5+59
	DD	imagerel $unwind$??$max@G@glm@@YAGGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@G@glm@@YAGGG@Z DD imagerel $LN5
	DD	imagerel $LN5+59
	DD	imagerel $unwind$??$min@G@glm@@YAGGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?GG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@P6AEEE@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+104
	DD	imagerel $unwind$?call@?$functor2@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@P6AEEE@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@E@glm@@YAEEE@Z DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$??$max@E@glm@@YAEEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@E@glm@@YAEEE@Z DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$??$min@E@glm@@YAEEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@E@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@E@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?GE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0E$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0E$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6G$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?6G$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?UG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?UG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0G$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0G$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6I$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?6I$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?UI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?UI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?6_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?U_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$?U_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@G$0A@@glm@@QEAA@G@Z DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$??0?$tvec1@G$0A@@glm@@QEAA@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@E$0A@@glm@@QEAA@E@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??0?$tvec1@E$0A@@glm@@QEAA@E@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+173
	DD	imagerel $unwind$?call@?$compute_linearRand@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@N$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@0@Z DD imagerel $LN5
	DD	imagerel $LN5+233
	DD	imagerel $unwind$?call@?$compute_linearRand@N$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@F$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$?0HH@?$tvec2@F$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@C$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??$?0HH@?$tvec2@C$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@_K$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_K$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?call@?$compute_rand@_K$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_K$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_K$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z DD imagerel $LN9
	DD	imagerel $LN9+184
	DD	imagerel $unwind$??$?0_K$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?KN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?HN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@I$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@I$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+134
	DD	imagerel $unwind$?call@?$compute_rand@I$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@I$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@I$0A@@glm@@QEAA@III@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0?$tvec3@I$0A@@glm@@QEAA@III@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?0I$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@G$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@G$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?call@?$compute_rand@G$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@G$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0G$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0G$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6I$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+119
	DD	imagerel $unwind$??$?6I$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?UI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$?UI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$??$?6_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?U_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?U_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@E$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@E$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+166
	DD	imagerel $unwind$?call@?$compute_rand@E$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@E$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0E$0A@@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0E$0A@@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6G$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@G@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$??$?6G$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?UG$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$??$?UG$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@G$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??$?0HHH@?$tvec3@G$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@469c4000
CONST	SEGMENT
__real@469c4000 DD 0469c4000r			; 20000
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@40d3880000000000
CONST	SEGMENT
__real@40d3880000000000 DQ 040d3880000000000r	; 20000
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@4040000000000000
CONST	SEGMENT
__real@4040000000000000 DQ 04040000000000000r	; 32
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4030000000000000
CONST	SEGMENT
__real@4030000000000000 DQ 04030000000000000r	; 16
CONST	ENDS
;	COMDAT __real@401921fb60000000
CONST	SEGMENT
__real@401921fb60000000 DQ 0401921fb60000000r	; 6.28319
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@G$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?UG$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6G$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@G@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0E$0A@@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@E$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@E$0A@@3@XZ DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?U_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?UI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6I$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@I@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0G$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@G$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@G$0A@@3@XZ DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@I$0A@@glm@@QEAA@III@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@I$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@I$0A@@3@XZ DD 020a01H
	DD	07006d20aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_K$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@_K$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_K$0A@@3@XZ DD 030d01H
	DD	016010dH
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@C$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@F$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DD	08H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call
	DD	018H
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@N$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@0@Z DD 031701H
	DD	0160117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	07010d214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@E$0A@@glm@@QEAA@E@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@G$0A@@glm@@QEAA@G@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?U_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?UI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6I$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0G$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?UG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6G$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0E$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@E@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@E@glm@@YAEEE@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@E@glm@@YAEEE@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@P6AEEE@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@G@glm@@YAGGG@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@G@glm@@YAGGG@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@P6AGGG@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@I@glm@@YAIII@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@I@glm@@YAIII@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?G_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@glm@@YA_K_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K@glm@@YA_K_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@P6A_K_K0@ZAEBU43@2@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0E$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?LE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0C$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@C@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@XZ DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@C@glm@@YACCC@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@C@glm@@YACCC@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@P6ACCC@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0G$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?LG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0F$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@F@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@XZ DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@F@glm@@YAFFF@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@F@glm@@YAFFF@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@P6AFFF@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?LI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@H@glm@@YAHHH@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@H@glm@@YAHHH@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHHH@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_K$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?L_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_J$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_J@glm@@YA_J_J0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_J@glm@@YA_J_J0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@P6A_J_J0@ZAEBU43@2@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_K$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@XZ DD 020d01H
	DD	07006f20dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@I$0A@@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@N@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_K$0A@@?$tvec1@N$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@_K$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@_K$0A@@3@XZ DD 020a01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@N$0A@@glm@@QEAA@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@N$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@0@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@N$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z DD 021701H
	DD	07010f217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z DD 031701H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z DD 021401H
	DD	07010d214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@N$00@detail@glm@@SANN@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z DD 042d01H
	DD	0150114H
	DD	0600c700dH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z$rtcName$0 DB 052H ; glm::ballRand<double>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z$rtcVarDesc DD 028H ; glm::ballRand<double>
	DD	018H
	DQ	FLAT:??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z$rtcName$0
	ORG $+48
??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z$rtcFrameData DD 01H ; glm::ballRand<double>
	DD	00H
	DQ	FLAT:??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z DD 042d01H
	DD	0110114H
	DD	0600c700dH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z$rtcName$0 DB 052H ; glm::ballRand<float>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z$rtcVarDesc DD 028H ; glm::ballRand<float>
	DD	0cH
	DQ	FLAT:??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z$rtcName$0
	ORG $+48
??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z$rtcFrameData DD 01H ; glm::ballRand<float>
	DD	00H
	DQ	FLAT:??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z DD 042d01H
	DD	0130114H
	DD	0600c700dH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z$rtcName$0 DB 052H ; glm::diskRand<double>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z$rtcVarDesc DD 028H ; glm::diskRand<double>
	DD	010H
	DQ	FLAT:??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z$rtcName$0
	ORG $+48
??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z$rtcFrameData DD 01H ; glm::diskRand<double>
	DD	00H
	DQ	FLAT:??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z DD 022601H
	DD	0700cb210H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z$rtcName$0 DB 052H ; glm::diskRand<float>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z$rtcVarDesc DD 028H ; glm::diskRand<float>
	DD	08H
	DQ	FLAT:??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z$rtcName$0
	ORG $+48
??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z$rtcFrameData DD 01H ; glm::diskRand<float>
	DD	00H
	DQ	FLAT:??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@N$0A@@glm@@QEAA@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sphericalRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z DD 021001H
	DD	0700cb210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sphericalRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z DD 021001H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$circularRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z DD 021001H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$circularRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z DD 021001H
	DD	0700c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@N@glm@@YANNN@Z DD 021101H
	DD	0700d9211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@M@glm@@YAMMM@Z DD 021101H
	DD	0700d9211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<double,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<double,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<double,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<double,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<double,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<double,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@N$0A@@glm@@QEAA@NN@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@N$0A@@glm@@QEAA@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<float,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<float,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<float,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<float,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<float,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<float,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<__int64,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<__int64,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<__int64,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<__int64,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<__int64,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<__int64,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<__int64,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<__int64,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<__int64,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_J$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<short,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<short,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<short,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<short,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<short,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<short,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<short,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<short,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<short,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@F$0A@@glm@@QEAA@FF@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@F$0A@@glm@@QEAA@F@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@F$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<signed char,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<signed char,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<signed char,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<signed char,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<signed char,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<signed char,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<signed char,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<signed char,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<signed char,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@C$0A@@glm@@QEAA@CC@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@C$0A@@glm@@QEAA@C@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@C$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned __int64,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned __int64,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned __int64,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<unsigned __int64,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<unsigned __int64,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<unsigned __int64,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<unsigned __int64,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<unsigned __int64,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<unsigned __int64,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_K$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<unsigned int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<unsigned int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<unsigned int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@II@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned short,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned short,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned short,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<unsigned short,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<unsigned short,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<unsigned short,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<unsigned short,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<unsigned short,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<unsigned short,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@G$0A@@glm@@QEAA@GG@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@G$0A@@glm@@QEAA@G@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@G$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned char,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned char,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned char,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<unsigned char,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<unsigned char,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<unsigned char,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<unsigned char,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<unsigned char,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<unsigned char,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@E$0A@@glm@@QEAA@EE@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@E$0A@@glm@@QEAA@E@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@E$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
xdata	SEGMENT
$unwind$?test_linearRand@@YAHXZ DD 041b01H
	DD	0f5010aH
	DD	060027003H
$unwind$?test_circularRand@@YAHXZ DD 031a01H
	DD	0160109H
	DD	07002H
$unwind$?test_sphericalRand@@YAHXZ DD 031a01H
	DD	03a0109H
	DD	07002H
$unwind$?test_diskRand@@YAHXZ DD 020601H
	DD	07002b206H
$unwind$?test_ballRand@@YAHXZ DD 020601H
	DD	07002d206H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
	ORG $+2
?test_linearRand@@YAHXZ$rtcName$0 DB 041H		; test_linearRand
	DB	04dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$1 DB 041H		; test_linearRand
	DB	04dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$2 DB 041H		; test_linearRand
	DB	00H
	ORG $+2
?test_linearRand@@YAHXZ$rtcName$3 DB 042H		; test_linearRand
	DB	04dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$4 DB 042H		; test_linearRand
	DB	04dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$5 DB 042H		; test_linearRand
	DB	00H
	ORG $+2
?test_linearRand@@YAHXZ$rtcName$6 DB 043H		; test_linearRand
	DB	04dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$7 DB 043H		; test_linearRand
	DB	04dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$8 DB 043H		; test_linearRand
	DB	00H
	ORG $+2
?test_linearRand@@YAHXZ$rtcName$9 DB 044H		; test_linearRand
	DB	04dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$10 DB 044H		; test_linearRand
	DB	04dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$11 DB 044H		; test_linearRand
	DB	00H
	ORG $+2
?test_linearRand@@YAHXZ$rtcName$12 DB 041H		; test_linearRand
	DB	04dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$13 DB 041H		; test_linearRand
	DB	04dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$14 DB 041H		; test_linearRand
	DB	00H
	ORG $+2
?test_linearRand@@YAHXZ$rtcName$15 DB 042H		; test_linearRand
	DB	04dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$16 DB 042H		; test_linearRand
	DB	04dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$17 DB 042H		; test_linearRand
	DB	00H
	ORG $+2
?test_linearRand@@YAHXZ$rtcName$18 DB 043H		; test_linearRand
	DB	04dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$19 DB 043H		; test_linearRand
	DB	04dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$20 DB 043H		; test_linearRand
	DB	00H
	ORG $+2
?test_linearRand@@YAHXZ$rtcName$21 DB 044H		; test_linearRand
	DB	04dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$22 DB 044H		; test_linearRand
	DB	04dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcName$23 DB 044H		; test_linearRand
	DB	00H
	ORG $+2
?test_linearRand@@YAHXZ$rtcName$24 DB 041H		; test_linearRand
	DB	00H
	ORG $+2
?test_linearRand@@YAHXZ$rtcName$25 DB 042H		; test_linearRand
	DB	00H
	ORG $+2
?test_linearRand@@YAHXZ$rtcName$26 DB 052H		; test_linearRand
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	046H
	DB	06cH
	DB	06fH
	DB	061H
	DB	074H
	DB	00H
	ORG $+4
?test_linearRand@@YAHXZ$rtcName$27 DB 052H		; test_linearRand
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	044H
	DB	06fH
	DB	075H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+3
?test_linearRand@@YAHXZ$rtcVarDesc DD 0408H		; test_linearRand
	DD	08H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$27
	DD	03e4H
	DD	04H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$26
	DD	03b8H
	DD	010H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$25
	DD	0398H
	DD	08H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$24
	DD	0368H
	DD	010H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$23
	DD	0338H
	DD	010H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$22
	DD	0308H
	DD	010H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$21
	DD	02e8H
	DD	08H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$20
	DD	02c8H
	DD	08H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$19
	DD	02a8H
	DD	08H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$18
	DD	0284H
	DD	04H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$17
	DD	0264H
	DD	04H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$16
	DD	0244H
	DD	04H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$15
	DD	0224H
	DD	02H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$14
	DD	0204H
	DD	02H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$13
	DD	01e4H
	DD	02H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$12
	DD	01b8H
	DD	010H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$11
	DD	0188H
	DD	010H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$10
	DD	0158H
	DD	010H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$9
	DD	0138H
	DD	08H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$8
	DD	0118H
	DD	08H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$7
	DD	0f8H
	DD	08H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$6
	DD	0d4H
	DD	04H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$5
	DD	0b4H
	DD	04H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$3
	DD	074H
	DD	02H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$2
	DD	054H
	DD	02H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$1
	DD	034H
	DD	02H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcName$0
	ORG $+1344
?test_linearRand@@YAHXZ$rtcFrameData DD 01cH		; test_linearRand
	DD	00H
	DQ	FLAT:?test_linearRand@@YAHXZ$rtcVarDesc
?test_circularRand@@YAHXZ$rtcName$0 DB 052H		; test_circularRand
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	046H
	DB	06cH
	DB	06fH
	DB	061H
	DB	074H
	DB	00H
	ORG $+4
?test_circularRand@@YAHXZ$rtcName$1 DB 052H		; test_circularRand
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	044H
	DB	06fH
	DB	075H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+3
?test_circularRand@@YAHXZ$rtcVarDesc DD 058H		; test_circularRand
	DD	08H
	DQ	FLAT:?test_circularRand@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_circularRand@@YAHXZ$rtcName$0
	ORG $+96
?test_circularRand@@YAHXZ$rtcFrameData DD 02H		; test_circularRand
	DD	00H
	DQ	FLAT:?test_circularRand@@YAHXZ$rtcVarDesc
?test_sphericalRand@@YAHXZ$rtcName$0 DB 052H		; test_sphericalRand
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	046H
	DB	06cH
	DB	06fH
	DB	061H
	DB	074H
	DB	041H
	DB	00H
	ORG $+3
?test_sphericalRand@@YAHXZ$rtcName$1 DB 052H		; test_sphericalRand
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	046H
	DB	06cH
	DB	06fH
	DB	061H
	DB	074H
	DB	042H
	DB	00H
	ORG $+3
?test_sphericalRand@@YAHXZ$rtcName$2 DB 052H		; test_sphericalRand
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	046H
	DB	06cH
	DB	06fH
	DB	061H
	DB	074H
	DB	043H
	DB	00H
	ORG $+3
?test_sphericalRand@@YAHXZ$rtcName$3 DB 052H		; test_sphericalRand
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	044H
	DB	06fH
	DB	075H
	DB	062H
	DB	06cH
	DB	065H
	DB	041H
	DB	00H
	ORG $+2
?test_sphericalRand@@YAHXZ$rtcName$4 DB 052H		; test_sphericalRand
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	044H
	DB	06fH
	DB	075H
	DB	062H
	DB	06cH
	DB	065H
	DB	042H
	DB	00H
	ORG $+2
?test_sphericalRand@@YAHXZ$rtcName$5 DB 052H		; test_sphericalRand
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	044H
	DB	06fH
	DB	075H
	DB	062H
	DB	06cH
	DB	065H
	DB	043H
	DB	00H
	ORG $+2
?test_sphericalRand@@YAHXZ$rtcVarDesc DD 0d8H		; test_sphericalRand
	DD	08H
	DQ	FLAT:?test_sphericalRand@@YAHXZ$rtcName$5
	DD	0b8H
	DD	08H
	DQ	FLAT:?test_sphericalRand@@YAHXZ$rtcName$4
	DD	098H
	DD	08H
	DQ	FLAT:?test_sphericalRand@@YAHXZ$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:?test_sphericalRand@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test_sphericalRand@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_sphericalRand@@YAHXZ$rtcName$0
	ORG $+288
?test_sphericalRand@@YAHXZ$rtcFrameData DD 06H		; test_sphericalRand
	DD	00H
	DQ	FLAT:?test_sphericalRand@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@N@glm@@YANN@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@N@glm@@YA_NAEBN00@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_K@std@@SA_KXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@_K@std@@SA_KXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@I@std@@SAIXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@I@std@@SAIXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@G@std@@SAGXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@G@std@@SAGXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@H@std@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@H@std@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@F@std@@SAFXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@F@std@@SAFXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@E@std@@SAEXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@E@std@@SAEXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@C@std@@SACXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@C@std@@SACXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sin@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@G$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@G$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR a$[rsp]
	mov	WORD PTR [rax], cx

; 78   : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR b$[rsp]
	mov	WORD PTR [rax+2], cx

; 79   : 		z(static_cast<T>(c))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR c$[rsp]
	mov	WORD PTR [rax+4], cx

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@G$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl

; 78   : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl

; 79   : 		z(static_cast<T>(c))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rax+2], cl

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?UG$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?UG$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned short,0>, COMDAT

; 846  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 847  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movzx	eax, WORD PTR [rax+4]
	mov	rcx, QWORD PTR v2$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	or	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	rdx, QWORD PTR v2$[rsp]
	movzx	edx, WORD PTR [rdx+2]
	or	ecx, edx
	mov	rdx, QWORD PTR v1$[rsp]
	movzx	edx, WORD PTR [rdx]
	mov	r8, QWORD PTR v2$[rsp]
	movzx	r8d, WORD PTR [r8]
	or	edx, r8d
	mov	r9d, eax
	mov	r8d, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HHH@?$tvec3@G$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><int,int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 848  : 			v1.x | v2.x,
; 849  : 			v1.y | v2.y,
; 850  : 			v1.z | v2.z);
; 851  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?UG$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?6G$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@G@Z
_TEXT	SEGMENT
tv72 = 32
tv74 = 36
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?6G$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@G@Z PROC	; glm::operator<<<unsigned short,0>, COMDAT

; 900  : 	{

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 901  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+4]
	movzx	ecx, WORD PTR scalar$[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	DWORD PTR tv72[rsp], ecx
	movzx	edx, WORD PTR scalar$[rsp]
	movzx	ecx, dl
	mov	edx, DWORD PTR tv72[rsp]
	shl	edx, cl
	mov	ecx, edx
	mov	DWORD PTR tv74[rsp], ecx
	mov	rdx, QWORD PTR v$[rsp]
	movzx	edx, WORD PTR [rdx]
	movzx	r8d, WORD PTR scalar$[rsp]
	movzx	ecx, r8b
	shl	edx, cl
	mov	ecx, edx
	mov	r9d, eax
	mov	eax, DWORD PTR tv74[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HHH@?$tvec3@G$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><int,int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 902  : 			v.x << scalar,
; 903  : 			v.y << scalar,
; 904  : 			v.z << scalar);
; 905  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?6G$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@G@Z ENDP	; glm::operator<<<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0E$0A@@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0E$0A@@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z PROC ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><unsigned char,0>, COMDAT

; 130  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+4], ax

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0E$0A@@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z ENDP ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@E$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@E$0A@@3@XZ
_TEXT	SEGMENT
tv66 = 32
tv68 = 36
tv69 = 40
tv71 = 44
tv73 = 48
tv74 = 52
tv76 = 56
tv78 = 60
__$ReturnUdt$ = 80
?call@?$compute_rand@E$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@E$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned char,0,glm::tvec3>::call, COMDAT

; 44   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 45   : 			return tvec3<uint8, P>(

	call	QWORD PTR __imp_rand
	mov	DWORD PTR tv66[rsp], eax
	call	?max@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::max
	movzx	eax, al
	mov	DWORD PTR tv68[rsp], eax
	mov	ecx, DWORD PTR tv66[rsp]
	mov	eax, ecx
	cdq
	mov	ecx, DWORD PTR tv68[rsp]
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR tv69[rsp], eax
	call	QWORD PTR __imp_rand
	mov	DWORD PTR tv71[rsp], eax
	call	?max@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::max
	movzx	eax, al
	mov	DWORD PTR tv73[rsp], eax
	mov	ecx, DWORD PTR tv71[rsp]
	mov	eax, ecx
	cdq
	mov	ecx, DWORD PTR tv73[rsp]
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR tv74[rsp], eax
	call	QWORD PTR __imp_rand
	mov	DWORD PTR tv76[rsp], eax
	call	?max@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::max
	movzx	eax, al
	mov	DWORD PTR tv78[rsp], eax
	mov	ecx, DWORD PTR tv76[rsp]
	mov	eax, ecx
	cdq
	mov	ecx, DWORD PTR tv78[rsp]
	idiv	ecx
	mov	eax, edx
	mov	ecx, DWORD PTR tv69[rsp]
	mov	r9d, ecx
	mov	ecx, DWORD PTR tv74[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HHH@?$tvec3@E$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<unsigned char,0>::tvec3<unsigned char,0><int,int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 46   : 				std::rand() % std::numeric_limits<uint8>::max(),
; 47   : 				std::rand() % std::numeric_limits<uint8>::max(),
; 48   : 				std::rand() % std::numeric_limits<uint8>::max());
; 49   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_rand@E$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@E$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned char,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?U_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?U_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned __int64,0>, COMDAT

; 846  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 847  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR [rax+16]
	or	rax, rcx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	rcx, QWORD PTR [rcx+8]
	or	rcx, rdx
	mov	rdx, QWORD PTR v1$[rsp]
	mov	r8, QWORD PTR v2$[rsp]
	mov	r8, QWORD PTR [r8]
	mov	rdx, QWORD PTR [rdx]
	or	rdx, r8
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z	; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 848  : 			v1.x | v2.x,
; 849  : 			v1.y | v2.y,
; 850  : 			v1.z | v2.z);
; 851  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?U_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?6_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z
_TEXT	SEGMENT
tv80 = 32
tv70 = 40
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?6_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z PROC	; glm::operator<<<unsigned __int64,0>, COMDAT

; 900  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 901  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv80[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv80[rsp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, cl
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	shl	rdx, cl
	mov	rcx, rdx
	mov	QWORD PTR tv70[rsp], rcx
	mov	rdx, QWORD PTR scalar$[rsp]
	mov	r8, QWORD PTR v$[rsp]
	movzx	ecx, dl
	mov	rdx, QWORD PTR [r8]
	shl	rdx, cl
	mov	rcx, rdx
	mov	r9, rax
	mov	rax, QWORD PTR tv70[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z	; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 902  : 			v.x << scalar,
; 903  : 			v.y << scalar,
; 904  : 			v.z << scalar);
; 905  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?6_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z ENDP	; glm::operator<<<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z PROC ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><unsigned int,0>, COMDAT

; 130  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ENDP ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?UI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?UI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned int,0>, COMDAT

; 846  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 847  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+8]
	or	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	edx, DWORD PTR [rdx+4]
	mov	ecx, DWORD PTR [rcx+4]
	or	ecx, edx
	mov	rdx, QWORD PTR v1$[rsp]
	mov	r8, QWORD PTR v2$[rsp]
	mov	r8d, DWORD PTR [r8]
	mov	edx, DWORD PTR [rdx]
	or	edx, r8d
	mov	r9d, eax
	mov	r8d, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@III@Z	; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 848  : 			v1.x | v2.x,
; 849  : 			v1.y | v2.y,
; 850  : 			v1.z | v2.z);
; 851  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?UI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?6I$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
tv80 = 32
tv70 = 40
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?6I$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@I@Z PROC	; glm::operator<<<unsigned int,0>, COMDAT

; 900  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 901  : 		return tvec3<T, P>(

	mov	eax, DWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv80[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv80[rsp]
	mov	eax, DWORD PTR [rax+8]
	shl	eax, cl
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR [rdx+4]
	shl	edx, cl
	mov	ecx, edx
	mov	DWORD PTR tv70[rsp], ecx
	mov	edx, DWORD PTR scalar$[rsp]
	mov	r8, QWORD PTR v$[rsp]
	movzx	ecx, dl
	mov	edx, DWORD PTR [r8]
	shl	edx, cl
	mov	ecx, edx
	mov	r9d, eax
	mov	eax, DWORD PTR tv70[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@III@Z	; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 902  : 			v.x << scalar,
; 903  : 			v.y << scalar,
; 904  : 			v.z << scalar);
; 905  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?6I$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator<<<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0G$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0G$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z PROC ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><unsigned short,0>, COMDAT

; 130  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+4], eax

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+8], eax

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0G$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z ENDP ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@G$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@G$0A@@3@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 38
$T3 = 42
$T4 = 48
$T5 = 54
$T6 = 58
tv65 = 64
__$ReturnUdt$ = 96
?call@?$compute_rand@G$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@G$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned short,0,glm::tvec3>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 70   : 			return

	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_rand@E$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec3>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0E$0A@@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><unsigned char,0>
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?6G$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@G@Z ; glm::operator<<<unsigned short,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@E$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec3>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0E$0A@@?$tvec3@G$0A@@glm@@QEAA@AEBU?$tvec3@E$0A@@1@@Z ; glm::tvec3<unsigned short,0>::tvec3<unsigned short,0><unsigned char,0>
	mov	r8w, 8
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?6G$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@G@Z ; glm::operator<<<unsigned short,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UG$0A@@glm@@YA?AU?$tvec3@G$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 				(vecType<uint16, P>(compute_rand<uint8, P, vecType>::call()) << static_cast<uint16>(8)) |
; 72   : 				(vecType<uint16, P>(compute_rand<uint8, P, vecType>::call()) << static_cast<uint16>(0));
; 73   : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_rand@G$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@G$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned short,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 574  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 575  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	addss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 576  : 			v1.x + v2.x,
; 577  : 			v1.y + v2.y,
; 578  : 			v1.z + v2.z);
; 579  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	subss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 673  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	divss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	divss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 675  : 			v.x / scalar,
; 676  : 			v.y / scalar,
; 677  : 			v.z / scalar);
; 678  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0I$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><unsigned int,0>, COMDAT

; 130  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QEAA@III@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@I$0A@@glm@@QEAA@III@Z PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@I$0A@@glm@@QEAA@III@Z ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@I$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@I$0A@@3@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 52
$T4 = 64
$T5 = 76
$T6 = 84
tv65 = 96
__$ReturnUdt$ = 128
?call@?$compute_rand@I$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@I$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned int,0,glm::tvec3>::call, COMDAT

; 80   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 81   : 			return

	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_rand@G$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec3>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0G$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><unsigned short,0>
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?6I$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@I@Z ; glm::operator<<<unsigned int,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@G$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec3>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0G$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@G$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><unsigned short,0>
	mov	r8d, 16
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?6I$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@I@Z ; glm::operator<<<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 82   : 				(vecType<uint32, P>(compute_rand<uint16, P, vecType>::call()) << static_cast<uint32>(16)) |
; 83   : 				(vecType<uint32, P>(compute_rand<uint16, P, vecType>::call()) << static_cast<uint32>(0));
; 84   : 		}

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?call@?$compute_rand@I$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@I$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned int,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?HN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?HN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z PROC	; glm::operator+<double,0>, COMDAT

; 574  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 575  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+16]
	addsd	xmm0, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm1, QWORD PTR [rax+8]
	addsd	xmm1, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm2, QWORD PTR [rax]
	addsd	xmm2, QWORD PTR [rcx]
	movsd	QWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movsd	xmm0, QWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<double,0>::tvec3<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 576  : 			v1.x + v2.x,
; 577  : 			v1.y + v2.y,
; 578  : 			v1.z + v2.z);
; 579  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?HN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z PROC	; glm::operator-<double,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+16]
	subsd	xmm0, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm1, QWORD PTR [rax+8]
	subsd	xmm1, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm2, QWORD PTR [rax]
	subsd	xmm2, QWORD PTR [rcx]
	movsd	QWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movsd	xmm0, QWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<double,0>::tvec3<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?KN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?KN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z PROC	; glm::operator/<double,0>, COMDAT

; 673  : 	{

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+16]
	divsd	xmm0, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm1, QWORD PTR [rax+8]
	divsd	xmm1, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm2, QWORD PTR [rax]
	divsd	xmm2, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movsd	xmm0, QWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<double,0>::tvec3<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 675  : 			v.x / scalar,
; 676  : 			v.y / scalar,
; 677  : 			v.z / scalar);
; 678  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?KN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z ENDP	; glm::operator/<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0_K$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_K$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z PROC ; glm::tvec3<double,0>::tvec3<double,0><unsigned __int64,0>, COMDAT

; 130  : 	{}

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	test	rax, rax
	jl	SHORT $LN7@tvec3
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN8@tvec3
$LN7@tvec3:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN8@tvec3:
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax+8]
	test	rax, rax
	jl	SHORT $LN5@tvec3
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN6@tvec3
$LN5@tvec3:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN6@tvec3:
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax+16]
	test	rax, rax
	jl	SHORT $LN3@tvec3
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN4@tvec3
$LN3@tvec3:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN4@tvec3:
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+16], xmm0

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_K$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ENDP ; glm::tvec3<double,0>::tvec3<double,0><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@_K$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_K$0A@@3@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
$T3 = 72
$T4 = 96
$T5 = 120
$T6 = 136
tv65 = 160
__$ReturnUdt$ = 192
?call@?$compute_rand@_K$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_K$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec3>::call, COMDAT

; 91   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H

; 92   : 			return

	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_rand@I$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec3>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><unsigned int,0>
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?6_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@I$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec3>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><unsigned int,0>
	mov	r8d, 32					; 00000020H
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?6_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?U_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 93   : 				(vecType<uint64, P>(compute_rand<uint32, P, vecType>::call()) << static_cast<uint64>(32)) |
; 94   : 				(vecType<uint64, P>(compute_rand<uint32, P, vecType>::call()) << static_cast<uint64>(0));
; 95   : 		}

	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?call@?$compute_rand@_K$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_K$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z PROC	; glm::operator*<double,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+16]
	mulsd	xmm0, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm1, QWORD PTR [rax+8]
	mulsd	xmm1, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm2, QWORD PTR [rax]
	mulsd	xmm2, QWORD PTR [rcx]
	movsd	QWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movsd	xmm0, QWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<double,0>::tvec3<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@C$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@C$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<signed char,0>::tvec2<signed char,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl

; 65   : 		, y(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@C$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<signed char,0>::tvec2<signed char,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR a$[rsp]
	mov	WORD PTR [rax], cx

; 65   : 		, y(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR b$[rsp]
	mov	WORD PTR [rax+2], cx

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@F$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@F$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<short,0>::tvec2<short,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR a$[rsp]
	mov	WORD PTR [rax], cx

; 65   : 		, y(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR b$[rsp]
	mov	WORD PTR [rax+2], cx

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@F$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<short,0>::tvec2<short,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 96
y$ = 104
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call, COMDAT

; 47   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 48   : 			tvec2<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 49   : 			return tmp.x + tmp.y;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]

; 50   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call, COMDAT

; 47   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 48   : 			tvec2<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>

; 49   : 			return tmp.x + tmp.y;

	movsd	xmm0, QWORD PTR tmp$[rsp]
	addsd	xmm0, QWORD PTR tmp$[rsp+8]

; 50   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call, COMDAT

; 57   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 59   : 			return tmp.x + tmp.y + tmp.z;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	addss	xmm0, DWORD PTR tmp$[rsp+8]

; 60   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call, COMDAT

; 57   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>

; 59   : 			return tmp.x + tmp.y + tmp.z;

	movsd	xmm0, QWORD PTR tmp$[rsp]
	addsd	xmm0, QWORD PTR tmp$[rsp+8]
	addsd	xmm0, QWORD PTR tmp$[rsp+16]

; 60   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@N$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
$T3 = 80
$T4 = 104
$T5 = 128
tv67 = 152
tv74 = 160
__$ReturnUdt$ = 192
Min$ = 200
Max$ = 208
?call@?$compute_linearRand@N$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<double,0,glm::tvec3>::call, COMDAT

; 225  : 		{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H

; 226  : 			return vecType<double, highp>(compute_rand<uint64, highp, vecType>::call()) / static_cast<double>(std::numeric_limits<uint64>::max()) * (Max - Min) + Min;

	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	QWORD PTR tv67[rsp], rax
	call	?max@?$numeric_limits@_K@std@@SA_KXZ	; std::numeric_limits<unsigned __int64>::max
	test	rax, rax
	jl	SHORT $LN3@call
	cvtsi2sd xmm0, rax
	movsd	QWORD PTR tv74[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
	movsd	QWORD PTR tv74[rsp], xmm0
$LN4@call:
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_rand@_K$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_K$0A@@3@XZ ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec3>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0_K$0A@@?$tvec3@N$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ; glm::tvec3<double,0>::tvec3<double,0><unsigned __int64,0>
	movsd	xmm0, QWORD PTR tv74[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?KN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z ; glm::operator/<double,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 227  : 		}

	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?call@?$compute_linearRand@N$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<double,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
$T4 = 68
$T5 = 80
tv67 = 96
tv74 = 104
__$ReturnUdt$ = 128
Min$ = 136
Max$ = 144
?call@?$compute_linearRand@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<float,0,glm::tvec3>::call, COMDAT

; 198  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 199  : 			return vecType<float, highp>(compute_rand<uint32, highp, vecType>::call()) / static_cast<float>(std::numeric_limits<uint32>::max()) * (Max - Min) + Min;

	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	QWORD PTR tv67[rsp], rax
	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	eax, eax
	cvtsi2ss xmm0, rax
	movss	DWORD PTR tv74[rsp], xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_rand@I$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec3>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0I$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><unsigned int,0>
	movss	xmm0, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 200  : 		}

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?call@?$compute_linearRand@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned short,0>, COMDAT

; 458  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 459  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR v2$[rsp]
	movzx	ecx, WORD PTR [rcx]
	or	eax, ecx
	movzx	edx, ax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@G$0A@@glm@@QEAA@G@Z		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 460  : 			v1.x | v2.x);
; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z PROC	; glm::operator<<<unsigned short,0>, COMDAT

; 486  : 	{

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 487  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax]
	movzx	ecx, WORD PTR scalar$[rsp]
	shl	eax, cl
	movzx	edx, ax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@G$0A@@glm@@QEAA@G@Z		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 488  : 			v.x << scalar);
; 489  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z ENDP	; glm::operator<<<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z PROC ; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0><unsigned char,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z ENDP ; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0><unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$0A@@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@E$0A@@glm@@QEAA@E@Z PROC			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@E$0A@@glm@@QEAA@E@Z ENDP			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ
_TEXT	SEGMENT
tv66 = 32
tv68 = 36
__$ReturnUdt$ = 64
?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned char,0,glm::tvec1>::call, COMDAT

; 23   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 24   : 			return tvec1<uint8, P>(

	call	QWORD PTR __imp_rand
	mov	DWORD PTR tv66[rsp], eax
	call	?max@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::max
	movzx	eax, al
	mov	DWORD PTR tv68[rsp], eax
	mov	ecx, DWORD PTR tv66[rsp]
	mov	eax, ecx
	cdq
	mov	ecx, DWORD PTR tv68[rsp]
	idiv	ecx
	mov	eax, edx
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@E$0A@@glm@@QEAA@E@Z		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 25   : 				std::rand() % std::numeric_limits<uint8>::max());
; 26   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned char,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned __int64,0>, COMDAT

; 458  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 459  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	or	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 460  : 			v1.x | v2.x);
; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z
_TEXT	SEGMENT
tv70 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z PROC	; glm::operator<<<unsigned __int64,0>, COMDAT

; 486  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 487  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv70[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv70[rsp]
	mov	rax, QWORD PTR [rax]
	shl	rax, cl
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 488  : 			v.x << scalar);
; 489  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ENDP	; glm::operator<<<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z PROC ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ENDP ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned int,0>, COMDAT

; 458  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 459  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 460  : 			v1.x | v2.x);
; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
tv70 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z PROC	; glm::operator<<<unsigned int,0>, COMDAT

; 486  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 487  : 		return tvec1<T, P>(

	mov	eax, DWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv70[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv70[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, cl
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 488  : 			v.x << scalar);
; 489  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator<<<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z PROC ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned short,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z ENDP ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$0A@@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@G$0A@@glm@@QEAA@G@Z PROC			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR scalar$[rsp]
	mov	WORD PTR [rax], cx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@G$0A@@glm@@QEAA@G@Z ENDP			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 34
$T3 = 36
$T4 = 38
$T5 = 40
$T6 = 42
tv65 = 48
__$ReturnUdt$ = 80
?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned short,0,glm::tvec1>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 70   : 			return

	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z ; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0><unsigned char,0>
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z ; glm::operator<<<unsigned short,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z ; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0><unsigned char,0>
	mov	r8w, 8
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z ; glm::operator<<<unsigned short,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 				(vecType<uint16, P>(compute_rand<uint8, P, vecType>::call()) << static_cast<uint16>(8)) |
; 72   : 				(vecType<uint16, P>(compute_rand<uint8, P, vecType>::call()) << static_cast<uint16>(0));
; 73   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned short,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?U_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?U_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned __int64,0>, COMDAT

; 735  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 736  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+8]
	or	rax, rcx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	rcx, QWORD PTR [rcx]
	or	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 737  : 			v1.x | v2.x,
; 738  : 			v1.y | v2.y);
; 739  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?U_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?6_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z
_TEXT	SEGMENT
tv75 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?6_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z PROC	; glm::operator<<<unsigned __int64,0>, COMDAT

; 783  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 784  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv75[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv75[rsp]
	mov	rax, QWORD PTR [rax+8]
	shl	rax, cl
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR [rdx]
	shl	rdx, cl
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 785  : 			v.x << scalar,
; 786  : 			v.y << scalar);
; 787  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?6_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z ENDP	; glm::operator<<<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z PROC ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><unsigned int,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ENDP ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?UI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?UI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned int,0>, COMDAT

; 735  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 736  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	eax, DWORD PTR [rax+4]
	or	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	edx, DWORD PTR [rdx]
	mov	ecx, DWORD PTR [rcx]
	or	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@II@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 737  : 			v1.x | v2.x,
; 738  : 			v1.y | v2.y);
; 739  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?UI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?6I$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
tv75 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?6I$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z PROC	; glm::operator<<<unsigned int,0>, COMDAT

; 783  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 784  : 		return tvec2<T, P>(

	mov	eax, DWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv75[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv75[rsp]
	mov	eax, DWORD PTR [rax+4]
	shl	eax, cl
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR [rdx]
	shl	edx, cl
	mov	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@II@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 785  : 			v.x << scalar,
; 786  : 			v.y << scalar);
; 787  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?6I$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator<<<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0G$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0G$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z PROC ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><unsigned short,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+4], eax

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0G$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ENDP ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?UG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?UG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned short,0>, COMDAT

; 735  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 736  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR v2$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	or	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	movzx	edx, WORD PTR [rdx]
	or	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 737  : 			v1.x | v2.x,
; 738  : 			v1.y | v2.y);
; 739  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?UG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?6G$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z
_TEXT	SEGMENT
tv72 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?6G$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z PROC	; glm::operator<<<unsigned short,0>, COMDAT

; 783  : 	{

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 784  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+2]
	movzx	ecx, WORD PTR scalar$[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	DWORD PTR tv72[rsp], ecx
	movzx	edx, WORD PTR scalar$[rsp]
	movzx	ecx, dl
	mov	edx, DWORD PTR tv72[rsp]
	shl	edx, cl
	mov	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 785  : 			v.x << scalar,
; 786  : 			v.y << scalar);
; 787  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?6G$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z ENDP	; glm::operator<<<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0E$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0E$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z PROC ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><unsigned char,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0E$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ENDP ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl

; 65   : 		, y(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z PROC	; glm::operator+<unsigned char,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	rcx, QWORD PTR v2$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	add	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	movzx	edx, BYTE PTR [rdx]
	add	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z PROC	; glm::operator-<unsigned char,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	rcx, QWORD PTR v2$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	sub	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	movzx	edx, BYTE PTR [rdx]
	sub	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@E@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@E@Z PROC	; glm::operator+<unsigned char,0>, COMDAT

; 461  : 	{

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 462  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	movzx	ecx, BYTE PTR scalar$[rsp]
	add	eax, ecx
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	movzx	edx, BYTE PTR scalar$[rsp]
	add	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 463  : 			v.x + scalar,
; 464  : 			v.y + scalar);
; 465  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@E@Z ENDP	; glm::operator+<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@E@glm@@YAEEE@Z
_TEXT	SEGMENT
tv67 = 0
x$ = 32
y$ = 40
??$min@E@glm@@YAEEE@Z PROC				; glm::min<unsigned char>, COMDAT

; 16   : 	{

$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 16

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	movzx	eax, BYTE PTR x$[rsp]
	movzx	ecx, BYTE PTR y$[rsp]
	cmp	eax, ecx
	jge	SHORT $LN3@min
	movzx	eax, BYTE PTR x$[rsp]
	mov	BYTE PTR tv67[rsp], al
	jmp	SHORT $LN4@min
$LN3@min:
	movzx	eax, BYTE PTR y$[rsp]
	mov	BYTE PTR tv67[rsp], al
$LN4@min:
	movzx	eax, BYTE PTR tv67[rsp]

; 19   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$min@E@glm@@YAEEE@Z ENDP				; glm::min<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@E@glm@@YAEEE@Z
_TEXT	SEGMENT
tv67 = 0
x$ = 32
y$ = 40
??$max@E@glm@@YAEEE@Z PROC				; glm::max<unsigned char>, COMDAT

; 24   : 	{

$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 16

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	movzx	eax, BYTE PTR x$[rsp]
	movzx	ecx, BYTE PTR y$[rsp]
	cmp	eax, ecx
	jle	SHORT $LN3@max
	movzx	eax, BYTE PTR x$[rsp]
	mov	BYTE PTR tv67[rsp], al
	jmp	SHORT $LN4@max
$LN3@max:
	movzx	eax, BYTE PTR y$[rsp]
	mov	BYTE PTR tv67[rsp], al
$LN4@max:
	movzx	eax, BYTE PTR tv67[rsp]

; 28   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$max@E@glm@@YAEEE@Z ENDP				; glm::max<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@P6AEEE@ZAEBU43@1@Z
_TEXT	SEGMENT
tv85 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@P6AEEE@ZAEBU43@1@Z PROC ; glm::detail::functor2<unsigned char,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	movzx	edx, BYTE PTR [rax+1]
	mov	rax, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rax+1]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv85[rsp], al
	mov	rcx, QWORD PTR b$[rsp]
	movzx	edx, BYTE PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	call	QWORD PTR Func$[rsp]
	movzx	ecx, BYTE PTR tv85[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@E$0A@@glm@@QEAA@EE@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@P6AEEE@ZAEBU43@1@Z ENDP ; glm::detail::functor2<unsigned char,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z PROC	; glm::operator+<unsigned short,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR v2$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	add	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	movzx	edx, WORD PTR [rdx]
	add	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z PROC	; glm::operator-<unsigned short,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR v2$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	sub	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	movzx	edx, WORD PTR [rdx]
	sub	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z PROC	; glm::operator+<unsigned short,0>, COMDAT

; 461  : 	{

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 462  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+2]
	movzx	ecx, WORD PTR scalar$[rsp]
	add	eax, ecx
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	movzx	edx, WORD PTR scalar$[rsp]
	add	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 463  : 			v.x + scalar,
; 464  : 			v.y + scalar);
; 465  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z ENDP	; glm::operator+<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@G@glm@@YAGGG@Z
_TEXT	SEGMENT
tv67 = 0
x$ = 32
y$ = 40
??$min@G@glm@@YAGGG@Z PROC				; glm::min<unsigned short>, COMDAT

; 16   : 	{

$LN5:
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 16

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	movzx	eax, WORD PTR x$[rsp]
	movzx	ecx, WORD PTR y$[rsp]
	cmp	eax, ecx
	jge	SHORT $LN3@min
	movzx	eax, WORD PTR x$[rsp]
	mov	WORD PTR tv67[rsp], ax
	jmp	SHORT $LN4@min
$LN3@min:
	movzx	eax, WORD PTR y$[rsp]
	mov	WORD PTR tv67[rsp], ax
$LN4@min:
	movzx	eax, WORD PTR tv67[rsp]

; 19   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$min@G@glm@@YAGGG@Z ENDP				; glm::min<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@G@glm@@YAGGG@Z
_TEXT	SEGMENT
tv67 = 0
x$ = 32
y$ = 40
??$max@G@glm@@YAGGG@Z PROC				; glm::max<unsigned short>, COMDAT

; 24   : 	{

$LN5:
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 16

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	movzx	eax, WORD PTR x$[rsp]
	movzx	ecx, WORD PTR y$[rsp]
	cmp	eax, ecx
	jle	SHORT $LN3@max
	movzx	eax, WORD PTR x$[rsp]
	mov	WORD PTR tv67[rsp], ax
	jmp	SHORT $LN4@max
$LN3@max:
	movzx	eax, WORD PTR y$[rsp]
	mov	WORD PTR tv67[rsp], ax
$LN4@max:
	movzx	eax, WORD PTR tv67[rsp]

; 28   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$max@G@glm@@YAGGG@Z ENDP				; glm::max<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@P6AGGG@ZAEBU43@1@Z
_TEXT	SEGMENT
tv85 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@P6AGGG@ZAEBU43@1@Z PROC ; glm::detail::functor2<unsigned short,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	movzx	edx, WORD PTR [rax+2]
	mov	rax, QWORD PTR a$[rsp]
	movzx	ecx, WORD PTR [rax+2]
	call	QWORD PTR Func$[rsp]
	mov	WORD PTR tv85[rsp], ax
	mov	rcx, QWORD PTR b$[rsp]
	movzx	edx, WORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, WORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	movzx	ecx, WORD PTR tv85[rsp]
	movzx	r8d, cx
	movzx	edx, ax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@G$0A@@glm@@QEAA@GG@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@P6AGGG@ZAEBU43@1@Z ENDP ; glm::detail::functor2<unsigned short,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z PROC	; glm::operator+<unsigned int,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR v2$[rsp]
	add	eax, DWORD PTR [rcx+4]
	mov	rcx, QWORD PTR v1$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	add	ecx, DWORD PTR [rdx]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@II@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z PROC	; glm::operator-<unsigned int,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	edx, DWORD PTR [rdx]
	mov	ecx, DWORD PTR [rcx]
	sub	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@II@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z PROC	; glm::operator+<unsigned int,0>, COMDAT

; 461  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 462  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	add	ecx, DWORD PTR scalar$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@II@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 463  : 			v.x + scalar,
; 464  : 			v.y + scalar);
; 465  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator+<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@I@glm@@YAIII@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$min@I@glm@@YAIII@Z PROC				; glm::min<unsigned int>, COMDAT

; 16   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jae	SHORT $LN3@min
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv65[rsp], eax
$LN4@min:
	mov	eax, DWORD PTR tv65[rsp]

; 19   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$min@I@glm@@YAIII@Z ENDP				; glm::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@I@glm@@YAIII@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$max@I@glm@@YAIII@Z PROC				; glm::max<unsigned int>, COMDAT

; 24   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jbe	SHORT $LN3@max
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv65[rsp], eax
$LN4@max:
	mov	eax, DWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$max@I@glm@@YAIII@Z ENDP				; glm::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z PROC ; glm::detail::functor2<unsigned int,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	mov	ecx, DWORD PTR tv66[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@II@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z ENDP ; glm::detail::functor2<unsigned int,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator+<unsigned __int64,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR v2$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	add	rcx, QWORD PTR [rdx]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?G_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?G_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator-<unsigned __int64,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+8]
	sub	rax, rcx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	rcx, QWORD PTR [rcx]
	sub	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?G_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z PROC	; glm::operator+<unsigned __int64,0>, COMDAT

; 461  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 462  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, QWORD PTR scalar$[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 463  : 			v.x + scalar,
; 464  : 			v.y + scalar);
; 465  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z ENDP	; glm::operator+<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@_K@glm@@YA_K_K0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$min@_K@glm@@YA_K_K0@Z PROC				; glm::min<unsigned __int64>, COMDAT

; 16   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	mov	rax, QWORD PTR y$[rsp]
	cmp	QWORD PTR x$[rsp], rax
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR x$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR y$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]

; 19   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@glm@@YA_K_K0@Z ENDP				; glm::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@_K@glm@@YA_K_K0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$max@_K@glm@@YA_K_K0@Z PROC				; glm::max<unsigned __int64>, COMDAT

; 24   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	mov	rax, QWORD PTR y$[rsp]
	cmp	QWORD PTR x$[rsp], rax
	jbe	SHORT $LN3@max
	mov	rax, QWORD PTR x$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	rax, QWORD PTR y$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@max:
	mov	rax, QWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$max@_K@glm@@YA_K_K0@Z ENDP				; glm::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@P6A_K_K0@ZAEBU43@2@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@P6A_K_K0@ZAEBU43@2@Z PROC ; glm::detail::functor2<unsigned __int64,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@P6A_K_K0@ZAEBU43@2@Z ENDP ; glm::detail::functor2<unsigned __int64,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z PROC	; glm::operator+<signed char,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movsx	eax, BYTE PTR [rax+1]
	mov	rcx, QWORD PTR v2$[rsp]
	movsx	ecx, BYTE PTR [rcx+1]
	add	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	movsx	edx, BYTE PTR [rdx]
	add	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@C$0A@@glm@@QEAA@HH@Z	; glm::tvec2<signed char,0>::tvec2<signed char,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0E$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0E$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z PROC ; glm::tvec2<signed char,0>::tvec2<signed char,0><unsigned char,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0E$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ENDP ; glm::tvec2<signed char,0>::tvec2<signed char,0><unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?LE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv70 = 32
tv75 = 36
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?LE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z PROC	; glm::operator%<unsigned char,0>, COMDAT

; 655  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 656  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	rcx, QWORD PTR v2$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	cdq
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR tv70[rsp], eax
	mov	rcx, QWORD PTR v1$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	movzx	edx, BYTE PTR [rdx]
	mov	DWORD PTR tv75[rsp], edx
	mov	eax, ecx
	cdq
	mov	ecx, DWORD PTR tv75[rsp]
	idiv	ecx
	mov	eax, edx
	mov	ecx, DWORD PTR tv70[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 657  : 			v1.x % v2.x,
; 658  : 			v1.y % v2.y);
; 659  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?LE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ENDP	; glm::operator%<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0C$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0C$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z PROC ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><signed char,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	mov	BYTE PTR [rax+1], cl

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0C$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ENDP ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z PROC	; glm::operator-<signed char,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movsx	eax, BYTE PTR [rax+1]
	mov	rcx, QWORD PTR v2$[rsp]
	movsx	ecx, BYTE PTR [rcx+1]
	sub	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	movsx	edx, BYTE PTR [rdx]
	sub	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@C$0A@@glm@@QEAA@HH@Z	; glm::tvec2<signed char,0>::tvec2<signed char,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@C@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@C@Z PROC	; glm::operator+<signed char,0>, COMDAT

; 461  : 	{

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 462  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, BYTE PTR [rax+1]
	movsx	ecx, BYTE PTR scalar$[rsp]
	add	eax, ecx
	mov	rcx, QWORD PTR v$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	movsx	edx, BYTE PTR scalar$[rsp]
	add	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@C$0A@@glm@@QEAA@HH@Z	; glm::tvec2<signed char,0>::tvec2<signed char,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 463  : 			v.x + scalar,
; 464  : 			v.y + scalar);
; 465  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@C@Z ENDP	; glm::operator+<signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@XZ
_TEXT	SEGMENT
tv66 = 32
tv68 = 36
tv69 = 40
tv71 = 44
tv73 = 48
__$ReturnUdt$ = 80
?call@?$compute_rand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned char,0,glm::tvec2>::call, COMDAT

; 33   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 34   : 			return tvec2<uint8, P>(

	call	QWORD PTR __imp_rand
	mov	DWORD PTR tv66[rsp], eax
	call	?max@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::max
	movzx	eax, al
	mov	DWORD PTR tv68[rsp], eax
	mov	ecx, DWORD PTR tv66[rsp]
	mov	eax, ecx
	cdq
	mov	ecx, DWORD PTR tv68[rsp]
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR tv69[rsp], eax
	call	QWORD PTR __imp_rand
	mov	DWORD PTR tv71[rsp], eax
	call	?max@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::max
	movzx	eax, al
	mov	DWORD PTR tv73[rsp], eax
	mov	ecx, DWORD PTR tv71[rsp]
	mov	eax, ecx
	cdq
	mov	ecx, DWORD PTR tv73[rsp]
	idiv	ecx
	mov	eax, edx
	mov	ecx, DWORD PTR tv69[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@E$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 35   : 				std::rand() % std::numeric_limits<uint8>::max(),
; 36   : 				std::rand() % std::numeric_limits<uint8>::max());
; 37   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_rand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned char,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@C@glm@@YACCC@Z
_TEXT	SEGMENT
tv67 = 0
x$ = 32
y$ = 40
??$min@C@glm@@YACCC@Z PROC				; glm::min<signed char>, COMDAT

; 16   : 	{

$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 16

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	movsx	eax, BYTE PTR x$[rsp]
	movsx	ecx, BYTE PTR y$[rsp]
	cmp	eax, ecx
	jge	SHORT $LN3@min
	movzx	eax, BYTE PTR x$[rsp]
	mov	BYTE PTR tv67[rsp], al
	jmp	SHORT $LN4@min
$LN3@min:
	movzx	eax, BYTE PTR y$[rsp]
	mov	BYTE PTR tv67[rsp], al
$LN4@min:
	movzx	eax, BYTE PTR tv67[rsp]

; 19   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$min@C@glm@@YACCC@Z ENDP				; glm::min<signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@C@glm@@YACCC@Z
_TEXT	SEGMENT
tv67 = 0
x$ = 32
y$ = 40
??$max@C@glm@@YACCC@Z PROC				; glm::max<signed char>, COMDAT

; 24   : 	{

$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 16

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	movsx	eax, BYTE PTR x$[rsp]
	movsx	ecx, BYTE PTR y$[rsp]
	cmp	eax, ecx
	jle	SHORT $LN3@max
	movzx	eax, BYTE PTR x$[rsp]
	mov	BYTE PTR tv67[rsp], al
	jmp	SHORT $LN4@max
$LN3@max:
	movzx	eax, BYTE PTR y$[rsp]
	mov	BYTE PTR tv67[rsp], al
$LN4@max:
	movzx	eax, BYTE PTR tv67[rsp]

; 28   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$max@C@glm@@YACCC@Z ENDP				; glm::max<signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@P6ACCC@ZAEBU43@1@Z
_TEXT	SEGMENT
tv85 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@P6ACCC@ZAEBU43@1@Z PROC ; glm::detail::functor2<signed char,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	movzx	edx, BYTE PTR [rax+1]
	mov	rax, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rax+1]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv85[rsp], al
	mov	rcx, QWORD PTR b$[rsp]
	movzx	edx, BYTE PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	call	QWORD PTR Func$[rsp]
	movzx	ecx, BYTE PTR tv85[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@C$0A@@glm@@QEAA@CC@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@P6ACCC@ZAEBU43@1@Z ENDP ; glm::detail::functor2<signed char,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z PROC	; glm::operator+<short,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movsx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR v2$[rsp]
	movsx	ecx, WORD PTR [rcx+2]
	add	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	movsx	ecx, WORD PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	movsx	edx, WORD PTR [rdx]
	add	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@F$0A@@glm@@QEAA@HH@Z	; glm::tvec2<short,0>::tvec2<short,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0G$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0G$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z PROC ; glm::tvec2<short,0>::tvec2<short,0><unsigned short,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0G$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ENDP ; glm::tvec2<short,0>::tvec2<short,0><unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?LG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv70 = 32
tv75 = 36
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?LG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z PROC	; glm::operator%<unsigned short,0>, COMDAT

; 655  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 656  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR v2$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	cdq
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR tv70[rsp], eax
	mov	rcx, QWORD PTR v1$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	movzx	edx, WORD PTR [rdx]
	mov	DWORD PTR tv75[rsp], edx
	mov	eax, ecx
	cdq
	mov	ecx, DWORD PTR tv75[rsp]
	idiv	ecx
	mov	eax, edx
	mov	ecx, DWORD PTR tv70[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@G$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 657  : 			v1.x % v2.x,
; 658  : 			v1.y % v2.y);
; 659  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?LG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ENDP	; glm::operator%<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0F$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0F$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z PROC ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><short,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+2], cx

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0F$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ENDP ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z PROC	; glm::operator-<short,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movsx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR v2$[rsp]
	movsx	ecx, WORD PTR [rcx+2]
	sub	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	movsx	ecx, WORD PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	movsx	edx, WORD PTR [rdx]
	sub	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@F$0A@@glm@@QEAA@HH@Z	; glm::tvec2<short,0>::tvec2<short,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@F@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@F@Z PROC	; glm::operator+<short,0>, COMDAT

; 461  : 	{

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 462  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, WORD PTR [rax+2]
	movsx	ecx, WORD PTR scalar$[rsp]
	add	eax, ecx
	mov	rcx, QWORD PTR v$[rsp]
	movsx	ecx, WORD PTR [rcx]
	movsx	edx, WORD PTR scalar$[rsp]
	add	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0HH@?$tvec2@F$0A@@glm@@QEAA@HH@Z	; glm::tvec2<short,0>::tvec2<short,0><int,int>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 463  : 			v.x + scalar,
; 464  : 			v.y + scalar);
; 465  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@F@Z ENDP	; glm::operator+<short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 38
$T4 = 42
$T5 = 46
$T6 = 48
tv65 = 56
__$ReturnUdt$ = 80
?call@?$compute_rand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned short,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 70   : 			return

	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_rand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec2>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0E$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><unsigned char,0>
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?6G$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z ; glm::operator<<<unsigned short,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec2>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0E$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><unsigned char,0>
	mov	r8w, 8
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?6G$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z ; glm::operator<<<unsigned short,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 				(vecType<uint16, P>(compute_rand<uint8, P, vecType>::call()) << static_cast<uint16>(8)) |
; 72   : 				(vecType<uint16, P>(compute_rand<uint8, P, vecType>::call()) << static_cast<uint16>(0));
; 73   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_rand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned short,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@F@glm@@YAFFF@Z
_TEXT	SEGMENT
tv67 = 0
x$ = 32
y$ = 40
??$min@F@glm@@YAFFF@Z PROC				; glm::min<short>, COMDAT

; 16   : 	{

$LN5:
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 16

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	movsx	eax, WORD PTR x$[rsp]
	movsx	ecx, WORD PTR y$[rsp]
	cmp	eax, ecx
	jge	SHORT $LN3@min
	movzx	eax, WORD PTR x$[rsp]
	mov	WORD PTR tv67[rsp], ax
	jmp	SHORT $LN4@min
$LN3@min:
	movzx	eax, WORD PTR y$[rsp]
	mov	WORD PTR tv67[rsp], ax
$LN4@min:
	movzx	eax, WORD PTR tv67[rsp]

; 19   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$min@F@glm@@YAFFF@Z ENDP				; glm::min<short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@F@glm@@YAFFF@Z
_TEXT	SEGMENT
tv67 = 0
x$ = 32
y$ = 40
??$max@F@glm@@YAFFF@Z PROC				; glm::max<short>, COMDAT

; 24   : 	{

$LN5:
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 16

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	movsx	eax, WORD PTR x$[rsp]
	movsx	ecx, WORD PTR y$[rsp]
	cmp	eax, ecx
	jle	SHORT $LN3@max
	movzx	eax, WORD PTR x$[rsp]
	mov	WORD PTR tv67[rsp], ax
	jmp	SHORT $LN4@max
$LN3@max:
	movzx	eax, WORD PTR y$[rsp]
	mov	WORD PTR tv67[rsp], ax
$LN4@max:
	movzx	eax, WORD PTR tv67[rsp]

; 28   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$max@F@glm@@YAFFF@Z ENDP				; glm::max<short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@P6AFFF@ZAEBU43@1@Z
_TEXT	SEGMENT
tv85 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@P6AFFF@ZAEBU43@1@Z PROC ; glm::detail::functor2<short,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	movzx	edx, WORD PTR [rax+2]
	mov	rax, QWORD PTR a$[rsp]
	movzx	ecx, WORD PTR [rax+2]
	call	QWORD PTR Func$[rsp]
	mov	WORD PTR tv85[rsp], ax
	mov	rcx, QWORD PTR b$[rsp]
	movzx	edx, WORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, WORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	movzx	ecx, WORD PTR tv85[rsp]
	movzx	r8d, cx
	movzx	edx, ax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@F$0A@@glm@@QEAA@FF@Z		; glm::tvec2<short,0>::tvec2<short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@P6AFFF@ZAEBU43@1@Z ENDP ; glm::detail::functor2<short,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z PROC	; glm::operator+<int,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR v2$[rsp]
	add	eax, DWORD PTR [rcx+4]
	mov	rcx, QWORD PTR v1$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	add	ecx, DWORD PTR [rdx]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0I$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z PROC ; glm::tvec2<int,0>::tvec2<int,0><unsigned int,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ENDP ; glm::tvec2<int,0>::tvec2<int,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?LI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv68 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?LI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z PROC	; glm::operator%<unsigned int,0>, COMDAT

; 655  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 656  : 		return tvec2<T, P>(

	xor	edx, edx
	mov	rax, QWORD PTR v1$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR v2$[rsp]
	div	DWORD PTR [rcx+4]
	mov	eax, edx
	mov	DWORD PTR tv68[rsp], eax
	xor	edx, edx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR v2$[rsp]
	div	DWORD PTR [rcx]
	mov	eax, edx
	mov	ecx, DWORD PTR tv68[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@II@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 657  : 			v1.x % v2.x,
; 658  : 			v1.y % v2.y);
; 659  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?LI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator%<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0H$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0H$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z PROC ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><int,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0H$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ENDP ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z PROC	; glm::operator-<int,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	edx, DWORD PTR [rdx]
	mov	ecx, DWORD PTR [rcx]
	sub	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z PROC	; glm::operator+<int,0>, COMDAT

; 461  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 462  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	add	ecx, DWORD PTR scalar$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 463  : 			v.x + scalar,
; 464  : 			v.y + scalar);
; 465  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z ENDP	; glm::operator+<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@H@glm@@YAHHH@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$min@H@glm@@YAHHH@Z PROC				; glm::min<int>, COMDAT

; 16   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN3@min
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv65[rsp], eax
$LN4@min:
	mov	eax, DWORD PTR tv65[rsp]

; 19   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$min@H@glm@@YAHHH@Z ENDP				; glm::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@H@glm@@YAHHH@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$max@H@glm@@YAHHH@Z PROC				; glm::max<int>, COMDAT

; 24   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jle	SHORT $LN3@max
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv65[rsp], eax
$LN4@max:
	mov	eax, DWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$max@H@glm@@YAHHH@Z ENDP				; glm::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHHH@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHHH@ZAEBU43@1@Z PROC ; glm::detail::functor2<int,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	mov	ecx, DWORD PTR tv66[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHHH@ZAEBU43@1@Z ENDP ; glm::detail::functor2<int,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z PROC	; glm::operator+<__int64,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR v2$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR v2$[rsp]
	add	rcx, QWORD PTR [rdx]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0_K$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_K$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z PROC ; glm::tvec2<__int64,0>::tvec2<__int64,0><unsigned __int64,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_K$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ENDP ; glm::tvec2<__int64,0>::tvec2<__int64,0><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?L_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv68 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?L_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator%<unsigned __int64,0>, COMDAT

; 655  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 656  : 		return tvec2<T, P>(

	xor	edx, edx
	mov	rax, QWORD PTR v1$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR v2$[rsp]
	div	QWORD PTR [rcx+8]
	mov	rax, rdx
	mov	QWORD PTR tv68[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR v2$[rsp]
	div	QWORD PTR [rcx]
	mov	rax, rdx
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 657  : 			v1.x % v2.x,
; 658  : 			v1.y % v2.y);
; 659  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?L_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator%<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0_J$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_J$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z PROC ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><__int64,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_J$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ENDP ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z PROC	; glm::operator-<__int64,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+8]
	sub	rax, rcx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	rcx, QWORD PTR [rcx]
	sub	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z PROC	; glm::operator+<__int64,0>, COMDAT

; 461  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 462  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, QWORD PTR scalar$[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 463  : 			v.x + scalar,
; 464  : 			v.y + scalar);
; 465  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z ENDP	; glm::operator+<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@_J@glm@@YA_J_J0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$min@_J@glm@@YA_J_J0@Z PROC				; glm::min<__int64>, COMDAT

; 16   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	mov	rax, QWORD PTR y$[rsp]
	cmp	QWORD PTR x$[rsp], rax
	jge	SHORT $LN3@min
	mov	rax, QWORD PTR x$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR y$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]

; 19   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_J@glm@@YA_J_J0@Z ENDP				; glm::min<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@_J@glm@@YA_J_J0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$max@_J@glm@@YA_J_J0@Z PROC				; glm::max<__int64>, COMDAT

; 24   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	mov	rax, QWORD PTR y$[rsp]
	cmp	QWORD PTR x$[rsp], rax
	jle	SHORT $LN3@max
	mov	rax, QWORD PTR x$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	rax, QWORD PTR y$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@max:
	mov	rax, QWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$max@_J@glm@@YA_J_J0@Z ENDP				; glm::max<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@P6A_J_J0@ZAEBU43@2@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@P6A_J_J0@ZAEBU43@2@Z PROC ; glm::detail::functor2<__int64,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@P6A_J_J0@ZAEBU43@2@Z ENDP ; glm::detail::functor2<__int64,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 573  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 574  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 			v1.x * v2.x,
; 576  : 			v1.y * v2.y);
; 577  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 581  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 582  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	divss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax]
	divss	xmm1, DWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 583  : 			v.x / scalar,
; 584  : 			v.y / scalar);
; 585  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0I$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><unsigned int,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 44
$T4 = 52
$T5 = 60
$T6 = 64
tv65 = 72
__$ReturnUdt$ = 96
?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned int,0,glm::tvec2>::call, COMDAT

; 80   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 81   : 			return

	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_rand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec2>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0G$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><unsigned short,0>
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?6I$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z ; glm::operator<<<unsigned int,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec2>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0G$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><unsigned short,0>
	mov	r8d, 16
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?6I$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z ; glm::operator<<<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 82   : 				(vecType<uint32, P>(compute_rand<uint16, P, vecType>::call()) << static_cast<uint32>(16)) |
; 83   : 				(vecType<uint32, P>(compute_rand<uint16, P, vecType>::call()) << static_cast<uint32>(0));
; 84   : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned int,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z PROC	; glm::operator+<double,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	addsd	xmm0, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	addsd	xmm1, QWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z PROC	; glm::operator*<double,0>, COMDAT

; 573  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 574  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	mulsd	xmm0, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	mulsd	xmm1, QWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 			v1.x * v2.x,
; 576  : 			v1.y * v2.y);
; 577  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z PROC	; glm::operator-<double,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	subsd	xmm0, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	subsd	xmm1, QWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?KN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?KN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z PROC	; glm::operator/<double,0>, COMDAT

; 581  : 	{

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 582  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	divsd	xmm0, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	divsd	xmm1, QWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 583  : 			v.x / scalar,
; 584  : 			v.y / scalar);
; 585  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?KN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z ENDP	; glm::operator/<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0_K$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_K$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z PROC ; glm::tvec2<double,0>::tvec2<double,0><unsigned __int64,0>, COMDAT

; 82   : 	{}

$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	test	rax, rax
	jl	SHORT $LN5@tvec2
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN6@tvec2
$LN5@tvec2:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN6@tvec2:
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax+8]
	test	rax, rax
	jl	SHORT $LN3@tvec2
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN4@tvec2
$LN3@tvec2:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN4@tvec2:
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_K$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ENDP ; glm::tvec2<double,0>::tvec2<double,0><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 56
$T4 = 72
$T5 = 88
$T6 = 96
tv65 = 112
__$ReturnUdt$ = 144
?call@?$compute_rand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec2>::call, COMDAT

; 91   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 92   : 			return

	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec2>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><unsigned int,0>
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?6_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec2>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><unsigned int,0>
	mov	r8d, 32					; 00000020H
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?6_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?U_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 93   : 				(vecType<uint64, P>(compute_rand<uint32, P, vecType>::call()) << static_cast<uint64>(32)) |
; 94   : 				(vecType<uint64, P>(compute_rand<uint32, P, vecType>::call()) << static_cast<uint64>(0));
; 95   : 		}

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?call@?$compute_rand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 329  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 331  : 			v1.x + v2.x);
; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 372  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 373  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 			v1.x * v2.x);
; 375  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 379  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 380  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR scalar$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 			v.x / scalar);
; 382  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z PROC ; glm::tvec1<float,0>::tvec1<float,0><unsigned int,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ENDP ; glm::tvec1<float,0>::tvec1<float,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
$T5 = 48
$T6 = 52
tv65 = 56
__$ReturnUdt$ = 80
?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned int,0,glm::tvec1>::call, COMDAT

; 80   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 81   : 			return

	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned short,0>
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator<<<unsigned int,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned short,0>
	mov	r8d, 16
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator<<<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 82   : 				(vecType<uint32, P>(compute_rand<uint16, P, vecType>::call()) << static_cast<uint32>(16)) |
; 83   : 				(vecType<uint32, P>(compute_rand<uint16, P, vecType>::call()) << static_cast<uint32>(0));
; 84   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned int,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?HN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z PROC	; glm::operator+<double,0>, COMDAT

; 329  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	addsd	xmm0, QWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 331  : 			v1.x + v2.x);
; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z PROC	; glm::operator*<double,0>, COMDAT

; 372  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 373  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	mulsd	xmm0, QWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 			v1.x * v2.x);
; 375  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z PROC	; glm::operator-<double,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	subsd	xmm0, QWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?KN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@N@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?KN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@N@Z PROC	; glm::operator/<double,0>, COMDAT

; 379  : 	{

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 380  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	divsd	xmm0, QWORD PTR scalar$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 			v.x / scalar);
; 382  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?KN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@N@Z ENDP	; glm::operator/<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0_K$0A@@?$tvec1@N$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_K$0A@@?$tvec1@N$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z PROC ; glm::tvec1<double,0>::tvec1<double,0><unsigned __int64,0>, COMDAT

; 47   : 	{}

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	test	rax, rax
	jl	SHORT $LN3@tvec1
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN4@tvec1
$LN3@tvec1:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN4@tvec1:
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_K$0A@@?$tvec1@N$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z ENDP ; glm::tvec1<double,0>::tvec1<double,0><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z PROC			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax], rcx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z ENDP			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@_K$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@_K$0A@@3@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
$T5 = 64
$T6 = 72
tv65 = 80
__$ReturnUdt$ = 112
?call@?$compute_rand@_K$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@_K$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec1>::call, COMDAT

; 91   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 92   : 			return

	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>
	mov	r8d, 32					; 00000020H
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 93   : 				(vecType<uint64, P>(compute_rand<uint32, P, vecType>::call()) << static_cast<uint64>(32)) |
; 94   : 				(vecType<uint64, P>(compute_rand<uint32, P, vecType>::call()) << static_cast<uint64>(0));
; 95   : 		}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_rand@_K$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@_K$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec2>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z PROC ; glm::dot<double,0,glm::tvec2>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z ENDP ; glm::dot<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec3>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@0@Z PROC ; glm::dot<double,0,glm::tvec3>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,double,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@0@Z ENDP ; glm::dot<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<double,0,glm::tvec3>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@N$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<double,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<float,0,glm::tvec3>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec3,double,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@0@Z ; glm::dot<double,0,glm::tvec3>
	call	sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec3,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z PROC	; glm::operator*<double,0>, COMDAT

; 628  : 	{

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+16]
	mulsd	xmm0, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm1, QWORD PTR [rax+8]
	mulsd	xmm1, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm2, QWORD PTR [rax]
	mulsd	xmm2, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movsd	xmm0, QWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<double,0>::tvec3<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec3,float,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	call	?sqrt@@YAMM@Z				; sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec2,double,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z ; glm::dot<double,0,glm::tvec2>
	call	sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec2,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z PROC	; glm::operator*<double,0>, COMDAT

; 541  : 	{

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 542  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	mulsd	xmm0, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	mulsd	xmm1, QWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 543  : 			v.x * scalar,
; 544  : 			v.y * scalar);
; 545  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec2,float,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	call	?sqrt@@YAMM@Z				; sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 541  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 542  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 543  : 			v.x * scalar,
; 544  : 			v.y * scalar);
; 545  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec1<double,0>::tvec1<double,0>, COMDAT

; 39   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@N$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
$T5 = 64
tv67 = 72
tv74 = 80
__$ReturnUdt$ = 112
Min$ = 120
Max$ = 128
?call@?$compute_linearRand@N$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<double,0,glm::tvec1>::call, COMDAT

; 225  : 		{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 226  : 			return vecType<double, highp>(compute_rand<uint64, highp, vecType>::call()) / static_cast<double>(std::numeric_limits<uint64>::max()) * (Max - Min) + Min;

	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	QWORD PTR tv67[rsp], rax
	call	?max@?$numeric_limits@_K@std@@SA_KXZ	; std::numeric_limits<unsigned __int64>::max
	test	rax, rax
	jl	SHORT $LN3@call
	cvtsi2sd xmm0, rax
	movsd	QWORD PTR tv74[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
	movsd	QWORD PTR tv74[rsp], xmm0
$LN4@call:
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_rand@_K$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@_K$0A@@3@XZ ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0_K$0A@@?$tvec1@N$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z ; glm::tvec1<double,0>::tvec1<double,0><unsigned __int64,0>
	movsd	xmm0, QWORD PTR tv74[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?KN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@N@Z ; glm::operator/<double,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 227  : 		}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_linearRand@N$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<double,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 39   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
$T5 = 48
tv67 = 56
tv74 = 64
__$ReturnUdt$ = 96
Min$ = 104
Max$ = 112
?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<float,0,glm::tvec1>::call, COMDAT

; 198  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 199  : 			return vecType<float, highp>(compute_rand<uint32, highp, vecType>::call()) / static_cast<float>(std::numeric_limits<uint32>::max()) * (Max - Min) + Min;

	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	QWORD PTR tv67[rsp], rax
	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	eax, eax
	cvtsi2ss xmm0, rax
	movss	DWORD PTR tv74[rsp], xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<float,0>::tvec1<float,0><unsigned int,0>
	movss	xmm0, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 200  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@N$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
tv67 = 112
tv74 = 120
__$ReturnUdt$ = 144
Min$ = 152
Max$ = 160
?call@?$compute_linearRand@N$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<double,0,glm::tvec2>::call, COMDAT

; 225  : 		{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 226  : 			return vecType<double, highp>(compute_rand<uint64, highp, vecType>::call()) / static_cast<double>(std::numeric_limits<uint64>::max()) * (Max - Min) + Min;

	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	QWORD PTR tv67[rsp], rax
	call	?max@?$numeric_limits@_K@std@@SA_KXZ	; std::numeric_limits<unsigned __int64>::max
	test	rax, rax
	jl	SHORT $LN3@call
	cvtsi2sd xmm0, rax
	movsd	QWORD PTR tv74[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
	movsd	QWORD PTR tv74[rsp], xmm0
$LN4@call:
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_rand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@XZ ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec2>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0_K$0A@@?$tvec2@N$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ; glm::tvec2<double,0>::tvec2<double,0><unsigned __int64,0>
	movsd	xmm0, QWORD PTR tv74[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?KN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z ; glm::operator/<double,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 227  : 		}

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?call@?$compute_linearRand@N$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<double,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
$T5 = 64
tv67 = 72
tv74 = 80
__$ReturnUdt$ = 112
Min$ = 120
Max$ = 128
?call@?$compute_linearRand@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<float,0,glm::tvec2>::call, COMDAT

; 198  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 199  : 			return vecType<float, highp>(compute_rand<uint32, highp, vecType>::call()) / static_cast<float>(std::numeric_limits<uint32>::max()) * (Max - Min) + Min;

	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	QWORD PTR tv67[rsp], rax
	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	eax, eax
	cvtsi2ss xmm0, rax
	movss	DWORD PTR tv74[rsp], xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec2>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0I$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><unsigned int,0>
	movss	xmm0, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 200  : 		}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_linearRand@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<__int64,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@_J@glm@@YA_J_J0@Z ; glm::max<__int64>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@P6A_J_J0@ZAEBU43@2@Z ; glm::detail::functor2<__int64,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<__int64,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<__int64,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@_J@glm@@YA_J_J0@Z ; glm::min<__int64>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@P6A_J_J0@ZAEBU43@2@Z ; glm::detail::functor2<__int64,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<__int64,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
tv70 = 128
__$ReturnUdt$ = 160
Min$ = 168
Max$ = 176
?call@?$compute_linearRand@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<__int64,0,glm::tvec2>::call, COMDAT

; 162  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 163  : 			return (vecType<int64, P>(compute_rand<uint64, P, vecType>::call() % vecType<uint64, P>(Max + static_cast<int64>(1) - Min))) + Min;

	mov	r8d, 1
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z ; glm::operator+<__int64,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::operator-<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0_J$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><__int64,0>
	mov	QWORD PTR tv70[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@XZ ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec2>::call
	mov	rcx, QWORD PTR tv70[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?L_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::operator%<unsigned __int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0_K$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><unsigned __int64,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::operator+<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 164  : 		}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?call@?$compute_linearRand@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<__int64,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<int,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@H@glm@@YAHHH@Z	; glm::max<int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHHH@ZAEBU43@1@Z ; glm::detail::functor2<int,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<int,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<int,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@H@glm@@YAHHH@Z	; glm::min<int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHHH@ZAEBU43@1@Z ; glm::detail::functor2<int,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<int,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
$T5 = 64
$T6 = 72
tv70 = 80
__$ReturnUdt$ = 112
Min$ = 120
Max$ = 128
?call@?$compute_linearRand@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<int,0,glm::tvec2>::call, COMDAT

; 144  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 145  : 			return (vecType<int32, P>(compute_rand<uint32, P, vecType>::call() % vecType<uint32, P>(Max + static_cast<int32>(1) - Min))) + Min;

	mov	r8d, 1
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z ; glm::operator+<int,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ; glm::operator-<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0H$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><int,0>
	mov	QWORD PTR tv70[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec2>::call
	mov	rcx, QWORD PTR tv70[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?LI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::operator%<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0I$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<int,0>::tvec2<int,0><unsigned int,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ; glm::operator+<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 146  : 		}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_linearRand@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<int,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<short,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@F@glm@@YAFFF@Z	; glm::max<short>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@P6AFFF@ZAEBU43@1@Z ; glm::detail::functor2<short,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<short,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<short,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@F@glm@@YAFFF@Z	; glm::min<short>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@P6AFFF@ZAEBU43@1@Z ; glm::detail::functor2<short,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<short,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
$T5 = 48
$T6 = 52
tv70 = 56
__$ReturnUdt$ = 80
Min$ = 88
Max$ = 96
?call@?$compute_linearRand@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<short,0,glm::tvec2>::call, COMDAT

; 126  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 127  : 			return (vecType<int16, P>(compute_rand<uint16, P, vecType>::call() % vecType<uint16, P>(Max + static_cast<int16>(1) - Min))) + Min;

	mov	r8w, 1
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@F@Z ; glm::operator+<short,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?GF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ; glm::operator-<short,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0F$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@F$0A@@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><short,0>
	mov	QWORD PTR tv70[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec2>::call
	mov	rcx, QWORD PTR tv70[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?LG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ; glm::operator%<unsigned short,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0G$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@G$0A@@1@@Z ; glm::tvec2<short,0>::tvec2<short,0><unsigned short,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HF$0A@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ; glm::operator+<short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 128  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_linearRand@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<short,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<signed char,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@C@glm@@YACCC@Z	; glm::max<signed char>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@P6ACCC@ZAEBU43@1@Z ; glm::detail::functor2<signed char,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<signed char,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<signed char,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@C@glm@@YACCC@Z	; glm::min<signed char>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@P6ACCC@ZAEBU43@1@Z ; glm::detail::functor2<signed char,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<signed char,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 34
$T3 = 36
$T4 = 38
$T5 = 40
$T6 = 42
tv70 = 48
__$ReturnUdt$ = 80
Min$ = 88
Max$ = 96
?call@?$compute_linearRand@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<signed char,0,glm::tvec2>::call, COMDAT

; 108  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 109  : 			return (vecType<int8, P>(compute_rand<uint8, P, vecType>::call() % vecType<uint8, P>(Max + static_cast<int8>(1) - Min))) + Min;

	mov	r8b, 1
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@C@Z ; glm::operator+<signed char,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?GC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ; glm::operator-<signed char,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0C$0A@@?$tvec2@E$0A@@glm@@QEAA@AEBU?$tvec2@C$0A@@1@@Z ; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0><signed char,0>
	mov	QWORD PTR tv70[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec2>::call
	mov	rcx, QWORD PTR tv70[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?LE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ; glm::operator%<unsigned char,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0E$0A@@?$tvec2@C$0A@@glm@@QEAA@AEBU?$tvec2@E$0A@@1@@Z ; glm::tvec2<signed char,0>::tvec2<signed char,0><unsigned char,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HC$0A@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ; glm::operator+<signed char,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 110  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_linearRand@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<signed char,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<unsigned __int64,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@_K@glm@@YA_K_K0@Z ; glm::max<unsigned __int64>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@P6A_K_K0@ZAEBU43@2@Z ; glm::detail::functor2<unsigned __int64,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<unsigned __int64,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<unsigned __int64,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@_K@glm@@YA_K_K0@Z ; glm::min<unsigned __int64>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@P6A_K_K0@ZAEBU43@2@Z ; glm::detail::functor2<unsigned __int64,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<unsigned __int64,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
tv67 = 96
__$ReturnUdt$ = 128
Min$ = 136
Max$ = 144
?call@?$compute_linearRand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<unsigned __int64,0,glm::tvec2>::call, COMDAT

; 171  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 172  : 			return (compute_rand<uint64, P, vecType>::call() % (Max + static_cast<uint64>(1) - Min)) + Min;

	mov	r8d, 1
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z ; glm::operator+<unsigned __int64,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?G_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::operator-<unsigned __int64,0>
	mov	QWORD PTR tv67[rsp], rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_rand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@XZ ; glm::detail::compute_rand<unsigned __int64,0,glm::tvec2>::call
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?L_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::operator%<unsigned __int64,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?H_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 173  : 		}

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?call@?$compute_linearRand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<unsigned __int64,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<unsigned int,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@I@glm@@YAIII@Z	; glm::max<unsigned int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z ; glm::detail::functor2<unsigned int,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<unsigned int,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<unsigned int,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@I@glm@@YAIII@Z	; glm::min<unsigned int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@P6AIII@ZAEBU43@1@Z ; glm::detail::functor2<unsigned int,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<unsigned int,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
tv67 = 64
__$ReturnUdt$ = 96
Min$ = 104
Max$ = 112
?call@?$compute_linearRand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<unsigned int,0,glm::tvec2>::call, COMDAT

; 153  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 154  : 			return (compute_rand<uint32, P, vecType>::call() % (Max + static_cast<uint32>(1) - Min)) + Min;

	mov	r8d, 1
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@I@Z ; glm::operator+<unsigned int,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::operator-<unsigned int,0>
	mov	QWORD PTR tv67[rsp], rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_rand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec2>::call
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?LI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::operator%<unsigned int,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 155  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_linearRand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<unsigned int,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<unsigned short,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@G@glm@@YAGGG@Z	; glm::max<unsigned short>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@P6AGGG@ZAEBU43@1@Z ; glm::detail::functor2<unsigned short,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<unsigned short,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<unsigned short,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@G@glm@@YAGGG@Z	; glm::min<unsigned short>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@P6AGGG@ZAEBU43@1@Z ; glm::detail::functor2<unsigned short,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<unsigned short,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
tv67 = 48
__$ReturnUdt$ = 80
Min$ = 88
Max$ = 96
?call@?$compute_linearRand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<unsigned short,0,glm::tvec2>::call, COMDAT

; 135  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 136  : 			return (compute_rand<uint16, P, vecType>::call() % (Max + static_cast<uint16>(1) - Min)) + Min;

	mov	r8w, 1
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@G@Z ; glm::operator+<unsigned short,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ; glm::operator-<unsigned short,0>
	mov	QWORD PTR tv67[rsp], rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_rand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec2>::call
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?LG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ; glm::operator%<unsigned short,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HG$0A@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 137  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_linearRand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<unsigned short,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<unsigned char,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@E@glm@@YAEEE@Z	; glm::max<unsigned char>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@P6AEEE@ZAEBU43@1@Z ; glm::detail::functor2<unsigned char,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<unsigned char,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<unsigned char,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@E@glm@@YAEEE@Z	; glm::min<unsigned char>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@P6AEEE@ZAEBU43@1@Z ; glm::detail::functor2<unsigned char,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<unsigned char,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 34
$T3 = 36
$T4 = 38
tv67 = 40
__$ReturnUdt$ = 64
Min$ = 72
Max$ = 80
?call@?$compute_linearRand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<unsigned char,0,glm::tvec2>::call, COMDAT

; 117  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 118  : 			return (compute_rand<uint8, P, vecType>::call() % (Max + static_cast<uint8>(1) - Min)) + Min;

	mov	r8b, 1
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@E@Z ; glm::operator+<unsigned char,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ; glm::operator-<unsigned char,0>
	mov	QWORD PTR tv67[rsp], rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_rand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec2>::call
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?LE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ; glm::operator%<unsigned char,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HE$0A@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned char,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 119  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_linearRand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<unsigned char,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@N$00@detail@glm@@SANN@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@N$00@detail@glm@@SANN@Z PROC	; glm::detail::compute_abs<double,1>::call, COMDAT

; 77   : 		{

$LN5:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movsd	xmm0, QWORD PTR x$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN3@call
	movsd	xmm0, QWORD PTR x$[rsp]
	movsd	QWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movsd	xmm0, QWORD PTR x$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv66[rsp], xmm0
$LN4@call:
	movsd	xmm0, QWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@N$00@detail@glm@@SANN@Z ENDP	; glm::detail::compute_abs<double,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_random.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 365  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 366  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 367  : 
; 368  : 	Error += test_linearRand();

	call	?test_linearRand@@YAHXZ			; test_linearRand
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 369  : 	Error += test_circularRand();

	call	?test_circularRand@@YAHXZ		; test_circularRand
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 370  : 	Error += test_sphericalRand();

	call	?test_sphericalRand@@YAHXZ		; test_sphericalRand
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 371  : 	Error += test_diskRand();

	call	?test_diskRand@@YAHXZ			; test_diskRand
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 372  : 	Error += test_ballRand();

	call	?test_ballRand@@YAHXZ			; test_ballRand
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 373  : /*
; 374  : #if(GLM_LANG & GLM_LANG_CXX0X_FLAG)
; 375  : 	Error += test_grid();
; 376  : #endif
; 377  : */
; 378  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 379  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z
_TEXT	SEGMENT
Result$ = 40
LenRadius$ = 72
$T4 = 80
$T5 = 104
$T6 = 128
tv68 = 152
__$ReturnUdt$ = 192
Radius$ = 200
??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z PROC	; glm::ballRand<double>, COMDAT

; 314  : 	{		

$LN6:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]

; 315  : 		tvec3<T, defaultp> Result(T(0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@N@Z		; glm::tvec3<double,0>::tvec3<double,0>

; 316  : 		T LenRadius(T(0));

	xorps	xmm0, xmm0
	movsd	QWORD PTR LenRadius$[rsp], xmm0
$LN4@ballRand:

; 317  : 		
; 318  : 		do
; 319  : 		{
; 320  : 			Result = linearRand(

	movsd	xmm1, QWORD PTR Radius$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@N@Z		; glm::tvec3<double,0>::tvec3<double,0>
	mov	QWORD PTR tv68[rsp], rax
	movsd	xmm0, QWORD PTR Radius$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@N@Z		; glm::tvec3<double,0>::tvec3<double,0>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$linearRand@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ; glm::linearRand<double,0,glm::tvec3>
	lea	rcx, QWORD PTR Result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 321  : 				tvec3<T, defaultp>(-Radius),
; 322  : 				tvec3<T, defaultp>(Radius));
; 323  : 			LenRadius = length(Result);

	lea	rcx, QWORD PTR Result$[rsp]
	call	??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z ; glm::length<double,0,glm::tvec3>
	movsd	QWORD PTR LenRadius$[rsp], xmm0

; 324  : 		}
; 325  : 		while(LenRadius > Radius);

	movsd	xmm0, QWORD PTR LenRadius$[rsp]
	comisd	xmm0, QWORD PTR Radius$[rsp]
	ja	$LN4@ballRand

; 326  : 		
; 327  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 328  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z ENDP	; glm::ballRand<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z
_TEXT	SEGMENT
Result$ = 40
LenRadius$ = 68
$T4 = 72
$T5 = 84
$T6 = 96
tv68 = 112
__$ReturnUdt$ = 160
Radius$ = 168
??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z PROC	; glm::ballRand<float>, COMDAT

; 314  : 	{		

$LN6:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 315  : 		tvec3<T, defaultp> Result(T(0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 316  : 		T LenRadius(T(0));

	xorps	xmm0, xmm0
	movss	DWORD PTR LenRadius$[rsp], xmm0
$LN4@ballRand:

; 317  : 		
; 318  : 		do
; 319  : 		{
; 320  : 			Result = linearRand(

	movss	xmm1, DWORD PTR Radius$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv68[rsp], rax
	movss	xmm0, DWORD PTR Radius$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$linearRand@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::linearRand<float,0,glm::tvec3>
	lea	rcx, QWORD PTR Result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 321  : 				tvec3<T, defaultp>(-Radius),
; 322  : 				tvec3<T, defaultp>(Radius));
; 323  : 			LenRadius = length(Result);

	lea	rcx, QWORD PTR Result$[rsp]
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	movss	DWORD PTR LenRadius$[rsp], xmm0

; 324  : 		}
; 325  : 		while(LenRadius > Radius);

	movss	xmm0, DWORD PTR LenRadius$[rsp]
	comiss	xmm0, DWORD PTR Radius$[rsp]
	ja	SHORT $LN4@ballRand

; 326  : 		
; 327  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 328  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z ENDP	; glm::ballRand<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_random.cpp
_TEXT	SEGMENT
Error$ = 32
ResultFloat$1 = 36
ResultDouble$2 = 40
i$3 = 48
$T4 = 56
$T5 = 72
tv79 = 96
tv82 = 100
?test_ballRand@@YAHXZ PROC				; test_ballRand

; 303  : {

$LN11:
	push	rdi
	sub	rsp, 112				; 00000070H

; 304  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 305  : 
; 306  : 	{
; 307  : 		float ResultFloat = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR ResultFloat$1[rsp], xmm0

; 308  : 		double ResultDouble = 0.0f;

	xorps	xmm0, xmm0
	movsd	QWORD PTR ResultDouble$2[rsp], xmm0

; 309  : 
; 310  : 		for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$3[rsp], 0
	jmp	SHORT $LN4@test_ballR
$LN2@test_ballR:
	mov	rax, QWORD PTR i$3[rsp]
	inc	rax
	mov	QWORD PTR i$3[rsp], rax
$LN4@test_ballR:
	cmp	QWORD PTR i$3[rsp], 10000		; 00002710H
	jae	SHORT $LN3@test_ballR

; 311  : 		{
; 312  : 			ResultFloat += glm::length(glm::ballRand(2.0f));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$ballRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z ; glm::ballRand<float>
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR ResultFloat$1[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ResultFloat$1[rsp], xmm0

; 313  : 			ResultDouble += glm::length(glm::ballRand(2.0));

	movsd	xmm1, QWORD PTR __real@4000000000000000
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$ballRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z ; glm::ballRand<double>
	mov	rcx, rax
	call	??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z ; glm::length<double,0,glm::tvec3>
	movsd	xmm1, QWORD PTR ResultDouble$2[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR ResultDouble$2[rsp], xmm0

; 314  : 		}

	jmp	SHORT $LN2@test_ballR
$LN3@test_ballR:

; 315  : 
; 316  : 		Error += ResultFloat < float(TestSamples) * 2.f ? 0 : 1;

	movss	xmm0, DWORD PTR __real@469c4000
	comiss	xmm0, DWORD PTR ResultFloat$1[rsp]
	jbe	SHORT $LN6@test_ballR
	mov	DWORD PTR tv79[rsp], 0
	jmp	SHORT $LN7@test_ballR
$LN6@test_ballR:
	mov	DWORD PTR tv79[rsp], 1
$LN7@test_ballR:
	mov	eax, DWORD PTR tv79[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 317  : 		Error += ResultDouble < double(TestSamples) * 2.0 ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@40d3880000000000
	comisd	xmm0, QWORD PTR ResultDouble$2[rsp]
	jbe	SHORT $LN8@test_ballR
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN9@test_ballR
$LN8@test_ballR:
	mov	DWORD PTR tv82[rsp], 1
$LN9@test_ballR:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 318  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN10@test_ballR
	mov	r8d, 318				; 0000013eH
	lea	rdx, OFFSET FLAT:$SG28886
	lea	rcx, OFFSET FLAT:$SG28887
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@test_ballR:

; 319  : 	}
; 320  : 
; 321  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 322  : }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?test_ballRand@@YAHXZ ENDP				; test_ballRand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z
_TEXT	SEGMENT
Result$ = 40
LenRadius$ = 72
$T4 = 80
$T5 = 96
$T6 = 112
tv68 = 128
__$ReturnUdt$ = 176
Radius$ = 184
??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z PROC	; glm::diskRand<double>, COMDAT

; 296  : 	{		

$LN6:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 297  : 		tvec2<T, defaultp> Result(T(0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>

; 298  : 		T LenRadius(T(0));

	xorps	xmm0, xmm0
	movsd	QWORD PTR LenRadius$[rsp], xmm0
$LN4@diskRand:

; 299  : 		
; 300  : 		do
; 301  : 		{
; 302  : 			Result = linearRand(

	movsd	xmm1, QWORD PTR Radius$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	QWORD PTR tv68[rsp], rax
	movsd	xmm0, QWORD PTR Radius$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$linearRand@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::linearRand<double,0,glm::tvec2>
	lea	rcx, QWORD PTR Result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 303  : 				tvec2<T, defaultp>(-Radius),
; 304  : 				tvec2<T, defaultp>(Radius));
; 305  : 			LenRadius = length(Result);

	lea	rcx, QWORD PTR Result$[rsp]
	call	??$length@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@@Z ; glm::length<double,0,glm::tvec2>
	movsd	QWORD PTR LenRadius$[rsp], xmm0

; 306  : 		}
; 307  : 		while(LenRadius > Radius);

	movsd	xmm0, QWORD PTR LenRadius$[rsp]
	comisd	xmm0, QWORD PTR Radius$[rsp]
	ja	$LN4@diskRand

; 308  : 		
; 309  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 310  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z ENDP	; glm::diskRand<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z
_TEXT	SEGMENT
Result$ = 40
LenRadius$ = 52
$T4 = 56
$T5 = 64
$T6 = 72
tv68 = 80
__$ReturnUdt$ = 112
Radius$ = 120
??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z PROC	; glm::diskRand<float>, COMDAT

; 296  : 	{		

$LN6:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 297  : 		tvec2<T, defaultp> Result(T(0));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 298  : 		T LenRadius(T(0));

	xorps	xmm0, xmm0
	movss	DWORD PTR LenRadius$[rsp], xmm0
$LN4@diskRand:

; 299  : 		
; 300  : 		do
; 301  : 		{
; 302  : 			Result = linearRand(

	movss	xmm1, DWORD PTR Radius$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv68[rsp], rax
	movss	xmm0, DWORD PTR Radius$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$linearRand@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::linearRand<float,0,glm::tvec2>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR Result$[rsp], rax

; 303  : 				tvec2<T, defaultp>(-Radius),
; 304  : 				tvec2<T, defaultp>(Radius));
; 305  : 			LenRadius = length(Result);

	lea	rcx, QWORD PTR Result$[rsp]
	call	??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::length<float,0,glm::tvec2>
	movss	DWORD PTR LenRadius$[rsp], xmm0

; 306  : 		}
; 307  : 		while(LenRadius > Radius);

	movss	xmm0, DWORD PTR LenRadius$[rsp]
	comiss	xmm0, DWORD PTR Radius$[rsp]
	ja	SHORT $LN4@diskRand

; 308  : 		
; 309  : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR Result$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 310  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z ENDP	; glm::diskRand<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_random.cpp
_TEXT	SEGMENT
Error$ = 32
ResultFloat$1 = 36
ResultDouble$2 = 40
i$3 = 48
$T4 = 56
$T5 = 64
tv79 = 80
tv82 = 84
?test_diskRand@@YAHXZ PROC				; test_diskRand

; 281  : {

$LN11:
	push	rdi
	sub	rsp, 96					; 00000060H

; 282  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 283  : 
; 284  : 	{
; 285  : 		float ResultFloat = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR ResultFloat$1[rsp], xmm0

; 286  : 		double ResultDouble = 0.0f;

	xorps	xmm0, xmm0
	movsd	QWORD PTR ResultDouble$2[rsp], xmm0

; 287  : 
; 288  : 		for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$3[rsp], 0
	jmp	SHORT $LN4@test_diskR
$LN2@test_diskR:
	mov	rax, QWORD PTR i$3[rsp]
	inc	rax
	mov	QWORD PTR i$3[rsp], rax
$LN4@test_diskR:
	cmp	QWORD PTR i$3[rsp], 10000		; 00002710H
	jae	SHORT $LN3@test_diskR

; 289  : 		{
; 290  : 			ResultFloat += glm::length(glm::diskRand(2.0f));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$diskRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z ; glm::diskRand<float>
	mov	rcx, rax
	call	??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::length<float,0,glm::tvec2>
	movss	xmm1, DWORD PTR ResultFloat$1[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ResultFloat$1[rsp], xmm0

; 291  : 			ResultDouble += glm::length(glm::diskRand(2.0));

	movsd	xmm1, QWORD PTR __real@4000000000000000
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$diskRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z ; glm::diskRand<double>
	mov	rcx, rax
	call	??$length@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@@Z ; glm::length<double,0,glm::tvec2>
	movsd	xmm1, QWORD PTR ResultDouble$2[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR ResultDouble$2[rsp], xmm0

; 292  : 		}

	jmp	SHORT $LN2@test_diskR
$LN3@test_diskR:

; 293  : 
; 294  : 		Error += ResultFloat < float(TestSamples) * 2.f ? 0 : 1;

	movss	xmm0, DWORD PTR __real@469c4000
	comiss	xmm0, DWORD PTR ResultFloat$1[rsp]
	jbe	SHORT $LN6@test_diskR
	mov	DWORD PTR tv79[rsp], 0
	jmp	SHORT $LN7@test_diskR
$LN6@test_diskR:
	mov	DWORD PTR tv79[rsp], 1
$LN7@test_diskR:
	mov	eax, DWORD PTR tv79[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 295  : 		Error += ResultDouble < double(TestSamples) * 2.0 ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@40d3880000000000
	comisd	xmm0, QWORD PTR ResultDouble$2[rsp]
	jbe	SHORT $LN8@test_diskR
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN9@test_diskR
$LN8@test_diskR:
	mov	DWORD PTR tv82[rsp], 1
$LN9@test_diskR:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 296  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN10@test_diskR
	mov	r8d, 296				; 00000128H
	lea	rdx, OFFSET FLAT:$SG28863
	lea	rcx, OFFSET FLAT:$SG28864
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@test_diskR:

; 297  : 	}
; 298  : 
; 299  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 300  : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?test_diskRand@@YAHXZ ENDP				; test_diskRand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z PROC ; glm::length<double,0,glm::tvec3>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec3@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec3@N$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,double,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z ENDP ; glm::length<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 70   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR a$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR b$[rsp]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR c$[rsp]
	movsd	QWORD PTR [rax+16], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 65   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+16], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$sphericalRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z
_TEXT	SEGMENT
z$ = 32
a$ = 40
r$ = 48
x$ = 56
y$ = 64
$T1 = 72
__$ReturnUdt$ = 112
Radius$ = 120
??$sphericalRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z PROC	; glm::sphericalRand<double>, COMDAT

; 339  : 	{

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 340  : 		T z = linearRand(T(-1), T(1));

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	call	??$linearRand@N@glm@@YANNN@Z		; glm::linearRand<double>
	movsd	QWORD PTR z$[rsp], xmm0

; 341  : 		T a = linearRand(T(0), T(6.283185307179586476925286766559f));

	movsd	xmm1, QWORD PTR __real@401921fb60000000
	xorps	xmm0, xmm0
	call	??$linearRand@N@glm@@YANNN@Z		; glm::linearRand<double>
	movsd	QWORD PTR a$[rsp], xmm0

; 342  : 	
; 343  : 		T r = sqrt(T(1) - z * z);

	movsd	xmm0, QWORD PTR z$[rsp]
	mulsd	xmm0, QWORD PTR z$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	call	sqrt
	movsd	QWORD PTR r$[rsp], xmm0

; 344  : 	
; 345  : 		T x = r * cos(a);

	movsd	xmm0, QWORD PTR a$[rsp]
	call	cos
	movsd	xmm1, QWORD PTR r$[rsp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR x$[rsp], xmm0

; 346  : 		T y = r * sin(a);

	movsd	xmm0, QWORD PTR a$[rsp]
	call	sin
	movsd	xmm1, QWORD PTR r$[rsp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR y$[rsp], xmm0

; 347  : 	
; 348  : 		return tvec3<T, defaultp>(x, y, z) * Radius;	

	movsd	xmm3, QWORD PTR z$[rsp]
	movsd	xmm2, QWORD PTR y$[rsp]
	movsd	xmm1, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<double,0>::tvec3<double,0>
	movsd	xmm2, QWORD PTR Radius$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$sphericalRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z ENDP	; glm::sphericalRand<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::length<float,0,glm::tvec3>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,float,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::length<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$sphericalRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z
_TEXT	SEGMENT
z$ = 32
a$ = 36
r$ = 40
x$ = 44
y$ = 48
$T1 = 52
__$ReturnUdt$ = 80
Radius$ = 88
??$sphericalRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z PROC	; glm::sphericalRand<float>, COMDAT

; 339  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 340  : 		T z = linearRand(T(-1), T(1));

	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR __real@bf800000
	call	??$linearRand@M@glm@@YAMMM@Z		; glm::linearRand<float>
	movss	DWORD PTR z$[rsp], xmm0

; 341  : 		T a = linearRand(T(0), T(6.283185307179586476925286766559f));

	movss	xmm1, DWORD PTR __real@40c90fdb
	xorps	xmm0, xmm0
	call	??$linearRand@M@glm@@YAMMM@Z		; glm::linearRand<float>
	movss	DWORD PTR a$[rsp], xmm0

; 342  : 	
; 343  : 		T r = sqrt(T(1) - z * z);

	movss	xmm0, DWORD PTR z$[rsp]
	mulss	xmm0, DWORD PTR z$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	?sqrt@@YAMM@Z				; sqrt
	movss	DWORD PTR r$[rsp], xmm0

; 344  : 	
; 345  : 		T x = r * cos(a);

	movss	xmm0, DWORD PTR a$[rsp]
	call	?cos@@YAMM@Z				; cos
	movss	xmm1, DWORD PTR r$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x$[rsp], xmm0

; 346  : 		T y = r * sin(a);

	movss	xmm0, DWORD PTR a$[rsp]
	call	?sin@@YAMM@Z				; sin
	movss	xmm1, DWORD PTR r$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR y$[rsp], xmm0

; 347  : 	
; 348  : 		return tvec3<T, defaultp>(x, y, z) * Radius;	

	movss	xmm3, DWORD PTR z$[rsp]
	movss	xmm2, DWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm2, DWORD PTR Radius$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$sphericalRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z ENDP	; glm::sphericalRand<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_random.cpp
_TEXT	SEGMENT
Error$ = 32
Max$9 = 40
ResultFloatA$10 = 52
ResultFloatB$11 = 84
ResultFloatC$12 = 116
ResultDoubleA$13 = 152
ResultDoubleB$14 = 184
ResultDoubleC$15 = 216
i$16 = 232
$T17 = 240
$T18 = 256
$T19 = 280
$T20 = 296
$T21 = 320
$T22 = 336
$T23 = 360
$T24 = 364
$T25 = 368
$T26 = 376
$T27 = 384
$T28 = 388
$T29 = 392
$T30 = 400
$T31 = 408
$T32 = 412
$T33 = 416
$T34 = 424
tv141 = 432
tv150 = 436
tv160 = 440
tv170 = 444
tv180 = 448
tv190 = 452
?test_sphericalRand@@YAHXZ PROC				; test_sphericalRand

; 246  : {

$LN31:
	push	rdi
	sub	rsp, 464				; 000001d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 108				; 0000006cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 247  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 248  : 
; 249  : 	{
; 250  : 		std::size_t Max = TestSamples;

	mov	QWORD PTR Max$9[rsp], 10000		; 00002710H

; 251  : 		float ResultFloatA = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR ResultFloatA$10[rsp], xmm0

; 252  : 		float ResultFloatB = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR ResultFloatB$11[rsp], xmm0

; 253  : 		float ResultFloatC = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR ResultFloatC$12[rsp], xmm0

; 254  : 		double ResultDoubleA = 0.0f;

	xorps	xmm0, xmm0
	movsd	QWORD PTR ResultDoubleA$13[rsp], xmm0

; 255  : 		double ResultDoubleB = 0.0f;

	xorps	xmm0, xmm0
	movsd	QWORD PTR ResultDoubleB$14[rsp], xmm0

; 256  : 		double ResultDoubleC = 0.0f;

	xorps	xmm0, xmm0
	movsd	QWORD PTR ResultDoubleC$15[rsp], xmm0

; 257  : 
; 258  : 		for(std::size_t i = 0; i < Max; ++i)

	mov	QWORD PTR i$16[rsp], 0
	jmp	SHORT $LN4@test_spher
$LN2@test_spher:
	mov	rax, QWORD PTR i$16[rsp]
	inc	rax
	mov	QWORD PTR i$16[rsp], rax
$LN4@test_spher:
	mov	rax, QWORD PTR Max$9[rsp]
	cmp	QWORD PTR i$16[rsp], rax
	jae	$LN3@test_spher

; 259  : 		{
; 260  : 			ResultFloatA += glm::length(glm::sphericalRand(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$sphericalRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z ; glm::sphericalRand<float>
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR ResultFloatA$10[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ResultFloatA$10[rsp], xmm0

; 261  : 			ResultDoubleA += glm::length(glm::sphericalRand(1.0));

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$sphericalRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z ; glm::sphericalRand<double>
	mov	rcx, rax
	call	??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z ; glm::length<double,0,glm::tvec3>
	movsd	xmm1, QWORD PTR ResultDoubleA$13[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR ResultDoubleA$13[rsp], xmm0

; 262  : 			ResultFloatB += glm::length(glm::sphericalRand(2.0f));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$sphericalRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z ; glm::sphericalRand<float>
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR ResultFloatB$11[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ResultFloatB$11[rsp], xmm0

; 263  : 			ResultDoubleB += glm::length(glm::sphericalRand(2.0));

	movsd	xmm1, QWORD PTR __real@4000000000000000
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$sphericalRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z ; glm::sphericalRand<double>
	mov	rcx, rax
	call	??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z ; glm::length<double,0,glm::tvec3>
	movsd	xmm1, QWORD PTR ResultDoubleB$14[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR ResultDoubleB$14[rsp], xmm0

; 264  : 			ResultFloatC += glm::length(glm::sphericalRand(3.0f));

	movss	xmm1, DWORD PTR __real@40400000
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$sphericalRand@M@glm@@YA?AU?$tvec3@M$0A@@0@M@Z ; glm::sphericalRand<float>
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	movss	xmm1, DWORD PTR ResultFloatC$12[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ResultFloatC$12[rsp], xmm0

; 265  : 			ResultDoubleC += glm::length(glm::sphericalRand(3.0));

	movsd	xmm1, QWORD PTR __real@4008000000000000
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$sphericalRand@N@glm@@YA?AU?$tvec3@N$0A@@0@N@Z ; glm::sphericalRand<double>
	mov	rcx, rax
	call	??$length@N$0A@Utvec3@glm@@@glm@@YANAEBU?$tvec3@N$0A@@0@@Z ; glm::length<double,0,glm::tvec3>
	movsd	xmm1, QWORD PTR ResultDoubleC$15[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR ResultDoubleC$15[rsp], xmm0

; 266  : 		}

	jmp	$LN2@test_spher
$LN3@test_spher:

; 267  : 
; 268  : 		Error += glm::epsilonEqual(ResultFloatA, float(Max), 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T23[rsp], xmm0
	mov	rax, QWORD PTR Max$9[rsp]
	test	rax, rax
	jl	SHORT $LN29@test_spher
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN30@test_spher
$LN29@test_spher:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN30@test_spher:
	movss	DWORD PTR $T24[rsp], xmm0
	lea	r8, QWORD PTR $T23[rsp]
	lea	rdx, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR ResultFloatA$10[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_spher
	mov	DWORD PTR tv141[rsp], 0
	jmp	SHORT $LN7@test_spher
$LN6@test_spher:
	mov	DWORD PTR tv141[rsp], 1
$LN7@test_spher:
	mov	eax, DWORD PTR tv141[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 269  : 		Error += glm::epsilonEqual(ResultDoubleA, double(Max), 0.0001) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR $T25[rsp], xmm0
	mov	rax, QWORD PTR Max$9[rsp]
	test	rax, rax
	jl	SHORT $LN27@test_spher
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN28@test_spher
$LN27@test_spher:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN28@test_spher:
	movsd	QWORD PTR $T26[rsp], xmm0
	lea	r8, QWORD PTR $T25[rsp]
	lea	rdx, QWORD PTR $T26[rsp]
	lea	rcx, QWORD PTR ResultDoubleA$13[rsp]
	call	??$epsilonEqual@N@glm@@YA_NAEBN00@Z	; glm::epsilonEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@test_spher
	mov	DWORD PTR tv150[rsp], 0
	jmp	SHORT $LN9@test_spher
$LN8@test_spher:
	mov	DWORD PTR tv150[rsp], 1
$LN9@test_spher:
	mov	eax, DWORD PTR tv150[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 270  : 		Error += glm::epsilonEqual(ResultFloatB, float(Max * 2), 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T27[rsp], xmm0
	mov	rax, QWORD PTR Max$9[rsp]
	shl	rax, 1
	test	rax, rax
	jl	SHORT $LN25@test_spher
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN26@test_spher
$LN25@test_spher:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN26@test_spher:
	movss	DWORD PTR $T28[rsp], xmm0
	lea	r8, QWORD PTR $T27[rsp]
	lea	rdx, QWORD PTR $T28[rsp]
	lea	rcx, QWORD PTR ResultFloatB$11[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@test_spher
	mov	DWORD PTR tv160[rsp], 0
	jmp	SHORT $LN11@test_spher
$LN10@test_spher:
	mov	DWORD PTR tv160[rsp], 1
$LN11@test_spher:
	mov	eax, DWORD PTR tv160[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 271  : 		Error += glm::epsilonEqual(ResultDoubleB, double(Max * 2), 0.0001) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR $T29[rsp], xmm0
	mov	rax, QWORD PTR Max$9[rsp]
	shl	rax, 1
	test	rax, rax
	jl	SHORT $LN23@test_spher
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN24@test_spher
$LN23@test_spher:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN24@test_spher:
	movsd	QWORD PTR $T30[rsp], xmm0
	lea	r8, QWORD PTR $T29[rsp]
	lea	rdx, QWORD PTR $T30[rsp]
	lea	rcx, QWORD PTR ResultDoubleB$14[rsp]
	call	??$epsilonEqual@N@glm@@YA_NAEBN00@Z	; glm::epsilonEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@test_spher
	mov	DWORD PTR tv170[rsp], 0
	jmp	SHORT $LN13@test_spher
$LN12@test_spher:
	mov	DWORD PTR tv170[rsp], 1
$LN13@test_spher:
	mov	eax, DWORD PTR tv170[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 272  : 		Error += glm::epsilonEqual(ResultFloatC, float(Max * 3), 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T31[rsp], xmm0
	imul	rax, QWORD PTR Max$9[rsp], 3
	test	rax, rax
	jl	SHORT $LN21@test_spher
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN22@test_spher
$LN21@test_spher:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN22@test_spher:
	movss	DWORD PTR $T32[rsp], xmm0
	lea	r8, QWORD PTR $T31[rsp]
	lea	rdx, QWORD PTR $T32[rsp]
	lea	rcx, QWORD PTR ResultFloatC$12[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@test_spher
	mov	DWORD PTR tv180[rsp], 0
	jmp	SHORT $LN15@test_spher
$LN14@test_spher:
	mov	DWORD PTR tv180[rsp], 1
$LN15@test_spher:
	mov	eax, DWORD PTR tv180[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 273  : 		Error += glm::epsilonEqual(ResultDoubleC, double(Max * 3), 0.01) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3f847ae147ae147b
	movsd	QWORD PTR $T33[rsp], xmm0
	imul	rax, QWORD PTR Max$9[rsp], 3
	test	rax, rax
	jl	SHORT $LN19@test_spher
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN20@test_spher
$LN19@test_spher:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN20@test_spher:
	movsd	QWORD PTR $T34[rsp], xmm0
	lea	r8, QWORD PTR $T33[rsp]
	lea	rdx, QWORD PTR $T34[rsp]
	lea	rcx, QWORD PTR ResultDoubleC$15[rsp]
	call	??$epsilonEqual@N@glm@@YA_NAEBN00@Z	; glm::epsilonEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@test_spher
	mov	DWORD PTR tv190[rsp], 0
	jmp	SHORT $LN17@test_spher
$LN16@test_spher:
	mov	DWORD PTR tv190[rsp], 1
$LN17@test_spher:
	mov	eax, DWORD PTR tv190[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 274  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN18@test_spher
	mov	r8d, 274				; 00000112H
	lea	rdx, OFFSET FLAT:$SG28840
	lea	rcx, OFFSET FLAT:$SG28841
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@test_spher:

; 275  : 	}
; 276  : 
; 277  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 278  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_sphericalRand@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 464				; 000001d0H
	pop	rdi
	ret	0
?test_sphericalRand@@YAHXZ ENDP				; test_sphericalRand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@@Z PROC ; glm::length<double,0,glm::tvec2>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@@Z ; glm::detail::compute_length<glm::tvec2,double,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@@Z ENDP ; glm::length<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$circularRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z
_TEXT	SEGMENT
a$ = 32
$T1 = 40
tv71 = 56
__$ReturnUdt$ = 80
Radius$ = 88
??$circularRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z PROC	; glm::circularRand<double>, COMDAT

; 332  : 	{

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 333  : 		T a = linearRand(T(0), T(6.283185307179586476925286766559f));

	movsd	xmm1, QWORD PTR __real@401921fb60000000
	xorps	xmm0, xmm0
	call	??$linearRand@N@glm@@YANNN@Z		; glm::linearRand<double>
	movsd	QWORD PTR a$[rsp], xmm0

; 334  : 		return tvec2<T, defaultp>(cos(a), sin(a)) * Radius;		

	movsd	xmm0, QWORD PTR a$[rsp]
	call	sin
	movsd	QWORD PTR tv71[rsp], xmm0
	movsd	xmm0, QWORD PTR a$[rsp]
	call	cos
	movsd	xmm1, QWORD PTR tv71[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	movsd	xmm2, QWORD PTR Radius$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 335  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$circularRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z ENDP	; glm::circularRand<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z PROC ; glm::length<float,0,glm::tvec2>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec2,float,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::length<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$circularRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z
_TEXT	SEGMENT
a$ = 32
$T1 = 36
tv71 = 44
__$ReturnUdt$ = 64
Radius$ = 72
??$circularRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z PROC	; glm::circularRand<float>, COMDAT

; 332  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 333  : 		T a = linearRand(T(0), T(6.283185307179586476925286766559f));

	movss	xmm1, DWORD PTR __real@40c90fdb
	xorps	xmm0, xmm0
	call	??$linearRand@M@glm@@YAMMM@Z		; glm::linearRand<float>
	movss	DWORD PTR a$[rsp], xmm0

; 334  : 		return tvec2<T, defaultp>(cos(a), sin(a)) * Radius;		

	movss	xmm0, DWORD PTR a$[rsp]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR tv71[rsp], xmm0
	movss	xmm0, DWORD PTR a$[rsp]
	call	?cos@@YAMM@Z				; cos
	movss	xmm1, DWORD PTR tv71[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm2, DWORD PTR Radius$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 335  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$circularRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z ENDP	; glm::circularRand<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_random.cpp
_TEXT	SEGMENT
Error$ = 32
Max$5 = 40
ResultFloat$6 = 52
ResultDouble$7 = 88
Radius$8 = 104
i$9 = 112
$T10 = 120
$T11 = 128
$T12 = 144
$T13 = 148
$T14 = 152
$T15 = 160
tv85 = 168
tv95 = 172
?test_circularRand@@YAHXZ PROC				; test_circularRand

; 222  : {

$LN15:
	push	rdi
	sub	rsp, 176				; 000000b0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 223  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 224  : 
; 225  : 	{
; 226  : 		std::size_t Max = TestSamples;

	mov	QWORD PTR Max$5[rsp], 10000		; 00002710H

; 227  : 		float ResultFloat = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR ResultFloat$6[rsp], xmm0

; 228  : 		double ResultDouble = 0.0f;

	xorps	xmm0, xmm0
	movsd	QWORD PTR ResultDouble$7[rsp], xmm0

; 229  : 		double Radius = 2.0f;

	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR Radius$8[rsp], xmm0

; 230  : 
; 231  : 		for(std::size_t i = 0; i < Max; ++i)

	mov	QWORD PTR i$9[rsp], 0
	jmp	SHORT $LN4@test_circu
$LN2@test_circu:
	mov	rax, QWORD PTR i$9[rsp]
	inc	rax
	mov	QWORD PTR i$9[rsp], rax
$LN4@test_circu:
	mov	rax, QWORD PTR Max$5[rsp]
	cmp	QWORD PTR i$9[rsp], rax
	jae	SHORT $LN3@test_circu

; 232  : 		{
; 233  : 			ResultFloat += glm::length(glm::circularRand(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$circularRand@M@glm@@YA?AU?$tvec2@M$0A@@0@M@Z ; glm::circularRand<float>
	mov	rcx, rax
	call	??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::length<float,0,glm::tvec2>
	movss	xmm1, DWORD PTR ResultFloat$6[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ResultFloat$6[rsp], xmm0

; 234  : 			ResultDouble += glm::length(glm::circularRand(Radius));

	movsd	xmm1, QWORD PTR Radius$8[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$circularRand@N@glm@@YA?AU?$tvec2@N$0A@@0@N@Z ; glm::circularRand<double>
	mov	rcx, rax
	call	??$length@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@@Z ; glm::length<double,0,glm::tvec2>
	movsd	xmm1, QWORD PTR ResultDouble$7[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR ResultDouble$7[rsp], xmm0

; 235  : 		}

	jmp	SHORT $LN2@test_circu
$LN3@test_circu:

; 236  : 
; 237  : 		Error += glm::epsilonEqual(ResultFloat, float(Max), 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T12[rsp], xmm0
	mov	rax, QWORD PTR Max$5[rsp]
	test	rax, rax
	jl	SHORT $LN13@test_circu
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN14@test_circu
$LN13@test_circu:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN14@test_circu:
	movss	DWORD PTR $T13[rsp], xmm0
	lea	r8, QWORD PTR $T12[rsp]
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR ResultFloat$6[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_circu
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN7@test_circu
$LN6@test_circu:
	mov	DWORD PTR tv85[rsp], 1
$LN7@test_circu:
	mov	eax, DWORD PTR tv85[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 238  : 		Error += glm::epsilonEqual(ResultDouble, double(Max) * double(Radius), 0.01) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3f847ae147ae147b
	movsd	QWORD PTR $T14[rsp], xmm0
	mov	rax, QWORD PTR Max$5[rsp]
	test	rax, rax
	jl	SHORT $LN11@test_circu
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN12@test_circu
$LN11@test_circu:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN12@test_circu:
	mulsd	xmm0, QWORD PTR Radius$8[rsp]
	movsd	QWORD PTR $T15[rsp], xmm0
	lea	r8, QWORD PTR $T14[rsp]
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR ResultDouble$7[rsp]
	call	??$epsilonEqual@N@glm@@YA_NAEBN00@Z	; glm::epsilonEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@test_circu
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN9@test_circu
$LN8@test_circu:
	mov	DWORD PTR tv95[rsp], 1
$LN9@test_circu:
	mov	eax, DWORD PTR tv95[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 239  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN10@test_circu
	mov	r8d, 239				; 000000efH
	lea	rdx, OFFSET FLAT:$SG28436
	lea	rcx, OFFSET FLAT:$SG28437
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@test_circu:

; 240  : 	}
; 241  : 
; 242  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 243  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_circularRand@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?test_circularRand@@YAHXZ ENDP				; test_circularRand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@N@glm@@YANNN@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 56
$T3 = 64
tv66 = 72
Min$ = 96
Max$ = 104
??$linearRand@N@glm@@YANNN@Z PROC			; glm::linearRand<double>, COMDAT

; 260  : 	{

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 80					; 00000050H

; 261  : 		return detail::compute_linearRand<genType, highp, tvec1>::call(

	movsd	xmm1, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	mov	QWORD PTR tv66[rsp], rax
	movsd	xmm1, QWORD PTR Min$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_linearRand@N$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<double,0,glm::tvec1>::call
	movsd	xmm0, QWORD PTR [rax]

; 262  : 			tvec1<genType, highp>(Min),
; 263  : 			tvec1<genType, highp>(Max)).x;
; 264  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$linearRand@N@glm@@YANNN@Z ENDP			; glm::linearRand<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@M@glm@@YAMMM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
tv66 = 64
Min$ = 96
Max$ = 104
??$linearRand@M@glm@@YAMMM@Z PROC			; glm::linearRand<float>, COMDAT

; 260  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 80					; 00000050H

; 261  : 		return detail::compute_linearRand<genType, highp, tvec1>::call(

	movss	xmm1, DWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR Min$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<float,0,glm::tvec1>::call
	movss	xmm0, DWORD PTR [rax]

; 262  : 			tvec1<genType, highp>(Min),
; 263  : 			tvec1<genType, highp>(Max)).x;
; 264  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$linearRand@M@glm@@YAMMM@Z ENDP			; glm::linearRand<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z PROC ; glm::greaterThanEqual<double,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec2<double,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec2<double,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	comisd	xmm0, QWORD PTR [rax]
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ENDP ; glm::greaterThanEqual<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z PROC ; glm::lessThanEqual<double,0,glm::tvec2>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec2<double,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec2<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comisd	xmm0, QWORD PTR [rax]
	jb	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ENDP ; glm::lessThanEqual<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<double,0,glm::tvec2>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@N$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<double,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@N$0A@@glm@@QEAA@NN@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 57   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR s1$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR s2$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@NN@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 52   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec2<double,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$0A@@glm@@SAHXZ PROC			; glm::tvec2<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::greaterThanEqual<float,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::greaterThanEqual<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::lessThanEqual<float,0,glm::tvec2>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::lessThanEqual<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<float,0,glm::tvec2>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z PROC ; glm::equal<__int64,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec2<__int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec2<__int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ENDP ; glm::equal<__int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z PROC ; glm::greaterThanEqual<__int64,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec2<__int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec2<__int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jl	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ENDP ; glm::greaterThanEqual<__int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z PROC ; glm::lessThanEqual<__int64,0,glm::tvec2>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec2<__int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z	; glm::tvec2<__int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jg	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ENDP ; glm::lessThanEqual<__int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z PROC ; glm::max<__int64,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<__int64,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ENDP ; glm::max<__int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z PROC ; glm::min<__int64,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@_J$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<__int64,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ENDP ; glm::min<__int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<__int64,0,glm::tvec2>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@_J$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<__int64,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<__int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR s2$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z PROC		; glm::tvec2<__int64,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_J$0A@@glm@@SAHXZ	; glm::tvec2<__int64,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_J$0A@@glm@@QEBAAEB_JH@Z ENDP		; glm::tvec2<__int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_J$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_J$0A@@glm@@SAHXZ PROC			; glm::tvec2<__int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_J$0A@@glm@@SAHXZ ENDP			; glm::tvec2<__int64,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z PROC ; glm::greaterThanEqual<int,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jl	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ENDP ; glm::greaterThanEqual<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z PROC ; glm::lessThanEqual<int,0,glm::tvec2>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jg	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ENDP ; glm::lessThanEqual<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z PROC ; glm::max<int,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<int,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ENDP ; glm::max<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z PROC ; glm::min<int,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<int,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ENDP ; glm::min<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<int,0,glm::tvec2>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@H$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<int,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@H$0A@@glm@@QEAA@HH@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s1$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@HH@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec2<int,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec2<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$0A@@glm@@SAHXZ PROC			; glm::tvec2<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@H$0A@@glm@@SAHXZ ENDP			; glm::tvec2<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z PROC ; glm::equal<short,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec2<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec2<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ENDP ; glm::equal<short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z PROC ; glm::greaterThanEqual<short,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec2<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec2<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jl	SHORT $LN7@greaterTha
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv88[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ENDP ; glm::greaterThanEqual<short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z PROC ; glm::lessThanEqual<short,0,glm::tvec2>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec2<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z	; glm::tvec2<short,0>::operator[]
	movsx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jg	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv88[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ENDP ; glm::lessThanEqual<short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z PROC ; glm::max<short,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<short,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ENDP ; glm::max<short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z PROC ; glm::min<short,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@F$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<short,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ENDP ; glm::min<short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<short,0,glm::tvec2>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@F$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@F$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<short,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QEAA@FF@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@F$0A@@glm@@QEAA@FF@Z PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR s1$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR s2$[rsp]
	mov	WORD PTR [rax+2], cx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@F$0A@@glm@@QEAA@FF@Z ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@F$0A@@glm@@QEAA@F@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@F$0A@@glm@@QEAA@F@Z PROC			; glm::tvec2<short,0>::tvec2<short,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR scalar$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR scalar$[rsp]
	mov	WORD PTR [rax+2], cx

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@F$0A@@glm@@QEAA@F@Z ENDP			; glm::tvec2<short,0>::tvec2<short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z PROC			; glm::tvec2<short,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@F$0A@@glm@@QEBAAEBFH@Z ENDP			; glm::tvec2<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$0A@@glm@@SAHXZ PROC			; glm::tvec2<short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@F$0A@@glm@@SAHXZ ENDP			; glm::tvec2<short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z PROC ; glm::equal<signed char,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec2<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec2<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ENDP ; glm::equal<signed char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z PROC ; glm::greaterThanEqual<signed char,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec2<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec2<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jl	SHORT $LN7@greaterTha
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv88[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ENDP ; glm::greaterThanEqual<signed char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z PROC ; glm::lessThanEqual<signed char,0,glm::tvec2>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec2<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z	; glm::tvec2<signed char,0>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jg	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv88[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ENDP ; glm::lessThanEqual<signed char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z PROC ; glm::max<signed char,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<signed char,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ENDP ; glm::max<signed char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z PROC ; glm::min<signed char,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@C$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<signed char,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ENDP ; glm::min<signed char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<signed char,0,glm::tvec2>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@C$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@C$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<signed char,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<signed char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QEAA@CC@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@C$0A@@glm@@QEAA@CC@Z PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR s1$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR s2$[rsp]
	mov	BYTE PTR [rax+1], cl

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@C$0A@@glm@@QEAA@CC@Z ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@C$0A@@glm@@QEAA@C@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@C$0A@@glm@@QEAA@C@Z PROC			; glm::tvec2<signed char,0>::tvec2<signed char,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+1], cl

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@C$0A@@glm@@QEAA@C@Z ENDP			; glm::tvec2<signed char,0>::tvec2<signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z PROC			; glm::tvec2<signed char,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@C$0A@@glm@@SAHXZ	; glm::tvec2<signed char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@C$0A@@glm@@QEBAAEBCH@Z ENDP			; glm::tvec2<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@C$0A@@glm@@SAHXZ PROC			; glm::tvec2<signed char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@C$0A@@glm@@SAHXZ ENDP			; glm::tvec2<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z PROC ; glm::equal<unsigned __int64,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec2<unsigned __int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec2<unsigned __int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ENDP ; glm::equal<unsigned __int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z PROC ; glm::greaterThanEqual<unsigned __int64,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec2<unsigned __int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec2<unsigned __int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ENDP ; glm::greaterThanEqual<unsigned __int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z PROC ; glm::lessThanEqual<unsigned __int64,0,glm::tvec2>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec2<unsigned __int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec2<unsigned __int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	ja	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ENDP ; glm::lessThanEqual<unsigned __int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z PROC ; glm::max<unsigned __int64,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<unsigned __int64,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ENDP ; glm::max<unsigned __int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z PROC ; glm::min<unsigned __int64,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@_K$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<unsigned __int64,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ENDP ; glm::min<unsigned __int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<unsigned __int64,0,glm::tvec2>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@_K$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_K$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<unsigned __int64,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<unsigned __int64,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR s2$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z PROC		; glm::tvec2<unsigned __int64,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_K$0A@@glm@@SAHXZ	; glm::tvec2<unsigned __int64,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_K$0A@@glm@@QEBAAEB_KH@Z ENDP		; glm::tvec2<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_K$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned __int64,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z PROC ; glm::equal<unsigned int,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ENDP ; glm::equal<unsigned int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z PROC ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ENDP ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z PROC ; glm::lessThanEqual<unsigned int,0,glm::tvec2>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	ja	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ENDP ; glm::lessThanEqual<unsigned int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z PROC ; glm::max<unsigned int,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<unsigned int,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ENDP ; glm::max<unsigned int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z PROC ; glm::min<unsigned int,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@I$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<unsigned int,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ENDP ; glm::min<unsigned int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<unsigned int,0,glm::tvec2>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@I$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<unsigned int,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<unsigned int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@I$0A@@glm@@QEAA@II@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s1$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@II@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@I$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z PROC ; glm::equal<unsigned short,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ENDP ; glm::equal<unsigned short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z PROC ; glm::greaterThanEqual<unsigned short,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jl	SHORT $LN7@greaterTha
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv88[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ENDP ; glm::greaterThanEqual<unsigned short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z PROC ; glm::lessThanEqual<unsigned short,0,glm::tvec2>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jg	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv88[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ENDP ; glm::lessThanEqual<unsigned short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z PROC ; glm::max<unsigned short,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<unsigned short,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ENDP ; glm::max<unsigned short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z PROC ; glm::min<unsigned short,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@G$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<unsigned short,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ENDP ; glm::min<unsigned short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<unsigned short,0,glm::tvec2>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@G$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@G$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<unsigned short,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<unsigned short,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QEAA@GG@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@G$0A@@glm@@QEAA@GG@Z PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR s1$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR s2$[rsp]
	mov	WORD PTR [rax+2], cx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@G$0A@@glm@@QEAA@GG@Z ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@G$0A@@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@G$0A@@glm@@QEAA@G@Z PROC			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR scalar$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR scalar$[rsp]
	mov	WORD PTR [rax+2], cx

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@G$0A@@glm@@QEAA@G@Z ENDP			; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z PROC			; glm::tvec2<unsigned short,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@G$0A@@glm@@QEBAAEBGH@Z ENDP			; glm::tvec2<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@G$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z PROC ; glm::equal<unsigned char,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec2<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec2<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ENDP ; glm::equal<unsigned char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z PROC ; glm::greaterThanEqual<unsigned char,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec2<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec2<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jl	SHORT $LN7@greaterTha
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv88[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ENDP ; glm::greaterThanEqual<unsigned char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec2>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_N$0A@@glm@@SAHXZ PROC			; glm::tvec2<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z PROC ; glm::lessThanEqual<unsigned char,0,glm::tvec2>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec2<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z	; glm::tvec2<unsigned char,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jg	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv88[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ENDP ; glm::lessThanEqual<unsigned char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z PROC ; glm::max<unsigned char,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<unsigned char,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ENDP ; glm::max<unsigned char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z PROC ; glm::min<unsigned char,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@E$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<unsigned char,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ENDP ; glm::min<unsigned char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Min$ = 56
Max$ = 64
??$linearRand@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z PROC ; glm::linearRand<unsigned char,0,glm::tvec2>, COMDAT

; 268  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  : 		return detail::compute_linearRand<T, P, vecType>::call(Min, Max);

	mov	r8, QWORD PTR Max$[rsp]
	mov	rdx, QWORD PTR Min$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_linearRand@E$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@E$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<unsigned char,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 270  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$linearRand@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ENDP ; glm::linearRand<unsigned char,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QEAA@EE@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@E$0A@@glm@@QEAA@EE@Z PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR s1$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR s2$[rsp]
	mov	BYTE PTR [rax+1], cl

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@E$0A@@glm@@QEAA@EE@Z ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@E$0A@@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@E$0A@@glm@@QEAA@E@Z PROC			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+1], cl

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@E$0A@@glm@@QEAA@E@Z ENDP			; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z PROC			; glm::tvec2<unsigned char,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@E$0A@@glm@@SAHXZ	; glm::tvec2<unsigned char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@E$0A@@glm@@QEBAAEBEH@Z ENDP			; glm::tvec2<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@E$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned char,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@E$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtc\gtc_random.cpp
_TEXT	SEGMENT
Error$ = 32
Min$ = 36
Max$ = 40
AMin$31 = 52
AMax$32 = 84
i$33 = 104
A$34 = 116
BMin$35 = 148
BMax$36 = 180
i$37 = 200
B$38 = 212
CMin$39 = 248
CMax$40 = 280
i$41 = 296
C$42 = 312
DMin$43 = 344
DMax$44 = 392
i$45 = 424
D$46 = 440
AMin$47 = 484
AMax$48 = 516
i$49 = 536
A$50 = 548
BMin$51 = 580
BMax$52 = 612
i$53 = 632
B$54 = 644
CMin$55 = 680
CMax$56 = 712
i$57 = 728
C$58 = 744
DMin$59 = 776
DMax$60 = 824
i$61 = 856
D$62 = 872
i$63 = 904
A$64 = 920
B$65 = 952
ResultFloat$66 = 996
ResultDouble$67 = 1032
i$68 = 1048
$T69 = 1056
$T70 = 1058
$T71 = 1060
$T72 = 1062
$T73 = 1064
$T74 = 1066
$T75 = 1068
$T76 = 1070
$T77 = 1072
$T78 = 1074
$T79 = 1076
$T80 = 1078
$T81 = 1080
$T82 = 1084
$T83 = 1088
$T84 = 1092
$T85 = 1096
$T86 = 1100
$T87 = 1102
$T88 = 1106
$T89 = 1108
$T90 = 1112
$T91 = 1114
$T92 = 1118
$T93 = 1120
$T94 = 1128
$T95 = 1136
$T96 = 1144
$T97 = 1152
$T98 = 1160
$T99 = 1164
$T100 = 1172
$T101 = 1176
$T102 = 1184
$T103 = 1188
$T104 = 1196
$T105 = 1200
$T106 = 1216
$T107 = 1232
$T108 = 1248
$T109 = 1264
$T110 = 1280
$T111 = 1288
$T112 = 1304
$T113 = 1312
$T114 = 1328
$T115 = 1336
$T116 = 1352
$T117 = 1354
$T118 = 1356
$T119 = 1358
$T120 = 1360
$T121 = 1362
$T122 = 1364
$T123 = 1366
$T124 = 1368
$T125 = 1370
$T126 = 1372
$T127 = 1374
$T128 = 1376
$T129 = 1378
$T130 = 1382
$T131 = 1386
$T132 = 1390
$T133 = 1394
$T134 = 1398
$T135 = 1400
$T136 = 1404
$T137 = 1406
$T138 = 1410
$T139 = 1412
$T140 = 1416
$T141 = 1420
$T142 = 1428
$T143 = 1436
$T144 = 1444
$T145 = 1452
$T146 = 1460
$T147 = 1464
$T148 = 1472
$T149 = 1476
$T150 = 1484
$T151 = 1488
$T152 = 1496
$T153 = 1504
$T154 = 1520
$T155 = 1536
$T156 = 1552
$T157 = 1568
$T158 = 1584
$T159 = 1592
$T160 = 1608
$T161 = 1616
$T162 = 1632
$T163 = 1640
$T164 = 1656
$T165 = 1660
$T166 = 1668
$T167 = 1676
$T168 = 1684
$T169 = 1688
$T170 = 1696
$T171 = 1704
$T172 = 1720
$T173 = 1736
$T174 = 1752
$T175 = 1760
$T176 = 1776
$T177 = 1780
$T178 = 1784
$T179 = 1792
$T180 = 1800
tv74 = 1808
tv163 = 1816
tv176 = 1820
tv193 = 1824
tv250 = 1832
tv295 = 1836
tv312 = 1840
tv369 = 1848
tv382 = 1852
tv399 = 1856
tv488 = 1864
tv501 = 1868
tv518 = 1872
tv575 = 1880
tv588 = 1884
tv605 = 1888
tv662 = 1896
tv707 = 1900
tv724 = 1904
tv781 = 1912
tv794 = 1916
tv811 = 1920
tv900 = 1928
tv913 = 1932
tv924 = 1936
tv957 = 1944
?test_linearRand@@YAHXZ PROC				; test_linearRand

; 10   : {

$LN103:
	push	rsi
	push	rdi
	sub	rsp, 1960				; 000007a8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 482				; 000001e2H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 12   : 
; 13   : 	glm::int32 const Min = 16;

	mov	DWORD PTR Min$[rsp], 16

; 14   : 	glm::int32 const Max = 32;

	mov	DWORD PTR Max$[rsp], 32			; 00000020H

; 15   : 
; 16   : 	{
; 17   : 		glm::u8vec2 AMin(std::numeric_limits<glm::u8>::max());

	call	?max@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::max
	movzx	edx, al
	lea	rcx, QWORD PTR AMin$31[rsp]
	call	??0?$tvec2@E$0A@@glm@@QEAA@E@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>

; 18   : 		glm::u8vec2 AMax(std::numeric_limits<glm::u8>::min());

	call	?min@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::min
	movzx	edx, al
	lea	rcx, QWORD PTR AMax$32[rsp]
	call	??0?$tvec2@E$0A@@glm@@QEAA@E@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>

; 19   : 		{
; 20   : 			for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$33[rsp], 0
	jmp	SHORT $LN4@test_linea
$LN2@test_linea:
	mov	rax, QWORD PTR i$33[rsp]
	inc	rax
	mov	QWORD PTR i$33[rsp], rax
$LN4@test_linea:
	cmp	QWORD PTR i$33[rsp], 10000		; 00002710H
	jae	$LN3@test_linea

; 21   : 			{
; 22   : 				glm::u8vec2 A = glm::linearRand(glm::u8vec2(Min), glm::u8vec2(Max));

	mov	dl, 32					; 00000020H
	lea	rcx, QWORD PTR $T69[rsp]
	call	??0?$tvec2@E$0A@@glm@@QEAA@E@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
	mov	QWORD PTR tv74[rsp], rax
	mov	dl, 16
	lea	rcx, QWORD PTR $T70[rsp]
	call	??0?$tvec2@E$0A@@glm@@QEAA@E@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR A$34[rsp]
	call	??$linearRand@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ; glm::linearRand<unsigned char,0,glm::tvec2>

; 23   : 				AMin = glm::min(AMin, A);

	lea	r8, QWORD PTR A$34[rsp]
	lea	rdx, QWORD PTR AMin$31[rsp]
	lea	rcx, QWORD PTR $T71[rsp]
	call	??$min@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ; glm::min<unsigned char,0,glm::tvec2>
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR AMin$31[rsp], ax

; 24   : 				AMax = glm::max(AMax, A);

	lea	r8, QWORD PTR A$34[rsp]
	lea	rdx, QWORD PTR AMax$32[rsp]
	lea	rcx, QWORD PTR $T72[rsp]
	call	??$max@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@E$0A@@0@AEBU10@0@Z ; glm::max<unsigned char,0,glm::tvec2>
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR AMax$32[rsp], ax

; 25   : 
; 26   : 				if(!glm::all(glm::lessThanEqual(A, glm::u8vec2(Max))))

	mov	dl, 32					; 00000020H
	lea	rcx, QWORD PTR $T73[rsp]
	call	??0?$tvec2@E$0A@@glm@@QEAA@E@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
	mov	r8, rax
	lea	rdx, QWORD PTR A$34[rsp]
	lea	rcx, QWORD PTR $T74[rsp]
	call	??$lessThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ; glm::lessThanEqual<unsigned char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN32@test_linea

; 27   : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN32@test_linea:

; 28   : 				if(!glm::all(glm::greaterThanEqual(A, glm::u8vec2(Min))))

	mov	dl, 16
	lea	rcx, QWORD PTR $T75[rsp]
	call	??0?$tvec2@E$0A@@glm@@QEAA@E@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
	mov	r8, rax
	lea	rdx, QWORD PTR A$34[rsp]
	lea	rcx, QWORD PTR $T76[rsp]
	call	??$greaterThanEqual@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ; glm::greaterThanEqual<unsigned char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN33@test_linea

; 29   : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN33@test_linea:

; 30   : 				assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN53@test_linea
	mov	r8d, 30
	lea	rdx, OFFSET FLAT:$SG28304
	lea	rcx, OFFSET FLAT:$SG28305
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN53@test_linea:

; 31   : 			}

	jmp	$LN2@test_linea
$LN3@test_linea:

; 32   : 
; 33   : 			Error += glm::all(glm::equal(AMin, glm::u8vec2(Min))) ? 0 : 1;

	mov	dl, 16
	lea	rcx, QWORD PTR $T77[rsp]
	call	??0?$tvec2@E$0A@@glm@@QEAA@E@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
	mov	r8, rax
	lea	rdx, QWORD PTR AMin$31[rsp]
	lea	rcx, QWORD PTR $T78[rsp]
	call	??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN54@test_linea
	mov	DWORD PTR tv163[rsp], 0
	jmp	SHORT $LN55@test_linea
$LN54@test_linea:
	mov	DWORD PTR tv163[rsp], 1
$LN55@test_linea:
	mov	eax, DWORD PTR tv163[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 34   : 			Error += glm::all(glm::equal(AMax, glm::u8vec2(Max))) ? 0 : 1;

	mov	dl, 32					; 00000020H
	lea	rcx, QWORD PTR $T79[rsp]
	call	??0?$tvec2@E$0A@@glm@@QEAA@E@Z		; glm::tvec2<unsigned char,0>::tvec2<unsigned char,0>
	mov	r8, rax
	lea	rdx, QWORD PTR AMax$32[rsp]
	lea	rcx, QWORD PTR $T80[rsp]
	call	??$equal@E$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@E$0A@@0@0@Z ; glm::equal<unsigned char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN56@test_linea
	mov	DWORD PTR tv176[rsp], 0
	jmp	SHORT $LN57@test_linea
$LN56@test_linea:
	mov	DWORD PTR tv176[rsp], 1
$LN57@test_linea:
	mov	eax, DWORD PTR tv176[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 35   : 			assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN58@test_linea
	mov	r8d, 35					; 00000023H
	lea	rdx, OFFSET FLAT:$SG28306
	lea	rcx, OFFSET FLAT:$SG28307
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN58@test_linea:

; 36   : 		}
; 37   : 
; 38   : 		glm::u16vec2 BMin(std::numeric_limits<glm::u16>::max());

	call	?max@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::max
	movzx	edx, ax
	lea	rcx, QWORD PTR BMin$35[rsp]
	call	??0?$tvec2@G$0A@@glm@@QEAA@G@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>

; 39   : 		glm::u16vec2 BMax(std::numeric_limits<glm::u16>::min());

	call	?min@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::min
	movzx	edx, ax
	lea	rcx, QWORD PTR BMax$36[rsp]
	call	??0?$tvec2@G$0A@@glm@@QEAA@G@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>

; 40   : 		{
; 41   : 			for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$37[rsp], 0
	jmp	SHORT $LN7@test_linea
$LN5@test_linea:
	mov	rax, QWORD PTR i$37[rsp]
	inc	rax
	mov	QWORD PTR i$37[rsp], rax
$LN7@test_linea:
	cmp	QWORD PTR i$37[rsp], 10000		; 00002710H
	jae	$LN6@test_linea

; 42   : 			{
; 43   : 				glm::u16vec2 B = glm::linearRand(glm::u16vec2(Min), glm::u16vec2(Max));

	mov	dx, 32					; 00000020H
	lea	rcx, QWORD PTR $T81[rsp]
	call	??0?$tvec2@G$0A@@glm@@QEAA@G@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
	mov	QWORD PTR tv193[rsp], rax
	mov	dx, 16
	lea	rcx, QWORD PTR $T82[rsp]
	call	??0?$tvec2@G$0A@@glm@@QEAA@G@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
	mov	rcx, QWORD PTR tv193[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR B$38[rsp]
	call	??$linearRand@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ; glm::linearRand<unsigned short,0,glm::tvec2>

; 44   : 				BMin = glm::min(BMin, B);

	lea	r8, QWORD PTR B$38[rsp]
	lea	rdx, QWORD PTR BMin$35[rsp]
	lea	rcx, QWORD PTR $T83[rsp]
	call	??$min@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ; glm::min<unsigned short,0,glm::tvec2>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR BMin$35[rsp], eax

; 45   : 				BMax = glm::max(BMax, B);

	lea	r8, QWORD PTR B$38[rsp]
	lea	rdx, QWORD PTR BMax$36[rsp]
	lea	rcx, QWORD PTR $T84[rsp]
	call	??$max@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@G$0A@@0@AEBU10@0@Z ; glm::max<unsigned short,0,glm::tvec2>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR BMax$36[rsp], eax

; 46   : 
; 47   : 				if(!glm::all(glm::lessThanEqual(B, glm::u16vec2(Max))))

	mov	dx, 32					; 00000020H
	lea	rcx, QWORD PTR $T85[rsp]
	call	??0?$tvec2@G$0A@@glm@@QEAA@G@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
	mov	r8, rax
	lea	rdx, QWORD PTR B$38[rsp]
	lea	rcx, QWORD PTR $T86[rsp]
	call	??$lessThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ; glm::lessThanEqual<unsigned short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN34@test_linea

; 48   : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN34@test_linea:

; 49   : 				if(!glm::all(glm::greaterThanEqual(B, glm::u16vec2(Min))))

	mov	dx, 16
	lea	rcx, QWORD PTR $T87[rsp]
	call	??0?$tvec2@G$0A@@glm@@QEAA@G@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
	mov	r8, rax
	lea	rdx, QWORD PTR B$38[rsp]
	lea	rcx, QWORD PTR $T88[rsp]
	call	??$greaterThanEqual@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ; glm::greaterThanEqual<unsigned short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN35@test_linea

; 50   : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN35@test_linea:

; 51   : 				assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN59@test_linea
	mov	r8d, 51					; 00000033H
	lea	rdx, OFFSET FLAT:$SG28310
	lea	rcx, OFFSET FLAT:$SG28311
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN59@test_linea:

; 52   : 			}

	jmp	$LN5@test_linea
$LN6@test_linea:

; 53   : 
; 54   : 			Error += glm::all(glm::equal(BMin, glm::u16vec2(Min))) ? 0 : 1;

	mov	dx, 16
	lea	rcx, QWORD PTR $T89[rsp]
	call	??0?$tvec2@G$0A@@glm@@QEAA@G@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
	mov	r8, rax
	lea	rdx, QWORD PTR BMin$35[rsp]
	lea	rcx, QWORD PTR $T90[rsp]
	call	??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN60@test_linea
	mov	DWORD PTR tv250[rsp], 0
	jmp	SHORT $LN61@test_linea
$LN60@test_linea:
	mov	DWORD PTR tv250[rsp], 1
$LN61@test_linea:
	mov	eax, DWORD PTR tv250[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 55   : 			Error += glm::all(glm::equal(BMax, glm::u16vec2(Max))) ? 0 : 1;

	mov	dx, 32					; 00000020H
	lea	rcx, QWORD PTR $T91[rsp]
	call	??0?$tvec2@G$0A@@glm@@QEAA@G@Z		; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0>
	mov	r8, rax
	lea	rdx, QWORD PTR BMax$36[rsp]
	lea	rcx, QWORD PTR $T92[rsp]
	call	??$equal@G$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@G$0A@@0@0@Z ; glm::equal<unsigned short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN62@test_linea
	mov	DWORD PTR tv295[rsp], 0
	jmp	SHORT $LN63@test_linea
$LN62@test_linea:
	mov	DWORD PTR tv295[rsp], 1
$LN63@test_linea:
	mov	eax, DWORD PTR tv295[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 56   : 			assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN64@test_linea
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:$SG28312
	lea	rcx, OFFSET FLAT:$SG28313
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN64@test_linea:

; 57   : 		}
; 58   : 
; 59   : 		glm::u32vec2 CMin(std::numeric_limits<glm::u32>::max());

	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	edx, eax
	lea	rcx, QWORD PTR CMin$39[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 60   : 		glm::u32vec2 CMax(std::numeric_limits<glm::u32>::min());

	call	?min@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::min
	mov	edx, eax
	lea	rcx, QWORD PTR CMax$40[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 61   : 		{
; 62   : 			for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$41[rsp], 0
	jmp	SHORT $LN10@test_linea
$LN8@test_linea:
	mov	rax, QWORD PTR i$41[rsp]
	inc	rax
	mov	QWORD PTR i$41[rsp], rax
$LN10@test_linea:
	cmp	QWORD PTR i$41[rsp], 10000		; 00002710H
	jae	$LN9@test_linea

; 63   : 			{
; 64   : 				glm::u32vec2 C = glm::linearRand(glm::u32vec2(Min), glm::u32vec2(Max));

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T93[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	QWORD PTR tv312[rsp], rax
	mov	edx, 16
	lea	rcx, QWORD PTR $T94[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rcx, QWORD PTR tv312[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR C$42[rsp]
	call	??$linearRand@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::linearRand<unsigned int,0,glm::tvec2>

; 65   : 				CMin = glm::min(CMin, C);

	lea	r8, QWORD PTR C$42[rsp]
	lea	rdx, QWORD PTR CMin$39[rsp]
	lea	rcx, QWORD PTR $T95[rsp]
	call	??$min@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::min<unsigned int,0,glm::tvec2>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR CMin$39[rsp], rax

; 66   : 				CMax = glm::max(CMax, C);

	lea	r8, QWORD PTR C$42[rsp]
	lea	rdx, QWORD PTR CMax$40[rsp]
	lea	rcx, QWORD PTR $T96[rsp]
	call	??$max@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::max<unsigned int,0,glm::tvec2>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR CMax$40[rsp], rax

; 67   : 
; 68   : 				if(!glm::all(glm::lessThanEqual(C, glm::u32vec2(Max))))

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T97[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR C$42[rsp]
	lea	rcx, QWORD PTR $T98[rsp]
	call	??$lessThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::lessThanEqual<unsigned int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN36@test_linea

; 69   : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN36@test_linea:

; 70   : 				if(!glm::all(glm::greaterThanEqual(C, glm::u32vec2(Min))))

	mov	edx, 16
	lea	rcx, QWORD PTR $T99[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR C$42[rsp]
	lea	rcx, QWORD PTR $T100[rsp]
	call	??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN37@test_linea

; 71   : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN37@test_linea:

; 72   : 				assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN65@test_linea
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:$SG28316
	lea	rcx, OFFSET FLAT:$SG28317
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN65@test_linea:

; 73   : 			}

	jmp	$LN8@test_linea
$LN9@test_linea:

; 74   : 
; 75   : 			Error += glm::all(glm::equal(CMin, glm::u32vec2(Min))) ? 0 : 1;

	mov	edx, 16
	lea	rcx, QWORD PTR $T101[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR CMin$39[rsp]
	lea	rcx, QWORD PTR $T102[rsp]
	call	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN66@test_linea
	mov	DWORD PTR tv369[rsp], 0
	jmp	SHORT $LN67@test_linea
$LN66@test_linea:
	mov	DWORD PTR tv369[rsp], 1
$LN67@test_linea:
	mov	eax, DWORD PTR tv369[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 76   : 			Error += glm::all(glm::equal(CMax, glm::u32vec2(Max))) ? 0 : 1;

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T103[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR CMax$40[rsp]
	lea	rcx, QWORD PTR $T104[rsp]
	call	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN68@test_linea
	mov	DWORD PTR tv382[rsp], 0
	jmp	SHORT $LN69@test_linea
$LN68@test_linea:
	mov	DWORD PTR tv382[rsp], 1
$LN69@test_linea:
	mov	eax, DWORD PTR tv382[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 77   : 			assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN70@test_linea
	mov	r8d, 77					; 0000004dH
	lea	rdx, OFFSET FLAT:$SG28318
	lea	rcx, OFFSET FLAT:$SG28319
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN70@test_linea:

; 78   : 		}
; 79   : 
; 80   : 		glm::u64vec2 DMin(std::numeric_limits<glm::u64>::max());

	call	?max@?$numeric_limits@_K@std@@SA_KXZ	; std::numeric_limits<unsigned __int64>::max
	mov	rdx, rax
	lea	rcx, QWORD PTR DMin$43[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>

; 81   : 		glm::u64vec2 DMax(std::numeric_limits<glm::u64>::min());

	call	?min@?$numeric_limits@_K@std@@SA_KXZ	; std::numeric_limits<unsigned __int64>::min
	mov	rdx, rax
	lea	rcx, QWORD PTR DMax$44[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>

; 82   : 		{
; 83   : 			for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$45[rsp], 0
	jmp	SHORT $LN13@test_linea
$LN11@test_linea:
	mov	rax, QWORD PTR i$45[rsp]
	inc	rax
	mov	QWORD PTR i$45[rsp], rax
$LN13@test_linea:
	cmp	QWORD PTR i$45[rsp], 10000		; 00002710H
	jae	$LN12@test_linea

; 84   : 			{
; 85   : 				glm::u64vec2 D = glm::linearRand(glm::u64vec2(Min), glm::u64vec2(Max));

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T105[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	QWORD PTR tv399[rsp], rax
	mov	edx, 16
	lea	rcx, QWORD PTR $T106[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	rcx, QWORD PTR tv399[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR D$46[rsp]
	call	??$linearRand@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::linearRand<unsigned __int64,0,glm::tvec2>

; 86   : 				DMin = glm::min(DMin, D);

	lea	r8, QWORD PTR D$46[rsp]
	lea	rdx, QWORD PTR DMin$43[rsp]
	lea	rcx, QWORD PTR $T107[rsp]
	call	??$min@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::min<unsigned __int64,0,glm::tvec2>
	lea	rcx, QWORD PTR DMin$43[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 87   : 				DMax = glm::max(DMax, D);

	lea	r8, QWORD PTR D$46[rsp]
	lea	rdx, QWORD PTR DMax$44[rsp]
	lea	rcx, QWORD PTR $T108[rsp]
	call	??$max@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::max<unsigned __int64,0,glm::tvec2>
	lea	rcx, QWORD PTR DMax$44[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 88   : 
; 89   : 				if(!glm::all(glm::lessThanEqual(D, glm::u64vec2(Max))))

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T109[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	r8, rax
	lea	rdx, QWORD PTR D$46[rsp]
	lea	rcx, QWORD PTR $T110[rsp]
	call	??$lessThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ; glm::lessThanEqual<unsigned __int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN38@test_linea

; 90   : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN38@test_linea:

; 91   : 				if(!glm::all(glm::greaterThanEqual(D, glm::u64vec2(Min))))

	mov	edx, 16
	lea	rcx, QWORD PTR $T111[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	r8, rax
	lea	rdx, QWORD PTR D$46[rsp]
	lea	rcx, QWORD PTR $T112[rsp]
	call	??$greaterThanEqual@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ; glm::greaterThanEqual<unsigned __int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN39@test_linea

; 92   : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN39@test_linea:

; 93   : 				assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN71@test_linea
	mov	r8d, 93					; 0000005dH
	lea	rdx, OFFSET FLAT:$SG28322
	lea	rcx, OFFSET FLAT:$SG28323
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN71@test_linea:

; 94   : 			}

	jmp	$LN11@test_linea
$LN12@test_linea:

; 95   : 
; 96   : 			Error += glm::all(glm::equal(DMin, glm::u64vec2(Min))) ? 0 : 1;

	mov	edx, 16
	lea	rcx, QWORD PTR $T113[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	r8, rax
	lea	rdx, QWORD PTR DMin$43[rsp]
	lea	rcx, QWORD PTR $T114[rsp]
	call	??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN72@test_linea
	mov	DWORD PTR tv488[rsp], 0
	jmp	SHORT $LN73@test_linea
$LN72@test_linea:
	mov	DWORD PTR tv488[rsp], 1
$LN73@test_linea:
	mov	eax, DWORD PTR tv488[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 97   : 			Error += glm::all(glm::equal(DMax, glm::u64vec2(Max))) ? 0 : 1;

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T115[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	r8, rax
	lea	rdx, QWORD PTR DMax$44[rsp]
	lea	rcx, QWORD PTR $T116[rsp]
	call	??$equal@_K$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_K$0A@@0@0@Z ; glm::equal<unsigned __int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN74@test_linea
	mov	DWORD PTR tv501[rsp], 0
	jmp	SHORT $LN75@test_linea
$LN74@test_linea:
	mov	DWORD PTR tv501[rsp], 1
$LN75@test_linea:
	mov	eax, DWORD PTR tv501[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 98   : 			assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN76@test_linea
	mov	r8d, 98					; 00000062H
	lea	rdx, OFFSET FLAT:$SG28324
	lea	rcx, OFFSET FLAT:$SG28325
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN76@test_linea:

; 99   : 		}
; 100  : 	}
; 101  : 
; 102  : 	{
; 103  : 		glm::i8vec2 AMin(std::numeric_limits<glm::i8>::max());

	call	?max@?$numeric_limits@C@std@@SACXZ	; std::numeric_limits<signed char>::max
	movzx	edx, al
	lea	rcx, QWORD PTR AMin$47[rsp]
	call	??0?$tvec2@C$0A@@glm@@QEAA@C@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>

; 104  : 		glm::i8vec2 AMax(std::numeric_limits<glm::i8>::min());

	call	?min@?$numeric_limits@C@std@@SACXZ	; std::numeric_limits<signed char>::min
	movzx	edx, al
	lea	rcx, QWORD PTR AMax$48[rsp]
	call	??0?$tvec2@C$0A@@glm@@QEAA@C@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>

; 105  : 		{
; 106  : 			for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$49[rsp], 0
	jmp	SHORT $LN16@test_linea
$LN14@test_linea:
	mov	rax, QWORD PTR i$49[rsp]
	inc	rax
	mov	QWORD PTR i$49[rsp], rax
$LN16@test_linea:
	cmp	QWORD PTR i$49[rsp], 10000		; 00002710H
	jae	$LN15@test_linea

; 107  : 			{
; 108  : 				glm::i8vec2 A = glm::linearRand(glm::i8vec2(Min), glm::i8vec2(Max));

	mov	dl, 32					; 00000020H
	lea	rcx, QWORD PTR $T117[rsp]
	call	??0?$tvec2@C$0A@@glm@@QEAA@C@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
	mov	QWORD PTR tv518[rsp], rax
	mov	dl, 16
	lea	rcx, QWORD PTR $T118[rsp]
	call	??0?$tvec2@C$0A@@glm@@QEAA@C@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
	mov	rcx, QWORD PTR tv518[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR A$50[rsp]
	call	??$linearRand@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ; glm::linearRand<signed char,0,glm::tvec2>

; 109  : 				AMin = glm::min(AMin, A);

	lea	r8, QWORD PTR A$50[rsp]
	lea	rdx, QWORD PTR AMin$47[rsp]
	lea	rcx, QWORD PTR $T119[rsp]
	call	??$min@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ; glm::min<signed char,0,glm::tvec2>
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR AMin$47[rsp], ax

; 110  : 				AMax = glm::max(AMax, A);

	lea	r8, QWORD PTR A$50[rsp]
	lea	rdx, QWORD PTR AMax$48[rsp]
	lea	rcx, QWORD PTR $T120[rsp]
	call	??$max@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@C$0A@@0@AEBU10@0@Z ; glm::max<signed char,0,glm::tvec2>
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR AMax$48[rsp], ax

; 111  : 
; 112  : 				if(!glm::all(glm::lessThanEqual(A, glm::i8vec2(Max))))

	mov	dl, 32					; 00000020H
	lea	rcx, QWORD PTR $T121[rsp]
	call	??0?$tvec2@C$0A@@glm@@QEAA@C@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
	mov	r8, rax
	lea	rdx, QWORD PTR A$50[rsp]
	lea	rcx, QWORD PTR $T122[rsp]
	call	??$lessThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ; glm::lessThanEqual<signed char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN40@test_linea

; 113  : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN40@test_linea:

; 114  : 				if(!glm::all(glm::greaterThanEqual(A, glm::i8vec2(Min))))

	mov	dl, 16
	lea	rcx, QWORD PTR $T123[rsp]
	call	??0?$tvec2@C$0A@@glm@@QEAA@C@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
	mov	r8, rax
	lea	rdx, QWORD PTR A$50[rsp]
	lea	rcx, QWORD PTR $T124[rsp]
	call	??$greaterThanEqual@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ; glm::greaterThanEqual<signed char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN41@test_linea

; 115  : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN41@test_linea:

; 116  : 				assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN77@test_linea
	mov	r8d, 116				; 00000074H
	lea	rdx, OFFSET FLAT:$SG28328
	lea	rcx, OFFSET FLAT:$SG28329
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN77@test_linea:

; 117  : 			}

	jmp	$LN14@test_linea
$LN15@test_linea:

; 118  : 
; 119  : 			Error += glm::all(glm::equal(AMin, glm::i8vec2(Min))) ? 0 : 1;

	mov	dl, 16
	lea	rcx, QWORD PTR $T125[rsp]
	call	??0?$tvec2@C$0A@@glm@@QEAA@C@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
	mov	r8, rax
	lea	rdx, QWORD PTR AMin$47[rsp]
	lea	rcx, QWORD PTR $T126[rsp]
	call	??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN78@test_linea
	mov	DWORD PTR tv575[rsp], 0
	jmp	SHORT $LN79@test_linea
$LN78@test_linea:
	mov	DWORD PTR tv575[rsp], 1
$LN79@test_linea:
	mov	eax, DWORD PTR tv575[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 120  : 			Error += glm::all(glm::equal(AMax, glm::i8vec2(Max))) ? 0 : 1;

	mov	dl, 32					; 00000020H
	lea	rcx, QWORD PTR $T127[rsp]
	call	??0?$tvec2@C$0A@@glm@@QEAA@C@Z		; glm::tvec2<signed char,0>::tvec2<signed char,0>
	mov	r8, rax
	lea	rdx, QWORD PTR AMax$48[rsp]
	lea	rcx, QWORD PTR $T128[rsp]
	call	??$equal@C$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@C$0A@@0@0@Z ; glm::equal<signed char,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN80@test_linea
	mov	DWORD PTR tv588[rsp], 0
	jmp	SHORT $LN81@test_linea
$LN80@test_linea:
	mov	DWORD PTR tv588[rsp], 1
$LN81@test_linea:
	mov	eax, DWORD PTR tv588[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 121  : 			assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN82@test_linea
	mov	r8d, 121				; 00000079H
	lea	rdx, OFFSET FLAT:$SG28330
	lea	rcx, OFFSET FLAT:$SG28331
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN82@test_linea:

; 122  : 		}
; 123  : 
; 124  : 		glm::i16vec2 BMin(std::numeric_limits<glm::i16>::max());

	call	?max@?$numeric_limits@F@std@@SAFXZ	; std::numeric_limits<short>::max
	movzx	edx, ax
	lea	rcx, QWORD PTR BMin$51[rsp]
	call	??0?$tvec2@F$0A@@glm@@QEAA@F@Z		; glm::tvec2<short,0>::tvec2<short,0>

; 125  : 		glm::i16vec2 BMax(std::numeric_limits<glm::i16>::min());

	call	?min@?$numeric_limits@F@std@@SAFXZ	; std::numeric_limits<short>::min
	movzx	edx, ax
	lea	rcx, QWORD PTR BMax$52[rsp]
	call	??0?$tvec2@F$0A@@glm@@QEAA@F@Z		; glm::tvec2<short,0>::tvec2<short,0>

; 126  : 		{
; 127  : 			for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$53[rsp], 0
	jmp	SHORT $LN19@test_linea
$LN17@test_linea:
	mov	rax, QWORD PTR i$53[rsp]
	inc	rax
	mov	QWORD PTR i$53[rsp], rax
$LN19@test_linea:
	cmp	QWORD PTR i$53[rsp], 10000		; 00002710H
	jae	$LN18@test_linea

; 128  : 			{
; 129  : 				glm::i16vec2 B = glm::linearRand(glm::i16vec2(Min), glm::i16vec2(Max));

	mov	dx, 32					; 00000020H
	lea	rcx, QWORD PTR $T129[rsp]
	call	??0?$tvec2@F$0A@@glm@@QEAA@F@Z		; glm::tvec2<short,0>::tvec2<short,0>
	mov	QWORD PTR tv605[rsp], rax
	mov	dx, 16
	lea	rcx, QWORD PTR $T130[rsp]
	call	??0?$tvec2@F$0A@@glm@@QEAA@F@Z		; glm::tvec2<short,0>::tvec2<short,0>
	mov	rcx, QWORD PTR tv605[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR B$54[rsp]
	call	??$linearRand@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ; glm::linearRand<short,0,glm::tvec2>

; 130  : 				BMin = glm::min(BMin, B);

	lea	r8, QWORD PTR B$54[rsp]
	lea	rdx, QWORD PTR BMin$51[rsp]
	lea	rcx, QWORD PTR $T131[rsp]
	call	??$min@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ; glm::min<short,0,glm::tvec2>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR BMin$51[rsp], eax

; 131  : 				BMax = glm::max(BMax, B);

	lea	r8, QWORD PTR B$54[rsp]
	lea	rdx, QWORD PTR BMax$52[rsp]
	lea	rcx, QWORD PTR $T132[rsp]
	call	??$max@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@F$0A@@0@AEBU10@0@Z ; glm::max<short,0,glm::tvec2>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR BMax$52[rsp], eax

; 132  : 
; 133  : 				if(!glm::all(glm::lessThanEqual(B, glm::i16vec2(Max))))

	mov	dx, 32					; 00000020H
	lea	rcx, QWORD PTR $T133[rsp]
	call	??0?$tvec2@F$0A@@glm@@QEAA@F@Z		; glm::tvec2<short,0>::tvec2<short,0>
	mov	r8, rax
	lea	rdx, QWORD PTR B$54[rsp]
	lea	rcx, QWORD PTR $T134[rsp]
	call	??$lessThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ; glm::lessThanEqual<short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN42@test_linea

; 134  : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN42@test_linea:

; 135  : 				if(!glm::all(glm::greaterThanEqual(B, glm::i16vec2(Min))))

	mov	dx, 16
	lea	rcx, QWORD PTR $T135[rsp]
	call	??0?$tvec2@F$0A@@glm@@QEAA@F@Z		; glm::tvec2<short,0>::tvec2<short,0>
	mov	r8, rax
	lea	rdx, QWORD PTR B$54[rsp]
	lea	rcx, QWORD PTR $T136[rsp]
	call	??$greaterThanEqual@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ; glm::greaterThanEqual<short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN43@test_linea

; 136  : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN43@test_linea:

; 137  : 				assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN83@test_linea
	mov	r8d, 137				; 00000089H
	lea	rdx, OFFSET FLAT:$SG28334
	lea	rcx, OFFSET FLAT:$SG28335
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN83@test_linea:

; 138  : 			}

	jmp	$LN17@test_linea
$LN18@test_linea:

; 139  : 
; 140  : 			Error += glm::all(glm::equal(BMin, glm::i16vec2(Min))) ? 0 : 1;

	mov	dx, 16
	lea	rcx, QWORD PTR $T137[rsp]
	call	??0?$tvec2@F$0A@@glm@@QEAA@F@Z		; glm::tvec2<short,0>::tvec2<short,0>
	mov	r8, rax
	lea	rdx, QWORD PTR BMin$51[rsp]
	lea	rcx, QWORD PTR $T138[rsp]
	call	??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN84@test_linea
	mov	DWORD PTR tv662[rsp], 0
	jmp	SHORT $LN85@test_linea
$LN84@test_linea:
	mov	DWORD PTR tv662[rsp], 1
$LN85@test_linea:
	mov	eax, DWORD PTR tv662[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 141  : 			Error += glm::all(glm::equal(BMax, glm::i16vec2(Max))) ? 0 : 1;

	mov	dx, 32					; 00000020H
	lea	rcx, QWORD PTR $T139[rsp]
	call	??0?$tvec2@F$0A@@glm@@QEAA@F@Z		; glm::tvec2<short,0>::tvec2<short,0>
	mov	r8, rax
	lea	rdx, QWORD PTR BMax$52[rsp]
	lea	rcx, QWORD PTR $T140[rsp]
	call	??$equal@F$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@F$0A@@0@0@Z ; glm::equal<short,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN86@test_linea
	mov	DWORD PTR tv707[rsp], 0
	jmp	SHORT $LN87@test_linea
$LN86@test_linea:
	mov	DWORD PTR tv707[rsp], 1
$LN87@test_linea:
	mov	eax, DWORD PTR tv707[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 142  : 			assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN88@test_linea
	mov	r8d, 142				; 0000008eH
	lea	rdx, OFFSET FLAT:$SG28336
	lea	rcx, OFFSET FLAT:$SG28337
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN88@test_linea:

; 143  : 		}
; 144  : 
; 145  : 		glm::i32vec2 CMin(std::numeric_limits<glm::i32>::max());

	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	edx, eax
	lea	rcx, QWORD PTR CMin$55[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>

; 146  : 		glm::i32vec2 CMax(std::numeric_limits<glm::i32>::min());

	call	?min@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::min
	mov	edx, eax
	lea	rcx, QWORD PTR CMax$56[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>

; 147  : 		{
; 148  : 			for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$57[rsp], 0
	jmp	SHORT $LN22@test_linea
$LN20@test_linea:
	mov	rax, QWORD PTR i$57[rsp]
	inc	rax
	mov	QWORD PTR i$57[rsp], rax
$LN22@test_linea:
	cmp	QWORD PTR i$57[rsp], 10000		; 00002710H
	jae	$LN21@test_linea

; 149  : 			{
; 150  : 				glm::i32vec2 C = glm::linearRand(glm::i32vec2(Min), glm::i32vec2(Max));

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T141[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	QWORD PTR tv724[rsp], rax
	mov	edx, 16
	lea	rcx, QWORD PTR $T142[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	rcx, QWORD PTR tv724[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR C$58[rsp]
	call	??$linearRand@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ; glm::linearRand<int,0,glm::tvec2>

; 151  : 				CMin = glm::min(CMin, C);

	lea	r8, QWORD PTR C$58[rsp]
	lea	rdx, QWORD PTR CMin$55[rsp]
	lea	rcx, QWORD PTR $T143[rsp]
	call	??$min@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ; glm::min<int,0,glm::tvec2>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR CMin$55[rsp], rax

; 152  : 				CMax = glm::max(CMax, C);

	lea	r8, QWORD PTR C$58[rsp]
	lea	rdx, QWORD PTR CMax$56[rsp]
	lea	rcx, QWORD PTR $T144[rsp]
	call	??$max@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ; glm::max<int,0,glm::tvec2>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR CMax$56[rsp], rax

; 153  : 
; 154  : 				if(!glm::all(glm::lessThanEqual(C, glm::i32vec2(Max))))

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T145[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR C$58[rsp]
	lea	rcx, QWORD PTR $T146[rsp]
	call	??$lessThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::lessThanEqual<int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN44@test_linea

; 155  : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN44@test_linea:

; 156  : 				if(!glm::all(glm::greaterThanEqual(C, glm::i32vec2(Min))))

	mov	edx, 16
	lea	rcx, QWORD PTR $T147[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR C$58[rsp]
	lea	rcx, QWORD PTR $T148[rsp]
	call	??$greaterThanEqual@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::greaterThanEqual<int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN45@test_linea

; 157  : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN45@test_linea:

; 158  : 				assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN89@test_linea
	mov	r8d, 158				; 0000009eH
	lea	rdx, OFFSET FLAT:$SG28340
	lea	rcx, OFFSET FLAT:$SG28341
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN89@test_linea:

; 159  : 			}

	jmp	$LN20@test_linea
$LN21@test_linea:

; 160  : 
; 161  : 			Error += glm::all(glm::equal(CMin, glm::i32vec2(Min))) ? 0 : 1;

	mov	edx, 16
	lea	rcx, QWORD PTR $T149[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR CMin$55[rsp]
	lea	rcx, QWORD PTR $T150[rsp]
	call	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN90@test_linea
	mov	DWORD PTR tv781[rsp], 0
	jmp	SHORT $LN91@test_linea
$LN90@test_linea:
	mov	DWORD PTR tv781[rsp], 1
$LN91@test_linea:
	mov	eax, DWORD PTR tv781[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 162  : 			Error += glm::all(glm::equal(CMax, glm::i32vec2(Max))) ? 0 : 1;

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T151[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR CMax$56[rsp]
	lea	rcx, QWORD PTR $T152[rsp]
	call	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN92@test_linea
	mov	DWORD PTR tv794[rsp], 0
	jmp	SHORT $LN93@test_linea
$LN92@test_linea:
	mov	DWORD PTR tv794[rsp], 1
$LN93@test_linea:
	mov	eax, DWORD PTR tv794[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 163  : 			assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN94@test_linea
	mov	r8d, 163				; 000000a3H
	lea	rdx, OFFSET FLAT:$SG28342
	lea	rcx, OFFSET FLAT:$SG28343
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN94@test_linea:

; 164  : 		}
; 165  : 
; 166  : 		glm::i64vec2 DMin(std::numeric_limits<glm::i64>::max());

	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	rdx, rax
	lea	rcx, QWORD PTR DMin$59[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>

; 167  : 		glm::i64vec2 DMax(std::numeric_limits<glm::i64>::min());

	call	?min@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::min
	mov	rdx, rax
	lea	rcx, QWORD PTR DMax$60[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>

; 168  : 		{
; 169  : 			for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$61[rsp], 0
	jmp	SHORT $LN25@test_linea
$LN23@test_linea:
	mov	rax, QWORD PTR i$61[rsp]
	inc	rax
	mov	QWORD PTR i$61[rsp], rax
$LN25@test_linea:
	cmp	QWORD PTR i$61[rsp], 10000		; 00002710H
	jae	$LN24@test_linea

; 170  : 			{
; 171  : 				glm::i64vec2 D = glm::linearRand(glm::i64vec2(Min), glm::i64vec2(Max));

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T153[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	QWORD PTR tv811[rsp], rax
	mov	edx, 16
	lea	rcx, QWORD PTR $T154[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	rcx, QWORD PTR tv811[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR D$62[rsp]
	call	??$linearRand@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::linearRand<__int64,0,glm::tvec2>

; 172  : 				DMin = glm::min(DMin, D);

	lea	r8, QWORD PTR D$62[rsp]
	lea	rdx, QWORD PTR DMin$59[rsp]
	lea	rcx, QWORD PTR $T155[rsp]
	call	??$min@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::min<__int64,0,glm::tvec2>
	lea	rcx, QWORD PTR DMin$59[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 173  : 				DMax = glm::max(DMax, D);

	lea	r8, QWORD PTR D$62[rsp]
	lea	rdx, QWORD PTR DMax$60[rsp]
	lea	rcx, QWORD PTR $T156[rsp]
	call	??$max@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::max<__int64,0,glm::tvec2>
	lea	rcx, QWORD PTR DMax$60[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 174  : 
; 175  : 				if(!glm::all(glm::lessThanEqual(D, glm::i64vec2(Max))))

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T157[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	r8, rax
	lea	rdx, QWORD PTR D$62[rsp]
	lea	rcx, QWORD PTR $T158[rsp]
	call	??$lessThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ; glm::lessThanEqual<__int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN46@test_linea

; 176  : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN46@test_linea:

; 177  : 				if(!glm::all(glm::greaterThanEqual(D, glm::i64vec2(Min))))

	mov	edx, 16
	lea	rcx, QWORD PTR $T159[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	r8, rax
	lea	rdx, QWORD PTR D$62[rsp]
	lea	rcx, QWORD PTR $T160[rsp]
	call	??$greaterThanEqual@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ; glm::greaterThanEqual<__int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN47@test_linea

; 178  : 					++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN47@test_linea:

; 179  : 				assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN95@test_linea
	mov	r8d, 179				; 000000b3H
	lea	rdx, OFFSET FLAT:$SG28346
	lea	rcx, OFFSET FLAT:$SG28347
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN95@test_linea:

; 180  : 			}

	jmp	$LN23@test_linea
$LN24@test_linea:

; 181  : 
; 182  : 			Error += glm::all(glm::equal(DMin, glm::i64vec2(Min))) ? 0 : 1;

	mov	edx, 16
	lea	rcx, QWORD PTR $T161[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	r8, rax
	lea	rdx, QWORD PTR DMin$59[rsp]
	lea	rcx, QWORD PTR $T162[rsp]
	call	??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN96@test_linea
	mov	DWORD PTR tv900[rsp], 0
	jmp	SHORT $LN97@test_linea
$LN96@test_linea:
	mov	DWORD PTR tv900[rsp], 1
$LN97@test_linea:
	mov	eax, DWORD PTR tv900[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 183  : 			Error += glm::all(glm::equal(DMax, glm::i64vec2(Max))) ? 0 : 1;

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T163[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	r8, rax
	lea	rdx, QWORD PTR DMax$60[rsp]
	lea	rcx, QWORD PTR $T164[rsp]
	call	??$equal@_J$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@_J$0A@@0@0@Z ; glm::equal<__int64,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN98@test_linea
	mov	DWORD PTR tv913[rsp], 0
	jmp	SHORT $LN99@test_linea
$LN98@test_linea:
	mov	DWORD PTR tv913[rsp], 1
$LN99@test_linea:
	mov	eax, DWORD PTR tv913[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 184  : 			assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN100@test_linea
	mov	r8d, 184				; 000000b8H
	lea	rdx, OFFSET FLAT:$SG28348
	lea	rcx, OFFSET FLAT:$SG28349
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN100@test_linea:

; 185  : 		}
; 186  : 	}
; 187  : 
; 188  : 	for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$63[rsp], 0
	jmp	SHORT $LN28@test_linea
$LN26@test_linea:
	mov	rax, QWORD PTR i$63[rsp]
	inc	rax
	mov	QWORD PTR i$63[rsp], rax
$LN28@test_linea:
	cmp	QWORD PTR i$63[rsp], 10000		; 00002710H
	jae	$LN27@test_linea

; 189  : 	{
; 190  : 		glm::f32vec2 const A(glm::linearRand(glm::f32vec2(static_cast<float>(Min)), glm::f32vec2(static_cast<float>(Max))));

	movss	xmm1, DWORD PTR __real@42000000
	lea	rcx, QWORD PTR $T165[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv924[rsp], rax
	movss	xmm1, DWORD PTR __real@41800000
	lea	rcx, QWORD PTR $T166[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv924[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR A$64[rsp]
	call	??$linearRand@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::linearRand<float,0,glm::tvec2>

; 191  : 		if(!glm::all(glm::lessThanEqual(A, glm::f32vec2(static_cast<float>(Max)))))

	movss	xmm1, DWORD PTR __real@42000000
	lea	rcx, QWORD PTR $T167[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR A$64[rsp]
	lea	rcx, QWORD PTR $T168[rsp]
	call	??$lessThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThanEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN48@test_linea

; 192  : 			++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN48@test_linea:

; 193  : 		if(!glm::all(glm::greaterThanEqual(A, glm::f32vec2(static_cast<float>(Min)))))

	movss	xmm1, DWORD PTR __real@41800000
	lea	rcx, QWORD PTR $T169[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR A$64[rsp]
	lea	rcx, QWORD PTR $T170[rsp]
	call	??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::greaterThanEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN49@test_linea

; 194  : 			++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN49@test_linea:

; 195  : 
; 196  : 		glm::f64vec2 const B(glm::linearRand(glm::f64vec2(Min), glm::f64vec2(Max)));

	movsd	xmm1, QWORD PTR __real@4040000000000000
	lea	rcx, QWORD PTR $T171[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	QWORD PTR tv957[rsp], rax
	movsd	xmm1, QWORD PTR __real@4030000000000000
	lea	rcx, QWORD PTR $T172[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rcx, QWORD PTR tv957[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR B$65[rsp]
	call	??$linearRand@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::linearRand<double,0,glm::tvec2>

; 197  : 		if(!glm::all(glm::lessThanEqual(B, glm::f64vec2(Max))))

	movsd	xmm1, QWORD PTR __real@4040000000000000
	lea	rcx, QWORD PTR $T173[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	r8, rax
	lea	rdx, QWORD PTR B$65[rsp]
	lea	rcx, QWORD PTR $T174[rsp]
	call	??$lessThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ; glm::lessThanEqual<double,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN50@test_linea

; 198  : 			++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN50@test_linea:

; 199  : 		if(!glm::all(glm::greaterThanEqual(B, glm::f64vec2(Min))))

	movsd	xmm1, QWORD PTR __real@4030000000000000
	lea	rcx, QWORD PTR $T175[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	r8, rax
	lea	rdx, QWORD PTR B$65[rsp]
	lea	rcx, QWORD PTR $T176[rsp]
	call	??$greaterThanEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ; glm::greaterThanEqual<double,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN51@test_linea

; 200  : 			++Error;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax
$LN51@test_linea:

; 201  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN101@test_linea
	mov	r8d, 201				; 000000c9H
	lea	rdx, OFFSET FLAT:$SG28354
	lea	rcx, OFFSET FLAT:$SG28355
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN101@test_linea:

; 202  : 	}

	jmp	$LN26@test_linea
$LN27@test_linea:

; 203  : 
; 204  : 	{
; 205  : 		float ResultFloat = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR ResultFloat$66[rsp], xmm0

; 206  : 		double ResultDouble = 0.0f;

	xorps	xmm0, xmm0
	movsd	QWORD PTR ResultDouble$67[rsp], xmm0

; 207  : 		for(std::size_t i = 0; i < TestSamples; ++i)

	mov	QWORD PTR i$68[rsp], 0
	jmp	SHORT $LN31@test_linea
$LN29@test_linea:
	mov	rax, QWORD PTR i$68[rsp]
	inc	rax
	mov	QWORD PTR i$68[rsp], rax
$LN31@test_linea:
	cmp	QWORD PTR i$68[rsp], 10000		; 00002710H
	jae	SHORT $LN30@test_linea

; 208  : 		{
; 209  : 			ResultFloat += glm::linearRand(-1.0f, 1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR __real@bf800000
	call	??$linearRand@M@glm@@YAMMM@Z		; glm::linearRand<float>
	movss	xmm1, DWORD PTR ResultFloat$66[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ResultFloat$66[rsp], xmm0

; 210  : 			ResultDouble += glm::linearRand(-1.0, 1.0);

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	call	??$linearRand@N@glm@@YANNN@Z		; glm::linearRand<double>
	movsd	xmm1, QWORD PTR ResultDouble$67[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR ResultDouble$67[rsp], xmm0

; 211  : 		}

	jmp	SHORT $LN29@test_linea
$LN30@test_linea:

; 212  : 
; 213  : 		Error += glm::epsilonEqual(ResultFloat, 0.0f, 0.0001f);

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T177[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T178[rsp], xmm0
	lea	r8, QWORD PTR $T177[rsp]
	lea	rdx, QWORD PTR $T178[rsp]
	lea	rcx, QWORD PTR ResultFloat$66[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 214  : 		Error += glm::epsilonEqual(ResultDouble, 0.0, 0.0001);

	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR $T179[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T180[rsp], xmm0
	lea	r8, QWORD PTR $T179[rsp]
	lea	rdx, QWORD PTR $T180[rsp]
	lea	rcx, QWORD PTR ResultDouble$67[rsp]
	call	??$epsilonEqual@N@glm@@YA_NAEBN00@Z	; glm::epsilonEqual<double>
	movzx	eax, al
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 215  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN102@test_linea
	mov	r8d, 215				; 000000d7H
	lea	rdx, OFFSET FLAT:$SG28356
	lea	rcx, OFFSET FLAT:$SG28357
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN102@test_linea:

; 216  : 	}
; 217  : 
; 218  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 219  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_linearRand@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 1960				; 000007a8H
	pop	rdi
	pop	rsi
	ret	0
?test_linearRand@@YAHXZ ENDP				; test_linearRand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@N@glm@@YANN@Z
_TEXT	SEGMENT
x$ = 64
??$abs@N@glm@@YANN@Z PROC				; glm::abs<double>, COMDAT

; 310  : 	{

$LN3:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movsd	xmm0, QWORD PTR x$[rsp]
	call	?call@?$compute_abs@N$00@detail@glm@@SANN@Z ; glm::detail::compute_abs<double,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@N@glm@@YANN@Z ENDP				; glm::abs<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@N@glm@@YA_NAEBN00@Z
_TEXT	SEGMENT
tv68 = 32
x$ = 64
y$ = 72
epsilon$ = 80
??$epsilonEqual@N@glm@@YA_NAEBN00@Z PROC		; glm::epsilonEqual<double>, COMDAT

; 32   : 	{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 33   : 		return abs(x - y) < epsilon;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	subsd	xmm0, QWORD PTR [rcx]
	call	??$abs@N@glm@@YANN@Z			; glm::abs<double>
	mov	rax, QWORD PTR epsilon$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	comisd	xmm1, xmm0
	jbe	SHORT $LN3@epsilonEqu
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@epsilonEqu
$LN3@epsilonEqu:
	mov	DWORD PTR tv68[rsp], 0
$LN4@epsilonEqu:
	movzx	eax, BYTE PTR tv68[rsp]

; 34   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilonEqual@N@glm@@YA_NAEBN00@Z ENDP		; glm::epsilonEqual<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M@glm@@YA_NAEBM00@Z
_TEXT	SEGMENT
tv68 = 32
x$ = 64
y$ = 72
epsilon$ = 80
??$epsilonEqual@M@glm@@YA_NAEBM00@Z PROC		; glm::epsilonEqual<float>, COMDAT

; 21   : 	{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 22   : 		return abs(x - y) < epsilon;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@epsilonEqu
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@epsilonEqu
$LN3@epsilonEqu:
	mov	DWORD PTR tv68[rsp], 0
$LN4@epsilonEqu:
	movzx	eax, BYTE PTR tv68[rsp]

; 23   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilonEqual@M@glm@@YA_NAEBM00@Z ENDP		; glm::epsilonEqual<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_K@std@@SA_KXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_K@std@@SA_KXZ PROC		; std::numeric_limits<unsigned __int64>::max, COMDAT

; 820  :     _NODISCARD static constexpr unsigned long long(max)() noexcept {

$LN3:
	push	rdi

; 821  :         return ULLONG_MAX;

	mov	rax, -1

; 822  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_K@std@@SA_KXZ ENDP		; std::numeric_limits<unsigned __int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@_K@std@@SA_KXZ
_TEXT	SEGMENT
?min@?$numeric_limits@_K@std@@SA_KXZ PROC		; std::numeric_limits<unsigned __int64>::min, COMDAT

; 816  :     _NODISCARD static constexpr unsigned long long(min)() noexcept {

$LN3:
	push	rdi

; 817  :         return 0;

	xor	eax, eax

; 818  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@_K@std@@SA_KXZ ENDP		; std::numeric_limits<unsigned __int64>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@I@std@@SAIXZ
_TEXT	SEGMENT
?max@?$numeric_limits@I@std@@SAIXZ PROC			; std::numeric_limits<unsigned int>::max, COMDAT

; 731  :     _NODISCARD static constexpr unsigned int(max)() noexcept {

$LN3:
	push	rdi

; 732  :         return UINT_MAX;

	mov	eax, -1					; ffffffffH

; 733  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@I@std@@SAIXZ ENDP			; std::numeric_limits<unsigned int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@I@std@@SAIXZ
_TEXT	SEGMENT
?min@?$numeric_limits@I@std@@SAIXZ PROC			; std::numeric_limits<unsigned int>::min, COMDAT

; 727  :     _NODISCARD static constexpr unsigned int(min)() noexcept {

$LN3:
	push	rdi

; 728  :         return 0;

	xor	eax, eax

; 729  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@I@std@@SAIXZ ENDP			; std::numeric_limits<unsigned int>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@G@std@@SAGXZ
_TEXT	SEGMENT
?max@?$numeric_limits@G@std@@SAGXZ PROC			; std::numeric_limits<unsigned short>::max, COMDAT

; 686  :     _NODISCARD static constexpr unsigned short(max)() noexcept {

$LN3:
	push	rdi

; 687  :         return USHRT_MAX;

	mov	eax, 65535				; 0000ffffH

; 688  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@G@std@@SAGXZ ENDP			; std::numeric_limits<unsigned short>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@G@std@@SAGXZ
_TEXT	SEGMENT
?min@?$numeric_limits@G@std@@SAGXZ PROC			; std::numeric_limits<unsigned short>::min, COMDAT

; 682  :     _NODISCARD static constexpr unsigned short(min)() noexcept {

$LN3:
	push	rdi

; 683  :         return 0;

	xor	eax, eax

; 684  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@G@std@@SAGXZ ENDP			; std::numeric_limits<unsigned short>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?min@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::min, COMDAT

; 637  :     _NODISCARD static constexpr long long(min)() noexcept {

$LN3:
	push	rdi

; 638  :         return LLONG_MIN;

	mov	rax, -9223372036854775808		; 8000000000000000H

; 639  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 552  :     _NODISCARD static constexpr int(max)() noexcept {

$LN3:
	push	rdi

; 553  :         return INT_MAX;

	mov	eax, 2147483647				; 7fffffffH

; 554  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?min@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::min, COMDAT

; 548  :     _NODISCARD static constexpr int(min)() noexcept {

$LN3:
	push	rdi

; 549  :         return INT_MIN;

	mov	eax, -2147483648			; ffffffff80000000H

; 550  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@F@std@@SAFXZ
_TEXT	SEGMENT
?max@?$numeric_limits@F@std@@SAFXZ PROC			; std::numeric_limits<short>::max, COMDAT

; 508  :     _NODISCARD static constexpr short(max)() noexcept {

$LN3:
	push	rdi

; 509  :         return SHRT_MAX;

	mov	eax, 32767				; 00007fffH

; 510  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@F@std@@SAFXZ ENDP			; std::numeric_limits<short>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@F@std@@SAFXZ
_TEXT	SEGMENT
?min@?$numeric_limits@F@std@@SAFXZ PROC			; std::numeric_limits<short>::min, COMDAT

; 504  :     _NODISCARD static constexpr short(min)() noexcept {

$LN3:
	push	rdi

; 505  :         return SHRT_MIN;

	mov	eax, -32768				; ffffffffffff8000H

; 506  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@F@std@@SAFXZ ENDP			; std::numeric_limits<short>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@E@std@@SAEXZ
_TEXT	SEGMENT
?max@?$numeric_limits@E@std@@SAEXZ PROC			; std::numeric_limits<unsigned char>::max, COMDAT

; 286  :     _NODISCARD static constexpr unsigned char(max)() noexcept {

$LN3:
	push	rdi

; 287  :         return UCHAR_MAX;

	mov	al, 255					; 000000ffH

; 288  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@E@std@@SAEXZ ENDP			; std::numeric_limits<unsigned char>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@E@std@@SAEXZ
_TEXT	SEGMENT
?min@?$numeric_limits@E@std@@SAEXZ PROC			; std::numeric_limits<unsigned char>::min, COMDAT

; 282  :     _NODISCARD static constexpr unsigned char(min)() noexcept {

$LN3:
	push	rdi

; 283  :         return 0;

	xor	al, al

; 284  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@E@std@@SAEXZ ENDP			; std::numeric_limits<unsigned char>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@C@std@@SACXZ
_TEXT	SEGMENT
?max@?$numeric_limits@C@std@@SACXZ PROC			; std::numeric_limits<signed char>::max, COMDAT

; 242  :     _NODISCARD static constexpr signed char(max)() noexcept {

$LN3:
	push	rdi

; 243  :         return SCHAR_MAX;

	mov	al, 127					; 0000007fH

; 244  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@C@std@@SACXZ ENDP			; std::numeric_limits<signed char>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@C@std@@SACXZ
_TEXT	SEGMENT
?min@?$numeric_limits@C@std@@SACXZ PROC			; std::numeric_limits<signed char>::min, COMDAT

; 238  :     _NODISCARD static constexpr signed char(min)() noexcept {

$LN3:
	push	rdi

; 239  :         return SCHAR_MIN;

	mov	al, -128				; ffffffffffffff80H

; 240  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@C@std@@SACXZ ENDP			; std::numeric_limits<signed char>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 264  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 265  :     return _CSTD sqrtf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sqrtf

; 266  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sin@@YAMM@Z PROC					; sin, COMDAT

; 256  : _NODISCARD _Check_return_ inline float sin(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 257  :     return _CSTD sinf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sinf

; 258  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?cos@@YAMM@Z PROC					; cos, COMDAT

; 88   : _NODISCARD _Check_return_ inline float cos(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 89   :     return _CSTD cosf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_cosf

; 90   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
END
