; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	?myrand@@YAHXZ					; myrand
PUBLIC	?myfrand@@YAMXZ					; myfrand
PUBLIC	?test_dquat_type@@YAHXZ				; test_dquat_type
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@XZ			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QEAA@XZ			; glm::tquat<double,0>::tquat<double,0>
PUBLIC	??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z		; glm::tquat<double,0>::tquat<double,0>
PUBLIC	?length@?$tdualquat@N$0A@@glm@@SAHXZ		; glm::tdualquat<double,0>::length
PUBLIC	??0?$tdualquat@N$0A@@glm@@QEAA@XZ		; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z ; glm::tdualquat<double,0>::tdualquat<double,0>
PUBLIC	?test_scalars@@YAHXZ				; test_scalars
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@XZ			; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z		; glm::tquat<float,0>::tquat<float,0>
PUBLIC	?length@?$tdualquat@M$0A@@glm@@SAHXZ		; glm::tdualquat<float,0>::length
PUBLIC	??0?$tdualquat@M$0A@@glm@@QEAA@XZ		; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBMAEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?XM@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tdualquat<float,0>::operator*=<float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
PUBLIC	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator/<float,0>
PUBLIC	??$?_0M@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tdualquat<float,0>::operator/=<float>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator/<float,0>
PUBLIC	?test_inverse@@YAHXZ				; test_inverse
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ			; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::yawPitchRoll<float>
PUBLIC	??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z ; glm::translate<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
PUBLIC	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z ; glm::quat_cast<float,0>
PUBLIC	??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
PUBLIC	??$pi@M@glm@@YAMXZ				; glm::pi<float>
PUBLIC	?test_mul@@YAHXZ				; test_mul
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tdualquat@M$0A@@0@@Z ; glm::operator*<float,0>
PUBLIC	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
PUBLIC	?test_dual_quat_ctr@@YAHXZ			; test_dual_quat_ctr
PUBLIC	?test_size@@YAHXZ				; test_size
PUBLIC	main
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tquat<float,0>::operator*=<float>
PUBLIC	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
PUBLIC	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
PUBLIC	??$?_0M@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tquat<float,0>::operator/=<float>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
PUBLIC	??$conjugate@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::conjugate<float,0>
PUBLIC	??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z ; glm::dot<float,0,glm::tquat>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
PUBLIC	?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_quat_mul_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z ; glm::detail::compute_quat_mul_scalar<float,0,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_quat_div_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z ; glm::detail::compute_quat_div_scalar<float,0,0>::call
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
PUBLIC	??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tquat<float,0>::operator+=<float>
PUBLIC	??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tquat<float,0>::operator*=<float>
PUBLIC	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_quat_add<float,0,0>::call
PUBLIC	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_1LC@KEKMINFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe@	; `string'
PUBLIC	??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@38d1b717
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@40e00000
PUBLIC	__real@41000000
PUBLIC	__real@411ffffc00000000
PUBLIC	__real@41200000
PUBLIC	__real@43b40000
PUBLIC	__real@bf000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp_cosf:PROC
EXTRN	__imp_sinf:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	__imp__wassert:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?cos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sin@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sin@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?myrand@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?myrand@@YAHXZ
$pdata$?myfrand@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?myfrand@@YAMXZ
$pdata$?test_dquat_type@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$?test_dquat_type@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$tquat@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tdualquat@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tdualquat@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$??0?$tdualquat@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+484
	DD	imagerel $unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_scalars@@YAHXZ DD imagerel $LN13
	DD	imagerel $LN13+1532
	DD	imagerel $unwind$?test_scalars@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tdualquat@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tdualquat@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$??0?$tdualquat@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+448
	DD	imagerel $unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBMAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBMAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?XM@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+165
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+293
	DD	imagerel $unwind$??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?_0M@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+165
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_inverse@@YAHXZ DD imagerel $LN12
	DD	imagerel $LN12+1377
	DD	imagerel $unwind$?test_inverse@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+297
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+331
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+224
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z DD imagerel $LN3
	DD	imagerel $LN3+1185
	DD	imagerel $unwind$??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+545
	DD	imagerel $unwind$??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+491
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+1720
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+187
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pi@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$??$pi@M@glm@@YAMXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mul@@YAHXZ DD imagerel $LN17
	DD	imagerel $LN17+1704
	DD	imagerel $unwind$?test_mul@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tdualquat@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tdualquat@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_dual_quat_ctr@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+22
	DD	imagerel $unwind$?test_dual_quat_ctr@@YAHXZ
$pdata$?test_size@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+278
	DD	imagerel $unwind$?test_size@@YAHXZ
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??$?_0M@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z DD imagerel $LN14
	DD	imagerel $LN14+2123
	DD	imagerel $unwind$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$conjugate@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??$conjugate@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+497
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+5983
	DD	imagerel $unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_quat_mul_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z DD imagerel $LN3
	DD	imagerel $LN3+154
	DD	imagerel $unwind$?call@?$compute_quat_mul_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_quat_div_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z DD imagerel $LN3
	DD	imagerel $LN3+154
	DD	imagerel $unwind$?call@?$compute_quat_div_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+237
	DD	imagerel $unwind$?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+420
	DD	imagerel $unwind$??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+168
	DD	imagerel $unwind$?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+190
	DD	imagerel $unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@411ffffc00000000
CONST	SEGMENT
__real@411ffffc00000000 DQ 0411ffffc00000000r	; 524287
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe@ DB 'f', 00H, 'a', 00H, 'l', 00H
	DB	's', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LC@KEKMINFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LC@KEKMINFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'g', 00H, 't', 00H
	DB	'c', 00H, '\', 00H, 'q', 00H, 'u', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'n', 00H, 'i', 00H, 'o', 00H, 'n', 00H, '.', 00H
	DB	'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?holdrand@?1??myrand@@YAHXZ@4HA
_DATA	SEGMENT
?holdrand@?1??myrand@@YAHXZ@4HA DD 01H			; `myrand'::`2'::holdrand
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 042c01H
	DD	0110113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z$rtcName$0 DB 070H ; glm::tquat<float,0>::operator*=<float>
	DB	00H
	ORG $+2
??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z$rtcName$1 DB 071H ; glm::tquat<float,0>::operator*=<float>
	DB	00H
	ORG $+10
??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z$rtcVarDesc DD 058H ; glm::tquat<float,0>::operator*=<float>
	DD	010H
	DQ	FLAT:??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z$rtcName$0
	ORG $+96
??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z$rtcFrameData DD 02H ; glm::tquat<float,0>::operator*=<float>
	DD	00H
	DQ	FLAT:??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcVarDesc DD 048H ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_quat_div_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z DD 021501H
	DD	070117215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_quat_mul_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z DD 021501H
	DD	070117215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z DD 031701H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	01746H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD 033d19H
	DD	01060112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0820H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$1 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$2 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$3 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$4 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	034H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$5 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	035H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$6 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$7 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$8 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$9 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$10 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$11 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$12 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$13 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$14 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	041H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$15 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	042H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$16 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$17 DB 052H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06fH
	DB	077H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$18 DB 044H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06fH
	DB	074H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$19 DB 04fH ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	065H
	DB	04fH
	DB	076H
	DB	065H
	DB	072H
	DB	044H
	DB	065H
	DB	074H
	DB	065H
	DB	072H
	DB	06dH
	DB	069H
	DB	06eH
	DB	061H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+5
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc DD 0444H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DD	04H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$19
	DD	0418H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$18
	DD	03e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$17
	DD	0390H
	DD	040H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$16
	DD	0358H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$15
	DD	0328H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$14
	DD	02f8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$13
	DD	02c8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$12
	DD	0298H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$11
	DD	0268H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$10
	DD	0238H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$9
	DD	0208H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$8
	DD	01d8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$7
	DD	01a8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$6
	DD	0178H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$5
	DD	0148H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$4
	DD	0118H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$3
	DD	0e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$2
	DD	0b8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$1
	DD	088H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+960
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData DD 014H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z DD 033001H
	DD	0220117H
	DD	07010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcName$0 DB 072H ; glm::operator*<float,0>
	DB	065H
	DB	061H
	DB	06cH
	DB	05fH
	DB	076H
	DB	033H
	DB	00H
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcName$1 DB 064H ; glm::operator*<float,0>
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	076H
	DB	033H
	DB	00H
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 058H ; glm::operator*<float,0>
	DD	0cH
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcName$0
	ORG $+96
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcFrameData DD 02H ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$conjugate@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z DD 042c01H
	DD	0230113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::quat_cast<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z$rtcVarDesc DD 048H ; glm::quat_cast<float,0>
	DD	010H
	DQ	FLAT:??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::quat_cast<float,0>
	DD	00H
	DQ	FLAT:??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d6211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d6211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD 021901H
	DD	07015b219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tdualquat@M$0A@@0@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pi@M@glm@@YAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	07010d214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z DD 032b01H
	DD	0140112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcName$0 DB 072H ; glm::inverse<float,0>
	DB	065H
	DB	061H
	DB	06cH
	DB	00H
	ORG $+3
??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcName$1 DB 064H ; glm::inverse<float,0>
	DB	075H
	DB	061H
	DB	06cH
	DB	00H
	ORG $+3
??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 058H ; glm::inverse<float,0>
	DD	010H
	DQ	FLAT:??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcName$0
	ORG $+96
??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcFrameData DD 02H ; glm::inverse<float,0>
	DD	00H
	DQ	FLAT:??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	019H
	DB	03fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z DD 021e19H
	DD	0700bb20fH
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	069eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD 044319H
	DD	08b0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0440H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$0 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$1 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$2 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$3 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$4 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$5 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$6 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$7 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$8 DB 052H ; glm::operator*<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcFrameData DD 09H ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcVarDesc
	ORG $+8
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcVarDesc DD 01b0H ; glm::operator*<float,0>
	DD	040H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$8
	DD	0178H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$7
	DD	0148H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$6
	DD	0118H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$5
	DD	0e8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z DD 043101H
	DD	0470118H
	DD	060107011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$0 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$1 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$2 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$3 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$4 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$5 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$6 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$7 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$8 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	033H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$9 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$10 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcFrameData DD 0bH ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcVarDesc
	ORG $+8
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 0208H ; glm::operator*<float,0>
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$10
	DD	01d8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$9
	DD	01a8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$8
	DD	0178H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$7
	DD	0148H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$6
	DD	0118H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$5
	DD	0e8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0207H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z DD 044319H
	DD	0250118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::translate<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 030H ; glm::translate<float,0>
	DD	040H
	DQ	FLAT:??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::translate<float,0>
	DD	00H
	DQ	FLAT:??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0487H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z DD 044819H
	DD	01b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcName$0 DB 052H ; glm::yawPitchRoll<float>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcVarDesc DD 050H ; glm::yawPitchRoll<float>
	DD	040H
	DQ	FLAT:??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcName$0
	ORG $+48
??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcFrameData DD 01H ; glm::yawPitchRoll<float>
	DD	00H
	DQ	FLAT:??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007e20bH
	DD	06006H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mul@@YAHXZ
	DD	024H
	DD	068fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_inverse@@YAHXZ
	DD	024H
	DD	0548H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z DD 021001H
	DD	0700c3210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z DD 023501H
	DD	07015f21cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z$rtcName$0 DB 076H ; glm::epsilonEqual<float,0>
	DB	00H
	ORG $+14
??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z$rtcVarDesc DD 038H ; glm::epsilonEqual<float,0>
	DD	010H
	DQ	FLAT:??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z$rtcName$0
	ORG $+48
??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z$rtcFrameData DD 01H ; glm::epsilonEqual<float,0>
	DD	00H
	DQ	FLAT:??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z DD 021001H
	DD	0700c3210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBMAEBU10@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z DD 021101H
	DD	060107011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@M$0A@@glm@@QEAA@XZ DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tdualquat@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z DD 021101H
	DD	060107011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z DD 031501H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tdualquat@N$0A@@glm@@QEAA@XZ DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tdualquat@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@N$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@N$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
CONST	SEGMENT
?test_dquat_type@@YAHXZ$rtcName$0 DB 076H		; test_dquat_type
	DB	041H
	DB	00H
	ORG $+1
?test_dquat_type@@YAHXZ$rtcName$1 DB 064H		; test_dquat_type
	DB	071H
	DB	041H
	DB	00H
?test_dquat_type@@YAHXZ$rtcName$2 DB 064H		; test_dquat_type
	DB	071H
	DB	042H
	DB	00H
?test_dquat_type@@YAHXZ$rtcName$3 DB 043H		; test_dquat_type
	DB	00H
	ORG $+2
?test_dquat_type@@YAHXZ$rtcName$4 DB 042H		; test_dquat_type
	DB	00H
	ORG $+2
?test_dquat_type@@YAHXZ$rtcName$5 DB 044H		; test_dquat_type
	DB	00H
	ORG $+2
?test_dquat_type@@YAHXZ$rtcFrameData DD 06H		; test_dquat_type
	DD	00H
	DQ	FLAT:?test_dquat_type@@YAHXZ$rtcVarDesc
?test_scalars@@YAHXZ$rtcName$0 DB 045H			; test_scalars
	DB	070H
	DB	073H
	DB	069H
	DB	06cH
	DB	06fH
	DB	06eH
	DB	00H
?test_dquat_type@@YAHXZ$rtcVarDesc DD 01a0H		; test_dquat_type
	DD	040H
	DQ	FLAT:?test_dquat_type@@YAHXZ$rtcName$5
	DD	0140H
	DD	040H
	DQ	FLAT:?test_dquat_type@@YAHXZ$rtcName$4
	DD	0e0H
	DD	040H
	DQ	FLAT:?test_dquat_type@@YAHXZ$rtcName$3
	DD	098H
	DD	020H
	DQ	FLAT:?test_dquat_type@@YAHXZ$rtcName$2
	DD	058H
	DD	020H
	DQ	FLAT:?test_dquat_type@@YAHXZ$rtcName$1
	DD	028H
	DD	018H
	DQ	FLAT:?test_dquat_type@@YAHXZ$rtcName$0
	ORG $+288
?test_scalars@@YAHXZ$rtcName$1 DB 073H			; test_scalars
	DB	072H
	DB	063H
	DB	05fH
	DB	071H
	DB	031H
	DB	00H
	ORG $+1
?test_scalars@@YAHXZ$rtcName$2 DB 073H			; test_scalars
	DB	072H
	DB	063H
	DB	05fH
	DB	071H
	DB	032H
	DB	00H
	ORG $+1
?test_scalars@@YAHXZ$rtcName$3 DB 073H			; test_scalars
	DB	072H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?test_scalars@@YAHXZ$rtcName$4 DB 064H			; test_scalars
	DB	073H
	DB	074H
	DB	031H
	DB	00H
	ORG $+3
?test_scalars@@YAHXZ$rtcName$5 DB 064H			; test_scalars
	DB	073H
	DB	074H
	DB	032H
	DB	00H
	ORG $+3
?test_scalars@@YAHXZ$rtcName$6 DB 064H			; test_scalars
	DB	073H
	DB	074H
	DB	033H
	DB	00H
	ORG $+3
?test_scalars@@YAHXZ$rtcName$7 DB 064H			; test_scalars
	DB	073H
	DB	074H
	DB	043H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+1
?test_scalars@@YAHXZ$rtcName$8 DB 064H			; test_scalars
	DB	073H
	DB	074H
	DB	031H
	DB	00H
	ORG $+3
?test_scalars@@YAHXZ$rtcName$9 DB 064H			; test_scalars
	DB	073H
	DB	074H
	DB	032H
	DB	00H
	ORG $+3
?test_scalars@@YAHXZ$rtcName$10 DB 064H			; test_scalars
	DB	073H
	DB	074H
	DB	043H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+1
?test_scalars@@YAHXZ$rtcVarDesc DD 0278H		; test_scalars
	DD	020H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcName$10
	DD	0238H
	DD	020H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcName$9
	DD	01f8H
	DD	020H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcName$8
	DD	01b8H
	DD	020H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcName$7
	DD	0178H
	DD	020H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcName$6
	DD	0138H
	DD	020H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcName$5
	DD	0f8H
	DD	020H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcName$4
	DD	0b8H
	DD	020H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcName$0
	ORG $+528
?test_scalars@@YAHXZ$rtcFrameData DD 0bH		; test_scalars
	DD	00H
	DQ	FLAT:?test_scalars@@YAHXZ$rtcVarDesc
?test_inverse@@YAHXZ$rtcName$0 DB 045H			; test_inverse
	DB	070H
	DB	073H
	DB	069H
	DB	06cH
	DB	06fH
	DB	06eH
	DB	00H
?test_inverse@@YAHXZ$rtcName$1 DB 064H			; test_inverse
	DB	071H
	DB	069H
	DB	064H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$2 DB 06dH			; test_inverse
	DB	069H
	DB	064H
	DB	00H
?test_inverse@@YAHXZ$rtcName$3 DB 072H			; test_inverse
	DB	06fH
	DB	074H
	DB	00H
?test_inverse@@YAHXZ$rtcName$4 DB 076H			; test_inverse
	DB	074H
	DB	00H
	ORG $+1
?test_inverse@@YAHXZ$rtcName$5 DB 06dH			; test_inverse
	DB	00H
	ORG $+2
?test_inverse@@YAHXZ$rtcName$6 DB 071H			; test_inverse
	DB	072H
	DB	00H
	ORG $+1
?test_inverse@@YAHXZ$rtcName$7 DB 064H			; test_inverse
	DB	071H
	DB	00H
	ORG $+1
?test_inverse@@YAHXZ$rtcName$8 DB 069H			; test_inverse
	DB	06eH
	DB	076H
	DB	064H
	DB	071H
	DB	00H
	ORG $+2
?test_inverse@@YAHXZ$rtcName$9 DB 072H			; test_inverse
	DB	031H
	DB	00H
	ORG $+1
?test_inverse@@YAHXZ$rtcName$10 DB 072H			; test_inverse
	DB	032H
	DB	00H
	ORG $+1
?test_inverse@@YAHXZ$rtcName$11 DB 072H			; test_inverse
	DB	00H
	ORG $+2
?test_inverse@@YAHXZ$rtcName$12 DB 072H			; test_inverse
	DB	069H
	DB	071H
	DB	00H
?test_inverse@@YAHXZ$rtcName$13 DB 072H			; test_inverse
	DB	071H
	DB	069H
	DB	00H
?test_mul@@YAHXZ$rtcName$1 DB 06dH			; test_mul
	DB	069H
	DB	064H
	DB	00H
?test_mul@@YAHXZ$rtcName$0 DB 045H			; test_mul
	DB	070H
	DB	073H
	DB	069H
	DB	06cH
	DB	06fH
	DB	06eH
	DB	00H
?test_inverse@@YAHXZ$rtcVarDesc DD 03e8H		; test_inverse
	DD	020H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$13
	DD	03a8H
	DD	020H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$12
	DD	0368H
	DD	020H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$11
	DD	0328H
	DD	020H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$10
	DD	02e8H
	DD	020H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$9
	DD	02a8H
	DD	020H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$8
	DD	0268H
	DD	020H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$7
	DD	0238H
	DD	010H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$6
	DD	01a0H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$5
	DD	0168H
	DD	0cH
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$4
	DD	0110H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$3
	DD	0b0H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$2
	DD	068H
	DD	020H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$0
	ORG $+672
?test_inverse@@YAHXZ$rtcFrameData DD 0eH		; test_inverse
	DD	00H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcVarDesc
?test_mul@@YAHXZ$rtcName$2 DB 076H			; test_mul
	DB	074H
	DB	031H
	DB	00H
?test_mul@@YAHXZ$rtcName$3 DB 076H			; test_mul
	DB	074H
	DB	032H
	DB	00H
?test_mul@@YAHXZ$rtcName$4 DB 072H			; test_mul
	DB	06fH
	DB	074H
	DB	031H
	DB	00H
	ORG $+3
?test_mul@@YAHXZ$rtcName$5 DB 072H			; test_mul
	DB	06fH
	DB	074H
	DB	032H
	DB	00H
	ORG $+3
?test_mul@@YAHXZ$rtcName$6 DB 06dH			; test_mul
	DB	031H
	DB	00H
	ORG $+1
?test_mul@@YAHXZ$rtcName$7 DB 06dH			; test_mul
	DB	032H
	DB	00H
	ORG $+1
?test_mul@@YAHXZ$rtcName$8 DB 06dH			; test_mul
	DB	033H
	DB	00H
	ORG $+1
?test_mul@@YAHXZ$rtcName$9 DB 06dH			; test_mul
	DB	034H
	DB	00H
	ORG $+1
?test_mul@@YAHXZ$rtcName$10 DB 071H			; test_mul
	DB	072H
	DB	06fH
	DB	074H
	DB	031H
	DB	00H
	ORG $+2
?test_mul@@YAHXZ$rtcName$11 DB 071H			; test_mul
	DB	072H
	DB	06fH
	DB	074H
	DB	032H
	DB	00H
	ORG $+2
?test_mul@@YAHXZ$rtcName$12 DB 064H			; test_mul
	DB	071H
	DB	031H
	DB	00H
?test_mul@@YAHXZ$rtcName$13 DB 064H			; test_mul
	DB	071H
	DB	032H
	DB	00H
?test_mul@@YAHXZ$rtcName$14 DB 064H			; test_mul
	DB	071H
	DB	033H
	DB	00H
?test_mul@@YAHXZ$rtcName$15 DB 064H			; test_mul
	DB	071H
	DB	034H
	DB	00H
?test_mul@@YAHXZ$rtcName$16 DB 073H			; test_mul
	DB	072H
	DB	063H
	DB	05fH
	DB	070H
	DB	074H
	DB	00H
	ORG $+1
?test_mul@@YAHXZ$rtcName$17 DB 064H			; test_mul
	DB	073H
	DB	074H
	DB	05fH
	DB	070H
	DB	074H
	DB	05fH
	DB	06dH
	DB	033H
	DB	00H
	ORG $+6
?test_mul@@YAHXZ$rtcName$18 DB 064H			; test_mul
	DB	073H
	DB	074H
	DB	05fH
	DB	070H
	DB	074H
	DB	05fH
	DB	064H
	DB	071H
	DB	033H
	DB	00H
	ORG $+5
?test_mul@@YAHXZ$rtcName$19 DB 064H			; test_mul
	DB	073H
	DB	074H
	DB	05fH
	DB	070H
	DB	074H
	DB	05fH
	DB	06dH
	DB	033H
	DB	05fH
	DB	069H
	DB	00H
	ORG $+4
?test_mul@@YAHXZ$rtcName$20 DB 064H			; test_mul
	DB	073H
	DB	074H
	DB	05fH
	DB	070H
	DB	074H
	DB	05fH
	DB	064H
	DB	071H
	DB	033H
	DB	05fH
	DB	069H
	DB	00H
	ORG $+3
?test_mul@@YAHXZ$rtcName$21 DB 064H			; test_mul
	DB	073H
	DB	074H
	DB	05fH
	DB	070H
	DB	074H
	DB	05fH
	DB	06dH
	DB	034H
	DB	00H
	ORG $+6
?test_mul@@YAHXZ$rtcName$22 DB 064H			; test_mul
	DB	073H
	DB	074H
	DB	05fH
	DB	070H
	DB	074H
	DB	05fH
	DB	064H
	DB	071H
	DB	034H
	DB	00H
	ORG $+5
?test_mul@@YAHXZ$rtcName$23 DB 064H			; test_mul
	DB	073H
	DB	074H
	DB	05fH
	DB	070H
	DB	074H
	DB	05fH
	DB	06dH
	DB	034H
	DB	05fH
	DB	069H
	DB	00H
	ORG $+4
?test_mul@@YAHXZ$rtcName$24 DB 064H			; test_mul
	DB	073H
	DB	074H
	DB	05fH
	DB	070H
	DB	074H
	DB	05fH
	DB	064H
	DB	071H
	DB	034H
	DB	05fH
	DB	069H
	DB	00H
	ORG $+3
?test_mul@@YAHXZ$rtcVarDesc DD 0748H			; test_mul
	DD	010H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$24
	DD	06d8H
	DD	010H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$23
	DD	06a8H
	DD	010H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$22
	DD	0678H
	DD	010H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$21
	DD	0648H
	DD	010H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$20
	DD	05d8H
	DD	010H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$19
	DD	05a8H
	DD	010H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$18
	DD	0578H
	DD	010H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$17
	DD	0548H
	DD	010H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$16
	DD	0508H
	DD	020H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$15
	DD	04c8H
	DD	020H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$14
	DD	0488H
	DD	020H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$13
	DD	0448H
	DD	020H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$12
	DD	0418H
	DD	010H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$11
	DD	03e8H
	DD	010H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$10
	DD	0390H
	DD	040H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$9
	DD	0330H
	DD	040H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$8
	DD	0290H
	DD	040H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$7
	DD	01f0H
	DD	040H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$6
	DD	0190H
	DD	040H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$5
	DD	0130H
	DD	040H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$4
	DD	0f8H
	DD	0cH
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$3
	DD	0c8H
	DD	0cH
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$2
	DD	070H
	DD	040H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test_mul@@YAHXZ$rtcName$0
	ORG $+1200
?test_mul@@YAHXZ$rtcFrameData DD 019H			; test_mul
	DD	00H
	DQ	FLAT:?test_mul@@YAHXZ$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$?myrand@@YAHXZ DD 010201H
	DD	07002H
$unwind$?myfrand@@YAMXZ DD 020601H
	DD	070025206H
$unwind$?test_dquat_type@@YAHXZ DD 031a01H
	DD	03e0109H
	DD	07002H
$unwind$?test_scalars@@YAHXZ DD 041b01H
	DD	06f010aH
	DD	060027003H
$unwind$?test_inverse@@YAHXZ DD 032c19H
	DD	09e0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	04e0H
$unwind$?test_mul@@YAHXZ DD 032c19H
	DD	0fa0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	07c8H
$unwind$?test_dual_quat_ctr@@YAHXZ DD 020601H
	DD	070021206H
$unwind$?test_size@@YAHXZ DD 030901H
	DD	0140109H
	DD	07002H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sin@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 021901H
	DD	070155219H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv88 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<float,0,0>::call, COMDAT

; 77   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx+4]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm2, DWORD PTR [rax+8]
	mulss	xmm2, DWORD PTR [rcx]
	subss	xmm1, xmm2
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm3, DWORD PTR [rax+4]
	mulss	xmm3, DWORD PTR [rcx+8]
	subss	xmm2, xmm3
	movss	DWORD PTR tv88[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv88[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
__$ReturnUdt$ = 80
q$ = 88
p$ = 96
?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_quat_add<float,0,0>::call, COMDAT

; 26   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 27   : 			return tquat<T, P>(q.w + p.w, q.x + p.x, q.y + p.y, q.z + p.z);

	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR $T2[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T3[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 28   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_quat_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	subss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 574  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 575  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	addss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 576  : 			v1.x + v2.x,
; 577  : 			v1.y + v2.y,
; 578  : 			v1.z + v2.z);
; 579  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::cross<float,0>, COMDAT

; 180  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 182  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::cross<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
p$ = 40
q$ = 88
this$ = 160
r$ = 168
??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tquat<float,0>::operator*=<float>, COMDAT

; 255  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 256  : 		tquat<T, P> const p(*this);

	lea	rax, QWORD PTR p$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 16
	rep movsb

; 257  : 		tquat<T, P> const q(r);

	lea	rax, QWORD PTR q$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR r$[rsp]
	mov	ecx, 16
	rep movsb

; 258  : 
; 259  : 		this->w = p.w * q.w - p.x * q.x - p.y * q.y - p.z * q.z;

	movss	xmm0, DWORD PTR p$[rsp+12]
	mulss	xmm0, DWORD PTR q$[rsp+12]
	movss	xmm1, DWORD PTR p$[rsp]
	mulss	xmm1, DWORD PTR q$[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR p$[rsp+4]
	mulss	xmm1, DWORD PTR q$[rsp+4]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR p$[rsp+8]
	mulss	xmm1, DWORD PTR q$[rsp+8]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 260  : 		this->x = p.w * q.x + p.x * q.w + p.y * q.z - p.z * q.y;

	movss	xmm0, DWORD PTR p$[rsp+12]
	mulss	xmm0, DWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR p$[rsp]
	mulss	xmm1, DWORD PTR q$[rsp+12]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR p$[rsp+4]
	mulss	xmm1, DWORD PTR q$[rsp+8]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR p$[rsp+8]
	mulss	xmm1, DWORD PTR q$[rsp+4]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 261  : 		this->y = p.w * q.y + p.y * q.w + p.z * q.x - p.x * q.z;

	movss	xmm0, DWORD PTR p$[rsp+12]
	mulss	xmm0, DWORD PTR q$[rsp+4]
	movss	xmm1, DWORD PTR p$[rsp+4]
	mulss	xmm1, DWORD PTR q$[rsp+12]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR p$[rsp+8]
	mulss	xmm1, DWORD PTR q$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR p$[rsp]
	mulss	xmm1, DWORD PTR q$[rsp+8]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 262  : 		this->z = p.w * q.z + p.z * q.w + p.x * q.y - p.y * q.x;

	movss	xmm0, DWORD PTR p$[rsp+12]
	mulss	xmm0, DWORD PTR q$[rsp+8]
	movss	xmm1, DWORD PTR p$[rsp+8]
	mulss	xmm1, DWORD PTR q$[rsp+12]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR p$[rsp]
	mulss	xmm1, DWORD PTR q$[rsp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR p$[rsp+4]
	mulss	xmm1, DWORD PTR q$[rsp]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 263  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 264  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tquat<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
q$ = 104
??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tquat<float,0>::operator+=<float>, COMDAT

; 241  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 242  : 		return (*this = detail::compute_quat_add<T, P, detail::is_aligned<P>::value>::call(*this, tquat<T, P>(q)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR q$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_quat_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 243  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tquat<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 72
tv80 = 100
x$ = 128
y$ = 136
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,float,0,0>::call, COMDAT

; 16   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	movss	xmm1, DWORD PTR tmp$[rsp+8]
	addss	xmm1, DWORD PTR tmp$[rsp+12]
	addss	xmm0, xmm1

; 19   : 		}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_quat_div_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
__$ReturnUdt$ = 80
q$ = 88
s$ = 96
?call@?$compute_quat_div_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z PROC ; glm::detail::compute_quat_div_scalar<float,0,0>::call, COMDAT

; 53   : 		{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 54   : 			return tquat<T, P>(q.w / s, q.x / s, q.y / s, q.z / s);

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR $T2[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR $T3[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 55   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_quat_div_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z ENDP ; glm::detail::compute_quat_div_scalar<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_quat_mul_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
__$ReturnUdt$ = 80
q$ = 88
s$ = 96
?call@?$compute_quat_mul_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z PROC ; glm::detail::compute_quat_mul_scalar<float,0,0>::call, COMDAT

; 44   : 		{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 45   : 			return tquat<T, P>(q.w * s, q.x * s, q.y * s, q.z * s);

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR $T2[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR $T3[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 46   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_quat_mul_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z ENDP ; glm::detail::compute_quat_mul_scalar<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv66 = 112
tv74 = 120
tv82 = 128
__$ReturnUdt$ = 160
m$ = 168
s$ = 176
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::operator*<float,0>, COMDAT

; 482  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 483  : 		return tmat4x4<T, P>(

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv82[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 484  : 			m[0] * s,
; 485  : 			m[1] * s,
; 486  : 			m[2] * s,
; 487  : 			m[3] * s);
; 488  : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
Coef00$ = 48
Coef02$ = 52
Coef03$ = 56
Coef04$ = 60
Coef06$ = 64
Coef07$ = 68
Coef08$ = 72
Coef10$ = 76
Coef11$ = 80
Coef12$ = 84
Coef14$ = 88
Coef15$ = 92
Coef16$ = 96
Coef18$ = 100
Coef19$ = 104
Coef20$ = 108
Coef22$ = 112
Coef23$ = 116
Fac0$ = 136
Fac1$ = 184
Fac2$ = 232
Fac3$ = 280
Fac4$ = 328
Fac5$ = 376
Vec0$ = 424
Vec1$ = 472
Vec2$ = 520
Vec3$ = 568
Inv0$ = 616
Inv1$ = 664
Inv2$ = 712
Inv3$ = 760
SignA$ = 808
SignB$ = 856
Inverse$ = 912
Row0$ = 1000
Dot0$ = 1048
Dot1$ = 1076
OneOverDeterminant$ = 1092
$T23 = 1120
$T24 = 1136
$T25 = 1152
$T26 = 1168
$T27 = 1184
$T28 = 1200
$T29 = 1216
$T30 = 1232
$T31 = 1248
$T32 = 1264
$T33 = 1280
$T34 = 1296
$T35 = 1312
$T36 = 1328
$T37 = 1344
$T38 = 1360
$T39 = 1376
$T40 = 1392
$T41 = 1408
$T42 = 1424
tv68 = 1440
tv76 = 1448
tv81 = 1456
tv95 = 1464
tv135 = 1472
tv140 = 1480
tv154 = 1488
tv162 = 1496
tv167 = 1504
tv181 = 1512
tv189 = 1520
tv194 = 1528
tv208 = 1536
tv216 = 1544
tv221 = 1552
tv235 = 1560
tv243 = 1568
tv248 = 1576
tv262 = 1584
tv270 = 1592
tv275 = 1600
tv289 = 1608
tv297 = 1616
tv302 = 1624
tv316 = 1632
tv324 = 1640
tv329 = 1648
tv343 = 1656
tv351 = 1664
tv356 = 1672
tv370 = 1680
tv378 = 1688
tv383 = 1696
tv397 = 1704
tv405 = 1712
tv410 = 1720
tv424 = 1728
tv432 = 1736
tv437 = 1744
tv451 = 1752
tv459 = 1760
tv464 = 1768
tv478 = 1776
tv486 = 1784
tv491 = 1792
tv505 = 1800
tv513 = 1808
tv518 = 1816
tv532 = 1824
tv540 = 1832
tv545 = 1840
tv559 = 1848
tv567 = 1856
tv572 = 1864
tv618 = 1872
tv625 = 1880
tv632 = 1888
tv647 = 1896
tv654 = 1904
tv661 = 1912
tv676 = 1920
tv683 = 1928
tv690 = 1936
tv705 = 1944
tv712 = 1952
tv719 = 1960
tv729 = 1968
tv735 = 1976
tv780 = 1984
tv786 = 1992
tv799 = 2000
tv805 = 2008
tv818 = 2016
tv824 = 2024
tv848 = 2032
tv853 = 2040
tv858 = 2048
tv873 = 2056
tv880 = 2064
tv887 = 2072
__$ArrayPad$ = 2080
__$ReturnUdt$ = 2112
m$ = 2120
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call, COMDAT

; 300  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 2096				; 00000830H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 512				; 00000200H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2112]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 301  : 			T Coef00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv68[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv76[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv81[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv81[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv76[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef00$[rsp], xmm0

; 302  : 			T Coef02 = m[1][2] * m[3][3] - m[3][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv95[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv95[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv135[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv135[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef02$[rsp], xmm0

; 303  : 			T Coef03 = m[1][2] * m[2][3] - m[2][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv154[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv154[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv162[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv167[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv167[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv162[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef03$[rsp], xmm0

; 304  : 
; 305  : 			T Coef04 = m[2][1] * m[3][3] - m[3][1] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv181[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv181[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv189[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv194[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv194[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv189[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef04$[rsp], xmm0

; 306  : 			T Coef06 = m[1][1] * m[3][3] - m[3][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv208[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv208[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv216[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv221[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv216[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef06$[rsp], xmm0

; 307  : 			T Coef07 = m[1][1] * m[2][3] - m[2][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv235[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv235[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv243[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv248[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv243[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef07$[rsp], xmm0

; 308  : 
; 309  : 			T Coef08 = m[2][1] * m[3][2] - m[3][1] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv262[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv262[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv270[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv275[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv275[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv270[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef08$[rsp], xmm0

; 310  : 			T Coef10 = m[1][1] * m[3][2] - m[3][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv289[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv289[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv297[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv302[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv302[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv297[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef10$[rsp], xmm0

; 311  : 			T Coef11 = m[1][1] * m[2][2] - m[2][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv316[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv316[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv324[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv329[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv329[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv324[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef11$[rsp], xmm0

; 312  : 
; 313  : 			T Coef12 = m[2][0] * m[3][3] - m[3][0] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv343[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv343[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv351[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv356[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv356[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv351[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef12$[rsp], xmm0

; 314  : 			T Coef14 = m[1][0] * m[3][3] - m[3][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv370[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv370[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv378[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv383[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv383[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv378[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef14$[rsp], xmm0

; 315  : 			T Coef15 = m[1][0] * m[2][3] - m[2][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv397[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv397[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv405[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv410[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv410[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv405[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef15$[rsp], xmm0

; 316  : 
; 317  : 			T Coef16 = m[2][0] * m[3][2] - m[3][0] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv424[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv424[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv432[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv437[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv437[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv432[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef16$[rsp], xmm0

; 318  : 			T Coef18 = m[1][0] * m[3][2] - m[3][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv451[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv451[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv459[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv464[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv464[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv459[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef18$[rsp], xmm0

; 319  : 			T Coef19 = m[1][0] * m[2][2] - m[2][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv478[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv478[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv486[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv491[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv491[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv486[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef19$[rsp], xmm0

; 320  : 
; 321  : 			T Coef20 = m[2][0] * m[3][1] - m[3][0] * m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv505[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv505[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv513[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv518[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv518[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv513[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef20$[rsp], xmm0

; 322  : 			T Coef22 = m[1][0] * m[3][1] - m[3][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv532[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv532[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv540[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv545[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv545[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv540[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef22$[rsp], xmm0

; 323  : 			T Coef23 = m[1][0] * m[2][1] - m[2][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv559[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv559[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv567[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv572[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv572[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv567[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef23$[rsp], xmm0

; 324  : 
; 325  : 			tvec4<T, P> Fac0(Coef00, Coef00, Coef02, Coef03);

	movss	xmm0, DWORD PTR Coef03$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef02$[rsp]
	movss	xmm2, DWORD PTR Coef00$[rsp]
	movss	xmm1, DWORD PTR Coef00$[rsp]
	lea	rcx, QWORD PTR Fac0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 326  : 			tvec4<T, P> Fac1(Coef04, Coef04, Coef06, Coef07);

	movss	xmm0, DWORD PTR Coef07$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef06$[rsp]
	movss	xmm2, DWORD PTR Coef04$[rsp]
	movss	xmm1, DWORD PTR Coef04$[rsp]
	lea	rcx, QWORD PTR Fac1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 327  : 			tvec4<T, P> Fac2(Coef08, Coef08, Coef10, Coef11);

	movss	xmm0, DWORD PTR Coef11$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef10$[rsp]
	movss	xmm2, DWORD PTR Coef08$[rsp]
	movss	xmm1, DWORD PTR Coef08$[rsp]
	lea	rcx, QWORD PTR Fac2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 328  : 			tvec4<T, P> Fac3(Coef12, Coef12, Coef14, Coef15);

	movss	xmm0, DWORD PTR Coef15$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef14$[rsp]
	movss	xmm2, DWORD PTR Coef12$[rsp]
	movss	xmm1, DWORD PTR Coef12$[rsp]
	lea	rcx, QWORD PTR Fac3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 329  : 			tvec4<T, P> Fac4(Coef16, Coef16, Coef18, Coef19);

	movss	xmm0, DWORD PTR Coef19$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef18$[rsp]
	movss	xmm2, DWORD PTR Coef16$[rsp]
	movss	xmm1, DWORD PTR Coef16$[rsp]
	lea	rcx, QWORD PTR Fac4$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 330  : 			tvec4<T, P> Fac5(Coef20, Coef20, Coef22, Coef23);

	movss	xmm0, DWORD PTR Coef23$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef22$[rsp]
	movss	xmm2, DWORD PTR Coef20$[rsp]
	movss	xmm1, DWORD PTR Coef20$[rsp]
	lea	rcx, QWORD PTR Fac5$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 331  : 
; 332  : 			tvec4<T, P> Vec0(m[1][0], m[0][0], m[0][0], m[0][0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv618[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv625[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv632[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv618[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv625[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv632[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 333  : 			tvec4<T, P> Vec1(m[1][1], m[0][1], m[0][1], m[0][1]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv647[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv654[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv661[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv647[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv654[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv661[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 334  : 			tvec4<T, P> Vec2(m[1][2], m[0][2], m[0][2], m[0][2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv676[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv683[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv690[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv676[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv683[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv690[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 335  : 			tvec4<T, P> Vec3(m[1][3], m[0][3], m[0][3], m[0][3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv705[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv712[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv719[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv705[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv712[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv719[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 336  : 
; 337  : 			tvec4<T, P> Inv0(Vec1 * Fac0 - Vec2 * Fac1 + Vec3 * Fac2);

	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv729[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv735[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv735[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv729[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 338  : 			tvec4<T, P> Inv1(Vec0 * Fac0 - Vec2 * Fac3 + Vec3 * Fac4);

	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv780[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv786[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv786[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv780[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 339  : 			tvec4<T, P> Inv2(Vec0 * Fac1 - Vec1 * Fac3 + Vec3 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv799[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv805[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv805[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv799[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv2$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 340  : 			tvec4<T, P> Inv3(Vec0 * Fac2 - Vec1 * Fac4 + Vec2 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv818[rsp], rax
	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv824[rsp], rax
	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv824[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv818[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv3$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 341  : 
; 342  : 			tvec4<T, P> SignA(+1, -1, +1, -1);

	mov	DWORD PTR [rsp+32], -1
	mov	r9d, 1
	mov	r8d, -1
	mov	edx, 1
	lea	rcx, QWORD PTR SignA$[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 343  : 			tvec4<T, P> SignB(-1, +1, -1, +1);

	mov	DWORD PTR [rsp+32], 1
	mov	r9d, -1
	mov	r8d, 1
	mov	edx, -1
	lea	rcx, QWORD PTR SignB$[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 344  : 			tmat4x4<T, P> Inverse(Inv0 * SignA, Inv1 * SignB, Inv2 * SignA, Inv3 * SignB);

	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv3$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv848[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv2$[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv853[rsp], rax
	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv1$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv858[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv0$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv848[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv853[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv858[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 345  : 
; 346  : 			tvec4<T, P> Row0(Inverse[0][0], Inverse[1][0], Inverse[2][0], Inverse[3][0]);

	mov	edx, 3
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv873[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv880[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv887[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv873[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv880[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv887[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Row0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 347  : 
; 348  : 			tvec4<T, P> Dot0(m[0] * Row0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Row0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Dot0$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 349  : 			T Dot1 = (Dot0.x + Dot0.y) + (Dot0.z + Dot0.w);

	movss	xmm0, DWORD PTR Dot0$[rsp]
	addss	xmm0, DWORD PTR Dot0$[rsp+4]
	movss	xmm1, DWORD PTR Dot0$[rsp+8]
	addss	xmm1, DWORD PTR Dot0$[rsp+12]
	addss	xmm0, xmm1
	movss	DWORD PTR Dot1$[rsp], xmm0

; 350  : 
; 351  : 			T OneOverDeterminant = static_cast<T>(1) / Dot1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR Dot1$[rsp]
	movss	DWORD PTR OneOverDeterminant$[rsp], xmm0

; 352  : 
; 353  : 			return Inverse * OneOverDeterminant;

	lea	r8, QWORD PTR OneOverDeterminant$[rsp]
	lea	rdx, QWORD PTR Inverse$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 354  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2096				; 00000830H
	pop	rdi
	ret	0
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>, COMDAT

; 278  : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 274  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 275  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 276  : 		z(static_cast<T>(a.z)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 277  : 		w(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 278  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
real_v3$ = 40
dual_v3$ = 88
$T5 = 116
$T6 = 128
$T7 = 140
$T8 = 152
$T9 = 164
$T10 = 176
$T11 = 188
$T12 = 200
$T13 = 212
$T14 = 224
tv89 = 240
tv129 = 248
tv140 = 256
__$ReturnUdt$ = 288
q$ = 296
v$ = 304
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 167  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+288]

; 168  : 		tvec3<T, P> const real_v3(q.real.x,q.real.y,q.real.z);

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm3, DWORD PTR [rax+8]
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR real_v3$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 169  : 		tvec3<T, P> const dual_v3(q.dual.x,q.dual.y,q.dual.z);

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm3, DWORD PTR [rax+24]
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm2, DWORD PTR [rax+20]
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+16]
	lea	rcx, QWORD PTR dual_v3$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 170  : 		return (cross(real_v3, cross(real_v3,v) + v * q.real.w + dual_v3) + dual_v3 * q.real.w - real_v3 * q.dual.w) * T(2) + v;

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm2, DWORD PTR [rax+28]
	lea	rdx, QWORD PTR real_v3$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv89[rsp], rax
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm2, DWORD PTR [rcx+12]
	lea	rdx, QWORD PTR dual_v3$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv129[rsp], rax
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm2, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv140[rsp], rax
	mov	r8, QWORD PTR v$[rsp]
	lea	rdx, QWORD PTR real_v3$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
	mov	rcx, QWORD PTR tv140[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	lea	r8, QWORD PTR dual_v3$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR real_v3$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
	mov	rcx, QWORD PTR tv129[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv89[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	movss	xmm2, DWORD PTR __real@40000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 171  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 272				; 00000110H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,0>, COMDAT

; 138  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 135  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 136  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 137  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 138  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
q$ = 88
p$ = 96
??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 304  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 305  : 		return tquat<T, P>(q) *= p;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR q$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tquat<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 306  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
q$ = 88
p$ = 96
??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 298  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 299  : 		return tquat<T, P>(q) += p;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR q$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tquat<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 300  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tquat>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tquat,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$conjugate@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
__$ReturnUdt$ = 80
q$ = 88
??$conjugate@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z PROC ; glm::conjugate<float,0>, COMDAT

; 203  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 204  : 		return tquat<T, P>(q.w, -q.x, -q.y, -q.z);

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T2[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T3[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	add	rax, 12
	lea	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 205  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$conjugate@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ENDP ; glm::conjugate<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z
_TEXT	SEGMENT
fourXSquaredMinus1$ = 32
fourYSquaredMinus1$ = 36
fourZSquaredMinus1$ = 40
fourWSquaredMinus1$ = 44
biggestIndex$ = 48
fourBiggestSquaredMinus1$ = 52
biggestVal$ = 56
mult$ = 60
Result$ = 72
tv68 = 104
tv76 = 112
tv88 = 120
tv128 = 128
tv140 = 136
tv148 = 144
tv160 = 152
tv168 = 160
tv185 = 164
tv191 = 168
tv205 = 176
tv219 = 184
tv233 = 192
tv247 = 200
tv261 = 208
tv275 = 216
tv289 = 224
tv303 = 232
tv317 = 240
tv331 = 248
tv345 = 256
__$ReturnUdt$ = 304
m$ = 312
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z PROC ; glm::quat_cast<float,0>, COMDAT

; 622  : 	{

$LN14:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+304]

; 623  : 		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv68[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv76[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv76[rsp]
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR fourXSquaredMinus1$[rsp], xmm0

; 624  : 		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv128[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv128[rsp]
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR fourYSquaredMinus1$[rsp], xmm0

; 625  : 		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv148[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv148[rsp]
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR fourZSquaredMinus1$[rsp], xmm0

; 626  : 		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv160[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv160[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv168[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv168[rsp]
	addss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR fourWSquaredMinus1$[rsp], xmm0

; 627  : 
; 628  : 		int biggestIndex = 0;

	mov	DWORD PTR biggestIndex$[rsp], 0

; 629  : 		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;

	movss	xmm0, DWORD PTR fourWSquaredMinus1$[rsp]
	movss	DWORD PTR fourBiggestSquaredMinus1$[rsp], xmm0

; 630  : 		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)

	movss	xmm0, DWORD PTR fourXSquaredMinus1$[rsp]
	comiss	xmm0, DWORD PTR fourBiggestSquaredMinus1$[rsp]
	jbe	SHORT $LN4@quat_cast

; 631  : 		{
; 632  : 			fourBiggestSquaredMinus1 = fourXSquaredMinus1;

	movss	xmm0, DWORD PTR fourXSquaredMinus1$[rsp]
	movss	DWORD PTR fourBiggestSquaredMinus1$[rsp], xmm0

; 633  : 			biggestIndex = 1;

	mov	DWORD PTR biggestIndex$[rsp], 1
$LN4@quat_cast:

; 634  : 		}
; 635  : 		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)

	movss	xmm0, DWORD PTR fourYSquaredMinus1$[rsp]
	comiss	xmm0, DWORD PTR fourBiggestSquaredMinus1$[rsp]
	jbe	SHORT $LN5@quat_cast

; 636  : 		{
; 637  : 			fourBiggestSquaredMinus1 = fourYSquaredMinus1;

	movss	xmm0, DWORD PTR fourYSquaredMinus1$[rsp]
	movss	DWORD PTR fourBiggestSquaredMinus1$[rsp], xmm0

; 638  : 			biggestIndex = 2;

	mov	DWORD PTR biggestIndex$[rsp], 2
$LN5@quat_cast:

; 639  : 		}
; 640  : 		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)

	movss	xmm0, DWORD PTR fourZSquaredMinus1$[rsp]
	comiss	xmm0, DWORD PTR fourBiggestSquaredMinus1$[rsp]
	jbe	SHORT $LN6@quat_cast

; 641  : 		{
; 642  : 			fourBiggestSquaredMinus1 = fourZSquaredMinus1;

	movss	xmm0, DWORD PTR fourZSquaredMinus1$[rsp]
	movss	DWORD PTR fourBiggestSquaredMinus1$[rsp], xmm0

; 643  : 			biggestIndex = 3;

	mov	DWORD PTR biggestIndex$[rsp], 3
$LN6@quat_cast:

; 644  : 		}
; 645  : 
; 646  : 		T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);

	movss	xmm0, DWORD PTR fourBiggestSquaredMinus1$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	call	?sqrt@@YAMM@Z				; sqrt
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR biggestVal$[rsp], xmm0

; 647  : 		T mult = static_cast<T>(0.25) / biggestVal;

	movss	xmm0, DWORD PTR __real@3e800000
	divss	xmm0, DWORD PTR biggestVal$[rsp]
	movss	DWORD PTR mult$[rsp], xmm0

; 648  : 
; 649  : 		tquat<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tquat<float,0>::tquat<float,0>

; 650  : 		switch(biggestIndex)

	mov	eax, DWORD PTR biggestIndex$[rsp]
	mov	DWORD PTR tv185[rsp], eax
	cmp	DWORD PTR tv185[rsp], 0
	je	SHORT $LN7@quat_cast
	cmp	DWORD PTR tv185[rsp], 1
	je	$LN8@quat_cast
	cmp	DWORD PTR tv185[rsp], 2
	je	$LN9@quat_cast
	cmp	DWORD PTR tv185[rsp], 3
	je	$LN10@quat_cast
	jmp	$LN11@quat_cast
$LN7@quat_cast:

; 651  : 		{
; 652  : 		case 0:
; 653  : 			Result.w = biggestVal;

	movss	xmm0, DWORD PTR biggestVal$[rsp]
	movss	DWORD PTR Result$[rsp+12], xmm0

; 654  : 			Result.x = (m[1][2] - m[2][1]) * mult;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv191[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv191[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp], xmm0

; 655  : 			Result.y = (m[2][0] - m[0][2]) * mult;

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv205[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv205[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp+4], xmm0

; 656  : 			Result.z = (m[0][1] - m[1][0]) * mult;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv219[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv219[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp+8], xmm0

; 657  : 			break;

	jmp	$LN2@quat_cast
$LN8@quat_cast:

; 658  : 		case 1:
; 659  : 			Result.w = (m[1][2] - m[2][1]) * mult;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv233[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv233[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp+12], xmm0

; 660  : 			Result.x = biggestVal;

	movss	xmm0, DWORD PTR biggestVal$[rsp]
	movss	DWORD PTR Result$[rsp], xmm0

; 661  : 			Result.y = (m[0][1] + m[1][0]) * mult;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv247[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv247[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp+4], xmm0

; 662  : 			Result.z = (m[2][0] + m[0][2]) * mult;

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv261[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv261[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp+8], xmm0

; 663  : 			break;

	jmp	$LN2@quat_cast
$LN9@quat_cast:

; 664  : 		case 2:
; 665  : 			Result.w = (m[2][0] - m[0][2]) * mult;

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv275[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv275[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp+12], xmm0

; 666  : 			Result.x = (m[0][1] + m[1][0]) * mult;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv289[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv289[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp], xmm0

; 667  : 			Result.y = biggestVal;

	movss	xmm0, DWORD PTR biggestVal$[rsp]
	movss	DWORD PTR Result$[rsp+4], xmm0

; 668  : 			Result.z = (m[1][2] + m[2][1]) * mult;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv303[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv303[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp+8], xmm0

; 669  : 			break;

	jmp	$LN2@quat_cast
$LN10@quat_cast:

; 670  : 		case 3:
; 671  : 			Result.w = (m[0][1] - m[1][0]) * mult;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv317[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv317[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp+12], xmm0

; 672  : 			Result.x = (m[2][0] + m[0][2]) * mult;

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv331[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv331[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp], xmm0

; 673  : 			Result.y = (m[1][2] + m[2][1]) * mult;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv345[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv345[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR mult$[rsp]
	movss	DWORD PTR Result$[rsp+4], xmm0

; 674  : 			Result.z = biggestVal;

	movss	xmm0, DWORD PTR biggestVal$[rsp]
	movss	DWORD PTR Result$[rsp+8], xmm0

; 675  : 			break;

	jmp	SHORT $LN2@quat_cast
$LN11@quat_cast:

; 676  : 			
; 677  : 		default:					// Silence a -Wswitch-default warning in GCC. Should never actually get here. Assert is just for sanity.
; 678  : 			assert(false);

	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@quat_cast
	mov	r8d, 678				; 000002a6H
	lea	rdx, OFFSET FLAT:??_C@_1LC@KEKMINFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@quat_cast:
$LN2@quat_cast:

; 679  : 			break;
; 680  : 		}
; 681  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 682  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z ENDP ; glm::quat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?_0M@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
s$ = 88
??$?_0M@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tquat<float,0>::operator/=<float>, COMDAT

; 276  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 277  : 		return (*this = detail::compute_quat_div_scalar<T, P, detail::is_aligned<P>::value>::call(*this, static_cast<U>(s)));

	movss	xmm2, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	?call@?$compute_quat_div_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z ; glm::detail::compute_quat_div_scalar<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 278  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?_0M@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tquat<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
s$ = 88
??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tquat<float,0>::operator*=<float>, COMDAT

; 269  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 270  : 		return (*this = detail::compute_quat_mul_scalar<T, P, detail::is_aligned<P>::value>::call(*this, static_cast<U>(s)));

	movss	xmm2, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	?call@?$compute_quat_mul_scalar@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@M@Z ; glm::detail::compute_quat_mul_scalar<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 271  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tquat<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT

; 204  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_dual_quaternion.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 192  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 193  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 194  : 
; 195  : 	Error += test_dual_quat_ctr();

	call	?test_dual_quat_ctr@@YAHXZ		; test_dual_quat_ctr
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 196  : 	Error += test_dquat_type();

	call	?test_dquat_type@@YAHXZ			; test_dquat_type
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 197  : 	Error += test_scalars();

	call	?test_scalars@@YAHXZ			; test_scalars
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 198  : 	Error += test_inverse();

	call	?test_inverse@@YAHXZ			; test_inverse
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 199  : 	Error += test_mul();

	call	?test_mul@@YAHXZ			; test_mul
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 200  : 	Error += test_size();

	call	?test_size@@YAHXZ			; test_size
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 201  : 
; 202  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 203  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_dual_quaternion.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 72
tv67 = 136
tv72 = 140
tv76 = 144
tv80 = 148
?test_size@@YAHXZ PROC					; test_size

; 178  : {

$LN11:
	push	rdi
	sub	rsp, 160				; 000000a0H

; 179  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 180  : 
; 181  : 	Error += 32 == sizeof(glm::dualquat) ? 0 : 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 182  : 	Error += 64 == sizeof(glm::ddualquat) ? 0 : 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 183  : 	Error += glm::dualquat().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@XZ	; glm::tdualquat<float,0>::tdualquat<float,0>
	call	?length@?$tdualquat@M$0A@@glm@@SAHXZ	; glm::tdualquat<float,0>::length
	cmp	eax, 2
	jne	SHORT $LN3@test_size
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test_size
$LN3@test_size:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test_size:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 184  : 	Error += glm::ddualquat().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tdualquat@N$0A@@glm@@QEAA@XZ	; glm::tdualquat<double,0>::tdualquat<double,0>
	call	?length@?$tdualquat@N$0A@@glm@@SAHXZ	; glm::tdualquat<double,0>::length
	cmp	eax, 2
	jne	SHORT $LN5@test_size
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test_size
$LN5@test_size:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test_size:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 185  : 	Error += glm::dualquat::length() == 2 ? 0 : 1;

	call	?length@?$tdualquat@M$0A@@glm@@SAHXZ	; glm::tdualquat<float,0>::length
	cmp	eax, 2
	jne	SHORT $LN7@test_size
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN8@test_size
$LN7@test_size:
	mov	DWORD PTR tv76[rsp], 1
$LN8@test_size:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 186  : 	Error += glm::ddualquat::length() == 2 ? 0 : 1;

	call	?length@?$tdualquat@N$0A@@glm@@SAHXZ	; glm::tdualquat<double,0>::length
	cmp	eax, 2
	jne	SHORT $LN9@test_size
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN10@test_size
$LN9@test_size:
	mov	DWORD PTR tv80[rsp], 1
$LN10@test_size:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 187  : 
; 188  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 189  : }

	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?test_size@@YAHXZ ENDP					; test_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_dual_quaternion.cpp
_TEXT	SEGMENT
Error$ = 0
?test_dual_quat_ctr@@YAHXZ PROC				; test_dual_quat_ctr

; 159  : {

$LN3:
	push	rdi
	sub	rsp, 16

; 160  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 161  : 
; 162  : #	if GLM_HAS_TRIVIAL_QUERIES
; 163  : 	//	Error += std::is_trivially_default_constructible<glm::dualquat>::value ? 0 : 1;
; 164  : 	//	Error += std::is_trivially_default_constructible<glm::ddualquat>::value ? 0 : 1;
; 165  : 	//	Error += std::is_trivially_copy_assignable<glm::dualquat>::value ? 0 : 1;
; 166  : 	//	Error += std::is_trivially_copy_assignable<glm::ddualquat>::value ? 0 : 1;
; 167  : 		Error += std::is_trivially_copyable<glm::dualquat>::value ? 0 : 1;
; 168  : 		Error += std::is_trivially_copyable<glm::ddualquat>::value ? 0 : 1;
; 169  : 
; 170  : 		Error += std::is_copy_constructible<glm::dualquat>::value ? 0 : 1;
; 171  : 		Error += std::is_copy_constructible<glm::ddualquat>::value ? 0 : 1;
; 172  : #	endif
; 173  : 
; 174  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 175  : }

	add	rsp, 16
	pop	rdi
	ret	0
?test_dual_quat_ctr@@YAHXZ ENDP				; test_dual_quat_ctr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
tv66 = 80
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec4>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tdualquat@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
q$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tdualquat@M$0A@@0@@Z PROC ; glm::operator*<float,0>, COMDAT

; 187  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 188  : 		return glm::inverse(q) * v;

	mov	rdx, QWORD PTR q$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0>
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 189  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tdualquat@M$0A@@0@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z PROC ; glm::inverse<float,0,glm::tmat4x4>, COMDAT

; 392  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 393  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'inverse' only accept floating-point inputs");
; 394  : 		return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ENDP ; glm::inverse<float,0,glm::tmat4x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
__$ReturnUdt$ = 80
q$ = 88
v$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 181  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 182  : 		return tvec4<T, P>(q * tvec3<T, P>(v), v.w);

	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR q$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rcx+12]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0MM$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@M@Z ; glm::tvec4<float,0>::tvec4<float,0><float,float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 183  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_dual_quaternion.cpp
_TEXT	SEGMENT
Error$ = 48
Epsilon$ = 68
mid$ = 112
j$28 = 180
vt1$29 = 200
vt2$30 = 248
rot1$31 = 304
rot2$32 = 400
m1$33 = 496
$T34 = 576
m2$35 = 656
$T36 = 736
m3$37 = 816
m4$38 = 912
qrot1$39 = 1000
qrot2$40 = 1048
dq1$41 = 1096
dq2$42 = 1160
dq3$43 = 1224
dq4$44 = 1288
i$45 = 1332
src_pt$46 = 1352
dst_pt_m3$47 = 1400
dst_pt_dq3$48 = 1448
dst_pt_m3_i$49 = 1496
$T50 = 1536
dst_pt_dq3_i$51 = 1608
dst_pt_m4$52 = 1656
dst_pt_dq4$53 = 1704
dst_pt_m4_i$54 = 1752
$T55 = 1792
dst_pt_dq4_i$56 = 1864
$T57 = 1904
$T58 = 1908
$T59 = 1912
$T60 = 1916
$T61 = 1920
$T62 = 1924
$T63 = 1928
$T64 = 1932
$T65 = 1936
$T66 = 1940
$T67 = 1944
tv71 = 1948
tv74 = 1952
tv81 = 1956
tv84 = 1960
tv182 = 1964
tv185 = 1968
tv260 = 1972
tv271 = 1976
tv282 = 1980
tv293 = 1984
__$ArrayPad$ = 1992
?test_mul@@YAHXZ PROC					; test_mul

; 104  : {

$LN17:
	push	rdi
	sub	rsp, 2000				; 000007d0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 488				; 000001e8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 105  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 106  : 
; 107  : 	float const Epsilon = 0.0001f;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR Epsilon$[rsp], xmm0

; 108  : 
; 109  : 	glm::mat4x4 mid(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T57[rsp], xmm0
	lea	rdx, QWORD PTR $T57[rsp]
	lea	rcx, QWORD PTR mid$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 110  : 
; 111  : 	for (int j = 0; j < 100; ++j)

	mov	DWORD PTR j$28[rsp], 0
	jmp	SHORT $LN4@test_mul
$LN2@test_mul:
	mov	eax, DWORD PTR j$28[rsp]
	inc	eax
	mov	DWORD PTR j$28[rsp], eax
$LN4@test_mul:
	cmp	DWORD PTR j$28[rsp], 100		; 00000064H
	jge	$LN3@test_mul

; 112  : 	{
; 113  : 		// generate random rotations and translations and compare transformed by matrix and dualquats random points 
; 114  : 		glm::vec3 vt1 = glm::vec3(myfrand() * 10.0f, myfrand() * 10.0f, myfrand() * 10.0f);

	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv71[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv74[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR tv71[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR vt1$29[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 115  : 		glm::vec3 vt2 = glm::vec3(myfrand() * 10.0f, myfrand() * 10.0f, myfrand() * 10.0f);

	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv81[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv84[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR tv81[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv84[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR vt2$30[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 116  : 
; 117  : 		glm::mat4x4 rot1 = glm::yawPitchRoll(myfrand() * 360.0f, myfrand() * 360.0f, myfrand() * 360.0f);

	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR $T58[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR $T59[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR $T60[rsp], xmm0
	lea	r9, QWORD PTR $T58[rsp]
	lea	r8, QWORD PTR $T59[rsp]
	lea	rdx, QWORD PTR $T60[rsp]
	lea	rcx, QWORD PTR rot1$31[rsp]
	call	??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::yawPitchRoll<float>

; 118  : 		glm::mat4x4 rot2 = glm::yawPitchRoll(myfrand() * 360.0f, myfrand() * 360.0f, myfrand() * 360.0f);

	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR $T61[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR $T62[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR $T63[rsp], xmm0
	lea	r9, QWORD PTR $T61[rsp]
	lea	r8, QWORD PTR $T62[rsp]
	lea	rdx, QWORD PTR $T63[rsp]
	lea	rcx, QWORD PTR rot2$32[rsp]
	call	??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::yawPitchRoll<float>

; 119  : 		glm::mat4x4 m1 = glm::translate(mid, vt1) * rot1;

	lea	r8, QWORD PTR vt1$29[rsp]
	lea	rdx, QWORD PTR mid$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z ; glm::translate<float,0>
	lea	r8, QWORD PTR rot1$31[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR m1$33[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 120  : 		glm::mat4x4 m2 = glm::translate(mid, vt2) * rot2;

	lea	r8, QWORD PTR vt2$30[rsp]
	lea	rdx, QWORD PTR mid$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z ; glm::translate<float,0>
	lea	r8, QWORD PTR rot2$32[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR m2$35[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 121  : 		glm::mat4x4 m3 = m2 * m1;

	lea	r8, QWORD PTR m1$33[rsp]
	lea	rdx, QWORD PTR m2$35[rsp]
	lea	rcx, QWORD PTR m3$37[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 122  : 		glm::mat4x4 m4 = m1 * m2;

	lea	r8, QWORD PTR m2$35[rsp]
	lea	rdx, QWORD PTR m1$33[rsp]
	lea	rcx, QWORD PTR m4$38[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 123  : 
; 124  : 		glm::quat qrot1 = glm::quat_cast(rot1);

	lea	rdx, QWORD PTR rot1$31[rsp]
	lea	rcx, QWORD PTR qrot1$39[rsp]
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z ; glm::quat_cast<float,0>

; 125  : 		glm::quat qrot2 = glm::quat_cast(rot2);

	lea	rdx, QWORD PTR rot2$32[rsp]
	lea	rcx, QWORD PTR qrot2$40[rsp]
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z ; glm::quat_cast<float,0>

; 126  : 
; 127  : 		glm::dualquat dq1 = glm::dualquat(qrot1,vt1);

	lea	r8, QWORD PTR vt1$29[rsp]
	lea	rdx, QWORD PTR qrot1$39[rsp]
	lea	rcx, QWORD PTR dq1$41[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>

; 128  : 		glm::dualquat dq2 = glm::dualquat(qrot2,vt2);

	lea	r8, QWORD PTR vt2$30[rsp]
	lea	rdx, QWORD PTR qrot2$40[rsp]
	lea	rcx, QWORD PTR dq2$42[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>

; 129  : 		glm::dualquat dq3 = dq2 * dq1;

	lea	r8, QWORD PTR dq1$41[rsp]
	lea	rdx, QWORD PTR dq2$42[rsp]
	lea	rcx, QWORD PTR dq3$43[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 130  : 		glm::dualquat dq4 = dq1 * dq2;

	lea	r8, QWORD PTR dq2$42[rsp]
	lea	rdx, QWORD PTR dq1$41[rsp]
	lea	rcx, QWORD PTR dq4$44[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 131  : 
; 132  : 		for (int i = 0; i < 100; ++i)

	mov	DWORD PTR i$45[rsp], 0
	jmp	SHORT $LN7@test_mul
$LN5@test_mul:
	mov	eax, DWORD PTR i$45[rsp]
	inc	eax
	mov	DWORD PTR i$45[rsp], eax
$LN7@test_mul:
	cmp	DWORD PTR i$45[rsp], 100		; 00000064H
	jge	$LN6@test_mul

; 133  : 		{
; 134  : 			glm::vec4 src_pt = glm::vec4(myfrand() * 4.0f, myfrand() * 5.0f, myfrand() * 3.0f,1.0f);

	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR tv182[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv185[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@40800000
	movss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv182[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv185[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR src_pt$46[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 135  : 			// test both multiplication orders        
; 136  : 			glm::vec4 dst_pt_m3  = m3 * src_pt; 

	lea	r8, QWORD PTR src_pt$46[rsp]
	lea	rdx, QWORD PTR m3$37[rsp]
	lea	rcx, QWORD PTR dst_pt_m3$47[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 137  : 			glm::vec4 dst_pt_dq3 = dq3 * src_pt;

	lea	r8, QWORD PTR src_pt$46[rsp]
	lea	rdx, QWORD PTR dq3$43[rsp]
	lea	rcx, QWORD PTR dst_pt_dq3$48[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 138  : 
; 139  : 			glm::vec4 dst_pt_m3_i  = glm::inverse(m3) * src_pt;

	lea	rdx, QWORD PTR m3$37[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	call	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>
	lea	r8, QWORD PTR src_pt$46[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR dst_pt_m3_i$49[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 140  : 			glm::vec4 dst_pt_dq3_i = src_pt * dq3;

	lea	r8, QWORD PTR dq3$43[rsp]
	lea	rdx, QWORD PTR src_pt$46[rsp]
	lea	rcx, QWORD PTR dst_pt_dq3_i$51[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tdualquat@M$0A@@0@@Z ; glm::operator*<float,0>

; 141  : 
; 142  : 			glm::vec4 dst_pt_m4  = m4 * src_pt;

	lea	r8, QWORD PTR src_pt$46[rsp]
	lea	rdx, QWORD PTR m4$38[rsp]
	lea	rcx, QWORD PTR dst_pt_m4$52[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 143  : 			glm::vec4 dst_pt_dq4 = dq4 * src_pt;

	lea	r8, QWORD PTR src_pt$46[rsp]
	lea	rdx, QWORD PTR dq4$44[rsp]
	lea	rcx, QWORD PTR dst_pt_dq4$53[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tdualquat@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 144  : 
; 145  : 			glm::vec4 dst_pt_m4_i  = glm::inverse(m4) * src_pt;

	lea	rdx, QWORD PTR m4$38[rsp]
	lea	rcx, QWORD PTR $T55[rsp]
	call	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>
	lea	r8, QWORD PTR src_pt$46[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR dst_pt_m4_i$54[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 146  : 			glm::vec4 dst_pt_dq4_i = src_pt * dq4;

	lea	r8, QWORD PTR dq4$44[rsp]
	lea	rdx, QWORD PTR src_pt$46[rsp]
	lea	rcx, QWORD PTR dst_pt_dq4_i$56[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tdualquat@M$0A@@0@@Z ; glm::operator*<float,0>

; 147  : 
; 148  : 			Error += glm::all(glm::epsilonEqual(dst_pt_m3, dst_pt_dq3, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dst_pt_dq3$48[rsp]
	lea	rdx, QWORD PTR dst_pt_m3$47[rsp]
	lea	rcx, QWORD PTR $T64[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_mul
	mov	DWORD PTR tv260[rsp], 0
	jmp	SHORT $LN10@test_mul
$LN9@test_mul:
	mov	DWORD PTR tv260[rsp], 1
$LN10@test_mul:
	mov	eax, DWORD PTR tv260[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 149  : 			Error += glm::all(glm::epsilonEqual(dst_pt_m4, dst_pt_dq4, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dst_pt_dq4$53[rsp]
	lea	rdx, QWORD PTR dst_pt_m4$52[rsp]
	lea	rcx, QWORD PTR $T65[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_mul
	mov	DWORD PTR tv271[rsp], 0
	jmp	SHORT $LN12@test_mul
$LN11@test_mul:
	mov	DWORD PTR tv271[rsp], 1
$LN12@test_mul:
	mov	eax, DWORD PTR tv271[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 150  : 			Error += glm::all(glm::epsilonEqual(dst_pt_m3_i, dst_pt_dq3_i, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dst_pt_dq3_i$51[rsp]
	lea	rdx, QWORD PTR dst_pt_m3_i$49[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_mul
	mov	DWORD PTR tv282[rsp], 0
	jmp	SHORT $LN14@test_mul
$LN13@test_mul:
	mov	DWORD PTR tv282[rsp], 1
$LN14@test_mul:
	mov	eax, DWORD PTR tv282[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 151  : 			Error += glm::all(glm::epsilonEqual(dst_pt_m4_i, dst_pt_dq4_i, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dst_pt_dq4_i$56[rsp]
	lea	rdx, QWORD PTR dst_pt_m4_i$54[rsp]
	lea	rcx, QWORD PTR $T67[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_mul
	mov	DWORD PTR tv293[rsp], 0
	jmp	SHORT $LN16@test_mul
$LN15@test_mul:
	mov	DWORD PTR tv293[rsp], 1
$LN16@test_mul:
	mov	eax, DWORD PTR tv293[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 152  : 		}

	jmp	$LN5@test_mul
$LN6@test_mul:

; 153  : 	} 

	jmp	$LN2@test_mul
$LN3@test_mul:

; 154  : 
; 155  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 156  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mul@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2000				; 000007d0H
	pop	rdi
	ret	0
?test_mul@@YAHXZ ENDP					; test_mul
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$pi@M@glm@@YAMXZ
_TEXT	SEGMENT
??$pi@M@glm@@YAMXZ PROC					; glm::pi<float>, COMDAT

; 28   : 	{

$LN3:
	push	rdi
	sub	rsp, 16

; 29   : 		return genType(3.14159265358979323846264338327950288);

	movss	xmm0, DWORD PTR __real@40490fdb

; 30   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$pi@M@glm@@YAMXZ ENDP					; glm::pi<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
tv67 = 96
tv66 = 104
__$ReturnUdt$ = 128
p$ = 136
o$ = 144
??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z PROC ; glm::operator*<float,0>, COMDAT

; 161  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 162  : 		return tdualquat<T, P>(p.real * o.real,p.real * o.dual + p.dual * o.real);

	mov	rax, QWORD PTR o$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, 16
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv67[rsp], rax
	mov	rcx, QWORD PTR o$[rsp]
	add	rcx, 16
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rcx, QWORD PTR o$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, rcx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 163  : 	}

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
real$ = 40
dual$ = 88
$T5 = 116
$T6 = 120
$T7 = 136
__$ReturnUdt$ = 176
q$ = 184
??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z PROC ; glm::inverse<float,0>, COMDAT

; 245  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 246  : 		const glm::tquat<T, P> real = conjugate(q.real);

	mov	rax, QWORD PTR q$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR real$[rsp]
	call	??$conjugate@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::conjugate<float,0>

; 247  : 		const glm::tquat<T, P> dual = conjugate(q.dual);

	mov	rax, QWORD PTR q$[rsp]
	add	rax, 16
	mov	rdx, rax
	lea	rcx, QWORD PTR dual$[rsp]
	call	??$conjugate@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::conjugate<float,0>

; 248  : 		return tdualquat<T, P>(real, dual + (real * (-2.0f * dot(real,dual))));

	lea	rdx, QWORD PTR dual$[rsp]
	lea	rcx, QWORD PTR real$[rsp]
	call	??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z ; glm::dot<float,0,glm::tquat>
	movss	xmm1, DWORD PTR __real@c0000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T5[rsp], xmm0
	lea	r8, QWORD PTR $T5[rsp]
	lea	rdx, QWORD PTR real$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR dual$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR real$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 249  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z ENDP ; glm::inverse<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 80
__$ReturnUdt$ = 112
m4$ = 120
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z PROC ; glm::quat_cast<float,0>, COMDAT

; 686  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 687  : 		return quat_cast(tmat3x3<T, P>(m4));

	mov	rdx, QWORD PTR m4$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::quat_cast<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 688  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z ENDP ; glm::quat_cast<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
SrcA0$ = 40
SrcA1$ = 88
SrcA2$ = 136
SrcA3$ = 184
SrcB0$ = 232
SrcB1$ = 280
SrcB2$ = 328
SrcB3$ = 376
Result$ = 432
$T12 = 512
$T13 = 528
$T14 = 544
$T15 = 560
$T16 = 576
$T17 = 592
$T18 = 608
$T19 = 624
$T20 = 640
$T21 = 656
$T22 = 672
$T23 = 688
$T24 = 704
$T25 = 720
$T26 = 736
$T27 = 752
$T28 = 768
$T29 = 784
$T30 = 800
$T31 = 816
$T32 = 832
$T33 = 848
$T34 = 864
$T35 = 880
$T36 = 896
$T37 = 912
$T38 = 928
$T39 = 944
tv134 = 960
tv143 = 968
tv152 = 976
tv133 = 984
tv178 = 992
tv187 = 1000
tv196 = 1008
tv177 = 1016
tv222 = 1024
tv231 = 1032
tv240 = 1040
tv221 = 1048
tv298 = 1056
tv307 = 1064
tv316 = 1072
tv297 = 1080
__$ArrayPad$ = 1088
__$ReturnUdt$ = 1136
m1$ = 1144
m2$ = 1152
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 596  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1112				; 00000458H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 270				; 0000010eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1136]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 597  : 		typename tmat4x4<T, P>::col_type const SrcA0 = m1[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 598  : 		typename tmat4x4<T, P>::col_type const SrcA1 = m1[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 599  : 		typename tmat4x4<T, P>::col_type const SrcA2 = m1[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 600  : 		typename tmat4x4<T, P>::col_type const SrcA3 = m1[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 601  : 
; 602  : 		typename tmat4x4<T, P>::col_type const SrcB0 = m2[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 603  : 		typename tmat4x4<T, P>::col_type const SrcB1 = m2[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 604  : 		typename tmat4x4<T, P>::col_type const SrcB2 = m2[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 605  : 		typename tmat4x4<T, P>::col_type const SrcB3 = m2[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 606  : 
; 607  : 		tmat4x4<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 608  : 		Result[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv134[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv143[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv152[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv152[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv134[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv133[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv133[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 609  : 		Result[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv178[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv187[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv196[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv196[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv187[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv178[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv177[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv177[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 610  : 		Result[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv222[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv231[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv240[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv240[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv231[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv222[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv221[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 611  : 		Result[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv298[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv307[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv316[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv316[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv307[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv298[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv297[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv297[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 612  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 613  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1112				; 00000458H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
Mov0$ = 40
Mov1$ = 88
Mul0$ = 136
Mul1$ = 184
Add0$ = 232
Mov2$ = 280
Mov3$ = 328
Mul2$ = 376
Mul3$ = 424
Add1$ = 472
Add2$ = 520
__$ReturnUdt$ = 592
m$ = 600
v$ = 608
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 506  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+592]

; 507  : /*
; 508  : 		__m128 v0 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(0, 0, 0, 0));
; 509  : 		__m128 v1 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(1, 1, 1, 1));
; 510  : 		__m128 v2 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(2, 2, 2, 2));
; 511  : 		__m128 v3 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(3, 3, 3, 3));
; 512  : 
; 513  : 		__m128 m0 = _mm_mul_ps(m[0].data, v0);
; 514  : 		__m128 m1 = _mm_mul_ps(m[1].data, v1);
; 515  : 		__m128 a0 = _mm_add_ps(m0, m1);
; 516  : 
; 517  : 		__m128 m2 = _mm_mul_ps(m[2].data, v2);
; 518  : 		__m128 m3 = _mm_mul_ps(m[3].data, v3);
; 519  : 		__m128 a1 = _mm_add_ps(m2, m3);
; 520  : 
; 521  : 		__m128 a2 = _mm_add_ps(a0, a1);
; 522  : 
; 523  : 		return typename tmat4x4<T, P>::col_type(a2);
; 524  : */
; 525  : 
; 526  : 		typename tmat4x4<T, P>::col_type const Mov0(v[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 527  : 		typename tmat4x4<T, P>::col_type const Mov1(v[1]);

	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 528  : 		typename tmat4x4<T, P>::col_type const Mul0 = m[0] * Mov0;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul0$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 529  : 		typename tmat4x4<T, P>::col_type const Mul1 = m[1] * Mov1;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov1$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 530  : 		typename tmat4x4<T, P>::col_type const Add0 = Mul0 + Mul1;

	lea	r8, QWORD PTR Mul1$[rsp]
	lea	rdx, QWORD PTR Mul0$[rsp]
	lea	rcx, QWORD PTR Add0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 531  : 		typename tmat4x4<T, P>::col_type const Mov2(v[2]);

	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 532  : 		typename tmat4x4<T, P>::col_type const Mov3(v[3]);

	mov	edx, 3
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 533  : 		typename tmat4x4<T, P>::col_type const Mul2 = m[2] * Mov2;

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov2$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 534  : 		typename tmat4x4<T, P>::col_type const Mul3 = m[3] * Mov3;

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov3$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 535  : 		typename tmat4x4<T, P>::col_type const Add1 = Mul2 + Mul3;

	lea	r8, QWORD PTR Mul3$[rsp]
	lea	rdx, QWORD PTR Mul2$[rsp]
	lea	rcx, QWORD PTR Add1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 536  : 		typename tmat4x4<T, P>::col_type const Add2 = Add0 + Add1;

	lea	r8, QWORD PTR Add1$[rsp]
	lea	rdx, QWORD PTR Add0$[rsp]
	lea	rcx, QWORD PTR Add2$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 537  : 		return Add2;

	lea	rax, QWORD PTR Add2$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 538  : 
; 539  : /*
; 540  : 		return typename tmat4x4<T, P>::col_type(
; 541  : 			m[0][0] * v[0] + m[1][0] * v[1] + m[2][0] * v[2] + m[3][0] * v[3],
; 542  : 			m[0][1] * v[0] + m[1][1] * v[1] + m[2][1] * v[2] + m[3][1] * v[3],
; 543  : 			m[0][2] * v[0] + m[1][2] * v[1] + m[2][2] * v[2] + m[3][2] * v[3],
; 544  : 			m[0][3] * v[0] + m[1][3] * v[1] + m[2][3] * v[2] + m[3][3] * v[3]);
; 545  : */
; 546  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 568				; 00000238H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_transform.inl
;	COMDAT ??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 48
$T4 = 128
$T5 = 144
$T6 = 160
$T7 = 176
$T8 = 192
$T9 = 208
tv70 = 224
tv76 = 232
tv74 = 240
tv88 = 248
tv86 = 256
tv131 = 264
tv68 = 272
__$ArrayPad$ = 280
__$ReturnUdt$ = 320
m$ = 328
v$ = 336
??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z PROC ; glm::translate<float,0>, COMDAT

; 12   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+320]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 13   : 		tmat4x4<T, P> Result(m);

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb

; 14   : 		Result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv70[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv86[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv131[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv131[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv86[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv70[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv68[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 15   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 16   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::translate<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\euler_angles.inl
;	COMDAT ??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z
_TEXT	SEGMENT
tmp_ch$ = 32
tmp_sh$ = 36
tmp_cp$ = 40
tmp_sp$ = 44
tmp_cb$ = 48
tmp_sb$ = 52
Result$ = 80
tv86 = 160
tv93 = 164
tv136 = 168
tv153 = 172
tv160 = 176
tv170 = 180
tv183 = 184
tv190 = 188
tv197 = 192
__$ArrayPad$ = 200
__$ReturnUdt$ = 240
yaw$ = 248
pitch$ = 256
roll$ = 264
??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z PROC ; glm::yawPitchRoll<float>, COMDAT

; 211  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+240]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 212  : 		T tmp_ch = glm::cos(yaw);

	mov	rax, QWORD PTR yaw$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR tmp_ch$[rsp], xmm0

; 213  : 		T tmp_sh = glm::sin(yaw);

	mov	rax, QWORD PTR yaw$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR tmp_sh$[rsp], xmm0

; 214  : 		T tmp_cp = glm::cos(pitch);

	mov	rax, QWORD PTR pitch$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR tmp_cp$[rsp], xmm0

; 215  : 		T tmp_sp = glm::sin(pitch);

	mov	rax, QWORD PTR pitch$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR tmp_sp$[rsp], xmm0

; 216  : 		T tmp_cb = glm::cos(roll);

	mov	rax, QWORD PTR roll$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR tmp_cb$[rsp], xmm0

; 217  : 		T tmp_sb = glm::sin(roll);

	mov	rax, QWORD PTR roll$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR tmp_sb$[rsp], xmm0

; 218  : 
; 219  : 		tmat4x4<T, defaultp> Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ		; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 220  : 		Result[0][0] = tmp_ch * tmp_cb + tmp_sh * tmp_sp * tmp_sb;

	movss	xmm0, DWORD PTR tmp_ch$[rsp]
	mulss	xmm0, DWORD PTR tmp_cb$[rsp]
	movss	xmm1, DWORD PTR tmp_sh$[rsp]
	mulss	xmm1, DWORD PTR tmp_sp$[rsp]
	mulss	xmm1, DWORD PTR tmp_sb$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv86[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv86[rsp]
	movss	DWORD PTR [rax], xmm0

; 221  : 		Result[0][1] = tmp_sb * tmp_cp;

	movss	xmm0, DWORD PTR tmp_sb$[rsp]
	mulss	xmm0, DWORD PTR tmp_cp$[rsp]
	movss	DWORD PTR tv93[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv93[rsp]
	movss	DWORD PTR [rax], xmm0

; 222  : 		Result[0][2] = -tmp_sh * tmp_cb + tmp_ch * tmp_sp * tmp_sb;

	movss	xmm0, DWORD PTR tmp_sh$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR tmp_cb$[rsp]
	movss	xmm1, DWORD PTR tmp_ch$[rsp]
	mulss	xmm1, DWORD PTR tmp_sp$[rsp]
	mulss	xmm1, DWORD PTR tmp_sb$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv136[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv136[rsp]
	movss	DWORD PTR [rax], xmm0

; 223  : 		Result[0][3] = static_cast<T>(0);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 224  : 		Result[1][0] = -tmp_ch * tmp_sb + tmp_sh * tmp_sp * tmp_cb;

	movss	xmm0, DWORD PTR tmp_ch$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR tmp_sb$[rsp]
	movss	xmm1, DWORD PTR tmp_sh$[rsp]
	mulss	xmm1, DWORD PTR tmp_sp$[rsp]
	mulss	xmm1, DWORD PTR tmp_cb$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv153[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv153[rsp]
	movss	DWORD PTR [rax], xmm0

; 225  : 		Result[1][1] = tmp_cb * tmp_cp;

	movss	xmm0, DWORD PTR tmp_cb$[rsp]
	mulss	xmm0, DWORD PTR tmp_cp$[rsp]
	movss	DWORD PTR tv160[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv160[rsp]
	movss	DWORD PTR [rax], xmm0

; 226  : 		Result[1][2] = tmp_sb * tmp_sh + tmp_ch * tmp_sp * tmp_cb;

	movss	xmm0, DWORD PTR tmp_sb$[rsp]
	mulss	xmm0, DWORD PTR tmp_sh$[rsp]
	movss	xmm1, DWORD PTR tmp_ch$[rsp]
	mulss	xmm1, DWORD PTR tmp_sp$[rsp]
	mulss	xmm1, DWORD PTR tmp_cb$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv170[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv170[rsp]
	movss	DWORD PTR [rax], xmm0

; 227  : 		Result[1][3] = static_cast<T>(0);

	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 228  : 		Result[2][0] = tmp_sh * tmp_cp;

	movss	xmm0, DWORD PTR tmp_sh$[rsp]
	mulss	xmm0, DWORD PTR tmp_cp$[rsp]
	movss	DWORD PTR tv183[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv183[rsp]
	movss	DWORD PTR [rax], xmm0

; 229  : 		Result[2][1] = -tmp_sp;

	movss	xmm0, DWORD PTR tmp_sp$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv190[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv190[rsp]
	movss	DWORD PTR [rax], xmm0

; 230  : 		Result[2][2] = tmp_ch * tmp_cp;

	movss	xmm0, DWORD PTR tmp_ch$[rsp]
	mulss	xmm0, DWORD PTR tmp_cp$[rsp]
	movss	DWORD PTR tv197[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv197[rsp]
	movss	DWORD PTR [rax], xmm0

; 231  : 		Result[2][3] = static_cast<T>(0);

	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 232  : 		Result[3][0] = static_cast<T>(0);

	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 233  : 		Result[3][1] = static_cast<T>(0);

	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 234  : 		Result[3][2] = static_cast<T>(0);

	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 235  : 		Result[3][3] = static_cast<T>(1);

	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax], xmm0

; 236  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 237  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ENDP ; glm::yawPitchRoll<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 198  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 199  : 		assert(i < this->length());

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 199				; 000000c7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 200  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 201  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
m$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 133  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 134  : 		this->value[0] = col_type(m[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 135  : 		this->value[1] = col_type(m[1]);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 136  : 		this->value[2] = col_type(m[2]);

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 137  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
v3$ = 96
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 80   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 81   : 		this->value[0] = v0;

	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 16
	rep movsb

; 82   : 		this->value[1] = v1;

	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb

; 83   : 		this->value[2] = v2;

	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 16
	rep movsb

; 84   : 		this->value[3] = v3;

	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v3$[rsp]
	mov	ecx, 16
	rep movsb

; 85   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
s$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 50   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 55   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 46   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
??0?$tmat4x4@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 19   : #			endif
; 20   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_dual_quaternion.cpp
_TEXT	SEGMENT
Error$ = 48
Epsilon$ = 68
dqid$ = 104
mid$ = 176
j$17 = 244
rot$18 = 272
vt$19 = 360
m$20 = 416
$T21 = 496
qr$22 = 568
dq$23 = 616
invdq$24 = 680
r1$25 = 744
r2$26 = 808
r$27 = 872
riq$28 = 936
rqi$29 = 1000
$T30 = 1056
$T31 = 1060
$T32 = 1064
$T33 = 1068
$T34 = 1072
$T35 = 1076
$T36 = 1080
$T37 = 1084
$T38 = 1088
$T39 = 1100
$T40 = 1116
$T41 = 1120
$T42 = 1124
$T43 = 1128
$T44 = 1132
$T45 = 1164
$T46 = 1196
$T47 = 1200
tv82 = 1204
tv85 = 1208
tv158 = 1212
tv178 = 1216
tv202 = 1220
tv185 = 1224
tv188 = 1228
tv183 = 1232
tv271 = 1240
__$ArrayPad$ = 1248
?test_inverse@@YAHXZ PROC				; test_inverse

; 64   : {

$LN12:
	push	rdi
	sub	rsp, 1264				; 000004f0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 304				; 00000130H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 65   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 66   : 
; 67   : 	float const Epsilon = 0.0001f;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR Epsilon$[rsp], xmm0

; 68   : 
; 69   : 	glm::dualquat dqid;

	lea	rcx, QWORD PTR dqid$[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@XZ	; glm::tdualquat<float,0>::tdualquat<float,0>

; 70   : 	glm::mat4x4 mid(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T30[rsp], xmm0
	lea	rdx, QWORD PTR $T30[rsp]
	lea	rcx, QWORD PTR mid$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 71   : 
; 72   : 	for (int j = 0; j < 100; ++j)

	mov	DWORD PTR j$17[rsp], 0
	jmp	SHORT $LN4@test_inver
$LN2@test_inver:
	mov	eax, DWORD PTR j$17[rsp]
	inc	eax
	mov	DWORD PTR j$17[rsp], eax
$LN4@test_inver:
	cmp	DWORD PTR j$17[rsp], 100		; 00000064H
	jge	$LN3@test_inver

; 73   : 	{
; 74   : 		glm::mat4x4 rot = glm::yawPitchRoll(myfrand() * 360.0f, myfrand() * 360.0f, myfrand() * 360.0f);

	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR $T31[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR $T32[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR $T33[rsp], xmm0
	lea	r9, QWORD PTR $T31[rsp]
	lea	r8, QWORD PTR $T32[rsp]
	lea	rdx, QWORD PTR $T33[rsp]
	lea	rcx, QWORD PTR rot$18[rsp]
	call	??$yawPitchRoll@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::yawPitchRoll<float>

; 75   : 		glm::vec3 vt = glm::vec3(myfrand() * 10.0f, myfrand() * 10.0f, myfrand() * 10.0f);

	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv82[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv85[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR tv82[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv85[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR vt$19[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 76   : 
; 77   : 		glm::mat4x4 m = glm::translate(mid, vt) * rot;

	lea	r8, QWORD PTR vt$19[rsp]
	lea	rdx, QWORD PTR mid$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$translate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBU?$tvec3@M$0A@@0@@Z ; glm::translate<float,0>
	lea	r8, QWORD PTR rot$18[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR m$20[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 78   : 
; 79   : 		glm::quat qr = glm::quat_cast(m);

	lea	rdx, QWORD PTR m$20[rsp]
	lea	rcx, QWORD PTR qr$22[rsp]
	call	??$quat_cast@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@@Z ; glm::quat_cast<float,0>

; 80   : 
; 81   : 		glm::dualquat dq(qr);

	lea	rdx, QWORD PTR qr$22[rsp]
	lea	rcx, QWORD PTR dq$23[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>

; 82   : 
; 83   : 		glm::dualquat invdq = glm::inverse(dq);

	lea	rdx, QWORD PTR dq$23[rsp]
	lea	rcx, QWORD PTR invdq$24[rsp]
	call	??$inverse@M$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0>

; 84   : 
; 85   : 		glm::dualquat r1 = invdq * dq;

	lea	r8, QWORD PTR dq$23[rsp]
	lea	rdx, QWORD PTR invdq$24[rsp]
	lea	rcx, QWORD PTR r1$25[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 86   : 		glm::dualquat r2 = dq * invdq;

	lea	r8, QWORD PTR invdq$24[rsp]
	lea	rdx, QWORD PTR dq$23[rsp]
	lea	rcx, QWORD PTR r2$26[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 87   : 
; 88   : 		Error += glm::all(glm::epsilonEqual(r1.real, dqid.real, Epsilon)) && glm::all(glm::epsilonEqual(r1.dual, dqid.dual, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dqid$[rsp]
	lea	rdx, QWORD PTR r1$25[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_inver
	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dqid$[rsp+16]
	lea	rdx, QWORD PTR r1$25[rsp+16]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_inver
	mov	DWORD PTR tv158[rsp], 0
	jmp	SHORT $LN7@test_inver
$LN6@test_inver:
	mov	DWORD PTR tv158[rsp], 1
$LN7@test_inver:
	mov	eax, DWORD PTR tv158[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 89   : 		Error += glm::all(glm::epsilonEqual(r2.real, dqid.real, Epsilon)) && glm::all(glm::epsilonEqual(r2.dual, dqid.dual, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dqid$[rsp]
	lea	rdx, QWORD PTR r2$26[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@test_inver
	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dqid$[rsp+16]
	lea	rdx, QWORD PTR r2$26[rsp+16]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@test_inver
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN9@test_inver
$LN8@test_inver:
	mov	DWORD PTR tv178[rsp], 1
$LN9@test_inver:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 90   : 
; 91   : 		// testing commutative property
; 92   : 		glm::dualquat r (   glm::quat( myfrand() * glm::pi<float>() * 2.0f, myfrand(), myfrand(), myfrand() ),

	call	?myfrand@@YAMXZ				; myfrand
	movss	DWORD PTR $T40[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	movss	DWORD PTR $T41[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	movss	DWORD PTR $T42[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	movss	DWORD PTR tv202[rsp], xmm0
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	xmm1, DWORD PTR tv202[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T43[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv185[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv188[rsp], xmm0
	call	?myfrand@@YAMXZ				; myfrand
	mulss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR tv185[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv188[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T38[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv183[rsp], rax
	lea	rcx, QWORD PTR $T40[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR $T41[rsp]
	lea	r8, QWORD PTR $T42[rsp]
	lea	rdx, QWORD PTR $T43[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rcx, QWORD PTR tv183[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR r$27[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z ; glm::tdualquat<float,0>::tdualquat<float,0>

; 93   : 							glm::vec3(myfrand() * 10.0f, myfrand() * 10.0f, myfrand() * 10.0f) );
; 94   : 		glm::dualquat riq = (r * invdq) * dq;

	lea	r8, QWORD PTR invdq$24[rsp]
	lea	rdx, QWORD PTR r$27[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR dq$23[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR riq$28[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 95   : 		glm::dualquat rqi = (r * dq) * invdq;

	lea	r8, QWORD PTR dq$23[rsp]
	lea	rdx, QWORD PTR r$27[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR invdq$24[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR rqi$29[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 96   : 
; 97   : 		Error += glm::all(glm::epsilonEqual(riq.real, rqi.real, Epsilon)) && glm::all(glm::epsilonEqual(riq.dual, rqi.dual, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR rqi$29[rsp]
	lea	rdx, QWORD PTR riq$28[rsp]
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@test_inver
	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR rqi$29[rsp+16]
	lea	rdx, QWORD PTR riq$28[rsp+16]
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@test_inver
	mov	DWORD PTR tv271[rsp], 0
	jmp	SHORT $LN11@test_inver
$LN10@test_inver:
	mov	DWORD PTR tv271[rsp], 1
$LN11@test_inver:
	mov	eax, DWORD PTR tv271[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 98   : 	}

	jmp	$LN2@test_inver
$LN3@test_inver:

; 99   : 
; 100  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 101  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_inverse@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1264				; 000004f0H
	pop	rdi
	ret	0
?test_inverse@@YAHXZ ENDP				; test_inverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
__$ReturnUdt$ = 80
q$ = 88
s$ = 96
??$?KM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z PROC	; glm::operator/<float,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 352  : 		return tquat<T, P>(

	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T2[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T3[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	divss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			q.w / s, q.x / s, q.y / s, q.z / s);
; 354  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$?_0M@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
this$ = 48
s$ = 56
??$?_0M@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z PROC	; glm::tdualquat<float,0>::operator/=<float>, COMDAT

; 131  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 132  : 		this->real /= static_cast<T>(s);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR s$[rsp]
	mov	rcx, rax
	call	??$?_0M@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tquat<float,0>::operator/=<float>

; 133  : 		this->dual /= static_cast<T>(s);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 16
	movss	xmm1, DWORD PTR s$[rsp]
	mov	rcx, rax
	call	??$?_0M@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tquat<float,0>::operator/=<float>

; 134  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 135  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?_0M@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z ENDP	; glm::tdualquat<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
tv66 = 64
__$ReturnUdt$ = 96
q$ = 104
s$ = 112
??$?KM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::operator/<float,0>, COMDAT

; 205  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 206  : 		return tdualquat<T, P>(q.real / s, q.dual / s);

	mov	rax, QWORD PTR q$[rsp]
	add	rax, 16
	mov	r8, QWORD PTR s$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rcx, QWORD PTR q$[rsp]
	mov	r8, QWORD PTR s$[rsp]
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator/<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 207  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
v$ = 56
$T4 = 84
$T5 = 100
tv80 = 116
tv83 = 120
__$ReturnUdt$ = 144
x$ = 152
y$ = 160
epsilon$ = 168
??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0>, COMDAT

; 109  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 110  : 		tvec4<T, P> v(x.x - y.x, x.y - y.y, x.z - y.z, x.w - y.w);

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR v$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 111  : 		return lessThan(abs(v), tvec4<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv83[rsp], rax
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv83[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 112  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
__$ReturnUdt$ = 80
q$ = 88
s$ = 96
??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z PROC	; glm::operator*<float,0>, COMDAT

; 338  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 339  : 		return tquat<T, P>(

	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T2[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T3[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 340  : 			q.w * s, q.x * s, q.y * s, q.z * s);
; 341  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$?XM@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
this$ = 48
s$ = 56
??$?XM@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z PROC	; glm::tdualquat<float,0>::operator*=<float>, COMDAT

; 122  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 123  : 		this->real *= static_cast<T>(s);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR s$[rsp]
	mov	rcx, rax
	call	??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tquat<float,0>::operator*=<float>

; 124  : 		this->dual *= static_cast<T>(s);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 16
	movss	xmm1, DWORD PTR s$[rsp]
	mov	rcx, rax
	call	??$?XM@?$tquat@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tquat<float,0>::operator*=<float>

; 125  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 126  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?XM@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z ENDP	; glm::tdualquat<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBMAEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
s$ = 56
q$ = 64
??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBMAEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 199  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 200  : 		return q * s;

	mov	r8, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 201  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBMAEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
tv66 = 64
__$ReturnUdt$ = 96
q$ = 104
s$ = 112
??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::operator*<float,0>, COMDAT

; 193  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 194  : 		return tdualquat<T, P>(q.real * s, q.dual * s);

	mov	rax, QWORD PTR q$[rsp]
	add	rax, 16
	mov	r8, QWORD PTR s$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rcx, QWORD PTR q$[rsp]
	mov	r8, QWORD PTR s$[rsp]
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z ; glm::tdualquat<float,0>::tdualquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 195  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 24
r$ = 32
d$ = 40
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT

; 75   : 	{}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi

; 74   : 		: real(r), dual(d)

	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, QWORD PTR r$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rax+16]
	mov	rsi, QWORD PTR d$[rsp]
	mov	ecx, 16
	rep movsb

; 75   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	pop	rsi
	ret	0
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
this$ = 96
q$ = 104
p$ = 112
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 65   : 		: real(q), dual(

	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, QWORD PTR q$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+12]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+12]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T2[rsp], xmm0
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+8]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+4]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T3[rsp], xmm0
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@bf000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T4[rsp], xmm0
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 16
	lea	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@AEBU?$tvec3@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
this$ = 96
r$ = 104
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z PROC ; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT

; 61   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, QWORD PTR r$[rsp]
	mov	ecx, 16
	rep movsb
	xorps	xmm0, xmm0
	movss	DWORD PTR $T1[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T2[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T3[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T4[rsp], xmm0
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 16
	lea	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>

; 61   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@@Z ENDP ; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
this$ = 80
??0?$tdualquat@M$0A@@glm@@QEAA@XZ PROC			; glm::tdualquat<float,0>::tdualquat<float,0>, COMDAT

; 34   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 31   : 				: real(tquat<T, P>())

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$tquat@M$0A@@glm@@QEAA@XZ		; glm::tquat<float,0>::tquat<float,0>

; 32   : 				, dual(tquat<T, P>(0, 0, 0, 0))

	xorps	xmm0, xmm0
	movss	DWORD PTR $T1[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T2[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T3[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T4[rsp], xmm0
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 16
	lea	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>

; 34   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tdualquat@M$0A@@glm@@QEAA@XZ ENDP			; glm::tdualquat<float,0>::tdualquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@M$0A@@glm@@SAHXZ PROC		; glm::tdualquat<float,0>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tdualquat@M$0A@@glm@@SAHXZ ENDP		; glm::tdualquat<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z
_TEXT	SEGMENT
this$ = 16
w$ = 24
x$ = 32
y$ = 40
z$ = 48
??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z PROC		; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 122  : 	{}

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR w$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax+12], xmm0

; 122  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z ENDP		; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 112  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tquat@M$0A@@glm@@QEAA@XZ PROC			; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 92   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 90   : 				: x(0), y(0), z(0), w(1)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+12], xmm0

; 92   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@XZ ENDP			; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_dual_quaternion.cpp
_TEXT	SEGMENT
Epsilon$ = 52
Error$ = 68
src_q1$ = 88
src_q2$ = 136
src1$ = 184
dst1$14 = 248
dst2$15 = 312
dst3$16 = 376
dstCmp$17 = 440
dst1$18 = 504
dst2$19 = 568
dstCmp$20 = 632
$T21 = 676
$T22 = 680
$T23 = 684
$T24 = 688
$T25 = 692
$T26 = 696
$T27 = 700
$T28 = 704
$T29 = 708
$T30 = 712
$T31 = 716
$T32 = 720
$T33 = 736
$T34 = 740
$T35 = 756
$T36 = 760
$T37 = 764
$T38 = 768
$T39 = 772
$T40 = 776
$T41 = 780
$T42 = 784
$T43 = 788
$T44 = 804
$T45 = 808
$T46 = 824
$T47 = 828
$T48 = 832
$T49 = 836
tv87 = 840
tv146 = 848
tv166 = 852
tv186 = 856
tv227 = 864
tv254 = 872
tv274 = 876
?test_scalars@@YAHXZ PROC				; test_scalars

; 32   : {

$LN13:
	push	rsi
	push	rdi
	sub	rsp, 888				; 00000378H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 210				; 000000d2H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 33   : 	float const Epsilon = 0.0001f;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR Epsilon$[rsp], xmm0

; 34   : 
; 35   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 36   : 
; 37   : 	glm::quat src_q1 = glm::quat(1.0f,2.0f,3.0f,4.0f);

	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR $T21[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR $T22[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T23[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T24[rsp], xmm0
	lea	rax, QWORD PTR $T21[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T22[rsp]
	lea	r8, QWORD PTR $T23[rsp]
	lea	rdx, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR src_q1$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>

; 38   : 	glm::quat src_q2 = glm::quat(5.0f,6.0f,7.0f,8.0f);

	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR $T25[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40e00000
	movss	DWORD PTR $T26[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR $T27[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR $T28[rsp], xmm0
	lea	rax, QWORD PTR $T25[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T26[rsp]
	lea	r8, QWORD PTR $T27[rsp]
	lea	rdx, QWORD PTR $T28[rsp]
	lea	rcx, QWORD PTR src_q2$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>

; 39   : 	glm::dualquat src1(src_q1,src_q2);

	lea	r8, QWORD PTR src_q2$[rsp]
	lea	rdx, QWORD PTR src_q1$[rsp]
	lea	rcx, QWORD PTR src1$[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z ; glm::tdualquat<float,0>::tdualquat<float,0>

; 40   : 
; 41   : 	{
; 42   : 		glm::dualquat dst1 = src1 * 2.0f;

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T29[rsp], xmm0
	lea	r8, QWORD PTR $T29[rsp]
	lea	rdx, QWORD PTR src1$[rsp]
	lea	rcx, QWORD PTR dst1$14[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>

; 43   : 		glm::dualquat dst2 = 2.0f * src1;

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T30[rsp], xmm0
	lea	r8, QWORD PTR src1$[rsp]
	lea	rdx, QWORD PTR $T30[rsp]
	lea	rcx, QWORD PTR dst2$15[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBMAEBU10@@Z ; glm::operator*<float,0>

; 44   : 		glm::dualquat dst3 = src1;

	lea	rax, QWORD PTR dst3$16[rsp]
	lea	rcx, QWORD PTR src1$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb

; 45   : 		dst3 *= 2.0f;

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR dst3$16[rsp]
	call	??$?XM@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tdualquat<float,0>::operator*=<float>

; 46   : 		glm::dualquat dstCmp(src_q1 * 2.0f,src_q2 * 2.0f);

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T31[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T33[rsp], xmm0
	lea	r8, QWORD PTR $T31[rsp]
	lea	rdx, QWORD PTR src_q2$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv87[rsp], rax
	lea	r8, QWORD PTR $T33[rsp]
	lea	rdx, QWORD PTR src_q1$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv87[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR dstCmp$17[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z ; glm::tdualquat<float,0>::tdualquat<float,0>

; 47   : 		Error += glm::all(glm::epsilonEqual(dst1.real,dstCmp.real, Epsilon)) && glm::all(glm::epsilonEqual(dst1.dual,dstCmp.dual, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dstCmp$17[rsp]
	lea	rdx, QWORD PTR dst1$14[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_scala
	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dstCmp$17[rsp+16]
	lea	rdx, QWORD PTR dst1$14[rsp+16]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_scala
	mov	DWORD PTR tv146[rsp], 0
	jmp	SHORT $LN4@test_scala
$LN3@test_scala:
	mov	DWORD PTR tv146[rsp], 1
$LN4@test_scala:
	mov	eax, DWORD PTR tv146[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 48   : 		Error += glm::all(glm::epsilonEqual(dst2.real,dstCmp.real, Epsilon)) && glm::all(glm::epsilonEqual(dst2.dual,dstCmp.dual, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dstCmp$17[rsp]
	lea	rdx, QWORD PTR dst2$15[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_scala
	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dstCmp$17[rsp+16]
	lea	rdx, QWORD PTR dst2$15[rsp+16]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_scala
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN6@test_scala
$LN5@test_scala:
	mov	DWORD PTR tv166[rsp], 1
$LN6@test_scala:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 49   : 		Error += glm::all(glm::epsilonEqual(dst3.real,dstCmp.real, Epsilon)) && glm::all(glm::epsilonEqual(dst3.dual,dstCmp.dual, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dstCmp$17[rsp]
	lea	rdx, QWORD PTR dst3$16[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_scala
	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dstCmp$17[rsp+16]
	lea	rdx, QWORD PTR dst3$16[rsp+16]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_scala
	mov	DWORD PTR tv186[rsp], 0
	jmp	SHORT $LN8@test_scala
$LN7@test_scala:
	mov	DWORD PTR tv186[rsp], 1
$LN8@test_scala:
	mov	eax, DWORD PTR tv186[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 50   : 	}
; 51   : 
; 52   : 	{
; 53   : 		glm::dualquat dst1 = src1 / 2.0f;

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T41[rsp], xmm0
	lea	r8, QWORD PTR $T41[rsp]
	lea	rdx, QWORD PTR src1$[rsp]
	lea	rcx, QWORD PTR dst1$18[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tdualquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator/<float,0>

; 54   : 		glm::dualquat dst2 = src1;

	lea	rax, QWORD PTR dst2$19[rsp]
	lea	rcx, QWORD PTR src1$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb

; 55   : 		dst2 /= 2.0f;

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR dst2$19[rsp]
	call	??$?_0M@?$tdualquat@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tdualquat<float,0>::operator/=<float>

; 56   : 		glm::dualquat dstCmp(src_q1 / 2.0f,src_q2 / 2.0f);

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T42[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T44[rsp], xmm0
	lea	r8, QWORD PTR $T42[rsp]
	lea	rdx, QWORD PTR src_q2$[rsp]
	lea	rcx, QWORD PTR $T43[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv227[rsp], rax
	lea	r8, QWORD PTR $T44[rsp]
	lea	rdx, QWORD PTR src_q1$[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator/<float,0>
	mov	rcx, QWORD PTR tv227[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR dstCmp$20[rsp]
	call	??0?$tdualquat@M$0A@@glm@@QEAA@AEBU?$tquat@M$0A@@1@0@Z ; glm::tdualquat<float,0>::tdualquat<float,0>

; 57   : 		Error += glm::all(glm::epsilonEqual(dst1.real,dstCmp.real, Epsilon)) && glm::all(glm::epsilonEqual(dst1.dual,dstCmp.dual, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dstCmp$20[rsp]
	lea	rdx, QWORD PTR dst1$18[rsp]
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_scala
	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dstCmp$20[rsp+16]
	lea	rdx, QWORD PTR dst1$18[rsp+16]
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_scala
	mov	DWORD PTR tv254[rsp], 0
	jmp	SHORT $LN10@test_scala
$LN9@test_scala:
	mov	DWORD PTR tv254[rsp], 1
$LN10@test_scala:
	mov	eax, DWORD PTR tv254[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 58   : 		Error += glm::all(glm::epsilonEqual(dst2.real,dstCmp.real, Epsilon)) && glm::all(glm::epsilonEqual(dst2.dual,dstCmp.dual, Epsilon)) ? 0 : 1;

	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dstCmp$20[rsp]
	lea	rdx, QWORD PTR dst2$19[rsp]
	lea	rcx, QWORD PTR $T48[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_scala
	lea	r9, QWORD PTR Epsilon$[rsp]
	lea	r8, QWORD PTR dstCmp$20[rsp+16]
	lea	rdx, QWORD PTR dst2$19[rsp+16]
	lea	rcx, QWORD PTR $T49[rsp]
	call	??$epsilonEqual@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tquat@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_scala
	mov	DWORD PTR tv274[rsp], 0
	jmp	SHORT $LN12@test_scala
$LN11@test_scala:
	mov	DWORD PTR tv274[rsp], 1
$LN12@test_scala:
	mov	eax, DWORD PTR tv274[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 59   : 	}
; 60   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 61   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_scalars@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 888				; 00000378H
	pop	rdi
	pop	rsi
	ret	0
?test_scalars@@YAHXZ ENDP				; test_scalars
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 24
r$ = 32
d$ = 40
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT

; 75   : 	{}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi

; 74   : 		: real(r), dual(d)

	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, QWORD PTR r$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rax+32]
	mov	rsi, QWORD PTR d$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb

; 75   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	pop	rsi
	ret	0
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 56
$T3 = 64
$T4 = 72
this$ = 112
q$ = 120
p$ = 128
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H

; 65   : 		: real(q), dual(

	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, QWORD PTR q$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	mulsd	xmm0, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movsd	xmm1, QWORD PTR [rax+8]
	mulsd	xmm1, QWORD PTR [rcx]
	subsd	xmm0, xmm1
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movsd	xmm1, QWORD PTR [rax+16]
	mulsd	xmm1, QWORD PTR [rcx+24]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR p$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mov	rax, QWORD PTR q$[rsp]
	mulsd	xmm0, QWORD PTR [rax+16]
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movsd	xmm1, QWORD PTR [rax+8]
	mulsd	xmm1, QWORD PTR [rcx+24]
	addsd	xmm0, xmm1
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movsd	xmm1, QWORD PTR [rax+16]
	mulsd	xmm1, QWORD PTR [rcx]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR $T2[rsp], xmm0
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	mulsd	xmm0, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movsd	xmm1, QWORD PTR [rax+8]
	mulsd	xmm1, QWORD PTR [rcx+16]
	addsd	xmm0, xmm1
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movsd	xmm1, QWORD PTR [rax+16]
	mulsd	xmm1, QWORD PTR [rcx+8]
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR $T3[rsp], xmm0
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	mulsd	xmm0, QWORD PTR [rcx]
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movsd	xmm1, QWORD PTR [rax+8]
	mulsd	xmm1, QWORD PTR [rcx+8]
	addsd	xmm0, xmm1
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movsd	xmm1, QWORD PTR [rax+16]
	mulsd	xmm1, QWORD PTR [rcx+16]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@bfe0000000000000
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR $T4[rsp], xmm0
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 32					; 00000020H
	lea	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z	; glm::tquat<double,0>::tquat<double,0>

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 56
$T3 = 64
$T4 = 72
this$ = 112
r$ = 120
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z PROC ; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT

; 61   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H

; 60   : 		: real(r), dual(tquat<T, P>(0, 0, 0, 0))

	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, QWORD PTR r$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T1[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T2[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T3[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T4[rsp], xmm0
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 32					; 00000020H
	lea	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z	; glm::tquat<double,0>::tquat<double,0>

; 61   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z ENDP ; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.inl
;	COMDAT ??0?$tdualquat@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 56
$T3 = 64
$T4 = 72
this$ = 96
??0?$tdualquat@N$0A@@glm@@QEAA@XZ PROC			; glm::tdualquat<double,0>::tdualquat<double,0>, COMDAT

; 34   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 31   : 				: real(tquat<T, P>())

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$tquat@N$0A@@glm@@QEAA@XZ		; glm::tquat<double,0>::tquat<double,0>

; 32   : 				, dual(tquat<T, P>(0, 0, 0, 0))

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T1[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T2[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T3[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T4[rsp], xmm0
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 32					; 00000020H
	lea	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z	; glm::tquat<double,0>::tquat<double,0>

; 34   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??0?$tdualquat@N$0A@@glm@@QEAA@XZ ENDP			; glm::tdualquat<double,0>::tdualquat<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\dual_quaternion.hpp
;	COMDAT ?length@?$tdualquat@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tdualquat@N$0A@@glm@@SAHXZ PROC		; glm::tdualquat<double,0>::length, COMDAT

; 49   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tdualquat@N$0A@@glm@@SAHXZ ENDP		; glm::tdualquat<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z
_TEXT	SEGMENT
this$ = 16
w$ = 24
x$ = 32
y$ = 40
z$ = 48
??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z PROC		; glm::tquat<double,0>::tquat<double,0>, COMDAT

; 122  : 	{}

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR w$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax+24], xmm0

; 122  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tquat@N$0A@@glm@@QEAA@AEBN000@Z ENDP		; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tquat@N$0A@@glm@@QEAA@XZ PROC			; glm::tquat<double,0>::tquat<double,0>, COMDAT

; 92   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 90   : 				: x(0), y(0), z(0), w(1)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rax+24], xmm0

; 92   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tquat@N$0A@@glm@@QEAA@XZ ENDP			; glm::tquat<double,0>::tquat<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+16], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_dual_quaternion.cpp
_TEXT	SEGMENT
vA$ = 40
dqA$ = 88
dqB$ = 152
C$ = 224
B$ = 320
D$ = 416
?test_dquat_type@@YAHXZ PROC				; test_dquat_type

; 22   : {

$LN3:
	push	rdi
	sub	rsp, 496				; 000001f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 116				; 00000074H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23   : 	glm::dvec3 vA;

	lea	rcx, QWORD PTR vA$[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@XZ		; glm::tvec3<double,0>::tvec3<double,0>

; 24   : 	glm::dquat dqA,dqB;

	lea	rcx, QWORD PTR dqA$[rsp]
	call	??0?$tquat@N$0A@@glm@@QEAA@XZ		; glm::tquat<double,0>::tquat<double,0>
	lea	rcx, QWORD PTR dqB$[rsp]
	call	??0?$tquat@N$0A@@glm@@QEAA@XZ		; glm::tquat<double,0>::tquat<double,0>

; 25   : 	glm::ddualquat C(dqA,dqB);

	lea	r8, QWORD PTR dqB$[rsp]
	lea	rdx, QWORD PTR dqA$[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@0@Z ; glm::tdualquat<double,0>::tdualquat<double,0>

; 26   : 	glm::ddualquat B(dqA);

	lea	rdx, QWORD PTR dqA$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>

; 27   : 	glm::ddualquat D(dqA,vA);

	lea	r8, QWORD PTR vA$[rsp]
	lea	rdx, QWORD PTR dqA$[rsp]
	lea	rcx, QWORD PTR D$[rsp]
	call	??0?$tdualquat@N$0A@@glm@@QEAA@AEBU?$tquat@N$0A@@1@AEBU?$tvec3@N$0A@@1@@Z ; glm::tdualquat<double,0>::tdualquat<double,0>

; 28   : 	return 0;

	xor	eax, eax

; 29   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_dquat_type@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 496				; 000001f0H
	pop	rdi
	ret	0
?test_dquat_type@@YAHXZ ENDP				; test_dquat_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_dual_quaternion.cpp
_TEXT	SEGMENT
?myfrand@@YAMXZ PROC					; myfrand

; 17   : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 	return float(double(myrand()) / double( 0x7ffff )) * 2.0f - 1.0f;

	call	?myrand@@YAHXZ				; myrand
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@411ffffc00000000
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000

; 19   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?myfrand@@YAMXZ ENDP					; myfrand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_dual_quaternion.cpp
_TEXT	SEGMENT
?myrand@@YAHXZ PROC					; myrand

; 11   : {

$LN3:
	push	rdi

; 12   : 	static int holdrand = 1;
; 13   : 	return (((holdrand = holdrand * 214013L + 2531011L) >> 16) & 0x7fff);

	imul	eax, DWORD PTR ?holdrand@?1??myrand@@YAHXZ@4HA, 214013 ; 000343fdH
	add	eax, 2531011				; 00269ec3H
	mov	DWORD PTR ?holdrand@?1??myrand@@YAHXZ@4HA, eax
	mov	eax, DWORD PTR ?holdrand@?1??myrand@@YAHXZ@4HA
	sar	eax, 16
	and	eax, 32767				; 00007fffH

; 14   : }

	pop	rdi
	ret	0
?myrand@@YAHXZ ENDP					; myrand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 264  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 265  :     return _CSTD sqrtf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sqrtf

; 266  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sin@@YAMM@Z PROC					; sin, COMDAT

; 256  : _NODISCARD _Check_return_ inline float sin(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 257  :     return _CSTD sinf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sinf

; 258  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?cos@@YAMM@Z PROC					; cos, COMDAT

; 88   : _NODISCARD _Check_return_ inline float cos(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 89   :     return _CSTD cosf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_cosf

; 90   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
tv67 = 40
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rsp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
