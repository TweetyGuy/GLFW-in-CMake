; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG51561 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'x', 00H, '\', 00H, 'g', 00H, 't', 00H, 'x'
	DB	00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'g', 00H
	DB	'e', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG51562 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+2
$SG51563 DB	'Log2(%d) error A=%d, B=%d', 0aH, 00H
	ORG $+5
$SG51564 DB	'log2 error=%d', 0aH, 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	??$abs@N@glm@@YANN@Z				; glm::abs<double>
PUBLIC	?nlz@glm@@YAII@Z				; glm::nlz
PUBLIC	??$findMSB@I@glm@@YAHI@Z			; glm::findMSB<unsigned int>
PUBLIC	?test_log2@@YAHXZ				; test_log2
PUBLIC	??$log2@I@glm@@YAII@Z				; glm::log2<unsigned int>
PUBLIC	??$log2@N@glm@@YANN@Z				; glm::log2<double>
PUBLIC	?test_nlz@@YAHXZ				; test_nlz
PUBLIC	main
PUBLIC	?call@?$compute_abs@N$00@detail@glm@@SANN@Z	; glm::detail::compute_abs<double,1>::call
PUBLIC	??0?$tvec1@I$0A@@glm@@QEAA@I@Z			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ; glm::findMSB<unsigned int,0,glm::tvec1>
PUBLIC	??0?$tvec1@H$0A@@glm@@QEAA@H@Z			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??$log2@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z ; glm::log2<unsigned int,0,glm::tvec1>
PUBLIC	??0?$tvec1@N$0A@@glm@@QEAA@N@Z			; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??$log2@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z ; glm::log2<double,0,glm::tvec1>
PUBLIC	?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call
PUBLIC	?call@?$compute_log2@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<unsigned int,0,glm::tvec1,0,0>::call
PUBLIC	?call@?$compute_log2@N$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<double,0,glm::tvec1,1,0>::call
PUBLIC	?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec1>::call
PUBLIC	??$?0H$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><int,0>
PUBLIC	?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call
PUBLIC	??$compute_findMSB_32@I@detail@glm@@YAHI@Z	; glm::detail::compute_findMSB_32<unsigned int>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	__real@0000000000000000
PUBLIC	__real@4038000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__imp__wassert:PROC
EXTRN	__imp_log2:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@N@glm@@YANN@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@N@glm@@YANN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?nlz@glm@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$?nlz@glm@@YAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB@I@glm@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$findMSB@I@glm@@YAHI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_log2@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+313
	DD	imagerel $unwind$?test_log2@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log2@I@glm@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$log2@I@glm@@YAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log2@N@glm@@YANN@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$log2@N@glm@@YANN@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_nlz@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+126
	DD	imagerel $unwind$?test_nlz@@YAHXZ
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@N$00@detail@glm@@SANN@Z DD imagerel $LN5
	DD	imagerel $LN5+72
	DD	imagerel $unwind$?call@?$compute_abs@N$00@detail@glm@@SANN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@I$0A@@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0?$tvec1@I$0A@@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0?$tvec1@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log2@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$log2@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@N$0A@@glm@@QEAA@N@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log2@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$log2@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_log2@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?call@?$compute_log2@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_log2@N$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_log2@N$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$??$?0H$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compute_findMSB_32@I@detail@glm@@YAHI@Z DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$??$compute_findMSB_32@I@detail@glm@@YAHI@Z
pdata	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4038000000000000
CONST	SEGMENT
__real@4038000000000000 DQ 04038000000000000r	; 24
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compute_findMSB_32@I@detail@glm@@YAHI@Z DD 021e01H
	DD	070057209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcName$0 DB 052H ; glm::detail::compute_findMSB_32<unsigned int>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcVarDesc DD 024H ; glm::detail::compute_findMSB_32<unsigned int>
	DD	04H
	DQ	FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcName$0
	ORG $+48
??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcFrameData DD 01H ; glm::detail::compute_findMSB_32<unsigned int>
	DD	00H
	DQ	FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_log2@N$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_log2@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log2@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@N$0A@@glm@@QEAA@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log2@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@I$0A@@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@N$00@detail@glm@@SANN@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log2@N@glm@@YANN@Z DD 020b01H
	DD	07007720bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log2@I@glm@@YAII@Z DD 020901H
	DD	070055209H
xdata	ENDS
xdata	SEGMENT
$unwind$?test_log2@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test_nlz@@YAHXZ DD 020601H
	DD	070025206H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB@I@glm@@YAHI@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?nlz@glm@@YAII@Z DD 020901H
	DD	070053209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@N@glm@@YANN@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$compute_findMSB_32@I@detail@glm@@YAHI@Z
_TEXT	SEGMENT
Result$ = 36
IsNotNull$ = 52
tv69 = 56
Value$ = 80
??$compute_findMSB_32@I@detail@glm@@YAHI@Z PROC		; glm::detail::compute_findMSB_32<unsigned int>, COMDAT

; 144  : 		{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+80]

; 145  : 			unsigned long Result(0);

	mov	DWORD PTR Result$[rsp], 0

; 146  : 			unsigned char IsNotNull = _BitScanReverse(&Result, *reinterpret_cast<unsigned long*>(&Value));

	mov	eax, DWORD PTR Value$[rsp]
	bsr	eax, eax
	mov	DWORD PTR Result$[rsp], eax
	setne	al
	mov	BYTE PTR IsNotNull$[rsp], al

; 147  : 			return IsNotNull ? int(Result) : -1;

	movzx	eax, BYTE PTR IsNotNull$[rsp]
	test	eax, eax
	je	SHORT $LN3@compute_fi
	mov	eax, DWORD PTR Result$[rsp]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN4@compute_fi
$LN3@compute_fi:
	mov	DWORD PTR tv69[rsp], -1
$LN4@compute_fi:
	mov	eax, DWORD PTR tv69[rsp]

; 148  : 		}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$compute_findMSB_32@I@detail@glm@@YAHI@Z ENDP		; glm::detail::compute_findMSB_32<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z PROC ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z ENDP ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0H$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0H$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z PROC ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><int,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0H$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z ENDP ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z PROC ; glm::detail::functor1<double,double,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z ENDP ; glm::detail::functor1<double,double,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ?call@?$compute_log2@N$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
vec$ = 56
?call@?$compute_log2@N$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_log2<double,0,glm::tvec1,1,0>::call, COMDAT

; 27   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 28   : 			return detail::functor1<T, T, P, vecType>::call(log2, vec);

	mov	r8, QWORD PTR vec$[rsp]
	mov	rdx, QWORD PTR __imp_log2
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_log2@N$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_log2<double,0,glm::tvec1,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\integer.inl
;	COMDAT ?call@?$compute_log2@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
vec$ = 72
?call@?$compute_log2@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_log2<unsigned int,0,glm::tvec1,0,0>::call, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 12   : 			//Equivalent to return findMSB(vec); but save one function call in ASM with VC
; 13   : 			//return findMSB(vec);
; 14   : 			return vecType<T, P>(detail::compute_findMSB_vec<T, P, vecType, sizeof(T) * 8>::call(vec));

	mov	rdx, QWORD PTR vec$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0H$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 15   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_log2@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_log2<unsigned int,0,glm::tvec1,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z PROC ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call, COMDAT

; 154  : 			{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 155  : 				return detail::functor1<int, T, P, vecType>::call(compute_findMSB_32, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z ; glm::detail::compute_findMSB_32<unsigned int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 156  : 			}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z ENDP ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log2@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$log2@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z PROC ; glm::log2<double,0,glm::tvec1>, COMDAT

; 115  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 116  : 		return detail::compute_log2<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_log2@N$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<double,0,glm::tvec1,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 117  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$log2@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z ENDP ; glm::log2<double,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec1<double,0>::tvec1<double,0>, COMDAT

; 39   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log2@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$log2@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z PROC ; glm::log2<unsigned int,0,glm::tvec1>, COMDAT

; 115  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 116  : 		return detail::compute_log2<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_log2@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<unsigned int,0,glm::tvec1,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 117  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$log2@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z ENDP ; glm::log2<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z PROC ; glm::findMSB<unsigned int,0,glm::tvec1>, COMDAT

; 358  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 359  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'findMSB' only accept integer values");
; 360  : 
; 361  : 		return detail::compute_findMSB_vec<T, P, vecType, sizeof(T) * 8>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 362  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ENDP ; glm::findMSB<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@N$00@detail@glm@@SANN@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@N$00@detail@glm@@SANN@Z PROC	; glm::detail::compute_abs<double,1>::call, COMDAT

; 77   : 		{

$LN5:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movsd	xmm0, QWORD PTR x$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN3@call
	movsd	xmm0, QWORD PTR x$[rsp]
	movsd	QWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movsd	xmm0, QWORD PTR x$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv66[rsp], xmm0
$LN4@call:
	movsd	xmm0, QWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@N$00@detail@glm@@SANN@Z ENDP	; glm::detail::compute_abs<double,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_integer.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 55   : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 57   : 
; 58   : 	Error += test_nlz();

	call	?test_nlz@@YAHXZ			; test_nlz
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 59   : //	Error += test_floor_log2();
; 60   : 	Error += test_log2();

	call	?test_log2@@YAHXZ			; test_log2
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 61   : 
; 62   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 63   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_integer.cpp
_TEXT	SEGMENT
Error$ = 32
i$1 = 36
tv66 = 40
tv72 = 44
?test_nlz@@YAHXZ PROC					; test_nlz

; 44   : {

$LN8:
	push	rdi
	sub	rsp, 48					; 00000030H

; 45   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 46   : 
; 47   : 	for(glm::uint i = 1; i < glm::uint(33); ++i)

	mov	DWORD PTR i$1[rsp], 1
	jmp	SHORT $LN4@test_nlz
$LN2@test_nlz:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@test_nlz:
	cmp	DWORD PTR i$1[rsp], 33			; 00000021H
	jae	SHORT $LN3@test_nlz

; 48   : 		Error += glm::nlz(i) == glm::uint(31u) - glm::findMSB(i) ? 0 : 1;

	mov	ecx, DWORD PTR i$1[rsp]
	call	?nlz@glm@@YAII@Z			; glm::nlz
	mov	DWORD PTR tv66[rsp], eax
	mov	ecx, DWORD PTR i$1[rsp]
	call	??$findMSB@I@glm@@YAHI@Z		; glm::findMSB<unsigned int>
	mov	ecx, 31
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR tv66[rsp]
	cmp	ecx, eax
	jne	SHORT $LN6@test_nlz
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN7@test_nlz
$LN6@test_nlz:
	mov	DWORD PTR tv72[rsp], 1
$LN7@test_nlz:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	SHORT $LN2@test_nlz
$LN3@test_nlz:

; 49   : 		//printf("%d, %d\n", glm::nlz(i), 31u - glm::findMSB(i));
; 50   : 
; 51   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 52   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test_nlz@@YAHXZ ENDP					; test_nlz
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log2@N@glm@@YANN@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 56
x$ = 80
??$log2@N@glm@@YANN@Z PROC				; glm::log2<double>, COMDAT

; 109  : 	{

$LN3:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H

; 110  : 		return log2(tvec1<genType>(x)).x;

	movsd	xmm1, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$log2@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z ; glm::log2<double,0,glm::tvec1>
	movsd	xmm0, QWORD PTR [rax]

; 111  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$log2@N@glm@@YANN@Z ENDP				; glm::log2<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log2@I@glm@@YAII@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
x$ = 64
??$log2@I@glm@@YAII@Z PROC				; glm::log2<unsigned int>, COMDAT

; 109  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 110  : 		return log2(tvec1<genType>(x)).x;

	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$log2@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z ; glm::log2<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 111  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$log2@I@glm@@YAII@Z ENDP				; glm::log2<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_integer.cpp
_TEXT	SEGMENT
Error$ = 32
i$1 = 40
A$2 = 48
B$3 = 52
tv141 = 56
tv144 = 60
tv80 = 64
tv152 = 68
?test_log2@@YAHXZ PROC					; test_log2

; 23   : {

$LN9:
	push	rdi
	sub	rsp, 80					; 00000050H

; 24   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 25   : 
; 26   : 	for(std::size_t i = 1; i < 24; ++i)

	mov	QWORD PTR i$1[rsp], 1
	jmp	SHORT $LN4@test_log2
$LN2@test_log2:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@test_log2:
	cmp	QWORD PTR i$1[rsp], 24
	jae	$LN3@test_log2

; 27   : 	{
; 28   : 		glm::uint A = glm::log2(glm::uint(1 << i));

	mov	rax, QWORD PTR i$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv141[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv141[rsp]
	shl	eax, cl
	mov	ecx, eax
	call	??$log2@I@glm@@YAII@Z			; glm::log2<unsigned int>
	mov	DWORD PTR A$2[rsp], eax

; 29   : 		glm::uint B = glm::uint(glm::log2(double(1 << i)));

	mov	rax, QWORD PTR i$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv144[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv144[rsp]
	shl	eax, cl
	cvtsi2sd xmm0, eax
	call	??$log2@N@glm@@YANN@Z			; glm::log2<double>
	cvttsd2si rax, xmm0
	mov	DWORD PTR B$3[rsp], eax

; 30   : 
; 31   : 		//Error += glm::equalEpsilon(double(A), B, 1.0) ? 0 : 1;
; 32   : 		Error += glm::abs(double(A) - B) <= 24 ? 0 : 1;

	mov	eax, DWORD PTR A$2[rsp]
	cvtsi2sd xmm0, rax
	mov	eax, DWORD PTR B$3[rsp]
	cvtsi2sd xmm1, rax
	subsd	xmm0, xmm1
	call	??$abs@N@glm@@YANN@Z			; glm::abs<double>
	movsd	xmm1, QWORD PTR __real@4038000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN6@test_log2
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN7@test_log2
$LN6@test_log2:
	mov	DWORD PTR tv80[rsp], 1
$LN7@test_log2:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 33   : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_log2
	mov	r8d, 33					; 00000021H
	lea	rdx, OFFSET FLAT:$SG51561
	lea	rcx, OFFSET FLAT:$SG51562
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_log2:

; 34   : 
; 35   : 		printf("Log2(%d) error A=%d, B=%d\n", 1 << i, A, B);

	mov	rax, QWORD PTR i$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv152[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv152[rsp]
	shl	eax, cl
	mov	r9d, DWORD PTR B$3[rsp]
	mov	r8d, DWORD PTR A$2[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG51563
	call	printf

; 36   : 	}

	jmp	$LN2@test_log2
$LN3@test_log2:

; 37   : 
; 38   : 	printf("log2 error=%d\n", Error);

	mov	edx, DWORD PTR Error$[rsp]
	lea	rcx, OFFSET FLAT:$SG51564
	call	printf

; 39   : 
; 40   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 41   : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test_log2@@YAHXZ ENDP					; test_log2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$findMSB@I@glm@@YAHI@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
x$ = 64
??$findMSB@I@glm@@YAHI@Z PROC				; glm::findMSB<unsigned int>, COMDAT

; 350  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 351  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");
; 352  : 
; 353  : 		return findMSB(tvec1<genIUType>(x)).x;

	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ; glm::findMSB<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 354  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$findMSB@I@glm@@YAHI@Z ENDP				; glm::findMSB<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\integer.inl
;	COMDAT ?nlz@glm@@YAII@Z
_TEXT	SEGMENT
x$ = 48
?nlz@glm@@YAII@Z PROC					; glm::nlz, COMDAT

; 144  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		return 31u - findMSB(x);

	mov	ecx, DWORD PTR x$[rsp]
	call	??$findMSB@I@glm@@YAHI@Z		; glm::findMSB<unsigned int>
	mov	ecx, 31
	sub	ecx, eax
	mov	eax, ecx

; 146  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?nlz@glm@@YAII@Z ENDP					; glm::nlz
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@N@glm@@YANN@Z
_TEXT	SEGMENT
x$ = 64
??$abs@N@glm@@YANN@Z PROC				; glm::abs<double>, COMDAT

; 310  : 	{

$LN3:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movsd	xmm0, QWORD PTR x$[rsp]
	call	?call@?$compute_abs@N$00@detail@glm@@SANN@Z ; glm::detail::compute_abs<double,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@N@glm@@YANN@Z ENDP				; glm::abs<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
