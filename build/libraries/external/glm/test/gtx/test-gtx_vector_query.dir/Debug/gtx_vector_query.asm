; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	?test_areCollinear@@YAHXZ			; test_areCollinear
PUBLIC	??$areCollinear@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::areCollinear<float,0,glm::tvec2>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$areCollinear@M$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0AEBM@Z ; glm::areCollinear<float,0,glm::tvec3>
PUBLIC	??$areCollinear@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::areCollinear<float,0,glm::tvec4>
PUBLIC	?test_areOrthogonal@@YAHXZ			; test_areOrthogonal
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	??$areOrthogonal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::areOrthogonal<float,0,glm::tvec2>
PUBLIC	?test_isNormalized@@YAHXZ			; test_isNormalized
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$isNormalized@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z ; glm::isNormalized<float,0,glm::tvec4>
PUBLIC	?test_isNull@@YAHXZ				; test_isNull
PUBLIC	??$isNull@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z ; glm::isNull<float,0,glm::tvec4>
PUBLIC	?test_areOrthonormal@@YAHXZ			; test_areOrthonormal
PUBLIC	??$areOrthonormal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::areOrthonormal<float,0,glm::tvec2>
PUBLIC	main
PUBLIC	?call@?$compute_areCollinear@M$0A@Utvec2@glm@@@detail@glm@@SA_NAEBU?$tvec2@M$0A@@3@0AEBM@Z ; glm::detail::compute_areCollinear<float,0,glm::tvec2>::call
PUBLIC	?call@?$compute_areCollinear@M$0A@Utvec3@glm@@@detail@glm@@SA_NAEBU?$tvec3@M$0A@@3@0AEBM@Z ; glm::detail::compute_areCollinear<float,0,glm::tvec3>::call
PUBLIC	?call@?$compute_areCollinear@M$0A@Utvec4@glm@@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0AEBM@Z ; glm::detail::compute_areCollinear<float,0,glm::tvec4>::call
PUBLIC	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::length<float,0,glm::tvec2>
PUBLIC	??$max@M@glm@@YAMMM@Z				; glm::max<float>
PUBLIC	??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ; glm::length<float,0,glm::tvec4>
PUBLIC	??$isNormalized@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@AEBM@Z ; glm::isNormalized<float,0,glm::tvec2>
PUBLIC	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
PUBLIC	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
PUBLIC	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
PUBLIC	??$?0MM$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@M@Z ; glm::tvec3<float,0>::tvec3<float,0><float,float,0>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec2,float,0,0>::call
PUBLIC	?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec4,float,0,0>::call
PUBLIC	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
PUBLIC	?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,float,0,0>::call
PUBLIC	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
PUBLIC	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	__real@00000000
PUBLIC	__real@3727c5ac
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp_sqrtf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_areCollinear@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+444
	DD	imagerel $unwind$?test_areCollinear@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$areCollinear@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$areCollinear@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$areCollinear@M$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$areCollinear@M$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$areCollinear@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$areCollinear@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_areOrthogonal@@YAHXZ DD imagerel $LN5
	DD	imagerel $LN5+147
	DD	imagerel $unwind$?test_areOrthogonal@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$areOrthogonal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z DD imagerel $LN5
	DD	imagerel $LN5+166
	DD	imagerel $unwind$??$areOrthogonal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_isNormalized@@YAHXZ DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$?test_isNormalized@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isNormalized@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z DD imagerel $LN5
	DD	imagerel $LN5+89
	DD	imagerel $unwind$??$isNormalized@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_isNull@@YAHXZ DD imagerel $LN5
	DD	imagerel $LN5+111
	DD	imagerel $unwind$?test_isNull@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isNull@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$isNull@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_areOrthonormal@@YAHXZ DD imagerel $LN5
	DD	imagerel $LN5+147
	DD	imagerel $unwind$?test_areOrthonormal@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$areOrthonormal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$??$areOrthonormal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_areCollinear@M$0A@Utvec2@glm@@@detail@glm@@SA_NAEBU?$tvec2@M$0A@@3@0AEBM@Z DD imagerel $LN5
	DD	imagerel $LN5+136
	DD	imagerel $unwind$?call@?$compute_areCollinear@M$0A@Utvec2@glm@@@detail@glm@@SA_NAEBU?$tvec2@M$0A@@3@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_areCollinear@M$0A@Utvec3@glm@@@detail@glm@@SA_NAEBU?$tvec3@M$0A@@3@0AEBM@Z DD imagerel $LN5
	DD	imagerel $LN5+91
	DD	imagerel $unwind$?call@?$compute_areCollinear@M$0A@Utvec3@glm@@@detail@glm@@SA_NAEBU?$tvec3@M$0A@@3@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_areCollinear@M$0A@Utvec4@glm@@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0AEBM@Z DD imagerel $LN5
	DD	imagerel $LN5+130
	DD	imagerel $unwind$?call@?$compute_areCollinear@M$0A@Utvec4@glm@@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$max@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isNormalized@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@AEBM@Z DD imagerel $LN5
	DD	imagerel $LN5+89
	DD	imagerel $unwind$??$isNormalized@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MM$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?0MM$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+190
	DD	imagerel $unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DD	08H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MM$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@M@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isNormalized@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@AEBM@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_areCollinear@M$0A@Utvec4@glm@@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0AEBM@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_areCollinear@M$0A@Utvec3@glm@@@detail@glm@@SA_NAEBU?$tvec3@M$0A@@3@0AEBM@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_areCollinear@M$0A@Utvec2@glm@@@detail@glm@@SA_NAEBU?$tvec2@M$0A@@3@0AEBM@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$areOrthonormal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isNull@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isNormalized@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$areOrthogonal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$areCollinear@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0AEBM@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$areCollinear@M$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0AEBM@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$areCollinear@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z DD 021401H
	DD	070103214H
xdata	ENDS
xdata	SEGMENT
$unwind$?test_areCollinear@@YAHXZ DD 030901H
	DD	0160109H
	DD	07002H
$unwind$?test_areOrthogonal@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test_isNormalized@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test_isNull@@YAHXZ DD 020601H
	DD	070027206H
$unwind$?test_areOrthonormal@@YAHXZ DD 020601H
	DD	070029206H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call, COMDAT

; 67   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 68   : 			tvec4<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 69   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	movss	xmm1, DWORD PTR tmp$[rsp+8]
	addss	xmm1, DWORD PTR tmp$[rsp+12]
	addss	xmm0, xmm1

; 70   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call, COMDAT

; 57   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 59   : 			return tmp.x + tmp.y + tmp.z;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	addss	xmm0, DWORD PTR tmp$[rsp+8]

; 60   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 573  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 574  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 			v1.x * v2.x,
; 576  : 			v1.y * v2.y);
; 577  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec4>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec3>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec3,float,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	call	?sqrt@@YAMM@Z				; sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv88 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<float,0,0>::call, COMDAT

; 77   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx+4]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm2, DWORD PTR [rax+8]
	mulss	xmm2, DWORD PTR [rcx]
	subss	xmm1, xmm2
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm3, DWORD PTR [rax+4]
	mulss	xmm3, DWORD PTR [rcx+8]
	subss	xmm2, xmm3
	movss	DWORD PTR tv88[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv88[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec4,float,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	call	?sqrt@@YAMM@Z				; sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec2,float,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	call	?sqrt@@YAMM@Z				; sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 96
y$ = 104
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call, COMDAT

; 47   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 48   : 			tvec2<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 49   : 			return tmp.x + tmp.y;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]

; 50   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MM$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@M@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MM$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@M@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,float,0>, COMDAT

; 98   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 95   : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 96   : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 97   : 		z(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 98   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MM$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@M@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::length<float,0,glm::tvec3>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,float,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::length<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::cross<float,0>, COMDAT

; 180  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 182  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::cross<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,0>, COMDAT

; 138  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 135  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 136  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 137  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 138  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\vector_query.inl
;	COMDAT ??$isNormalized@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@AEBM@Z
_TEXT	SEGMENT
tv71 = 32
v$ = 64
epsilon$ = 72
??$isNormalized@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@AEBM@Z PROC ; glm::isNormalized<float,0,glm::tvec2>, COMDAT

; 114  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 115  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isNormalized' only accept floating-point inputs");
; 116  : 
; 117  : 		return abs(length(v) - static_cast<T>(1)) <= static_cast<T>(2) * epsilon;

	mov	rcx, QWORD PTR v$[rsp]
	call	??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::length<float,0,glm::tvec2>
	subss	xmm0, DWORD PTR __real@3f800000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jb	SHORT $LN3@isNormaliz
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN4@isNormaliz
$LN3@isNormaliz:
	mov	DWORD PTR tv71[rsp], 0
$LN4@isNormaliz:
	movzx	eax, BYTE PTR tv71[rsp]

; 118  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isNormalized@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@AEBM@Z ENDP ; glm::isNormalized<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z PROC ; glm::length<float,0,glm::tvec4>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec4,float,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::length<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$max@M@glm@@YAMMM@Z PROC				; glm::max<float>, COMDAT

; 24   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	SHORT $LN3@max
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@max
$LN3@max:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@max:
	movss	xmm0, DWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M@glm@@YAMMM@Z ENDP				; glm::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z PROC ; glm::length<float,0,glm::tvec2>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec2,float,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::length<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec2>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\vector_query.inl
;	COMDAT ?call@?$compute_areCollinear@M$0A@Utvec4@glm@@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv67 = 72
tv77 = 80
v0$ = 112
v1$ = 120
epsilon$ = 128
?call@?$compute_areCollinear@M$0A@Utvec4@glm@@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0AEBM@Z PROC ; glm::detail::compute_areCollinear<float,0,glm::tvec4>::call, COMDAT

; 34   : 		{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 35   : 			return length(cross(tvec3<T, P>(v0), tvec3<T, P>(v1))) < epsilon;

	mov	rdx, QWORD PTR v1$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	QWORD PTR tv67[rsp], rax
	mov	rdx, QWORD PTR v0$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@call
	mov	DWORD PTR tv77[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv77[rsp], 0
$LN4@call:
	movzx	eax, BYTE PTR tv77[rsp]

; 36   : 		}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_areCollinear@M$0A@Utvec4@glm@@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0AEBM@Z ENDP ; glm::detail::compute_areCollinear<float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\vector_query.inl
;	COMDAT ?call@?$compute_areCollinear@M$0A@Utvec3@glm@@@detail@glm@@SA_NAEBU?$tvec3@M$0A@@3@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
tv71 = 44
v0$ = 64
v1$ = 72
epsilon$ = 80
?call@?$compute_areCollinear@M$0A@Utvec3@glm@@@detail@glm@@SA_NAEBU?$tvec3@M$0A@@3@0AEBM@Z PROC ; glm::detail::compute_areCollinear<float,0,glm::tvec3>::call, COMDAT

; 25   : 		{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 26   : 			return length(cross(v0, v1)) < epsilon;

	mov	r8, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v0$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@call
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv71[rsp], 0
$LN4@call:
	movzx	eax, BYTE PTR tv71[rsp]

; 27   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_areCollinear@M$0A@Utvec3@glm@@@detail@glm@@SA_NAEBU?$tvec3@M$0A@@3@0AEBM@Z ENDP ; glm::detail::compute_areCollinear<float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\vector_query.inl
;	COMDAT ?call@?$compute_areCollinear@M$0A@Utvec2@glm@@@detail@glm@@SA_NAEBU?$tvec2@M$0A@@3@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv67 = 72
tv79 = 80
v0$ = 112
v1$ = 120
epsilon$ = 128
?call@?$compute_areCollinear@M$0A@Utvec2@glm@@@detail@glm@@SA_NAEBU?$tvec2@M$0A@@3@0AEBM@Z PROC ; glm::detail::compute_areCollinear<float,0,glm::tvec2>::call, COMDAT

; 16   : 		{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 17   : 			return length(cross(tvec3<T, P>(v0, static_cast<T>(0)), tvec3<T, P>(v1, static_cast<T>(0)))) < epsilon;

	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v1$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MM$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@M@Z ; glm::tvec3<float,0>::tvec3<float,0><float,float,0>
	mov	QWORD PTR tv67[rsp], rax
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v0$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MM$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@M@Z ; glm::tvec3<float,0>::tvec3<float,0><float,float,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@call
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv79[rsp], 0
$LN4@call:
	movzx	eax, BYTE PTR tv79[rsp]

; 18   : 		}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_areCollinear@M$0A@Utvec2@glm@@@detail@glm@@SA_NAEBU?$tvec2@M$0A@@3@0AEBM@Z ENDP ; glm::detail::compute_areCollinear<float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_vector_query.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 69   : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 71   : 
; 72   : 	Error += test_areCollinear();

	call	?test_areCollinear@@YAHXZ		; test_areCollinear
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 73   : 	Error += test_areOrthogonal();

	call	?test_areOrthogonal@@YAHXZ		; test_areOrthogonal
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 74   : 	Error += test_isNormalized();

	call	?test_isNormalized@@YAHXZ		; test_isNormalized
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 75   : 	Error += test_isNull();

	call	?test_isNull@@YAHXZ			; test_isNull
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 76   : 	Error += test_areOrthonormal();

	call	?test_areOrthonormal@@YAHXZ		; test_areOrthonormal
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 77   : 
; 78   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 79   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\vector_query.inl
;	COMDAT ??$areOrthonormal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
tv80 = 32
v0$ = 64
v1$ = 72
epsilon$ = 80
??$areOrthonormal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z PROC ; glm::areOrthonormal<float,0,glm::tvec2>, COMDAT

; 189  : 	{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 190  : 		return isNormalized(v0, epsilon) && isNormalized(v1, epsilon) && (abs(dot(v0, v1)) <= epsilon);

	mov	rdx, QWORD PTR epsilon$[rsp]
	mov	rcx, QWORD PTR v0$[rsp]
	call	??$isNormalized@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@AEBM@Z ; glm::isNormalized<float,0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@areOrthono
	mov	rdx, QWORD PTR epsilon$[rsp]
	mov	rcx, QWORD PTR v1$[rsp]
	call	??$isNormalized@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@AEBM@Z ; glm::isNormalized<float,0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@areOrthono
	mov	rdx, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v0$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jb	SHORT $LN3@areOrthono
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN4@areOrthono
$LN3@areOrthono:
	mov	DWORD PTR tv80[rsp], 0
$LN4@areOrthono:
	movzx	eax, BYTE PTR tv80[rsp]

; 191  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$areOrthonormal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z ENDP ; glm::areOrthonormal<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_vector_query.cpp
_TEXT	SEGMENT
Error$ = 32
TestA$ = 36
$T1 = 40
$T2 = 44
$T3 = 52
tv67 = 64
tv78 = 72
?test_areOrthonormal@@YAHXZ PROC			; test_areOrthonormal

; 59   : {

$LN5:
	push	rdi
	sub	rsp, 80					; 00000050H

; 60   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 61   : 
; 62   : 	bool TestA = glm::areOrthonormal(glm::vec2(1, 0), glm::vec2(0, 1), 0.00001f);

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T1[rsp], xmm0
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv67[rsp], rax
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	lea	r8, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR tv67[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$areOrthonormal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::areOrthonormal<float,0,glm::tvec2>
	mov	BYTE PTR TestA$[rsp], al

; 63   : 	Error += TestA ? 0 : 1;

	movzx	eax, BYTE PTR TestA$[rsp]
	test	eax, eax
	je	SHORT $LN3@test_areOr
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN4@test_areOr
$LN3@test_areOr:
	mov	DWORD PTR tv78[rsp], 1
$LN4@test_areOr:
	mov	eax, DWORD PTR tv78[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 64   : 
; 65   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 66   : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test_areOrthonormal@@YAHXZ ENDP			; test_areOrthonormal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\vector_query.inl
;	COMDAT ??$isNull@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z
_TEXT	SEGMENT
tv67 = 32
v$ = 64
epsilon$ = 72
??$isNull@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z PROC ; glm::isNull<float,0,glm::tvec4>, COMDAT

; 126  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 127  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isNull' only accept floating-point inputs");
; 128  : 
; 129  : 		return length(v) <= epsilon;

	mov	rcx, QWORD PTR v$[rsp]
	call	??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ; glm::length<float,0,glm::tvec4>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jb	SHORT $LN3@isNull
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@isNull
$LN3@isNull:
	mov	DWORD PTR tv67[rsp], 0
$LN4@isNull:
	movzx	eax, BYTE PTR tv67[rsp]

; 130  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isNull@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z ENDP ; glm::isNull<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_vector_query.cpp
_TEXT	SEGMENT
Error$ = 32
TestA$ = 36
$T1 = 40
$T2 = 44
tv72 = 60
?test_isNull@@YAHXZ PROC				; test_isNull

; 49   : {

$LN5:
	push	rdi
	sub	rsp, 64					; 00000040H

; 50   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 51   : 	
; 52   : 	bool TestA = glm::isNull(glm::vec4(0), 0.00001f);

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T1[rsp], xmm0
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rax
	call	??$isNull@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z ; glm::isNull<float,0,glm::tvec4>
	mov	BYTE PTR TestA$[rsp], al

; 53   : 	Error += TestA ? 0 : 1;

	movzx	eax, BYTE PTR TestA$[rsp]
	test	eax, eax
	je	SHORT $LN3@test_isNul
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN4@test_isNul
$LN3@test_isNul:
	mov	DWORD PTR tv72[rsp], 1
$LN4@test_isNul:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 54   : 
; 55   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 56   : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?test_isNull@@YAHXZ ENDP				; test_isNull
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\vector_query.inl
;	COMDAT ??$isNormalized@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z
_TEXT	SEGMENT
tv71 = 32
v$ = 64
epsilon$ = 72
??$isNormalized@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z PROC ; glm::isNormalized<float,0,glm::tvec4>, COMDAT

; 114  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 115  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isNormalized' only accept floating-point inputs");
; 116  : 
; 117  : 		return abs(length(v) - static_cast<T>(1)) <= static_cast<T>(2) * epsilon;

	mov	rcx, QWORD PTR v$[rsp]
	call	??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ; glm::length<float,0,glm::tvec4>
	subss	xmm0, DWORD PTR __real@3f800000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jb	SHORT $LN3@isNormaliz
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN4@isNormaliz
$LN3@isNormaliz:
	mov	DWORD PTR tv71[rsp], 0
$LN4@isNormaliz:
	movzx	eax, BYTE PTR tv71[rsp]

; 118  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isNormalized@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z ENDP ; glm::isNormalized<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_vector_query.cpp
_TEXT	SEGMENT
Error$ = 48
TestA$ = 52
$T1 = 56
$T2 = 60
tv75 = 76
?test_isNormalized@@YAHXZ PROC				; test_isNormalized

; 39   : {

$LN5:
	push	rdi
	sub	rsp, 80					; 00000050H

; 40   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 41   : 	
; 42   : 	bool TestA = glm::isNormalized(glm::vec4(1, 0, 0, 0), 0.00001f);

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T1[rsp], xmm0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rax
	call	??$isNormalized@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@AEBM@Z ; glm::isNormalized<float,0,glm::tvec4>
	mov	BYTE PTR TestA$[rsp], al

; 43   : 	Error += TestA ? 0 : 1;

	movzx	eax, BYTE PTR TestA$[rsp]
	test	eax, eax
	je	SHORT $LN3@test_isNor
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN4@test_isNor
$LN3@test_isNor:
	mov	DWORD PTR tv75[rsp], 1
$LN4@test_isNor:
	mov	eax, DWORD PTR tv75[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 44   : 
; 45   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 46   : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test_isNormalized@@YAHXZ ENDP				; test_isNormalized
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\vector_query.inl
;	COMDAT ??$areOrthogonal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
tv64 = 32
tv69 = 36
tv82 = 40
v0$ = 64
v1$ = 72
epsilon$ = 80
??$areOrthogonal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z PROC ; glm::areOrthogonal<float,0,glm::tvec2>, COMDAT

; 100  : 	{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 101  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'areOrthogonal' only accept floating-point inputs");
; 102  : 
; 103  : 		return abs(dot(v0, v1)) <= max(

	mov	rdx, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v0$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv64[rsp], xmm0
	mov	rcx, QWORD PTR v0$[rsp]
	call	??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::length<float,0,glm::tvec2>
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	call	??$max@M@glm@@YAMMM@Z			; glm::max<float>
	movss	DWORD PTR tv69[rsp], xmm0
	mov	rcx, QWORD PTR v1$[rsp]
	call	??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::length<float,0,glm::tvec2>
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	call	??$max@M@glm@@YAMMM@Z			; glm::max<float>
	movss	xmm1, DWORD PTR tv69[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR epsilon$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv64[rsp]
	comiss	xmm0, xmm1
	jb	SHORT $LN3@areOrthogo
	mov	DWORD PTR tv82[rsp], 1
	jmp	SHORT $LN4@areOrthogo
$LN3@areOrthogo:
	mov	DWORD PTR tv82[rsp], 0
$LN4@areOrthogo:
	movzx	eax, BYTE PTR tv82[rsp]

; 104  : 			static_cast<T>(1),
; 105  : 			length(v0)) * max(static_cast<T>(1), length(v1)) * epsilon;
; 106  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$areOrthogonal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z ENDP ; glm::areOrthogonal<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_vector_query.cpp
_TEXT	SEGMENT
Error$ = 32
TestA$ = 36
$T1 = 40
$T2 = 44
$T3 = 52
tv67 = 64
tv78 = 72
?test_areOrthogonal@@YAHXZ PROC				; test_areOrthogonal

; 29   : {

$LN5:
	push	rdi
	sub	rsp, 80					; 00000050H

; 30   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 31   : 	
; 32   : 	bool TestA = glm::areOrthogonal(glm::vec2(1, 0), glm::vec2(0, 1), 0.00001f);

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T1[rsp], xmm0
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv67[rsp], rax
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	lea	r8, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR tv67[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$areOrthogonal@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::areOrthogonal<float,0,glm::tvec2>
	mov	BYTE PTR TestA$[rsp], al

; 33   : 	Error += TestA ? 0 : 1;

	movzx	eax, BYTE PTR TestA$[rsp]
	test	eax, eax
	je	SHORT $LN3@test_areOr
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN4@test_areOr
$LN3@test_areOr:
	mov	DWORD PTR tv78[rsp], 1
$LN4@test_areOr:
	mov	eax, DWORD PTR tv78[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 34   : 
; 35   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 36   : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test_areOrthogonal@@YAHXZ ENDP				; test_areOrthogonal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\vector_query.inl
;	COMDAT ??$areCollinear@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
v0$ = 48
v1$ = 56
epsilon$ = 64
??$areCollinear@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0AEBM@Z PROC ; glm::areCollinear<float,0,glm::tvec4>, COMDAT

; 87   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 88   : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'areCollinear' only accept floating-point inputs");
; 89   : 
; 90   : 		return detail::compute_areCollinear<T, P, vecType>::call(v0, v1, epsilon);

	mov	r8, QWORD PTR epsilon$[rsp]
	mov	rdx, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v0$[rsp]
	call	?call@?$compute_areCollinear@M$0A@Utvec4@glm@@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0AEBM@Z ; glm::detail::compute_areCollinear<float,0,glm::tvec4>::call

; 91   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$areCollinear@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0AEBM@Z ENDP ; glm::areCollinear<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\vector_query.inl
;	COMDAT ??$areCollinear@M$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
v0$ = 48
v1$ = 56
epsilon$ = 64
??$areCollinear@M$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0AEBM@Z PROC ; glm::areCollinear<float,0,glm::tvec3>, COMDAT

; 87   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 88   : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'areCollinear' only accept floating-point inputs");
; 89   : 
; 90   : 		return detail::compute_areCollinear<T, P, vecType>::call(v0, v1, epsilon);

	mov	r8, QWORD PTR epsilon$[rsp]
	mov	rdx, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v0$[rsp]
	call	?call@?$compute_areCollinear@M$0A@Utvec3@glm@@@detail@glm@@SA_NAEBU?$tvec3@M$0A@@3@0AEBM@Z ; glm::detail::compute_areCollinear<float,0,glm::tvec3>::call

; 91   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$areCollinear@M$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0AEBM@Z ENDP ; glm::areCollinear<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\vector_query.inl
;	COMDAT ??$areCollinear@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
v0$ = 48
v1$ = 56
epsilon$ = 64
??$areCollinear@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z PROC ; glm::areCollinear<float,0,glm::tvec2>, COMDAT

; 87   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 88   : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'areCollinear' only accept floating-point inputs");
; 89   : 
; 90   : 		return detail::compute_areCollinear<T, P, vecType>::call(v0, v1, epsilon);

	mov	r8, QWORD PTR epsilon$[rsp]
	mov	rdx, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v0$[rsp]
	call	?call@?$compute_areCollinear@M$0A@Utvec2@glm@@@detail@glm@@SA_NAEBU?$tvec2@M$0A@@3@0AEBM@Z ; glm::detail::compute_areCollinear<float,0,glm::tvec2>::call

; 91   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$areCollinear@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z ENDP ; glm::areCollinear<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_vector_query.cpp
_TEXT	SEGMENT
Error$ = 32
TestA$1 = 36
TestA$2 = 37
TestA$3 = 38
$T4 = 40
$T5 = 44
$T6 = 52
$T7 = 60
$T8 = 64
$T9 = 76
$T10 = 88
$T11 = 92
$T12 = 108
tv67 = 128
tv76 = 136
tv81 = 144
tv90 = 152
tv95 = 160
tv136 = 168
?test_areCollinear@@YAHXZ PROC				; test_areCollinear

; 7    : {

$LN9:
	push	rdi
	sub	rsp, 176				; 000000b0H

; 8    : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 9    : 
; 10   : 	{
; 11   : 		bool TestA = glm::areCollinear(glm::vec2(-1), glm::vec2(1), 0.00001f);

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T4[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv67[rsp], rax
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	lea	r8, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR tv67[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$areCollinear@M$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::areCollinear<float,0,glm::tvec2>
	mov	BYTE PTR TestA$1[rsp], al

; 12   : 		Error += TestA ? 0 : 1;

	movzx	eax, BYTE PTR TestA$1[rsp]
	test	eax, eax
	je	SHORT $LN3@test_areCo
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN4@test_areCo
$LN3@test_areCo:
	mov	DWORD PTR tv76[rsp], 1
$LN4@test_areCo:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 13   : 	}
; 14   : 
; 15   : 	{
; 16   : 		bool TestA = glm::areCollinear(glm::vec3(-1), glm::vec3(1), 0.00001f);

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T7[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv81[rsp], rax
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	lea	r8, QWORD PTR $T7[rsp]
	mov	rcx, QWORD PTR tv81[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$areCollinear@M$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0AEBM@Z ; glm::areCollinear<float,0,glm::tvec3>
	mov	BYTE PTR TestA$2[rsp], al

; 17   : 		Error += TestA ? 0 : 1;

	movzx	eax, BYTE PTR TestA$2[rsp]
	test	eax, eax
	je	SHORT $LN5@test_areCo
	mov	DWORD PTR tv90[rsp], 0
	jmp	SHORT $LN6@test_areCo
$LN5@test_areCo:
	mov	DWORD PTR tv90[rsp], 1
$LN6@test_areCo:
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 18   : 	}
; 19   : 
; 20   : 	{
; 21   : 		bool TestA = glm::areCollinear(glm::vec4(-1), glm::vec4(1), 0.00001f);

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T10[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv95[rsp], rax
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r8, QWORD PTR $T10[rsp]
	mov	rcx, QWORD PTR tv95[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$areCollinear@M$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::areCollinear<float,0,glm::tvec4>
	mov	BYTE PTR TestA$3[rsp], al

; 22   : 		Error += TestA ? 0 : 1;

	movzx	eax, BYTE PTR TestA$3[rsp]
	test	eax, eax
	je	SHORT $LN7@test_areCo
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN8@test_areCo
$LN7@test_areCo:
	mov	DWORD PTR tv136[rsp], 1
$LN8@test_areCo:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 23   : 	}
; 24   : 
; 25   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 26   : }

	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?test_areCollinear@@YAHXZ ENDP				; test_areCollinear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 264  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 265  :     return _CSTD sqrtf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sqrtf

; 266  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
END
