; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?any@glm@@YA_NAEB_N@Z				; glm::any
PUBLIC	?all@glm@@YA_NAEB_N@Z				; glm::all
PUBLIC	?not_@glm@@YA_NAEB_N@Z				; glm::not_
PUBLIC	?test_lessThan@@YAHXZ				; test_lessThan
PUBLIC	??$lessThan@H@glm@@YA_NAEBH0@Z			; glm::lessThan<int>
PUBLIC	??$lessThan@M@glm@@YA_NAEBM0@Z			; glm::lessThan<float>
PUBLIC	??$lessThan@N@glm@@YA_NAEBN0@Z			; glm::lessThan<double>
PUBLIC	?test_lessThanEqual@@YAHXZ			; test_lessThanEqual
PUBLIC	??$lessThanEqual@H@glm@@YA_NAEBH0@Z		; glm::lessThanEqual<int>
PUBLIC	??$lessThanEqual@M@glm@@YA_NAEBM0@Z		; glm::lessThanEqual<float>
PUBLIC	??$lessThanEqual@N@glm@@YA_NAEBN0@Z		; glm::lessThanEqual<double>
PUBLIC	?test_greaterThan@@YAHXZ			; test_greaterThan
PUBLIC	??$greaterThan@H@glm@@YA_NAEBH0@Z		; glm::greaterThan<int>
PUBLIC	??$greaterThan@M@glm@@YA_NAEBM0@Z		; glm::greaterThan<float>
PUBLIC	??$greaterThan@N@glm@@YA_NAEBN0@Z		; glm::greaterThan<double>
PUBLIC	?test_greaterThanEqual@@YAHXZ			; test_greaterThanEqual
PUBLIC	??$greaterThanEqual@H@glm@@YA_NAEBH0@Z		; glm::greaterThanEqual<int>
PUBLIC	??$greaterThanEqual@M@glm@@YA_NAEBM0@Z		; glm::greaterThanEqual<float>
PUBLIC	??$greaterThanEqual@N@glm@@YA_NAEBN0@Z		; glm::greaterThanEqual<double>
PUBLIC	?test_equal@@YAHXZ				; test_equal
PUBLIC	??$equal@H@glm@@YA_NAEBH0@Z			; glm::equal<int>
PUBLIC	??$equal@M@glm@@YA_NAEBM0@Z			; glm::equal<float>
PUBLIC	??$equal@N@glm@@YA_NAEBN0@Z			; glm::equal<double>
PUBLIC	?test_notEqual@@YAHXZ				; test_notEqual
PUBLIC	??$notEqual@H@glm@@YA_NAEBH0@Z			; glm::notEqual<int>
PUBLIC	??$notEqual@M@glm@@YA_NAEBM0@Z			; glm::notEqual<float>
PUBLIC	??$notEqual@N@glm@@YA_NAEBN0@Z			; glm::notEqual<double>
PUBLIC	?test_any@@YAHXZ				; test_any
PUBLIC	?test_all@@YAHXZ				; test_all
PUBLIC	?test_not@@YAHXZ				; test_not
PUBLIC	main
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?any@glm@@YA_NAEB_N@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?any@glm@@YA_NAEB_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?all@glm@@YA_NAEB_N@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?all@glm@@YA_NAEB_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?not_@glm@@YA_NAEB_N@Z DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$?not_@glm@@YA_NAEB_N@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_lessThan@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+1088
	DD	imagerel $unwind$?test_lessThan@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@H@glm@@YA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$??$lessThan@H@glm@@YA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M@glm@@YA_NAEBM0@Z DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$??$lessThan@M@glm@@YA_NAEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@N@glm@@YA_NAEBN0@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$lessThan@N@glm@@YA_NAEBN0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_lessThanEqual@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+1088
	DD	imagerel $unwind$?test_lessThanEqual@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@H@glm@@YA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$??$lessThanEqual@H@glm@@YA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@M@glm@@YA_NAEBM0@Z DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$??$lessThanEqual@M@glm@@YA_NAEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@N@glm@@YA_NAEBN0@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$lessThanEqual@N@glm@@YA_NAEBN0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_greaterThan@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+1088
	DD	imagerel $unwind$?test_greaterThan@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThan@H@glm@@YA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$??$greaterThan@H@glm@@YA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThan@M@glm@@YA_NAEBM0@Z DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$??$greaterThan@M@glm@@YA_NAEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThan@N@glm@@YA_NAEBN0@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$greaterThan@N@glm@@YA_NAEBN0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_greaterThanEqual@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+1088
	DD	imagerel $unwind$?test_greaterThanEqual@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@H@glm@@YA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$??$greaterThanEqual@H@glm@@YA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@M@glm@@YA_NAEBM0@Z DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$??$greaterThanEqual@M@glm@@YA_NAEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@N@glm@@YA_NAEBN0@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$greaterThanEqual@N@glm@@YA_NAEBN0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_equal@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+1088
	DD	imagerel $unwind$?test_equal@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H@glm@@YA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$??$equal@H@glm@@YA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M@glm@@YA_NAEBM0@Z DD imagerel $LN5
	DD	imagerel $LN5+62
	DD	imagerel $unwind$??$equal@M@glm@@YA_NAEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@N@glm@@YA_NAEBN0@Z DD imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$??$equal@N@glm@@YA_NAEBN0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_notEqual@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+1088
	DD	imagerel $unwind$?test_notEqual@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$notEqual@H@glm@@YA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$??$notEqual@H@glm@@YA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$notEqual@M@glm@@YA_NAEBM0@Z DD imagerel $LN6
	DD	imagerel $LN6+62
	DD	imagerel $unwind$??$notEqual@M@glm@@YA_NAEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$notEqual@N@glm@@YA_NAEBN0@Z DD imagerel $LN6
	DD	imagerel $LN6+63
	DD	imagerel $unwind$??$notEqual@N@glm@@YA_NAEBN0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_any@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+136
	DD	imagerel $unwind$?test_any@@YAHXZ
$pdata$?test_all@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+136
	DD	imagerel $unwind$?test_all@@YAHXZ
$pdata$?test_not@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+136
	DD	imagerel $unwind$?test_not@@YAHXZ
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+177
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$notEqual@N@glm@@YA_NAEBN0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$notEqual@M@glm@@YA_NAEBM0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$notEqual@H@glm@@YA_NAEBH0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@N@glm@@YA_NAEBN0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M@glm@@YA_NAEBM0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H@glm@@YA_NAEBH0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@N@glm@@YA_NAEBN0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@M@glm@@YA_NAEBM0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@H@glm@@YA_NAEBH0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThan@N@glm@@YA_NAEBN0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThan@M@glm@@YA_NAEBM0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThan@H@glm@@YA_NAEBH0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@N@glm@@YA_NAEBN0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@M@glm@@YA_NAEBM0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@H@glm@@YA_NAEBH0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@N@glm@@YA_NAEBN0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M@glm@@YA_NAEBM0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@H@glm@@YA_NAEBH0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
xdata	SEGMENT
$unwind$?test_lessThan@@YAHXZ DD 030901H
	DD	01c0109H
	DD	07002H
$unwind$?test_lessThanEqual@@YAHXZ DD 030901H
	DD	01c0109H
	DD	07002H
$unwind$?test_greaterThan@@YAHXZ DD 030901H
	DD	01c0109H
	DD	07002H
$unwind$?test_greaterThanEqual@@YAHXZ DD 030901H
	DD	01c0109H
	DD	07002H
$unwind$?test_equal@@YAHXZ DD 030901H
	DD	01c0109H
	DD	07002H
$unwind$?test_notEqual@@YAHXZ DD 030901H
	DD	01c0109H
	DD	07002H
$unwind$?test_any@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?test_all@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?test_not@@YAHXZ DD 020601H
	DD	070025206H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?not_@glm@@YA_NAEB_N@Z DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?all@glm@@YA_NAEB_N@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?any@glm@@YA_NAEB_N@Z DD 010601H
	DD	07006H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_scalar_relational.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 156  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 157  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 158  : 
; 159  : 	Error += test_lessThan();

	call	?test_lessThan@@YAHXZ			; test_lessThan
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 160  : 	Error += test_lessThanEqual();

	call	?test_lessThanEqual@@YAHXZ		; test_lessThanEqual
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 161  : 	Error += test_greaterThan();

	call	?test_greaterThan@@YAHXZ		; test_greaterThan
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 162  : 	Error += test_greaterThanEqual();

	call	?test_greaterThanEqual@@YAHXZ		; test_greaterThanEqual
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 163  : 	Error += test_equal();

	call	?test_equal@@YAHXZ			; test_equal
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 164  : 	Error += test_notEqual();

	call	?test_notEqual@@YAHXZ			; test_notEqual
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 165  : 	Error += test_any();

	call	?test_any@@YAHXZ			; test_any
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 166  : 	Error += test_all();

	call	?test_all@@YAHXZ			; test_all
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 167  : 	Error += test_not();

	call	?test_not@@YAHXZ			; test_not
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 168  : 
; 169  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 170  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_scalar_relational.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 37
tv68 = 40
tv74 = 44
?test_not@@YAHXZ PROC					; test_not

; 146  : {

$LN7:
	push	rdi
	sub	rsp, 48					; 00000030H

; 147  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 148  : 
; 149  : 	Error += glm::not_(true) ? 1 : 0;

	mov	BYTE PTR $T1[rsp], 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	?not_@glm@@YA_NAEB_N@Z			; glm::not_
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_not
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@test_not
$LN3@test_not:
	mov	DWORD PTR tv68[rsp], 0
$LN4@test_not:
	mov	eax, DWORD PTR tv68[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 150  : 	Error += glm::not_(false) ? 0 : 1;

	mov	BYTE PTR $T2[rsp], 0
	lea	rcx, QWORD PTR $T2[rsp]
	call	?not_@glm@@YA_NAEB_N@Z			; glm::not_
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_not
	mov	DWORD PTR tv74[rsp], 0
	jmp	SHORT $LN6@test_not
$LN5@test_not:
	mov	DWORD PTR tv74[rsp], 1
$LN6@test_not:
	mov	eax, DWORD PTR tv74[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 151  : 
; 152  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 153  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test_not@@YAHXZ ENDP					; test_not
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_scalar_relational.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 37
tv68 = 40
tv74 = 44
?test_all@@YAHXZ PROC					; test_all

; 136  : {

$LN7:
	push	rdi
	sub	rsp, 48					; 00000030H

; 137  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 138  : 
; 139  : 	Error += glm::all(true) ? 0 : 1;

	mov	BYTE PTR $T1[rsp], 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	?all@glm@@YA_NAEB_N@Z			; glm::all
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_all
	mov	DWORD PTR tv68[rsp], 0
	jmp	SHORT $LN4@test_all
$LN3@test_all:
	mov	DWORD PTR tv68[rsp], 1
$LN4@test_all:
	mov	eax, DWORD PTR tv68[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 140  : 	Error += glm::all(false) ? 1 : 0;

	mov	BYTE PTR $T2[rsp], 0
	lea	rcx, QWORD PTR $T2[rsp]
	call	?all@glm@@YA_NAEB_N@Z			; glm::all
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN6@test_all
$LN5@test_all:
	mov	DWORD PTR tv74[rsp], 0
$LN6@test_all:
	mov	eax, DWORD PTR tv74[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 141  : 
; 142  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 143  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test_all@@YAHXZ ENDP					; test_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_scalar_relational.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 37
tv68 = 40
tv74 = 44
?test_any@@YAHXZ PROC					; test_any

; 126  : {

$LN7:
	push	rdi
	sub	rsp, 48					; 00000030H

; 127  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 128  : 
; 129  : 	Error += glm::any(true) ? 0 : 1;

	mov	BYTE PTR $T1[rsp], 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	?any@glm@@YA_NAEB_N@Z			; glm::any
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_any
	mov	DWORD PTR tv68[rsp], 0
	jmp	SHORT $LN4@test_any
$LN3@test_any:
	mov	DWORD PTR tv68[rsp], 1
$LN4@test_any:
	mov	eax, DWORD PTR tv68[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 130  : 	Error += glm::any(false) ? 1 : 0;

	mov	BYTE PTR $T2[rsp], 0
	lea	rcx, QWORD PTR $T2[rsp]
	call	?any@glm@@YA_NAEB_N@Z			; glm::any
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_any
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN6@test_any
$LN5@test_any:
	mov	DWORD PTR tv74[rsp], 0
$LN6@test_any:
	mov	eax, DWORD PTR tv74[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 131  : 
; 132  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 133  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test_any@@YAHXZ ENDP					; test_any
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$notEqual@N@glm@@YA_NAEBN0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$notEqual@N@glm@@YA_NAEBN0@Z PROC			; glm::notEqual<double>, COMDAT

; 62   : 	{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 63   : 		return x != y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	ucomisd	xmm0, QWORD PTR [rcx]
	jp	SHORT $LN5@notEqual
	je	SHORT $LN3@notEqual
$LN5@notEqual:
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@notEqual
$LN3@notEqual:
	mov	DWORD PTR tv65[rsp], 0
$LN4@notEqual:
	movzx	eax, BYTE PTR tv65[rsp]

; 64   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$notEqual@N@glm@@YA_NAEBN0@Z ENDP			; glm::notEqual<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$notEqual@M@glm@@YA_NAEBM0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$notEqual@M@glm@@YA_NAEBM0@Z PROC			; glm::notEqual<float>, COMDAT

; 62   : 	{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 63   : 		return x != y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN5@notEqual
	je	SHORT $LN3@notEqual
$LN5@notEqual:
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@notEqual
$LN3@notEqual:
	mov	DWORD PTR tv65[rsp], 0
$LN4@notEqual:
	movzx	eax, BYTE PTR tv65[rsp]

; 64   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$notEqual@M@glm@@YA_NAEBM0@Z ENDP			; glm::notEqual<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$notEqual@H@glm@@YA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$notEqual@H@glm@@YA_NAEBH0@Z PROC			; glm::notEqual<int>, COMDAT

; 62   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 63   : 		return x != y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN3@notEqual
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@notEqual
$LN3@notEqual:
	mov	DWORD PTR tv65[rsp], 0
$LN4@notEqual:
	movzx	eax, BYTE PTR tv65[rsp]

; 64   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$notEqual@H@glm@@YA_NAEBH0@Z ENDP			; glm::notEqual<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_scalar_relational.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 40
$T3 = 44
$T4 = 48
$T5 = 52
$T6 = 56
$T7 = 60
$T8 = 64
$T9 = 68
$T10 = 72
$T11 = 76
$T12 = 80
$T13 = 84
$T14 = 88
$T15 = 92
$T16 = 96
$T17 = 104
$T18 = 112
$T19 = 120
$T20 = 128
$T21 = 136
$T22 = 144
$T23 = 152
$T24 = 160
tv69 = 168
tv76 = 172
tv83 = 176
tv90 = 180
tv129 = 184
tv136 = 188
tv143 = 192
tv150 = 196
tv157 = 200
tv164 = 204
tv171 = 208
tv178 = 212
?test_notEqual@@YAHXZ PROC				; test_notEqual

; 106  : {

$LN27:
	push	rdi
	sub	rsp, 224				; 000000e0H

; 107  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 108  : 
; 109  : 	Error += glm::notEqual(0, 1) ? 0 : 1;

	mov	DWORD PTR $T1[rsp], 1
	mov	DWORD PTR $T2[rsp], 0
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$notEqual@H@glm@@YA_NAEBH0@Z		; glm::notEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_notEq
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@test_notEq
$LN3@test_notEq:
	mov	DWORD PTR tv69[rsp], 1
$LN4@test_notEq:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 110  : 	Error += glm::notEqual(1, 0) ? 0 : 1;

	mov	DWORD PTR $T3[rsp], 0
	mov	DWORD PTR $T4[rsp], 1
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$notEqual@H@glm@@YA_NAEBH0@Z		; glm::notEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_notEq
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN6@test_notEq
$LN5@test_notEq:
	mov	DWORD PTR tv76[rsp], 1
$LN6@test_notEq:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 111  : 	Error += glm::notEqual(0, 0) ? 1 : 0;

	mov	DWORD PTR $T5[rsp], 0
	mov	DWORD PTR $T6[rsp], 0
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$notEqual@H@glm@@YA_NAEBH0@Z		; glm::notEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_notEq
	mov	DWORD PTR tv83[rsp], 1
	jmp	SHORT $LN8@test_notEq
$LN7@test_notEq:
	mov	DWORD PTR tv83[rsp], 0
$LN8@test_notEq:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 112  : 	Error += glm::notEqual(1, 1) ? 1 : 0;

	mov	DWORD PTR $T7[rsp], 1
	mov	DWORD PTR $T8[rsp], 1
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$notEqual@H@glm@@YA_NAEBH0@Z		; glm::notEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_notEq
	mov	DWORD PTR tv90[rsp], 1
	jmp	SHORT $LN10@test_notEq
$LN9@test_notEq:
	mov	DWORD PTR tv90[rsp], 0
$LN10@test_notEq:
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 113  : 	Error += glm::notEqual(0.0f, 1.0f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T9[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T10[rsp], xmm0
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$notEqual@M@glm@@YA_NAEBM0@Z		; glm::notEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_notEq
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN12@test_notEq
$LN11@test_notEq:
	mov	DWORD PTR tv129[rsp], 1
$LN12@test_notEq:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 114  : 	Error += glm::notEqual(1.0f, 0.0f) ? 0 : 1;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T11[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T12[rsp], xmm0
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$notEqual@M@glm@@YA_NAEBM0@Z		; glm::notEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_notEq
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN14@test_notEq
$LN13@test_notEq:
	mov	DWORD PTR tv136[rsp], 1
$LN14@test_notEq:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 115  : 	Error += glm::notEqual(0.0f, 0.0f) ? 1 : 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T13[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T14[rsp], xmm0
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$notEqual@M@glm@@YA_NAEBM0@Z		; glm::notEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_notEq
	mov	DWORD PTR tv143[rsp], 1
	jmp	SHORT $LN16@test_notEq
$LN15@test_notEq:
	mov	DWORD PTR tv143[rsp], 0
$LN16@test_notEq:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 116  : 	Error += glm::notEqual(1.0f, 1.0f) ? 1 : 0;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T15[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T16[rsp], xmm0
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$notEqual@M@glm@@YA_NAEBM0@Z		; glm::notEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_notEq
	mov	DWORD PTR tv150[rsp], 1
	jmp	SHORT $LN18@test_notEq
$LN17@test_notEq:
	mov	DWORD PTR tv150[rsp], 0
$LN18@test_notEq:
	mov	eax, DWORD PTR tv150[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 117  : 	Error += glm::notEqual(0.0, 1.0) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T17[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T18[rsp], xmm0
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$notEqual@N@glm@@YA_NAEBN0@Z		; glm::notEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_notEq
	mov	DWORD PTR tv157[rsp], 0
	jmp	SHORT $LN20@test_notEq
$LN19@test_notEq:
	mov	DWORD PTR tv157[rsp], 1
$LN20@test_notEq:
	mov	eax, DWORD PTR tv157[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 118  : 	Error += glm::notEqual(1.0, 0.0) ? 0 : 1;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T19[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T20[rsp], xmm0
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$notEqual@N@glm@@YA_NAEBN0@Z		; glm::notEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test_notEq
	mov	DWORD PTR tv164[rsp], 0
	jmp	SHORT $LN22@test_notEq
$LN21@test_notEq:
	mov	DWORD PTR tv164[rsp], 1
$LN22@test_notEq:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 119  : 	Error += glm::notEqual(0.0, 0.0) ? 1 : 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T21[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T22[rsp], xmm0
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$notEqual@N@glm@@YA_NAEBN0@Z		; glm::notEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test_notEq
	mov	DWORD PTR tv171[rsp], 1
	jmp	SHORT $LN24@test_notEq
$LN23@test_notEq:
	mov	DWORD PTR tv171[rsp], 0
$LN24@test_notEq:
	mov	eax, DWORD PTR tv171[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 120  : 	Error += glm::notEqual(1.0, 1.0) ? 1 : 0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T23[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T24[rsp], xmm0
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$notEqual@N@glm@@YA_NAEBN0@Z		; glm::notEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test_notEq
	mov	DWORD PTR tv178[rsp], 1
	jmp	SHORT $LN26@test_notEq
$LN25@test_notEq:
	mov	DWORD PTR tv178[rsp], 0
$LN26@test_notEq:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 121  : 
; 122  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 123  : }

	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
?test_notEqual@@YAHXZ ENDP				; test_notEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$equal@N@glm@@YA_NAEBN0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$equal@N@glm@@YA_NAEBN0@Z PROC			; glm::equal<double>, COMDAT

; 52   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 53   : 		return x == y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	ucomisd	xmm0, QWORD PTR [rcx]
	jp	SHORT $LN3@equal
	jne	SHORT $LN3@equal
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@equal
$LN3@equal:
	mov	DWORD PTR tv65[rsp], 0
$LN4@equal:
	movzx	eax, BYTE PTR tv65[rsp]

; 54   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$equal@N@glm@@YA_NAEBN0@Z ENDP			; glm::equal<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$equal@M@glm@@YA_NAEBM0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$equal@M@glm@@YA_NAEBM0@Z PROC			; glm::equal<float>, COMDAT

; 52   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 53   : 		return x == y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@equal
	jne	SHORT $LN3@equal
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@equal
$LN3@equal:
	mov	DWORD PTR tv65[rsp], 0
$LN4@equal:
	movzx	eax, BYTE PTR tv65[rsp]

; 54   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$equal@M@glm@@YA_NAEBM0@Z ENDP			; glm::equal<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$equal@H@glm@@YA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$equal@H@glm@@YA_NAEBH0@Z PROC			; glm::equal<int>, COMDAT

; 52   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 53   : 		return x == y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@equal
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@equal
$LN3@equal:
	mov	DWORD PTR tv65[rsp], 0
$LN4@equal:
	movzx	eax, BYTE PTR tv65[rsp]

; 54   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$equal@H@glm@@YA_NAEBH0@Z ENDP			; glm::equal<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_scalar_relational.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 40
$T3 = 44
$T4 = 48
$T5 = 52
$T6 = 56
$T7 = 60
$T8 = 64
$T9 = 68
$T10 = 72
$T11 = 76
$T12 = 80
$T13 = 84
$T14 = 88
$T15 = 92
$T16 = 96
$T17 = 104
$T18 = 112
$T19 = 120
$T20 = 128
$T21 = 136
$T22 = 144
$T23 = 152
$T24 = 160
tv69 = 168
tv76 = 172
tv83 = 176
tv90 = 180
tv129 = 184
tv136 = 188
tv143 = 192
tv150 = 196
tv157 = 200
tv164 = 204
tv171 = 208
tv178 = 212
?test_equal@@YAHXZ PROC					; test_equal

; 86   : {

$LN27:
	push	rdi
	sub	rsp, 224				; 000000e0H

; 87   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 88   : 
; 89   : 	Error += glm::equal(0, 1) ? 1 : 0;

	mov	DWORD PTR $T1[rsp], 1
	mov	DWORD PTR $T2[rsp], 0
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$equal@H@glm@@YA_NAEBH0@Z		; glm::equal<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_equal
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@test_equal
$LN3@test_equal:
	mov	DWORD PTR tv69[rsp], 0
$LN4@test_equal:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 90   : 	Error += glm::equal(1, 0) ? 1 : 0;

	mov	DWORD PTR $T3[rsp], 0
	mov	DWORD PTR $T4[rsp], 1
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$equal@H@glm@@YA_NAEBH0@Z		; glm::equal<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_equal
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN6@test_equal
$LN5@test_equal:
	mov	DWORD PTR tv76[rsp], 0
$LN6@test_equal:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 91   : 	Error += glm::equal(0, 0) ? 0 : 1;

	mov	DWORD PTR $T5[rsp], 0
	mov	DWORD PTR $T6[rsp], 0
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$equal@H@glm@@YA_NAEBH0@Z		; glm::equal<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_equal
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN8@test_equal
$LN7@test_equal:
	mov	DWORD PTR tv83[rsp], 1
$LN8@test_equal:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 92   : 	Error += glm::equal(1, 1) ? 0 : 1;

	mov	DWORD PTR $T7[rsp], 1
	mov	DWORD PTR $T8[rsp], 1
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$equal@H@glm@@YA_NAEBH0@Z		; glm::equal<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_equal
	mov	DWORD PTR tv90[rsp], 0
	jmp	SHORT $LN10@test_equal
$LN9@test_equal:
	mov	DWORD PTR tv90[rsp], 1
$LN10@test_equal:
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 93   : 	Error += glm::equal(0.0f, 1.0f) ? 1 : 0;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T9[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T10[rsp], xmm0
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$equal@M@glm@@YA_NAEBM0@Z		; glm::equal<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_equal
	mov	DWORD PTR tv129[rsp], 1
	jmp	SHORT $LN12@test_equal
$LN11@test_equal:
	mov	DWORD PTR tv129[rsp], 0
$LN12@test_equal:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 94   : 	Error += glm::equal(1.0f, 0.0f) ? 1 : 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T11[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T12[rsp], xmm0
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$equal@M@glm@@YA_NAEBM0@Z		; glm::equal<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_equal
	mov	DWORD PTR tv136[rsp], 1
	jmp	SHORT $LN14@test_equal
$LN13@test_equal:
	mov	DWORD PTR tv136[rsp], 0
$LN14@test_equal:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 95   : 	Error += glm::equal(0.0f, 0.0f) ? 0 : 1;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T13[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T14[rsp], xmm0
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$equal@M@glm@@YA_NAEBM0@Z		; glm::equal<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_equal
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN16@test_equal
$LN15@test_equal:
	mov	DWORD PTR tv143[rsp], 1
$LN16@test_equal:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 96   : 	Error += glm::equal(1.0f, 1.0f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T15[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T16[rsp], xmm0
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$equal@M@glm@@YA_NAEBM0@Z		; glm::equal<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_equal
	mov	DWORD PTR tv150[rsp], 0
	jmp	SHORT $LN18@test_equal
$LN17@test_equal:
	mov	DWORD PTR tv150[rsp], 1
$LN18@test_equal:
	mov	eax, DWORD PTR tv150[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 97   : 	Error += glm::equal(0.0, 1.0) ? 1 : 0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T17[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T18[rsp], xmm0
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$equal@N@glm@@YA_NAEBN0@Z		; glm::equal<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_equal
	mov	DWORD PTR tv157[rsp], 1
	jmp	SHORT $LN20@test_equal
$LN19@test_equal:
	mov	DWORD PTR tv157[rsp], 0
$LN20@test_equal:
	mov	eax, DWORD PTR tv157[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 98   : 	Error += glm::equal(1.0, 0.0) ? 1 : 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T19[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T20[rsp], xmm0
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$equal@N@glm@@YA_NAEBN0@Z		; glm::equal<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test_equal
	mov	DWORD PTR tv164[rsp], 1
	jmp	SHORT $LN22@test_equal
$LN21@test_equal:
	mov	DWORD PTR tv164[rsp], 0
$LN22@test_equal:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 99   : 	Error += glm::equal(0.0, 0.0) ? 0 : 1;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T21[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T22[rsp], xmm0
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$equal@N@glm@@YA_NAEBN0@Z		; glm::equal<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test_equal
	mov	DWORD PTR tv171[rsp], 0
	jmp	SHORT $LN24@test_equal
$LN23@test_equal:
	mov	DWORD PTR tv171[rsp], 1
$LN24@test_equal:
	mov	eax, DWORD PTR tv171[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 100  : 	Error += glm::equal(1.0, 1.0) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T23[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T24[rsp], xmm0
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$equal@N@glm@@YA_NAEBN0@Z		; glm::equal<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test_equal
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN26@test_equal
$LN25@test_equal:
	mov	DWORD PTR tv178[rsp], 1
$LN26@test_equal:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 101  : 
; 102  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 103  : }

	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
?test_equal@@YAHXZ ENDP					; test_equal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$greaterThanEqual@N@glm@@YA_NAEBN0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$greaterThanEqual@N@glm@@YA_NAEBN0@Z PROC		; glm::greaterThanEqual<double>, COMDAT

; 42   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 43   : 		return x >= y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR [rcx]
	jb	SHORT $LN3@greaterTha
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@greaterTha
$LN3@greaterTha:
	mov	DWORD PTR tv65[rsp], 0
$LN4@greaterTha:
	movzx	eax, BYTE PTR tv65[rsp]

; 44   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$greaterThanEqual@N@glm@@YA_NAEBN0@Z ENDP		; glm::greaterThanEqual<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$greaterThanEqual@M@glm@@YA_NAEBM0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$greaterThanEqual@M@glm@@YA_NAEBM0@Z PROC		; glm::greaterThanEqual<float>, COMDAT

; 42   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 43   : 		return x >= y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jb	SHORT $LN3@greaterTha
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@greaterTha
$LN3@greaterTha:
	mov	DWORD PTR tv65[rsp], 0
$LN4@greaterTha:
	movzx	eax, BYTE PTR tv65[rsp]

; 44   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$greaterThanEqual@M@glm@@YA_NAEBM0@Z ENDP		; glm::greaterThanEqual<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$greaterThanEqual@H@glm@@YA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$greaterThanEqual@H@glm@@YA_NAEBH0@Z PROC		; glm::greaterThanEqual<int>, COMDAT

; 42   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 43   : 		return x >= y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jl	SHORT $LN3@greaterTha
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@greaterTha
$LN3@greaterTha:
	mov	DWORD PTR tv65[rsp], 0
$LN4@greaterTha:
	movzx	eax, BYTE PTR tv65[rsp]

; 44   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$greaterThanEqual@H@glm@@YA_NAEBH0@Z ENDP		; glm::greaterThanEqual<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_scalar_relational.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 40
$T3 = 44
$T4 = 48
$T5 = 52
$T6 = 56
$T7 = 60
$T8 = 64
$T9 = 68
$T10 = 72
$T11 = 76
$T12 = 80
$T13 = 84
$T14 = 88
$T15 = 92
$T16 = 96
$T17 = 104
$T18 = 112
$T19 = 120
$T20 = 128
$T21 = 136
$T22 = 144
$T23 = 152
$T24 = 160
tv69 = 168
tv76 = 172
tv83 = 176
tv90 = 180
tv129 = 184
tv136 = 188
tv143 = 192
tv150 = 196
tv157 = 200
tv164 = 204
tv171 = 208
tv178 = 212
?test_greaterThanEqual@@YAHXZ PROC			; test_greaterThanEqual

; 66   : {

$LN27:
	push	rdi
	sub	rsp, 224				; 000000e0H

; 67   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 68   : 
; 69   : 	Error += glm::greaterThanEqual(0, 1) ? 1 : 0;

	mov	DWORD PTR $T1[rsp], 1
	mov	DWORD PTR $T2[rsp], 0
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$greaterThanEqual@H@glm@@YA_NAEBH0@Z	; glm::greaterThanEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_great
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@test_great
$LN3@test_great:
	mov	DWORD PTR tv69[rsp], 0
$LN4@test_great:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 70   : 	Error += glm::greaterThanEqual(1, 0) ? 0 : 1;

	mov	DWORD PTR $T3[rsp], 0
	mov	DWORD PTR $T4[rsp], 1
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$greaterThanEqual@H@glm@@YA_NAEBH0@Z	; glm::greaterThanEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_great
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN6@test_great
$LN5@test_great:
	mov	DWORD PTR tv76[rsp], 1
$LN6@test_great:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 71   : 	Error += glm::greaterThanEqual(0, 0) ? 0 : 1;

	mov	DWORD PTR $T5[rsp], 0
	mov	DWORD PTR $T6[rsp], 0
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$greaterThanEqual@H@glm@@YA_NAEBH0@Z	; glm::greaterThanEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_great
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN8@test_great
$LN7@test_great:
	mov	DWORD PTR tv83[rsp], 1
$LN8@test_great:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 72   : 	Error += glm::greaterThanEqual(1, 1) ? 0 : 1;

	mov	DWORD PTR $T7[rsp], 1
	mov	DWORD PTR $T8[rsp], 1
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$greaterThanEqual@H@glm@@YA_NAEBH0@Z	; glm::greaterThanEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_great
	mov	DWORD PTR tv90[rsp], 0
	jmp	SHORT $LN10@test_great
$LN9@test_great:
	mov	DWORD PTR tv90[rsp], 1
$LN10@test_great:
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 73   : 	Error += glm::greaterThanEqual(0.0f, 1.0f) ? 1 : 0;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T9[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T10[rsp], xmm0
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$greaterThanEqual@M@glm@@YA_NAEBM0@Z	; glm::greaterThanEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_great
	mov	DWORD PTR tv129[rsp], 1
	jmp	SHORT $LN12@test_great
$LN11@test_great:
	mov	DWORD PTR tv129[rsp], 0
$LN12@test_great:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 74   : 	Error += glm::greaterThanEqual(1.0f, 0.0f) ? 0 : 1;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T11[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T12[rsp], xmm0
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$greaterThanEqual@M@glm@@YA_NAEBM0@Z	; glm::greaterThanEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_great
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN14@test_great
$LN13@test_great:
	mov	DWORD PTR tv136[rsp], 1
$LN14@test_great:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 75   : 	Error += glm::greaterThanEqual(0.0f, 0.0f) ? 0 : 1;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T13[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T14[rsp], xmm0
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$greaterThanEqual@M@glm@@YA_NAEBM0@Z	; glm::greaterThanEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_great
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN16@test_great
$LN15@test_great:
	mov	DWORD PTR tv143[rsp], 1
$LN16@test_great:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 76   : 	Error += glm::greaterThanEqual(1.0f, 1.0f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T15[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T16[rsp], xmm0
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$greaterThanEqual@M@glm@@YA_NAEBM0@Z	; glm::greaterThanEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_great
	mov	DWORD PTR tv150[rsp], 0
	jmp	SHORT $LN18@test_great
$LN17@test_great:
	mov	DWORD PTR tv150[rsp], 1
$LN18@test_great:
	mov	eax, DWORD PTR tv150[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 77   : 	Error += glm::greaterThanEqual(0.0, 1.0) ? 1 : 0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T17[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T18[rsp], xmm0
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$greaterThanEqual@N@glm@@YA_NAEBN0@Z	; glm::greaterThanEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_great
	mov	DWORD PTR tv157[rsp], 1
	jmp	SHORT $LN20@test_great
$LN19@test_great:
	mov	DWORD PTR tv157[rsp], 0
$LN20@test_great:
	mov	eax, DWORD PTR tv157[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 78   : 	Error += glm::greaterThanEqual(1.0, 0.0) ? 0 : 1;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T19[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T20[rsp], xmm0
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$greaterThanEqual@N@glm@@YA_NAEBN0@Z	; glm::greaterThanEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test_great
	mov	DWORD PTR tv164[rsp], 0
	jmp	SHORT $LN22@test_great
$LN21@test_great:
	mov	DWORD PTR tv164[rsp], 1
$LN22@test_great:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 79   : 	Error += glm::greaterThanEqual(0.0, 0.0) ? 0 : 1;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T21[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T22[rsp], xmm0
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$greaterThanEqual@N@glm@@YA_NAEBN0@Z	; glm::greaterThanEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test_great
	mov	DWORD PTR tv171[rsp], 0
	jmp	SHORT $LN24@test_great
$LN23@test_great:
	mov	DWORD PTR tv171[rsp], 1
$LN24@test_great:
	mov	eax, DWORD PTR tv171[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 80   : 	Error += glm::greaterThanEqual(1.0, 1.0) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T23[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T24[rsp], xmm0
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$greaterThanEqual@N@glm@@YA_NAEBN0@Z	; glm::greaterThanEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test_great
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN26@test_great
$LN25@test_great:
	mov	DWORD PTR tv178[rsp], 1
$LN26@test_great:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 81   : 
; 82   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 83   : }

	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
?test_greaterThanEqual@@YAHXZ ENDP			; test_greaterThanEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$greaterThan@N@glm@@YA_NAEBN0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$greaterThan@N@glm@@YA_NAEBN0@Z PROC			; glm::greaterThan<double>, COMDAT

; 32   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 33   : 		return x > y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR [rcx]
	jbe	SHORT $LN3@greaterTha
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@greaterTha
$LN3@greaterTha:
	mov	DWORD PTR tv65[rsp], 0
$LN4@greaterTha:
	movzx	eax, BYTE PTR tv65[rsp]

; 34   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$greaterThan@N@glm@@YA_NAEBN0@Z ENDP			; glm::greaterThan<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$greaterThan@M@glm@@YA_NAEBM0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$greaterThan@M@glm@@YA_NAEBM0@Z PROC			; glm::greaterThan<float>, COMDAT

; 32   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 33   : 		return x > y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN3@greaterTha
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@greaterTha
$LN3@greaterTha:
	mov	DWORD PTR tv65[rsp], 0
$LN4@greaterTha:
	movzx	eax, BYTE PTR tv65[rsp]

; 34   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$greaterThan@M@glm@@YA_NAEBM0@Z ENDP			; glm::greaterThan<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$greaterThan@H@glm@@YA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$greaterThan@H@glm@@YA_NAEBH0@Z PROC			; glm::greaterThan<int>, COMDAT

; 32   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 33   : 		return x > y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jle	SHORT $LN3@greaterTha
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@greaterTha
$LN3@greaterTha:
	mov	DWORD PTR tv65[rsp], 0
$LN4@greaterTha:
	movzx	eax, BYTE PTR tv65[rsp]

; 34   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$greaterThan@H@glm@@YA_NAEBH0@Z ENDP			; glm::greaterThan<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_scalar_relational.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 40
$T3 = 44
$T4 = 48
$T5 = 52
$T6 = 56
$T7 = 60
$T8 = 64
$T9 = 68
$T10 = 72
$T11 = 76
$T12 = 80
$T13 = 84
$T14 = 88
$T15 = 92
$T16 = 96
$T17 = 104
$T18 = 112
$T19 = 120
$T20 = 128
$T21 = 136
$T22 = 144
$T23 = 152
$T24 = 160
tv69 = 168
tv76 = 172
tv83 = 176
tv90 = 180
tv129 = 184
tv136 = 188
tv143 = 192
tv150 = 196
tv157 = 200
tv164 = 204
tv171 = 208
tv178 = 212
?test_greaterThan@@YAHXZ PROC				; test_greaterThan

; 46   : {

$LN27:
	push	rdi
	sub	rsp, 224				; 000000e0H

; 47   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 48   : 
; 49   : 	Error += glm::greaterThan(0, 1) ? 1 : 0;

	mov	DWORD PTR $T1[rsp], 1
	mov	DWORD PTR $T2[rsp], 0
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$greaterThan@H@glm@@YA_NAEBH0@Z	; glm::greaterThan<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_great
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@test_great
$LN3@test_great:
	mov	DWORD PTR tv69[rsp], 0
$LN4@test_great:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 50   : 	Error += glm::greaterThan(1, 0) ? 0 : 1;

	mov	DWORD PTR $T3[rsp], 0
	mov	DWORD PTR $T4[rsp], 1
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$greaterThan@H@glm@@YA_NAEBH0@Z	; glm::greaterThan<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_great
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN6@test_great
$LN5@test_great:
	mov	DWORD PTR tv76[rsp], 1
$LN6@test_great:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 51   : 	Error += glm::greaterThan(0, 0) ? 1 : 0;

	mov	DWORD PTR $T5[rsp], 0
	mov	DWORD PTR $T6[rsp], 0
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$greaterThan@H@glm@@YA_NAEBH0@Z	; glm::greaterThan<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_great
	mov	DWORD PTR tv83[rsp], 1
	jmp	SHORT $LN8@test_great
$LN7@test_great:
	mov	DWORD PTR tv83[rsp], 0
$LN8@test_great:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 52   : 	Error += glm::greaterThan(1, 1) ? 1 : 0;

	mov	DWORD PTR $T7[rsp], 1
	mov	DWORD PTR $T8[rsp], 1
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$greaterThan@H@glm@@YA_NAEBH0@Z	; glm::greaterThan<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_great
	mov	DWORD PTR tv90[rsp], 1
	jmp	SHORT $LN10@test_great
$LN9@test_great:
	mov	DWORD PTR tv90[rsp], 0
$LN10@test_great:
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 53   : 	Error += glm::greaterThan(0.0f, 1.0f) ? 1 : 0;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T9[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T10[rsp], xmm0
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$greaterThan@M@glm@@YA_NAEBM0@Z	; glm::greaterThan<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_great
	mov	DWORD PTR tv129[rsp], 1
	jmp	SHORT $LN12@test_great
$LN11@test_great:
	mov	DWORD PTR tv129[rsp], 0
$LN12@test_great:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 54   : 	Error += glm::greaterThan(1.0f, 0.0f) ? 0 : 1;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T11[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T12[rsp], xmm0
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$greaterThan@M@glm@@YA_NAEBM0@Z	; glm::greaterThan<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_great
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN14@test_great
$LN13@test_great:
	mov	DWORD PTR tv136[rsp], 1
$LN14@test_great:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 55   : 	Error += glm::greaterThan(0.0f, 0.0f) ? 1 : 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T13[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T14[rsp], xmm0
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$greaterThan@M@glm@@YA_NAEBM0@Z	; glm::greaterThan<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_great
	mov	DWORD PTR tv143[rsp], 1
	jmp	SHORT $LN16@test_great
$LN15@test_great:
	mov	DWORD PTR tv143[rsp], 0
$LN16@test_great:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 56   : 	Error += glm::greaterThan(1.0f, 1.0f) ? 1 : 0;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T15[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T16[rsp], xmm0
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$greaterThan@M@glm@@YA_NAEBM0@Z	; glm::greaterThan<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_great
	mov	DWORD PTR tv150[rsp], 1
	jmp	SHORT $LN18@test_great
$LN17@test_great:
	mov	DWORD PTR tv150[rsp], 0
$LN18@test_great:
	mov	eax, DWORD PTR tv150[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 57   : 	Error += glm::greaterThan(0.0, 1.0) ? 1 : 0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T17[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T18[rsp], xmm0
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$greaterThan@N@glm@@YA_NAEBN0@Z	; glm::greaterThan<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_great
	mov	DWORD PTR tv157[rsp], 1
	jmp	SHORT $LN20@test_great
$LN19@test_great:
	mov	DWORD PTR tv157[rsp], 0
$LN20@test_great:
	mov	eax, DWORD PTR tv157[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 58   : 	Error += glm::greaterThan(1.0, 0.0) ? 0 : 1;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T19[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T20[rsp], xmm0
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$greaterThan@N@glm@@YA_NAEBN0@Z	; glm::greaterThan<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test_great
	mov	DWORD PTR tv164[rsp], 0
	jmp	SHORT $LN22@test_great
$LN21@test_great:
	mov	DWORD PTR tv164[rsp], 1
$LN22@test_great:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 59   : 	Error += glm::greaterThan(0.0, 0.0) ? 1 : 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T21[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T22[rsp], xmm0
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$greaterThan@N@glm@@YA_NAEBN0@Z	; glm::greaterThan<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test_great
	mov	DWORD PTR tv171[rsp], 1
	jmp	SHORT $LN24@test_great
$LN23@test_great:
	mov	DWORD PTR tv171[rsp], 0
$LN24@test_great:
	mov	eax, DWORD PTR tv171[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 60   : 	Error += glm::greaterThan(1.0, 1.0) ? 1 : 0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T23[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T24[rsp], xmm0
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$greaterThan@N@glm@@YA_NAEBN0@Z	; glm::greaterThan<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test_great
	mov	DWORD PTR tv178[rsp], 1
	jmp	SHORT $LN26@test_great
$LN25@test_great:
	mov	DWORD PTR tv178[rsp], 0
$LN26@test_great:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 61   : 
; 62   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 63   : }

	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
?test_greaterThan@@YAHXZ ENDP				; test_greaterThan
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$lessThanEqual@N@glm@@YA_NAEBN0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$lessThanEqual@N@glm@@YA_NAEBN0@Z PROC		; glm::lessThanEqual<double>, COMDAT

; 22   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 23   : 		return x <= y;

	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR [rcx]
	jb	SHORT $LN3@lessThanEq
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@lessThanEq
$LN3@lessThanEq:
	mov	DWORD PTR tv65[rsp], 0
$LN4@lessThanEq:
	movzx	eax, BYTE PTR tv65[rsp]

; 24   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$lessThanEqual@N@glm@@YA_NAEBN0@Z ENDP		; glm::lessThanEqual<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$lessThanEqual@M@glm@@YA_NAEBM0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$lessThanEqual@M@glm@@YA_NAEBM0@Z PROC		; glm::lessThanEqual<float>, COMDAT

; 22   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 23   : 		return x <= y;

	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jb	SHORT $LN3@lessThanEq
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@lessThanEq
$LN3@lessThanEq:
	mov	DWORD PTR tv65[rsp], 0
$LN4@lessThanEq:
	movzx	eax, BYTE PTR tv65[rsp]

; 24   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$lessThanEqual@M@glm@@YA_NAEBM0@Z ENDP		; glm::lessThanEqual<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$lessThanEqual@H@glm@@YA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$lessThanEqual@H@glm@@YA_NAEBH0@Z PROC		; glm::lessThanEqual<int>, COMDAT

; 22   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 23   : 		return x <= y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jg	SHORT $LN3@lessThanEq
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@lessThanEq
$LN3@lessThanEq:
	mov	DWORD PTR tv65[rsp], 0
$LN4@lessThanEq:
	movzx	eax, BYTE PTR tv65[rsp]

; 24   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$lessThanEqual@H@glm@@YA_NAEBH0@Z ENDP		; glm::lessThanEqual<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_scalar_relational.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 40
$T3 = 44
$T4 = 48
$T5 = 52
$T6 = 56
$T7 = 60
$T8 = 64
$T9 = 68
$T10 = 72
$T11 = 76
$T12 = 80
$T13 = 84
$T14 = 88
$T15 = 92
$T16 = 96
$T17 = 104
$T18 = 112
$T19 = 120
$T20 = 128
$T21 = 136
$T22 = 144
$T23 = 152
$T24 = 160
tv69 = 168
tv76 = 172
tv83 = 176
tv90 = 180
tv129 = 184
tv136 = 188
tv143 = 192
tv150 = 196
tv157 = 200
tv164 = 204
tv171 = 208
tv178 = 212
?test_lessThanEqual@@YAHXZ PROC				; test_lessThanEqual

; 26   : {

$LN27:
	push	rdi
	sub	rsp, 224				; 000000e0H

; 27   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 28   : 
; 29   : 	Error += glm::lessThanEqual(0, 1) ? 0 : 1;

	mov	DWORD PTR $T1[rsp], 1
	mov	DWORD PTR $T2[rsp], 0
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$lessThanEqual@H@glm@@YA_NAEBH0@Z	; glm::lessThanEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_lessT
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@test_lessT
$LN3@test_lessT:
	mov	DWORD PTR tv69[rsp], 1
$LN4@test_lessT:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 30   : 	Error += glm::lessThanEqual(1, 0) ? 1 : 0;

	mov	DWORD PTR $T3[rsp], 0
	mov	DWORD PTR $T4[rsp], 1
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$lessThanEqual@H@glm@@YA_NAEBH0@Z	; glm::lessThanEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_lessT
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN6@test_lessT
$LN5@test_lessT:
	mov	DWORD PTR tv76[rsp], 0
$LN6@test_lessT:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 31   : 	Error += glm::lessThanEqual(0, 0) ? 0 : 1;

	mov	DWORD PTR $T5[rsp], 0
	mov	DWORD PTR $T6[rsp], 0
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$lessThanEqual@H@glm@@YA_NAEBH0@Z	; glm::lessThanEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_lessT
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN8@test_lessT
$LN7@test_lessT:
	mov	DWORD PTR tv83[rsp], 1
$LN8@test_lessT:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 32   : 	Error += glm::lessThanEqual(1, 1) ? 0 : 1;

	mov	DWORD PTR $T7[rsp], 1
	mov	DWORD PTR $T8[rsp], 1
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$lessThanEqual@H@glm@@YA_NAEBH0@Z	; glm::lessThanEqual<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_lessT
	mov	DWORD PTR tv90[rsp], 0
	jmp	SHORT $LN10@test_lessT
$LN9@test_lessT:
	mov	DWORD PTR tv90[rsp], 1
$LN10@test_lessT:
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 33   : 	Error += glm::lessThanEqual(0.0f, 1.0f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T9[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T10[rsp], xmm0
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$lessThanEqual@M@glm@@YA_NAEBM0@Z	; glm::lessThanEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_lessT
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN12@test_lessT
$LN11@test_lessT:
	mov	DWORD PTR tv129[rsp], 1
$LN12@test_lessT:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 34   : 	Error += glm::lessThanEqual(1.0f, 0.0f) ? 1 : 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T11[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T12[rsp], xmm0
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$lessThanEqual@M@glm@@YA_NAEBM0@Z	; glm::lessThanEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_lessT
	mov	DWORD PTR tv136[rsp], 1
	jmp	SHORT $LN14@test_lessT
$LN13@test_lessT:
	mov	DWORD PTR tv136[rsp], 0
$LN14@test_lessT:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 35   : 	Error += glm::lessThanEqual(0.0f, 0.0f) ? 0 : 1;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T13[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T14[rsp], xmm0
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$lessThanEqual@M@glm@@YA_NAEBM0@Z	; glm::lessThanEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_lessT
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN16@test_lessT
$LN15@test_lessT:
	mov	DWORD PTR tv143[rsp], 1
$LN16@test_lessT:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 36   : 	Error += glm::lessThanEqual(1.0f, 1.0f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T15[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T16[rsp], xmm0
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$lessThanEqual@M@glm@@YA_NAEBM0@Z	; glm::lessThanEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_lessT
	mov	DWORD PTR tv150[rsp], 0
	jmp	SHORT $LN18@test_lessT
$LN17@test_lessT:
	mov	DWORD PTR tv150[rsp], 1
$LN18@test_lessT:
	mov	eax, DWORD PTR tv150[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 37   : 	Error += glm::lessThanEqual(0.0, 1.0) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T17[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T18[rsp], xmm0
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$lessThanEqual@N@glm@@YA_NAEBN0@Z	; glm::lessThanEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_lessT
	mov	DWORD PTR tv157[rsp], 0
	jmp	SHORT $LN20@test_lessT
$LN19@test_lessT:
	mov	DWORD PTR tv157[rsp], 1
$LN20@test_lessT:
	mov	eax, DWORD PTR tv157[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 38   : 	Error += glm::lessThanEqual(1.0, 0.0) ? 1 : 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T19[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T20[rsp], xmm0
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$lessThanEqual@N@glm@@YA_NAEBN0@Z	; glm::lessThanEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test_lessT
	mov	DWORD PTR tv164[rsp], 1
	jmp	SHORT $LN22@test_lessT
$LN21@test_lessT:
	mov	DWORD PTR tv164[rsp], 0
$LN22@test_lessT:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 39   : 	Error += glm::lessThanEqual(0.0, 0.0) ? 0 : 1;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T21[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T22[rsp], xmm0
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$lessThanEqual@N@glm@@YA_NAEBN0@Z	; glm::lessThanEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test_lessT
	mov	DWORD PTR tv171[rsp], 0
	jmp	SHORT $LN24@test_lessT
$LN23@test_lessT:
	mov	DWORD PTR tv171[rsp], 1
$LN24@test_lessT:
	mov	eax, DWORD PTR tv171[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 40   : 	Error += glm::lessThanEqual(1.0, 1.0) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T23[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T24[rsp], xmm0
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$lessThanEqual@N@glm@@YA_NAEBN0@Z	; glm::lessThanEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test_lessT
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN26@test_lessT
$LN25@test_lessT:
	mov	DWORD PTR tv178[rsp], 1
$LN26@test_lessT:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 41   : 
; 42   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 43   : }

	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
?test_lessThanEqual@@YAHXZ ENDP				; test_lessThanEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$lessThan@N@glm@@YA_NAEBN0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$lessThan@N@glm@@YA_NAEBN0@Z PROC			; glm::lessThan<double>, COMDAT

; 12   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 13   : 		return x < y;

	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR [rcx]
	jbe	SHORT $LN3@lessThan
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@lessThan
$LN3@lessThan:
	mov	DWORD PTR tv65[rsp], 0
$LN4@lessThan:
	movzx	eax, BYTE PTR tv65[rsp]

; 14   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$lessThan@N@glm@@YA_NAEBN0@Z ENDP			; glm::lessThan<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$lessThan@M@glm@@YA_NAEBM0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$lessThan@M@glm@@YA_NAEBM0@Z PROC			; glm::lessThan<float>, COMDAT

; 12   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 13   : 		return x < y;

	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN3@lessThan
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@lessThan
$LN3@lessThan:
	mov	DWORD PTR tv65[rsp], 0
$LN4@lessThan:
	movzx	eax, BYTE PTR tv65[rsp]

; 14   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$lessThan@M@glm@@YA_NAEBM0@Z ENDP			; glm::lessThan<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ??$lessThan@H@glm@@YA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$lessThan@H@glm@@YA_NAEBH0@Z PROC			; glm::lessThan<int>, COMDAT

; 12   : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 13   : 		return x < y;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jge	SHORT $LN3@lessThan
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@lessThan
$LN3@lessThan:
	mov	DWORD PTR tv65[rsp], 0
$LN4@lessThan:
	movzx	eax, BYTE PTR tv65[rsp]

; 14   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$lessThan@H@glm@@YA_NAEBH0@Z ENDP			; glm::lessThan<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_scalar_relational.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 40
$T3 = 44
$T4 = 48
$T5 = 52
$T6 = 56
$T7 = 60
$T8 = 64
$T9 = 68
$T10 = 72
$T11 = 76
$T12 = 80
$T13 = 84
$T14 = 88
$T15 = 92
$T16 = 96
$T17 = 104
$T18 = 112
$T19 = 120
$T20 = 128
$T21 = 136
$T22 = 144
$T23 = 152
$T24 = 160
tv69 = 168
tv76 = 172
tv83 = 176
tv90 = 180
tv129 = 184
tv136 = 188
tv143 = 192
tv150 = 196
tv157 = 200
tv164 = 204
tv171 = 208
tv178 = 212
?test_lessThan@@YAHXZ PROC				; test_lessThan

; 6    : {

$LN27:
	push	rdi
	sub	rsp, 224				; 000000e0H

; 7    : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 8    : 
; 9    : 	Error += glm::lessThan(0, 1) ? 0 : 1;

	mov	DWORD PTR $T1[rsp], 1
	mov	DWORD PTR $T2[rsp], 0
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$lessThan@H@glm@@YA_NAEBH0@Z		; glm::lessThan<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_lessT
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@test_lessT
$LN3@test_lessT:
	mov	DWORD PTR tv69[rsp], 1
$LN4@test_lessT:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 10   : 	Error += glm::lessThan(1, 0) ? 1 : 0;

	mov	DWORD PTR $T3[rsp], 0
	mov	DWORD PTR $T4[rsp], 1
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$lessThan@H@glm@@YA_NAEBH0@Z		; glm::lessThan<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_lessT
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN6@test_lessT
$LN5@test_lessT:
	mov	DWORD PTR tv76[rsp], 0
$LN6@test_lessT:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 11   : 	Error += glm::lessThan(0, 0) ? 1 : 0;

	mov	DWORD PTR $T5[rsp], 0
	mov	DWORD PTR $T6[rsp], 0
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$lessThan@H@glm@@YA_NAEBH0@Z		; glm::lessThan<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_lessT
	mov	DWORD PTR tv83[rsp], 1
	jmp	SHORT $LN8@test_lessT
$LN7@test_lessT:
	mov	DWORD PTR tv83[rsp], 0
$LN8@test_lessT:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 12   : 	Error += glm::lessThan(1, 1) ? 1 : 0;

	mov	DWORD PTR $T7[rsp], 1
	mov	DWORD PTR $T8[rsp], 1
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$lessThan@H@glm@@YA_NAEBH0@Z		; glm::lessThan<int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_lessT
	mov	DWORD PTR tv90[rsp], 1
	jmp	SHORT $LN10@test_lessT
$LN9@test_lessT:
	mov	DWORD PTR tv90[rsp], 0
$LN10@test_lessT:
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 13   : 	Error += glm::lessThan(0.0f, 1.0f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T9[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T10[rsp], xmm0
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$lessThan@M@glm@@YA_NAEBM0@Z		; glm::lessThan<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_lessT
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN12@test_lessT
$LN11@test_lessT:
	mov	DWORD PTR tv129[rsp], 1
$LN12@test_lessT:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 14   : 	Error += glm::lessThan(1.0f, 0.0f) ? 1 : 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T11[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T12[rsp], xmm0
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$lessThan@M@glm@@YA_NAEBM0@Z		; glm::lessThan<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_lessT
	mov	DWORD PTR tv136[rsp], 1
	jmp	SHORT $LN14@test_lessT
$LN13@test_lessT:
	mov	DWORD PTR tv136[rsp], 0
$LN14@test_lessT:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 15   : 	Error += glm::lessThan(0.0f, 0.0f) ? 1 : 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T13[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T14[rsp], xmm0
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$lessThan@M@glm@@YA_NAEBM0@Z		; glm::lessThan<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_lessT
	mov	DWORD PTR tv143[rsp], 1
	jmp	SHORT $LN16@test_lessT
$LN15@test_lessT:
	mov	DWORD PTR tv143[rsp], 0
$LN16@test_lessT:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 16   : 	Error += glm::lessThan(1.0f, 1.0f) ? 1 : 0;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T15[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T16[rsp], xmm0
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$lessThan@M@glm@@YA_NAEBM0@Z		; glm::lessThan<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_lessT
	mov	DWORD PTR tv150[rsp], 1
	jmp	SHORT $LN18@test_lessT
$LN17@test_lessT:
	mov	DWORD PTR tv150[rsp], 0
$LN18@test_lessT:
	mov	eax, DWORD PTR tv150[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 17   : 	Error += glm::lessThan(0.0, 1.0) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T17[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T18[rsp], xmm0
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$lessThan@N@glm@@YA_NAEBN0@Z		; glm::lessThan<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_lessT
	mov	DWORD PTR tv157[rsp], 0
	jmp	SHORT $LN20@test_lessT
$LN19@test_lessT:
	mov	DWORD PTR tv157[rsp], 1
$LN20@test_lessT:
	mov	eax, DWORD PTR tv157[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 18   : 	Error += glm::lessThan(1.0, 0.0) ? 1 : 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T19[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T20[rsp], xmm0
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$lessThan@N@glm@@YA_NAEBN0@Z		; glm::lessThan<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test_lessT
	mov	DWORD PTR tv164[rsp], 1
	jmp	SHORT $LN22@test_lessT
$LN21@test_lessT:
	mov	DWORD PTR tv164[rsp], 0
$LN22@test_lessT:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 19   : 	Error += glm::lessThan(0.0, 0.0) ? 1 : 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR $T21[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR $T22[rsp], xmm0
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$lessThan@N@glm@@YA_NAEBN0@Z		; glm::lessThan<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test_lessT
	mov	DWORD PTR tv171[rsp], 1
	jmp	SHORT $LN24@test_lessT
$LN23@test_lessT:
	mov	DWORD PTR tv171[rsp], 0
$LN24@test_lessT:
	mov	eax, DWORD PTR tv171[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 20   : 	Error += glm::lessThan(1.0, 1.0) ? 1 : 0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T23[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T24[rsp], xmm0
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$lessThan@N@glm@@YA_NAEBN0@Z		; glm::lessThan<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test_lessT
	mov	DWORD PTR tv178[rsp], 1
	jmp	SHORT $LN26@test_lessT
$LN25@test_lessT:
	mov	DWORD PTR tv178[rsp], 0
$LN26@test_lessT:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 21   : 
; 22   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 23   : }

	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
?test_lessThan@@YAHXZ ENDP				; test_lessThan
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ?not_@glm@@YA_NAEB_N@Z
_TEXT	SEGMENT
tv66 = 0
x$ = 32
?not_@glm@@YA_NAEB_N@Z PROC				; glm::not_, COMDAT

; 86   : 	{

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 87   : 		return !x;

	mov	rax, QWORD PTR x$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN3@not_
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@not_
$LN3@not_:
	mov	DWORD PTR tv66[rsp], 0
$LN4@not_:
	movzx	eax, BYTE PTR tv66[rsp]

; 88   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?not_@glm@@YA_NAEB_N@Z ENDP				; glm::not_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ?all@glm@@YA_NAEB_N@Z
_TEXT	SEGMENT
x$ = 16
?all@glm@@YA_NAEB_N@Z PROC				; glm::all, COMDAT

; 78   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 79   : 		return x;

	mov	rax, QWORD PTR x$[rsp]
	movzx	eax, BYTE PTR [rax]

; 80   : 	}

	pop	rdi
	ret	0
?all@glm@@YA_NAEB_N@Z ENDP				; glm::all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_relational.inl
;	COMDAT ?any@glm@@YA_NAEB_N@Z
_TEXT	SEGMENT
x$ = 16
?any@glm@@YA_NAEB_N@Z PROC				; glm::any, COMDAT

; 70   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 71   : 		return x;

	mov	rax, QWORD PTR x$[rsp]
	movzx	eax, BYTE PTR [rax]

; 72   : 	}

	pop	rdi
	ret	0
?any@glm@@YA_NAEB_N@Z ENDP				; glm::any
_TEXT	ENDS
END
