; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG68454 DB	'invalid argument', 00H
	ORG $+3
$SG68455 DB	'%s', 00H
	ORG $+1
$SG68459 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG68456 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+2
$SG68458 DB	00H, 00H
	ORG $+2
$SG62133 DB	'true', 00H
	ORG $+3
$SG68457 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG62135 DB	'false', 00H
	ORG $+2
$SG64570 DB	'%s', 0aH, 00H
$SG64571 DB	'%s', 0aH, 00H
$SG64572 DB	'%s', 0aH, 00H
$SG64573 DB	0aH, 'RESIDUAL', 0aH, 00H
	ORG $+1
$SG64574 DB	'%s', 0aH, 00H
$SG64575 DB	'%s', 0aH, 00H
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vsprintf_s_l
PUBLIC	vsprintf_s
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::move
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z	; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ ; glm::detail::format
PUBLIC	?value@?$prefix@M@detail@glm@@SAPEBDXZ		; glm::detail::prefix<float>::value
PUBLIC	?test@test_eulerAngleX@@YAHXZ			; test_eulerAngleX::test
PUBLIC	??$pi@M@glm@@YAMXZ				; glm::pi<float>
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ			; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleX<float>
PUBLIC	??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXY<float>
PUBLIC	??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYX<float>
PUBLIC	??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXZ<float>
PUBLIC	??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZX<float>
PUBLIC	??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::eulerAngleYXZ<float>
PUBLIC	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	?test@test_eulerAngleY@@YAHXZ			; test_eulerAngleY::test
PUBLIC	??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleY<float>
PUBLIC	??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYZ<float>
PUBLIC	??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZY<float>
PUBLIC	?test@test_eulerAngleZ@@YAHXZ			; test_eulerAngleZ::test
PUBLIC	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
PUBLIC	?test@test_eulerAngleXY@@YAHXZ			; test_eulerAngleXY::test
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
PUBLIC	?test@test_eulerAngleYX@@YAHXZ			; test_eulerAngleYX::test
PUBLIC	?test@test_eulerAngleXZ@@YAHXZ			; test_eulerAngleXZ::test
PUBLIC	?test@test_eulerAngleZX@@YAHXZ			; test_eulerAngleZX::test
PUBLIC	?test@test_eulerAngleYZ@@YAHXZ			; test_eulerAngleYZ::test
PUBLIC	?test@test_eulerAngleZY@@YAHXZ			; test_eulerAngleZY::test
PUBLIC	?test@test_eulerAngleYXZ@@YAHXZ			; test_eulerAngleYXZ::test
PUBLIC	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
PUBLIC	??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::to_string<glm::tmat3x3,float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
PUBLIC	main
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Convert_size@_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64>
PUBLIC	??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	??$max@_K@std@@YAAEB_KAEB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z	; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?0MHMMMMMMMMMMMMMM@?$tmat4x4@M$0A@@glm@@QEAA@AEBMAEBH00000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
PUBLIC	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
PUBLIC	?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z ; glm::detail::compute_to_string<glm::tmat3x3,float,0>::call
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z	; std::addressof<char *>
PUBLIC	??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z	; std::_Voidify_iter<char * *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?value@?$literal@M$00@detail@glm@@SAPEBDXZ	; glm::detail::literal<float,1>::value
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$00@std@@YA_K_K@Z		; std::_Get_size_of_n<1>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z	; std::forward<char * const &>
PUBLIC	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
PUBLIC	??$inversesqrt@M@glm@@YAMM@Z			; glm::inversesqrt<float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_0DD@BMLECCBG@?$CFsmat3x3?$CI?$CI?$CFs?0?5?$CFs?0?5?$CFs?$CJ?0?5?$CI?$CFs?0?5?$CFs?0@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3727c5ac
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f051eb8
PUBLIC	__real@3f490fdb
PUBLIC	__real@3f800000
PUBLIC	__real@3f85e354
PUBLIC	__real@3fc90fdb
PUBLIC	__real@40490fdb
PUBLIC	__real@bf48f5c3
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp_cosf:PROC
EXTRN	__imp_sinf:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsprintf_s:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	strlen:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$_vsprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vsprintf_s DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$vsprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?cos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sin@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sin@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen_string@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlen_string@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@D@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@D@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD imagerel $LN13
	DD	imagerel $LN13+176
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+15
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+222
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+178
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD imagerel $LN5
	DD	imagerel $LN5+191
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+189
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ DD imagerel $LN6
	DD	imagerel $LN6+296
	DD	imagerel $unwind$?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?value@?$prefix@M@detail@glm@@SAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$?value@?$prefix@M@detail@glm@@SAPEBDXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test@test_eulerAngleX@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+2495
	DD	imagerel $unwind$?test@test_eulerAngleX@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pi@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$??$pi@M@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+297
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+331
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+455
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+224
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+2694
	DD	imagerel $unwind$??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+491
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+524
	DD	imagerel $unwind$??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD imagerel $LN3
	DD	imagerel $LN3+650
	DD	imagerel $unwind$??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD imagerel $LN3
	DD	imagerel $LN3+660
	DD	imagerel $unwind$??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z DD imagerel $LN3
	DD	imagerel $LN3+1185
	DD	imagerel $unwind$??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@test_eulerAngleY@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+2495
	DD	imagerel $unwind$?test@test_eulerAngleY@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+524
	DD	imagerel $unwind$??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@test_eulerAngleZ@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+2495
	DD	imagerel $unwind$?test@test_eulerAngleZ@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+524
	DD	imagerel $unwind$??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@test_eulerAngleXY@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+775
	DD	imagerel $unwind$?test@test_eulerAngleXY@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+1720
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@test_eulerAngleYX@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+775
	DD	imagerel $unwind$?test@test_eulerAngleYX@@YAHXZ
$pdata$?test@test_eulerAngleXZ@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+775
	DD	imagerel $unwind$?test@test_eulerAngleXZ@@YAHXZ
$pdata$?test@test_eulerAngleZX@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+775
	DD	imagerel $unwind$?test@test_eulerAngleZX@@YAHXZ
$pdata$?test@test_eulerAngleYZ@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+802
	DD	imagerel $unwind$?test@test_eulerAngleYZ@@YAHXZ
$pdata$?test@test_eulerAngleZY@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+802
	DD	imagerel $unwind$?test@test_eulerAngleZY@@YAHXZ
$pdata$?test@test_eulerAngleYXZ@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+1040
	DD	imagerel $unwind$?test@test_eulerAngleYXZ@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+369
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+194
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Convert_size@_K@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Convert_size@_K@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+332
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@D@std@@YAPEADPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHMMMMMMMMMMMMMM@?$tmat4x4@M$0A@@glm@@QEAA@AEBMAEBH00000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+458
	DD	imagerel $unwind$??$?0MHMMMMMMMMMMMMMM@?$tmat4x4@M$0A@@glm@@QEAA@AEBMAEBH00000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z DD imagerel $LN6
	DD	imagerel $LN6+824
	DD	imagerel $unwind$?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z@4HA DD imagerel ?dtor$0@?0??call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z@4HA
	DD	imagerel ?dtor$0@?0??call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?value@?$literal@M$00@detail@glm@@SAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$?value@?$literal@M$00@detail@glm@@SAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inversesqrt@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$inversesqrt@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf48f5c3
CONST	SEGMENT
__real@bf48f5c3 DD 0bf48f5c3r			; -0.785
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f85e354
CONST	SEGMENT
__real@3f85e354 DD 03f85e354r			; 1.046
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f490fdb
CONST	SEGMENT
__real@3f490fdb DD 03f490fdbr			; 0.785398
CONST	ENDS
;	COMDAT __real@3f051eb8
CONST	SEGMENT
__real@3f051eb8 DD 03f051eb8r			; 0.52
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@BMLECCBG@?$CFsmat3x3?$CI?$CI?$CFs?0?5?$CFs?0?5?$CFs?$CJ?0?5?$CI?$CFs?0?5?$CFs?0@
CONST	SEGMENT
??_C@_0DD@BMLECCBG@?$CFsmat3x3?$CI?$CI?$CFs?0?5?$CFs?0?5?$CFs?$CJ?0?5?$CI?$CFs?0?5?$CFs?0@ DB '%'
	DB	'smat3x3((%s, %s, %s), (%s, %s, %s), (%s, %s, %s))', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inversesqrt@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?value@?$literal@M$00@detail@glm@@SAPEBDXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	031fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z DB 06H
	DB	00H
	DB	00H
	DB	'!', 03H
	DB	02H
	DB	0c1H, 08H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z DB 028H
	DD	imagerel $stateUnwindMap$?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z
	DD	imagerel $ip2state$?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z DD 033d19H
	DD	0220112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z
	DD	0102H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z$rtcName$0 DB 046H ; glm::detail::compute_to_string<glm::tmat3x3,float,0>::call
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	074H
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+6
?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z$rtcVarDesc DD 078H ; glm::detail::compute_to_string<glm::tmat3x3,float,0>::call
	DD	028H
	DQ	FLAT:?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_to_string<glm::tmat3x3,float,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHMMMMMMMMMMMMMM@?$tmat4x4@M$0A@@glm@@QEAA@AEBMAEBH00000000000000@Z DD 031a01H
	DD	07016e21aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD 022f01H
	DD	07015b219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc DD 048H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0
	ORG $+48
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DD	00H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Convert_size@_K@std@@YA_K_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD 031701H
	DD	0160117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	069eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD 044319H
	DD	08b0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0440H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$0 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$1 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$2 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$3 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$4 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$5 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$6 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$7 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$8 DB 052H ; glm::operator*<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcFrameData DD 09H ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcVarDesc
	ORG $+8
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcVarDesc DD 01b0H ; glm::operator*<float,0>
	DD	040H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$8
	DD	0178H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$7
	DD	0148H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$6
	DD	0118H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$5
	DD	0e8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z DD 032e01H
	DD	0200112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$0 DB 063H ; glm::eulerAngleZ<float>
	DB	06fH
	DB	073H
	DB	05aH
	DB	00H
	ORG $+3
??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$1 DB 073H ; glm::eulerAngleZ<float>
	DB	069H
	DB	06eH
	DB	05aH
	DB	00H
	ORG $+3
??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcVarDesc DD 0b4H ; glm::eulerAngleZ<float>
	DD	04H
	DQ	FLAT:??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$1
	DD	094H
	DD	04H
	DQ	FLAT:??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$0
	ORG $+96
??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcFrameData DD 02H ; glm::eulerAngleZ<float>
	DD	00H
	DQ	FLAT:??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
	DB	078H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD 032919H
	DD	0180117H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
	DB	078H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD 032919H
	DD	0180117H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z DD 032e01H
	DD	0200112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$0 DB 063H ; glm::eulerAngleY<float>
	DB	06fH
	DB	073H
	DB	059H
	DB	00H
	ORG $+3
??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$1 DB 073H ; glm::eulerAngleY<float>
	DB	069H
	DB	06eH
	DB	059H
	DB	00H
	ORG $+3
??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcVarDesc DD 0b4H ; glm::eulerAngleY<float>
	DD	04H
	DQ	FLAT:??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$1
	DD	094H
	DD	04H
	DQ	FLAT:??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$0
	ORG $+96
??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcFrameData DD 02H ; glm::eulerAngleY<float>
	DD	00H
	DQ	FLAT:??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD 021901H
	DD	07015b219H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0487H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z DD 044819H
	DD	01b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcName$0 DB 052H ; glm::eulerAngleYXZ<float>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcVarDesc DD 050H ; glm::eulerAngleYXZ<float>
	DD	040H
	DQ	FLAT:??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcName$0
	ORG $+48
??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcFrameData DD 01H ; glm::eulerAngleYXZ<float>
	DD	00H
	DQ	FLAT:??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
	DB	078H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD 032919H
	DD	0180117H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
	DB	078H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD 032919H
	DD	0180117H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD 033301H
	DD	0200117H
	DD	07010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$0 DB 063H ; glm::eulerAngleYX<float>
	DB	06fH
	DB	073H
	DB	058H
	DB	00H
	ORG $+3
??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$1 DB 063H ; glm::eulerAngleYX<float>
	DB	06fH
	DB	073H
	DB	059H
	DB	00H
	ORG $+3
??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcVarDesc DD 0b4H ; glm::eulerAngleYX<float>
	DD	04H
	DQ	FLAT:??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$1
	DD	094H
	DD	04H
	DQ	FLAT:??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$0
	ORG $+96
??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcFrameData DD 02H ; glm::eulerAngleYX<float>
	DD	00H
	DQ	FLAT:??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z DD 033301H
	DD	0280117H
	DD	07010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$0 DB 063H ; glm::eulerAngleXY<float>
	DB	06fH
	DB	073H
	DB	058H
	DB	00H
	ORG $+3
??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$1 DB 073H ; glm::eulerAngleXY<float>
	DB	069H
	DB	06eH
	DB	058H
	DB	00H
	ORG $+3
??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$2 DB 063H ; glm::eulerAngleXY<float>
	DB	06fH
	DB	073H
	DB	059H
	DB	00H
	ORG $+3
??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$3 DB 073H ; glm::eulerAngleXY<float>
	DB	069H
	DB	06eH
	DB	059H
	DB	00H
	ORG $+3
??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcVarDesc DD 0f4H ; glm::eulerAngleXY<float>
	DD	04H
	DQ	FLAT:??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$3
	DD	0d4H
	DD	04H
	DQ	FLAT:??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$2
	DD	0b4H
	DD	04H
	DQ	FLAT:??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$1
	DD	094H
	DD	04H
	DQ	FLAT:??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcName$0
	ORG $+192
??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcFrameData DD 04H ; glm::eulerAngleXY<float>
	DD	00H
	DQ	FLAT:??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z DD 032e01H
	DD	0200112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$0 DB 063H ; glm::eulerAngleX<float>
	DB	06fH
	DB	073H
	DB	058H
	DB	00H
	ORG $+3
??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$1 DB 073H ; glm::eulerAngleX<float>
	DB	069H
	DB	06eH
	DB	058H
	DB	00H
	ORG $+3
??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcVarDesc DD 0b4H ; glm::eulerAngleX<float>
	DD	04H
	DQ	FLAT:??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$1
	DD	094H
	DD	04H
	DQ	FLAT:??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcName$0
	ORG $+96
??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcFrameData DD 02H ; glm::eulerAngleX<float>
	DD	00H
	DQ	FLAT:??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z DD 043101H
	DD	0470118H
	DD	060107011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$0 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$1 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$2 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$3 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$4 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$5 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$6 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$7 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$8 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	033H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$9 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$10 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcFrameData DD 0bH ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcVarDesc
	ORG $+8
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 0208H ; glm::operator*<float,0>
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$10
	DD	01d8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$9
	DD	01a8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$8
	DD	0178H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$7
	DD	0148H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$6
	DD	0118H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$5
	DD	0e8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	041H
	DW	0a6cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z DD 044919H
	DD	06f011eH
	DD	060167017H
	DD	imagerel __GSHandlerCheck
	DD	0368H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 061H ; glm::rotate<float,0>
	DB	078H
	DB	069H
	DB	073H
	DB	00H
	ORG $+3
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$1 DB 074H ; glm::rotate<float,0>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$2 DB 052H ; glm::rotate<float,0>
	DB	06fH
	DB	074H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+1
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$3 DB 052H ; glm::rotate<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 0100H ; glm::rotate<float,0>
	DD	040H
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$3
	DD	0a0H
	DD	040H
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$2
	DD	068H
	DD	0cH
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+192
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 04H ; glm::rotate<float,0>
	DD	00H
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z DD 031a01H
	DD	07016e21aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007e20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pi@M@glm@@YAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test@test_eulerAngleYXZ@@YAHXZ
	DD	025H
	DD	03f6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test@test_eulerAngleZY@@YAHXZ
	DD	024H
	DD	0309H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test@test_eulerAngleYZ@@YAHXZ
	DD	024H
	DD	0309H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test@test_eulerAngleZX@@YAHXZ
	DD	024H
	DD	02eeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test@test_eulerAngleXZ@@YAHXZ
	DD	024H
	DD	02eeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test@test_eulerAngleYX@@YAHXZ
	DD	024H
	DD	02eeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test@test_eulerAngleXY@@YAHXZ
	DD	024H
	DD	02eeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test@test_eulerAngleZ@@YAHXZ
	DD	024H
	DD	09a6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test@test_eulerAngleY@@YAHXZ
	DD	024H
	DD	09a6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test@test_eulerAngleX@@YAHXZ
	DD	024H
	DD	09a6H
voltbl	ENDS
xdata	SEGMENT
$unwind$?test@test_eulerAngleX@@YAHXZ DD 032c19H
	DD	010e0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0860H
$unwind$?test@test_eulerAngleY@@YAHXZ DD 032c19H
	DD	010e0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0860H
$unwind$?test@test_eulerAngleZ@@YAHXZ DD 032c19H
	DD	010e0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0860H
$unwind$?test@test_eulerAngleXY@@YAHXZ DD 032c19H
	DD	0820109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0408H
$unwind$?test@test_eulerAngleYX@@YAHXZ DD 032c19H
	DD	0820109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0408H
$unwind$?test@test_eulerAngleXZ@@YAHXZ DD 032c19H
	DD	0820109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0408H
$unwind$?test@test_eulerAngleZX@@YAHXZ DD 032c19H
	DD	0820109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0408H
$unwind$?test@test_eulerAngleYZ@@YAHXZ DD 032c19H
	DD	0880109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0438H
$unwind$?test@test_eulerAngleZY@@YAHXZ DD 032c19H
	DD	0880109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0438H
$unwind$?test@test_eulerAngleYXZ@@YAHXZ DD 042d19H
	DD	0bd010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	05d8H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
?test@test_eulerAngleX@@YAHXZ$rtcName$0 DB 041H		; test_eulerAngleX::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+2
?test@test_eulerAngleX@@YAHXZ$rtcName$1 DB 058H		; test_eulerAngleX::test
	DB	00H
	ORG $+2
?test@test_eulerAngleX@@YAHXZ$rtcName$2 DB 059H		; test_eulerAngleX::test
	DB	00H
	ORG $+2
?test@test_eulerAngleX@@YAHXZ$rtcName$3 DB 059H		; test_eulerAngleX::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$4 DB 059H		; test_eulerAngleX::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$5 DB 059H		; test_eulerAngleX::test
	DB	033H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$6 DB 059H		; test_eulerAngleX::test
	DB	034H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$7 DB 059H		; test_eulerAngleX::test
	DB	035H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$8 DB 059H		; test_eulerAngleX::test
	DB	036H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$9 DB 059H		; test_eulerAngleX::test
	DB	037H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$10 DB 05aH	; test_eulerAngleX::test
	DB	00H
	ORG $+2
?test@test_eulerAngleX@@YAHXZ$rtcName$11 DB 05aH	; test_eulerAngleX::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$12 DB 05aH	; test_eulerAngleX::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$13 DB 05aH	; test_eulerAngleX::test
	DB	033H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$14 DB 05aH	; test_eulerAngleX::test
	DB	034H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$15 DB 05aH	; test_eulerAngleX::test
	DB	035H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$16 DB 05aH	; test_eulerAngleX::test
	DB	036H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcName$17 DB 05aH	; test_eulerAngleX::test
	DB	037H
	DB	00H
	ORG $+1
?test@test_eulerAngleX@@YAHXZ$rtcFrameData DD 012H	; test_eulerAngleX::test
	DD	00H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcVarDesc
?test@test_eulerAngleY@@YAHXZ$rtcName$0 DB 041H		; test_eulerAngleY::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+2
?test@test_eulerAngleX@@YAHXZ$rtcVarDesc DD 0728H	; test_eulerAngleX::test
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$17
	DD	06b8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$16
	DD	0648H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$15
	DD	05d8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$14
	DD	0568H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$13
	DD	04f8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$12
	DD	0448H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$11
	DD	0418H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$10
	DD	03a8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$9
	DD	0338H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$8
	DD	02c8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$7
	DD	0258H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$6
	DD	01e8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$5
	DD	0178H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$4
	DD	0c8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$3
	DD	098H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$2
	DD	068H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleX@@YAHXZ$rtcName$0
	ORG $+864
?test@test_eulerAngleY@@YAHXZ$rtcName$1 DB 059H		; test_eulerAngleY::test
	DB	00H
	ORG $+2
?test@test_eulerAngleY@@YAHXZ$rtcName$2 DB 058H		; test_eulerAngleY::test
	DB	00H
	ORG $+2
?test@test_eulerAngleY@@YAHXZ$rtcName$3 DB 058H		; test_eulerAngleY::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$4 DB 058H		; test_eulerAngleY::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$5 DB 058H		; test_eulerAngleY::test
	DB	033H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$6 DB 058H		; test_eulerAngleY::test
	DB	034H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$7 DB 058H		; test_eulerAngleY::test
	DB	035H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$8 DB 058H		; test_eulerAngleY::test
	DB	036H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$9 DB 058H		; test_eulerAngleY::test
	DB	037H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$10 DB 05aH	; test_eulerAngleY::test
	DB	00H
	ORG $+2
?test@test_eulerAngleY@@YAHXZ$rtcName$11 DB 05aH	; test_eulerAngleY::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$12 DB 05aH	; test_eulerAngleY::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$13 DB 05aH	; test_eulerAngleY::test
	DB	033H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$14 DB 05aH	; test_eulerAngleY::test
	DB	034H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$15 DB 05aH	; test_eulerAngleY::test
	DB	035H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$16 DB 05aH	; test_eulerAngleY::test
	DB	036H
	DB	00H
	ORG $+1
?test@test_eulerAngleY@@YAHXZ$rtcName$17 DB 05aH	; test_eulerAngleY::test
	DB	037H
	DB	00H
	ORG $+5
?test@test_eulerAngleY@@YAHXZ$rtcFrameData DD 012H	; test_eulerAngleY::test
	DD	00H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcVarDesc
?test@test_eulerAngleZ@@YAHXZ$rtcName$0 DB 041H		; test_eulerAngleZ::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+2
?test@test_eulerAngleY@@YAHXZ$rtcVarDesc DD 0728H	; test_eulerAngleY::test
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$17
	DD	06b8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$16
	DD	0648H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$15
	DD	05d8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$14
	DD	0568H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$13
	DD	04b8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$12
	DD	0448H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$11
	DD	0418H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$10
	DD	03a8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$9
	DD	0338H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$8
	DD	02c8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$7
	DD	0258H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$6
	DD	01e8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$5
	DD	0178H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$4
	DD	0c8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$3
	DD	098H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$2
	DD	068H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleY@@YAHXZ$rtcName$0
	ORG $+864
?test@test_eulerAngleZ@@YAHXZ$rtcName$1 DB 05aH		; test_eulerAngleZ::test
	DB	00H
	ORG $+2
?test@test_eulerAngleZ@@YAHXZ$rtcName$2 DB 058H		; test_eulerAngleZ::test
	DB	00H
	ORG $+2
?test@test_eulerAngleZ@@YAHXZ$rtcName$3 DB 058H		; test_eulerAngleZ::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$4 DB 058H		; test_eulerAngleZ::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$5 DB 058H		; test_eulerAngleZ::test
	DB	033H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$6 DB 058H		; test_eulerAngleZ::test
	DB	034H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$7 DB 058H		; test_eulerAngleZ::test
	DB	035H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$8 DB 058H		; test_eulerAngleZ::test
	DB	036H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$9 DB 058H		; test_eulerAngleZ::test
	DB	037H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$10 DB 059H	; test_eulerAngleZ::test
	DB	00H
	ORG $+2
?test@test_eulerAngleZ@@YAHXZ$rtcName$11 DB 05aH	; test_eulerAngleZ::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$12 DB 05aH	; test_eulerAngleZ::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$13 DB 05aH	; test_eulerAngleZ::test
	DB	033H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$14 DB 05aH	; test_eulerAngleZ::test
	DB	034H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$15 DB 05aH	; test_eulerAngleZ::test
	DB	035H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$16 DB 05aH	; test_eulerAngleZ::test
	DB	036H
	DB	00H
	ORG $+1
?test@test_eulerAngleZ@@YAHXZ$rtcName$17 DB 05aH	; test_eulerAngleZ::test
	DB	037H
	DB	00H
	ORG $+5
?test@test_eulerAngleZ@@YAHXZ$rtcFrameData DD 012H	; test_eulerAngleZ::test
	DD	00H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcVarDesc
?test@test_eulerAngleXY@@YAHXZ$rtcName$0 DB 056H	; test_eulerAngleXY::test
	DB	00H
	ORG $+6
?test@test_eulerAngleZ@@YAHXZ$rtcVarDesc DD 0728H	; test_eulerAngleZ::test
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$17
	DD	06b8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$16
	DD	0648H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$15
	DD	05d8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$14
	DD	0568H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$13
	DD	04f8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$12
	DD	0448H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$11
	DD	0418H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$10
	DD	03a8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$9
	DD	0338H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$8
	DD	02c8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$7
	DD	0258H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$6
	DD	01e8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$5
	DD	0178H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$4
	DD	0c8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$3
	DD	098H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$2
	DD	068H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcName$0
	ORG $+864
?test@test_eulerAngleXY@@YAHXZ$rtcName$1 DB 041H	; test_eulerAngleXY::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	058H
	DB	00H
	ORG $+1
?test@test_eulerAngleXY@@YAHXZ$rtcName$2 DB 041H	; test_eulerAngleXY::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	059H
	DB	00H
	ORG $+1
?test@test_eulerAngleXY@@YAHXZ$rtcName$3 DB 061H	; test_eulerAngleXY::test
	DB	078H
	DB	069H
	DB	073H
	DB	058H
	DB	00H
	ORG $+2
?test@test_eulerAngleXY@@YAHXZ$rtcName$4 DB 061H	; test_eulerAngleXY::test
	DB	078H
	DB	069H
	DB	073H
	DB	059H
	DB	00H
	ORG $+2
?test@test_eulerAngleXY@@YAHXZ$rtcName$5 DB 056H	; test_eulerAngleXY::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleXY@@YAHXZ$rtcName$6 DB 056H	; test_eulerAngleXY::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleXY@@YAHXZ$rtcName$7 DB 056H	; test_eulerAngleXY::test
	DB	033H
	DB	00H
	ORG $+5
?test@test_eulerAngleXY@@YAHXZ$rtcVarDesc DD 02e8H	; test_eulerAngleXY::test
	DD	010H
	DQ	FLAT:?test@test_eulerAngleXY@@YAHXZ$rtcName$7
	DD	0278H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleXY@@YAHXZ$rtcName$6
	DD	0108H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleXY@@YAHXZ$rtcName$5
	DD	0d8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleXY@@YAHXZ$rtcName$4
	DD	0a8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleXY@@YAHXZ$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleXY@@YAHXZ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleXY@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleXY@@YAHXZ$rtcName$0
	ORG $+384
?test@test_eulerAngleXY@@YAHXZ$rtcFrameData DD 08H	; test_eulerAngleXY::test
	DD	00H
	DQ	FLAT:?test@test_eulerAngleXY@@YAHXZ$rtcVarDesc
?test@test_eulerAngleYX@@YAHXZ$rtcName$0 DB 056H	; test_eulerAngleYX::test
	DB	00H
	ORG $+2
?test@test_eulerAngleYX@@YAHXZ$rtcName$1 DB 041H	; test_eulerAngleYX::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	058H
	DB	00H
	ORG $+1
?test@test_eulerAngleYX@@YAHXZ$rtcName$2 DB 041H	; test_eulerAngleYX::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	059H
	DB	00H
	ORG $+1
?test@test_eulerAngleYX@@YAHXZ$rtcName$3 DB 061H	; test_eulerAngleYX::test
	DB	078H
	DB	069H
	DB	073H
	DB	058H
	DB	00H
	ORG $+2
?test@test_eulerAngleYX@@YAHXZ$rtcName$4 DB 061H	; test_eulerAngleYX::test
	DB	078H
	DB	069H
	DB	073H
	DB	059H
	DB	00H
	ORG $+2
?test@test_eulerAngleYX@@YAHXZ$rtcName$5 DB 056H	; test_eulerAngleYX::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleYX@@YAHXZ$rtcName$6 DB 056H	; test_eulerAngleYX::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleYX@@YAHXZ$rtcName$7 DB 056H	; test_eulerAngleYX::test
	DB	033H
	DB	00H
	ORG $+1
?test@test_eulerAngleYX@@YAHXZ$rtcVarDesc DD 02e8H	; test_eulerAngleYX::test
	DD	010H
	DQ	FLAT:?test@test_eulerAngleYX@@YAHXZ$rtcName$7
	DD	0278H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleYX@@YAHXZ$rtcName$6
	DD	0108H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleYX@@YAHXZ$rtcName$5
	DD	0d8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleYX@@YAHXZ$rtcName$4
	DD	0a8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleYX@@YAHXZ$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleYX@@YAHXZ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleYX@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleYX@@YAHXZ$rtcName$0
	ORG $+384
?test@test_eulerAngleYX@@YAHXZ$rtcFrameData DD 08H	; test_eulerAngleYX::test
	DD	00H
	DQ	FLAT:?test@test_eulerAngleYX@@YAHXZ$rtcVarDesc
?test@test_eulerAngleXZ@@YAHXZ$rtcName$0 DB 056H	; test_eulerAngleXZ::test
	DB	00H
	ORG $+2
?test@test_eulerAngleXZ@@YAHXZ$rtcName$1 DB 041H	; test_eulerAngleXZ::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	058H
	DB	00H
	ORG $+1
?test@test_eulerAngleXZ@@YAHXZ$rtcName$2 DB 041H	; test_eulerAngleXZ::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	05aH
	DB	00H
	ORG $+1
?test@test_eulerAngleXZ@@YAHXZ$rtcName$3 DB 061H	; test_eulerAngleXZ::test
	DB	078H
	DB	069H
	DB	073H
	DB	058H
	DB	00H
	ORG $+2
?test@test_eulerAngleXZ@@YAHXZ$rtcName$4 DB 061H	; test_eulerAngleXZ::test
	DB	078H
	DB	069H
	DB	073H
	DB	05aH
	DB	00H
	ORG $+2
?test@test_eulerAngleXZ@@YAHXZ$rtcName$5 DB 056H	; test_eulerAngleXZ::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleXZ@@YAHXZ$rtcName$6 DB 056H	; test_eulerAngleXZ::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleXZ@@YAHXZ$rtcName$7 DB 056H	; test_eulerAngleXZ::test
	DB	033H
	DB	00H
	ORG $+1
?test@test_eulerAngleXZ@@YAHXZ$rtcVarDesc DD 02e8H	; test_eulerAngleXZ::test
	DD	010H
	DQ	FLAT:?test@test_eulerAngleXZ@@YAHXZ$rtcName$7
	DD	0278H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleXZ@@YAHXZ$rtcName$6
	DD	0108H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleXZ@@YAHXZ$rtcName$5
	DD	0d8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleXZ@@YAHXZ$rtcName$4
	DD	0a8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleXZ@@YAHXZ$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleXZ@@YAHXZ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleXZ@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleXZ@@YAHXZ$rtcName$0
	ORG $+384
?test@test_eulerAngleXZ@@YAHXZ$rtcFrameData DD 08H	; test_eulerAngleXZ::test
	DD	00H
	DQ	FLAT:?test@test_eulerAngleXZ@@YAHXZ$rtcVarDesc
?test@test_eulerAngleZX@@YAHXZ$rtcName$0 DB 056H	; test_eulerAngleZX::test
	DB	00H
	ORG $+2
?test@test_eulerAngleZX@@YAHXZ$rtcName$1 DB 041H	; test_eulerAngleZX::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	058H
	DB	00H
	ORG $+1
?test@test_eulerAngleZX@@YAHXZ$rtcName$2 DB 041H	; test_eulerAngleZX::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	05aH
	DB	00H
	ORG $+1
?test@test_eulerAngleZX@@YAHXZ$rtcName$3 DB 061H	; test_eulerAngleZX::test
	DB	078H
	DB	069H
	DB	073H
	DB	058H
	DB	00H
	ORG $+2
?test@test_eulerAngleZX@@YAHXZ$rtcName$4 DB 061H	; test_eulerAngleZX::test
	DB	078H
	DB	069H
	DB	073H
	DB	05aH
	DB	00H
	ORG $+2
?test@test_eulerAngleZX@@YAHXZ$rtcName$5 DB 056H	; test_eulerAngleZX::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleZX@@YAHXZ$rtcName$6 DB 056H	; test_eulerAngleZX::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleZX@@YAHXZ$rtcName$7 DB 056H	; test_eulerAngleZX::test
	DB	033H
	DB	00H
	ORG $+1
?test@test_eulerAngleZX@@YAHXZ$rtcVarDesc DD 02e8H	; test_eulerAngleZX::test
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZX@@YAHXZ$rtcName$7
	DD	0278H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZX@@YAHXZ$rtcName$6
	DD	0108H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZX@@YAHXZ$rtcName$5
	DD	0d8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleZX@@YAHXZ$rtcName$4
	DD	0a8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleZX@@YAHXZ$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleZX@@YAHXZ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleZX@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZX@@YAHXZ$rtcName$0
	ORG $+384
?test@test_eulerAngleZX@@YAHXZ$rtcFrameData DD 08H	; test_eulerAngleZX::test
	DD	00H
	DQ	FLAT:?test@test_eulerAngleZX@@YAHXZ$rtcVarDesc
?test@test_eulerAngleYZ@@YAHXZ$rtcName$0 DB 056H	; test_eulerAngleYZ::test
	DB	00H
	ORG $+2
?test@test_eulerAngleYZ@@YAHXZ$rtcName$1 DB 041H	; test_eulerAngleYZ::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	059H
	DB	00H
	ORG $+1
?test@test_eulerAngleYZ@@YAHXZ$rtcName$2 DB 041H	; test_eulerAngleYZ::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	05aH
	DB	00H
	ORG $+1
?test@test_eulerAngleYZ@@YAHXZ$rtcName$3 DB 061H	; test_eulerAngleYZ::test
	DB	078H
	DB	069H
	DB	073H
	DB	058H
	DB	00H
	ORG $+2
?test@test_eulerAngleYZ@@YAHXZ$rtcName$4 DB 061H	; test_eulerAngleYZ::test
	DB	078H
	DB	069H
	DB	073H
	DB	059H
	DB	00H
	ORG $+2
?test@test_eulerAngleYZ@@YAHXZ$rtcName$5 DB 061H	; test_eulerAngleYZ::test
	DB	078H
	DB	069H
	DB	073H
	DB	05aH
	DB	00H
	ORG $+2
?test@test_eulerAngleYZ@@YAHXZ$rtcName$6 DB 056H	; test_eulerAngleYZ::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleYZ@@YAHXZ$rtcName$7 DB 056H	; test_eulerAngleYZ::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleYZ@@YAHXZ$rtcName$8 DB 056H	; test_eulerAngleYZ::test
	DB	033H
	DB	00H
	ORG $+1
?test@test_eulerAngleYZ@@YAHXZ$rtcFrameData DD 09H	; test_eulerAngleYZ::test
	DD	00H
	DQ	FLAT:?test@test_eulerAngleYZ@@YAHXZ$rtcVarDesc
?test@test_eulerAngleZY@@YAHXZ$rtcName$0 DB 056H	; test_eulerAngleZY::test
	DB	00H
	ORG $+6
?test@test_eulerAngleYZ@@YAHXZ$rtcVarDesc DD 0318H	; test_eulerAngleYZ::test
	DD	010H
	DQ	FLAT:?test@test_eulerAngleYZ@@YAHXZ$rtcName$8
	DD	02a8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleYZ@@YAHXZ$rtcName$7
	DD	0138H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleYZ@@YAHXZ$rtcName$6
	DD	0108H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleYZ@@YAHXZ$rtcName$5
	DD	0d8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleYZ@@YAHXZ$rtcName$4
	DD	0a8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleYZ@@YAHXZ$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleYZ@@YAHXZ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleYZ@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleYZ@@YAHXZ$rtcName$0
	ORG $+432
?test@test_eulerAngleZY@@YAHXZ$rtcName$1 DB 041H	; test_eulerAngleZY::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	059H
	DB	00H
	ORG $+1
?test@test_eulerAngleZY@@YAHXZ$rtcName$2 DB 041H	; test_eulerAngleZY::test
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	05aH
	DB	00H
	ORG $+1
?test@test_eulerAngleZY@@YAHXZ$rtcName$3 DB 061H	; test_eulerAngleZY::test
	DB	078H
	DB	069H
	DB	073H
	DB	058H
	DB	00H
	ORG $+2
?test@test_eulerAngleZY@@YAHXZ$rtcName$4 DB 061H	; test_eulerAngleZY::test
	DB	078H
	DB	069H
	DB	073H
	DB	059H
	DB	00H
	ORG $+2
?test@test_eulerAngleZY@@YAHXZ$rtcName$5 DB 061H	; test_eulerAngleZY::test
	DB	078H
	DB	069H
	DB	073H
	DB	05aH
	DB	00H
	ORG $+2
?test@test_eulerAngleZY@@YAHXZ$rtcName$6 DB 056H	; test_eulerAngleZY::test
	DB	031H
	DB	00H
	ORG $+1
?test@test_eulerAngleZY@@YAHXZ$rtcName$7 DB 056H	; test_eulerAngleZY::test
	DB	032H
	DB	00H
	ORG $+1
?test@test_eulerAngleZY@@YAHXZ$rtcName$8 DB 056H	; test_eulerAngleZY::test
	DB	033H
	DB	00H
	ORG $+5
?test@test_eulerAngleZY@@YAHXZ$rtcFrameData DD 09H	; test_eulerAngleZY::test
	DD	00H
	DQ	FLAT:?test@test_eulerAngleZY@@YAHXZ$rtcVarDesc
?test@test_eulerAngleYXZ@@YAHXZ$rtcName$0 DB 066H	; test_eulerAngleYXZ::test
	DB	069H
	DB	072H
	DB	073H
	DB	074H
	DB	00H
	ORG $+2
?test@test_eulerAngleZY@@YAHXZ$rtcVarDesc DD 0318H	; test_eulerAngleZY::test
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZY@@YAHXZ$rtcName$8
	DD	02a8H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZY@@YAHXZ$rtcName$7
	DD	0138H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZY@@YAHXZ$rtcName$6
	DD	0108H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleZY@@YAHXZ$rtcName$5
	DD	0d8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleZY@@YAHXZ$rtcName$4
	DD	0a8H
	DD	0cH
	DQ	FLAT:?test@test_eulerAngleZY@@YAHXZ$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleZY@@YAHXZ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleZY@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test@test_eulerAngleZY@@YAHXZ$rtcName$0
	ORG $+432
?test@test_eulerAngleYXZ@@YAHXZ$rtcName$1 DB 073H	; test_eulerAngleYXZ::test
	DB	065H
	DB	063H
	DB	06fH
	DB	06eH
	DB	064H
	DB	00H
	ORG $+1
?test@test_eulerAngleYXZ@@YAHXZ$rtcName$2 DB 074H	; test_eulerAngleYXZ::test
	DB	068H
	DB	069H
	DB	072H
	DB	064H
	DB	00H
	ORG $+2
?test@test_eulerAngleYXZ@@YAHXZ$rtcName$3 DB 072H	; test_eulerAngleYXZ::test
	DB	06fH
	DB	074H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	045H
	DB	075H
	DB	06cH
	DB	065H
	DB	072H
	DB	00H
	ORG $+2
?test@test_eulerAngleYXZ@@YAHXZ$rtcName$4 DB 072H	; test_eulerAngleYXZ::test
	DB	06fH
	DB	074H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	049H
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	074H
	DB	065H
	DB	064H
	DB	059H
	DB	00H
	ORG $+6
?test@test_eulerAngleYXZ@@YAHXZ$rtcName$5 DB 072H	; test_eulerAngleYXZ::test
	DB	06fH
	DB	074H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	044H
	DB	075H
	DB	06dH
	DB	062H
	DB	00H
	ORG $+11
?test@test_eulerAngleYXZ@@YAHXZ$rtcVarDesc DD 0250H	; test_eulerAngleYXZ::test
	DD	040H
	DQ	FLAT:?test@test_eulerAngleYXZ@@YAHXZ$rtcName$5
	DD	0f0H
	DD	040H
	DQ	FLAT:?test@test_eulerAngleYXZ@@YAHXZ$rtcName$4
	DD	090H
	DD	040H
	DQ	FLAT:?test@test_eulerAngleYXZ@@YAHXZ$rtcName$3
	DD	064H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleYXZ@@YAHXZ$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleYXZ@@YAHXZ$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?test@test_eulerAngleYXZ@@YAHXZ$rtcName$0
	ORG $+288
?test@test_eulerAngleYXZ@@YAHXZ$rtcFrameData DD 06H	; test_eulerAngleYXZ::test
	DD	00H
	DQ	FLAT:?test@test_eulerAngleYXZ@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?value@?$prefix@M@detail@glm@@SAPEBDXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	010fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ DD 034d19H
	DD	02100122H
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	01078H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ$rtcName$0 DB 074H ; glm::detail::format
	DB	065H
	DB	078H
	DB	074H
	DB	00H
	ORG $+3
?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ$rtcName$1 DB 06cH ; glm::detail::format
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+3
?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ$rtcVarDesc DD 01058H ; glm::detail::format
	DD	08H
	DQ	FLAT:?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ$rtcName$1
	DD	040H
	DD	01000H
	DQ	FLAT:?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ$rtcName$0
	ORG $+96
?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ$rtcFrameData DD 02H ; glm::detail::format
	DD	00H
	DQ	FLAT:?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 020a19H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD 022a01H
	DD	070107214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+8
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	08H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0
	ORG $+48
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	00H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 022001H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+5
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	08H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0
	ORG $+48
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	00H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	038H
	DB	00H
	ORG $+12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	01H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	082H
	DB	02H
	DB	'~'
	DB	04H
	DB	'Z'
	DB	02H
	DB	016H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD 022b11H
	DD	0700bf212H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$1 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcVarDesc DD 058H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	010H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$0
	ORG $+96
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcFrameData DD 02H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@D@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen_string@std@@YAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sin@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vsprintf_s DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_s_l DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 021901H
	DD	070155219H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call, COMDAT

; 57   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 59   : 			return tmp.x + tmp.y + tmp.z;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	addss	xmm0, DWORD PTR tmp$[rsp+8]

; 60   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$inversesqrt@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$inversesqrt@M@glm@@YAMM@Z PROC			; glm::inversesqrt<float>, COMDAT

; 131  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 132  : 		return static_cast<genType>(1) / sqrt(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?sqrt@@YAMM@Z				; sqrt
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1

; 133  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$inversesqrt@M@glm@@YAMM@Z ENDP			; glm::inversesqrt<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec3>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 669  :         }
; 670  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call, COMDAT

; 91   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 92   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");
; 93   : 
; 94   : 			return v * inversesqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	call	??$inversesqrt@M@glm@@YAMM@Z		; glm::inversesqrt<float>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 95   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 0
_Count$ = 32
??$_Get_size_of_n@$00@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<1>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 0

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 60   :         if (_Count > _Max_possible) {
; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	rax, QWORD PTR _Count$[rsp]

; 66   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$_Get_size_of_n@$00@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 67   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\string_cast.inl
;	COMDAT ?value@?$literal@M$00@detail@glm@@SAPEBDXZ
_TEXT	SEGMENT
?value@?$literal@M$00@detail@glm@@SAPEBDXZ PROC		; glm::detail::literal<float,1>::value, COMDAT

; 42   : 		GLM_FUNC_QUALIFIER static char const * value() {return "%f";};

$LN3:
	push	rdi
	lea	rax, OFFSET FLAT:??_C@_02NJPGOMH@?$CFf@
	pop	rdi
	ret	0
?value@?$literal@M$00@detail@glm@@SAPEBDXZ ENDP		; glm::detail::literal<float,1>::value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 130  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG68454
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG68455
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 135				; 00000087H
	lea	rdx, OFFSET FLAT:$SG68456
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG68457
	lea	rdx, OFFSET FLAT:$SG68458
	lea	rcx, OFFSET FLAT:$SG68459
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 143  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z PROC	; std::_Voidify_iter<char * *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ENDP	; std::_Voidify_iter<char * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z PROC		; std::addressof<char *>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ; std::_Voidify_iter<char * *>
	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ; std::forward<char * const &>
	mov	rcx, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 972  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 973  :     // deallocate a plain pointer using an allocator
; 974  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 975  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 976  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 977  :     } else {
; 978  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 979  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 980  :     }
; 981  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\string_cast.inl
;	COMDAT ?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z
_TEXT	SEGMENT
PrefixStr$ = 96
LiteralStr$ = 104
FormatStr$ = 120
$T4 = 176
tv87 = 184
tv95 = 192
tv135 = 200
tv143 = 208
tv151 = 216
tv159 = 224
tv167 = 232
tv175 = 240
tv183 = 248
__$ArrayPad$ = 256
__$ReturnUdt$ = 288
x$ = 296
?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z PROC ; glm::detail::compute_to_string<glm::tmat3x3,float,0>::call, COMDAT

; 317  : 		{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rdi, QWORD PTR [rsp+96]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+288]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	DWORD PTR $T4[rsp], 0

; 318  : 			char const * PrefixStr = prefix<T>::value();

	call	?value@?$prefix@M@detail@glm@@SAPEBDXZ	; glm::detail::prefix<float>::value
	mov	QWORD PTR PrefixStr$[rsp], rax

; 319  : 			char const * LiteralStr = literal<T, std::numeric_limits<T>::is_iec559>::value();

	call	?value@?$literal@M$00@detail@glm@@SAPEBDXZ ; glm::detail::literal<float,1>::value
	mov	QWORD PTR LiteralStr$[rsp], rax

; 320  : 			std::string FormatStr(detail::format("%smat3x3((%s, %s, %s), (%s, %s, %s), (%s, %s, %s))",

	mov	rax, QWORD PTR LiteralStr$[rsp]
	mov	QWORD PTR [rsp+88], rax
	mov	rax, QWORD PTR LiteralStr$[rsp]
	mov	QWORD PTR [rsp+80], rax
	mov	rax, QWORD PTR LiteralStr$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR LiteralStr$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR LiteralStr$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR LiteralStr$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR LiteralStr$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR LiteralStr$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR LiteralStr$[rsp]
	mov	r8, QWORD PTR PrefixStr$[rsp]
	lea	rdx, OFFSET FLAT:??_C@_0DD@BMLECCBG@?$CFsmat3x3?$CI?$CI?$CFs?0?5?$CFs?0?5?$CFs?$CJ?0?5?$CI?$CFs?0?5?$CFs?0@
	lea	rcx, QWORD PTR FormatStr$[rsp]
	call	?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ ; glm::detail::format
	npad	1

; 321  : 				PrefixStr,
; 322  : 				LiteralStr, LiteralStr, LiteralStr,
; 323  : 				LiteralStr, LiteralStr, LiteralStr,
; 324  : 				LiteralStr, LiteralStr, LiteralStr));
; 325  : 
; 326  : 			return detail::format(FormatStr.c_str(),

	mov	edx, 2
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv87[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv95[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv135[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv143[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv151[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv159[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv167[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv175[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv183[rsp], xmm0
	lea	rcx, QWORD PTR FormatStr$[rsp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	movsd	xmm0, QWORD PTR tv87[rsp]
	movsd	QWORD PTR [rsp+80], xmm0
	movsd	xmm0, QWORD PTR tv95[rsp]
	movsd	QWORD PTR [rsp+72], xmm0
	movsd	xmm0, QWORD PTR tv135[rsp]
	movsd	QWORD PTR [rsp+64], xmm0
	movsd	xmm0, QWORD PTR tv143[rsp]
	movsd	QWORD PTR [rsp+56], xmm0
	movsd	xmm0, QWORD PTR tv151[rsp]
	movsd	QWORD PTR [rsp+48], xmm0
	movsd	xmm0, QWORD PTR tv159[rsp]
	movsd	QWORD PTR [rsp+40], xmm0
	movsd	xmm0, QWORD PTR tv167[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm0, QWORD PTR tv175[rsp]
	movaps	xmm3, xmm0
	movq	r9, xmm3
	movsd	xmm0, QWORD PTR tv183[rsp]
	movaps	xmm2, xmm0
	movq	r8, xmm2
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ ; glm::detail::format
	mov	eax, DWORD PTR $T4[rsp]
	or	eax, 1
	mov	DWORD PTR $T4[rsp], eax
	lea	rcx, QWORD PTR FormatStr$[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 327  : 				x[0][0], x[0][1], x[0][2],
; 328  : 				x[1][0], x[1][1], x[1][2],
; 329  : 				x[2][0], x[2][1], x[2][2]);
; 330  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 272				; 00000110H
	pop	rdi
	ret	0
?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z ENDP ; glm::detail::compute_to_string<glm::tmat3x3,float,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
PrefixStr$ = 96
LiteralStr$ = 104
FormatStr$ = 120
$T4 = 176
tv87 = 184
tv95 = 192
tv135 = 200
tv143 = 208
tv151 = 216
tv159 = 224
tv167 = 232
tv175 = 240
tv183 = 248
__$ArrayPad$ = 256
__$ReturnUdt$ = 288
x$ = 296
?dtor$0@?0??call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z@4HA PROC ; `glm::detail::compute_to_string<glm::tmat3x3,float,0>::call'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR FormatStr$[rbp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z@4HA ENDP ; `glm::detail::compute_to_string<glm::tmat3x3,float,0>::call'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?0MHMMMMMMMMMMMMMM@?$tmat4x4@M$0A@@glm@@QEAA@AEBMAEBH00000000000000@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
x1$ = 152
y1$ = 160
z1$ = 168
w1$ = 176
x2$ = 184
y2$ = 192
z2$ = 200
w2$ = 208
x3$ = 216
y3$ = 224
z3$ = 232
w3$ = 240
x4$ = 248
y4$ = 256
z4$ = 264
w4$ = 272
??$?0MHMMMMMMMMMMMMMM@?$tmat4x4@M$0A@@glm@@QEAA@AEBMAEBH00000000000000@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0><float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float>, COMDAT

; 115  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 116  : 		GLM_STATIC_ASSERT(std::numeric_limits<X1>::is_iec559 || std::numeric_limits<X1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 1st parameter type invalid.");
; 117  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y1>::is_iec559 || std::numeric_limits<Y1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 2nd parameter type invalid.");
; 118  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z1>::is_iec559 || std::numeric_limits<Z1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 3rd parameter type invalid.");
; 119  : 		GLM_STATIC_ASSERT(std::numeric_limits<W1>::is_iec559 || std::numeric_limits<W1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 4th parameter type invalid.");
; 120  : 
; 121  : 		GLM_STATIC_ASSERT(std::numeric_limits<X2>::is_iec559 || std::numeric_limits<X2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 5th parameter type invalid.");
; 122  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y2>::is_iec559 || std::numeric_limits<Y2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 6th parameter type invalid.");
; 123  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z2>::is_iec559 || std::numeric_limits<Z2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 7th parameter type invalid.");
; 124  : 		GLM_STATIC_ASSERT(std::numeric_limits<W2>::is_iec559 || std::numeric_limits<W2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 8th parameter type invalid.");
; 125  : 
; 126  : 		GLM_STATIC_ASSERT(std::numeric_limits<X3>::is_iec559 || std::numeric_limits<X3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 9th parameter type invalid.");
; 127  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y3>::is_iec559 || std::numeric_limits<Y3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 10th parameter type invalid.");
; 128  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z3>::is_iec559 || std::numeric_limits<Z3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 11th parameter type invalid.");
; 129  : 		GLM_STATIC_ASSERT(std::numeric_limits<W3>::is_iec559 || std::numeric_limits<W3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 12th parameter type invalid.");
; 130  : 
; 131  : 		GLM_STATIC_ASSERT(std::numeric_limits<X4>::is_iec559 || std::numeric_limits<X4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 13th parameter type invalid.");
; 132  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y4>::is_iec559 || std::numeric_limits<Y4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 14th parameter type invalid.");
; 133  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z4>::is_iec559 || std::numeric_limits<Z4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 15th parameter type invalid.");
; 134  : 		GLM_STATIC_ASSERT(std::numeric_limits<W4>::is_iec559 || std::numeric_limits<W4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 16th parameter type invalid.");
; 135  : 
; 136  : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1), value_type(w1));

	mov	rax, QWORD PTR y1$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR w1$[rsp]
	movss	xmm1, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm1
	mov	rax, QWORD PTR z1$[rsp]
	movss	xmm3, DWORD PTR [rax]
	movaps	xmm2, xmm0
	mov	rax, QWORD PTR x1$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 137  : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2), value_type(w2));

	mov	rax, QWORD PTR w2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR z2$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mov	rax, QWORD PTR y2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 138  : 		this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3), value_type(w3));

	mov	rax, QWORD PTR w3$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR z3$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mov	rax, QWORD PTR y3$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x3$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 139  : 		this->value[3] = col_type(static_cast<T>(x4), value_type(y4), value_type(z4), value_type(w4));

	mov	rax, QWORD PTR w4$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR z4$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mov	rax, QWORD PTR y4$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x4$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 140  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$?0MHMMMMMMMMMMMMMM@?$tmat4x4@M$0A@@glm@@QEAA@AEBMAEBH00000000000000@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0><float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
scalar$ = 72
v$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 646  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 647  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	mulss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR scalar$[rsp]
	mulss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mulss	xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 648  : 			scalar * v.x,
; 649  : 			scalar * v.y,
; 650  : 			scalar * v.z);
; 651  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::normalize<float,0,glm::tvec3>, COMDAT

; 195  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 196  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");
; 197  : 
; 198  : 		return detail::compute_normalize<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::normalize<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT

; 204  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,0>, COMDAT

; 138  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 135  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 136  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 137  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 138  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 256  :     }
; 257  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$max@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$max@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 41   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 42   :     // return larger of _Left and _Right
; 43   :     return _Left < _Right ? _Right : _Left;

	mov	rax, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@max
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@max:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 44   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$max@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
_TEXT	SEGMENT
_Old_capacity$ = 32
_New_capacity$ = 40
_Al$ = 48
_New_ptr$ = 72
this$ = 112
_New_size$ = 120
_Fn$ = 128
<_Args_0>$ = 136
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>, COMDAT

; 4520 :     _CONSTEXPR20 basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 4521 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4522 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4523 :         if (_New_size > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	QWORD PTR _New_size$[rsp], rax
	jbe	SHORT $LN2@Reallocate

; 4524 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
$LN2@Reallocate:

; 4525 :         }
; 4526 : 
; 4527 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR _Old_capacity$[rsp], rax

; 4528 :         const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	rdx, QWORD PTR _New_size$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	QWORD PTR _New_capacity$[rsp], rax

; 4529 :         auto& _Al                     = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 4530 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

	mov	rax, QWORD PTR _New_capacity$[rsp]
	inc	rax
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
	mov	QWORD PTR _New_ptr$[rsp], rax

; 4531 : 
; 4532 : #if _HAS_CXX20
; 4533 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4534 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4535 :         }
; 4536 : #endif // _HAS_CXX20
; 4537 :         _Mypair._Myval2._Orphan_all();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 4538 :         _Mypair._Myval2._Mysize = _New_size;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_size$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 4539 :         _Mypair._Myval2._Myres  = _New_capacity;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_capacity$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 4540 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

	mov	rcx, QWORD PTR _New_ptr$[rsp]
	call	??$_Unfancy@D@std@@YAPEADPEAD@Z		; std::_Unfancy<char>
	mov	r9, QWORD PTR <_Args_0>$[rsp]
	mov	r8, QWORD PTR _New_size$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR _Fn$[rsp]
	call	??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()

; 4541 :         if (_BUF_SIZE <= _Old_capacity) {

	cmp	QWORD PTR _Old_capacity$[rsp], 16
	jb	SHORT $LN3@Reallocate

; 4542 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

	mov	rax, QWORD PTR _Old_capacity$[rsp]
	inc	rax
	mov	r8, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 4543 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_ptr$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 4544 :         } else {

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4545 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	lea	rdx, QWORD PTR _New_ptr$[rsp]
	mov	rcx, rax
	call	??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN4@Reallocate:

; 4546 :         }
; 4547 : 
; 4548 :         return *this;

	mov	rax, QWORD PTR this$[rsp]
$LN5@Reallocate:

; 4549 :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_New_ptr$ = 72
_Count$ = 80
_Ptr$ = 88
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z PROC ; <lambda_66f57f934f28d61049862f64df852ff0>::operator(), COMDAT

; 3253 :             },

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 3251 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _New_ptr$[rsp]
	call	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 3252 :                 _Traits::assign(_New_ptr[_Count], _Elem());

	mov	BYTE PTR $T1[rsp], 0
	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _New_ptr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3253 :             },

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ENDP ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Convert_size@_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 16
??$_Convert_size@_K@std@@YA_K_K@Z PROC			; std::_Convert_size<unsigned __int64>, COMDAT

; 960  : _NODISCARD constexpr _Size_type _Convert_size(const size_t _Len) noexcept(is_same_v<_Size_type, size_t>) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 961  :     // convert size_t to _Size_type, avoiding truncation
; 962  :     if constexpr (!is_same_v<_Size_type, size_t>) {
; 963  :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 964  :             _Xlength_error("size_t too long for _Size_type");
; 965  :         }
; 966  :     }
; 967  : 
; 968  :     return static_cast<_Size_type>(_Len);

	mov	rax, QWORD PTR _Len$[rsp]

; 969  : }

	pop	rdi
	ret	0
??$_Convert_size@_K@std@@YA_K_K@Z ENDP			; std::_Convert_size<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
_TEXT	SEGMENT
_Obj$ = 16
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z PROC	; std::_Destroy_in_place<char *>, COMDAT

; 294  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

	pop	rdi
	ret	0
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ENDP	; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@D@std@@QEAA@XZ		; std::allocator<char>::allocator<char>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 32
$T1 = 40
this$ = 64
_Al$ = 72
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	QWORD PTR _New_proxy$[rsp], rax

; 1058 :         _Construct_in_place(*_New_proxy, this);

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1059 :         _Myproxy            = _New_proxy;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	mov	QWORD PTR [rax], rcx

; 1060 :         _New_proxy->_Mycont = this;

	mov	rax, QWORD PTR _New_proxy$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], rcx

; 1061 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1334 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1335 :         if (_Ptr) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Container_

; 1336 :             _Delete_plain_internal(_Al, _Ptr);

	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
$LN2@Container_:

; 1337 :         }
; 1338 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Al_$ = 72
_Mycont$ = 80
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1320 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 1321 :         // create a new _Container_proxy pointing at _Mycont
; 1322 :         _Ptr = _Unfancy(_Al_.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al_$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 1323 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

	mov	rcx, QWORD PTR _Mycont$[rsp]
	call	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1324 :         _Mycont._Myproxy = _Ptr;

	mov	rax, QWORD PTR _Mycont$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 1325 :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 984  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 985  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 986  :     using _Ty = typename _Alloc::value_type;
; 987  :     _Ptr->~_Ty();
; 988  :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 989  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_euler_angle.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 313  : { 

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 314  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 315  : 
; 316  : 	Error += test_eulerAngleX::test();

	call	?test@test_eulerAngleX@@YAHXZ		; test_eulerAngleX::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 317  : 	Error += test_eulerAngleY::test();

	call	?test@test_eulerAngleY@@YAHXZ		; test_eulerAngleY::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 318  : 	Error += test_eulerAngleZ::test();

	call	?test@test_eulerAngleZ@@YAHXZ		; test_eulerAngleZ::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 319  : 	Error += test_eulerAngleXY::test();

	call	?test@test_eulerAngleXY@@YAHXZ		; test_eulerAngleXY::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 320  : 	Error += test_eulerAngleYX::test();

	call	?test@test_eulerAngleYX@@YAHXZ		; test_eulerAngleYX::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 321  : 	Error += test_eulerAngleXZ::test();

	call	?test@test_eulerAngleXZ@@YAHXZ		; test_eulerAngleXZ::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 322  : 	Error += test_eulerAngleZX::test();

	call	?test@test_eulerAngleZX@@YAHXZ		; test_eulerAngleZX::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 323  : 	Error += test_eulerAngleYZ::test();

	call	?test@test_eulerAngleYZ@@YAHXZ		; test_eulerAngleYZ::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 324  : 	Error += test_eulerAngleZY::test();

	call	?test@test_eulerAngleZY@@YAHXZ		; test_eulerAngleZY::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 325  : 	Error += test_eulerAngleYXZ::test();

	call	?test@test_eulerAngleYXZ@@YAHXZ		; test_eulerAngleYXZ::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 326  : 
; 327  : 	return Error; 

	mov	eax, DWORD PTR Error$[rsp]

; 328  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv68 = 112
tv66 = 120
tv79 = 128
tv77 = 136
tv90 = 144
tv88 = 152
tv133 = 160
__$ReturnUdt$ = 192
m1$ = 200
m2$ = 208
??$?GM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 472  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H

; 473  : 		return tmat4x4<T, P>(

	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv79[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv79[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	QWORD PTR tv77[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv90[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv133[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv133[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv77[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv88[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 474  : 			m1[0] - m2[0],
; 475  : 			m1[1] - m2[1],
; 476  : 			m1[2] - m2[2],
; 477  : 			m1[3] - m2[3]);
; 478  : 	}

	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\string_cast.inl
;	COMDAT ??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z PROC ; glm::to_string<glm::tmat3x3,float,0>, COMDAT

; 454  : {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	DWORD PTR $T1[rsp], 0

; 455  : 	return detail::compute_to_string<matType, T, P>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_to_string@Utmat3x3@glm@@M$0A@@detail@glm@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@3@@Z ; glm::detail::compute_to_string<glm::tmat3x3,float,0>::call
	mov	eax, DWORD PTR $T1[rsp]
	or	eax, 1
	mov	DWORD PTR $T1[rsp], eax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 456  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z ENDP ; glm::to_string<glm::tmat3x3,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_euler_angle.cpp
_TEXT	SEGMENT
first$ = 36
second$ = 68
third$ = 100
rotationEuler$ = 144
rotationInvertedY$ = 240
$T9 = 320
$T10 = 384
$T11 = 448
$T12 = 512
rotationDumb$ = 592
$T13 = 672
$T14 = 736
$T15 = 800
$T16 = 864
$T17 = 904
$T18 = 944
$T19 = 984
$T20 = 1024
$T21 = 1064
$T22 = 1104
$T23 = 1168
$T24 = 1208
$T25 = 1248
$T26 = 1312
$T27 = 1352
$T28 = 1400
$T29 = 1404
$T30 = 1416
$T31 = 1428
tv69 = 1440
tv74 = 1448
tv221 = 1456
tv223 = 1464
tv225 = 1472
tv227 = 1480
tv229 = 1488
__$ArrayPad$ = 1496
?test@test_eulerAngleYXZ@@YAHXZ PROC			; test_eulerAngleYXZ::test

; 287  : 	{

$LN8:
	push	rsi
	push	rdi
	sub	rsp, 1512				; 000005e8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 370				; 00000172H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 288  : 		glm::f32 first =  1.046f;

	movss	xmm0, DWORD PTR __real@3f85e354
	movss	DWORD PTR first$[rsp], xmm0

; 289  : 		glm::f32 second = 0.52f;

	movss	xmm0, DWORD PTR __real@3f051eb8
	movss	DWORD PTR second$[rsp], xmm0

; 290  : 		glm::f32 third = -0.785f;

	movss	xmm0, DWORD PTR __real@bf48f5c3
	movss	DWORD PTR third$[rsp], xmm0

; 291  : 
; 292  : 		glm::fmat4 rotationEuler = glm::eulerAngleYXZ(first, second, third); 

	lea	r9, QWORD PTR third$[rsp]
	lea	r8, QWORD PTR second$[rsp]
	lea	rdx, QWORD PTR first$[rsp]
	lea	rcx, QWORD PTR rotationEuler$[rsp]
	call	??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::eulerAngleYXZ<float>

; 293  : 
; 294  : 		glm::fmat4 rotationInvertedY  = glm::eulerAngleY(-1.f*first) * glm::eulerAngleX(second) * glm::eulerAngleZ(third); 

	movss	xmm0, DWORD PTR __real@bf800000
	mulss	xmm0, DWORD PTR first$[rsp]
	movss	DWORD PTR $T28[rsp], xmm0
	lea	rdx, QWORD PTR third$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
	mov	QWORD PTR tv69[rsp], rax
	lea	rdx, QWORD PTR second$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleX<float>
	mov	QWORD PTR tv74[rsp], rax
	lea	rdx, QWORD PTR $T28[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleY<float>
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv69[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR rotationInvertedY$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 295  : 		glm::fmat4 rotationDumb = glm::fmat4(); 

	lea	rcx, QWORD PTR rotationDumb$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ		; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 296  : 		rotationDumb = glm::rotate(rotationDumb, first, glm::fvec3(0,1,0));

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	movss	xmm2, DWORD PTR first$[rsp]
	lea	rdx, QWORD PTR rotationDumb$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	lea	rcx, QWORD PTR rotationDumb$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 297  : 		rotationDumb = glm::rotate(rotationDumb, second, glm::fvec3(1,0,0));

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	movss	xmm2, DWORD PTR second$[rsp]
	lea	rdx, QWORD PTR rotationDumb$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	lea	rcx, QWORD PTR rotationDumb$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 298  : 		rotationDumb = glm::rotate(rotationDumb, third, glm::fvec3(0,0,1));

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9, rax
	movss	xmm2, DWORD PTR third$[rsp]
	lea	rdx, QWORD PTR rotationDumb$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	lea	rcx, QWORD PTR rotationDumb$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 299  : 
; 300  : 		std::printf("%s\n", glm::to_string(glm::fmat3(rotationEuler)).c_str());

	lea	rdx, QWORD PTR rotationEuler$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::to_string<glm::tmat3x3,float,0>
	mov	QWORD PTR tv221[rsp], rax
	mov	rcx, QWORD PTR tv221[rsp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG64570
	call	printf
	lea	rcx, QWORD PTR $T17[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 301  : 		std::printf("%s\n", glm::to_string(glm::fmat3(rotationDumb)).c_str());

	lea	rdx, QWORD PTR rotationDumb$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::to_string<glm::tmat3x3,float,0>
	mov	QWORD PTR tv223[rsp], rax
	mov	rcx, QWORD PTR tv223[rsp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG64571
	call	printf
	lea	rcx, QWORD PTR $T19[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 302  : 		std::printf("%s\n", glm::to_string(glm::fmat3(rotationInvertedY)).c_str());

	lea	rdx, QWORD PTR rotationInvertedY$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::to_string<glm::tmat3x3,float,0>
	mov	QWORD PTR tv225[rsp], rax
	mov	rcx, QWORD PTR tv225[rsp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG64572
	call	printf
	lea	rcx, QWORD PTR $T21[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 303  : 
; 304  : 		std::printf("\nRESIDUAL\n");

	lea	rcx, OFFSET FLAT:$SG64573
	call	printf

; 305  : 		std::printf("%s\n", glm::to_string(glm::fmat3(rotationEuler-(rotationDumb))).c_str());

	lea	r8, QWORD PTR rotationDumb$[rsp]
	lea	rdx, QWORD PTR rotationEuler$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T23[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::to_string<glm::tmat3x3,float,0>
	mov	QWORD PTR tv227[rsp], rax
	mov	rcx, QWORD PTR tv227[rsp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG64574
	call	printf
	lea	rcx, QWORD PTR $T24[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 306  : 		std::printf("%s\n", glm::to_string(glm::fmat3(rotationEuler-(rotationInvertedY))).c_str());

	lea	r8, QWORD PTR rotationInvertedY$[rsp]
	lea	rdx, QWORD PTR rotationEuler$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$to_string@Utmat3x3@glm@@M$0A@@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::to_string<glm::tmat3x3,float,0>
	mov	QWORD PTR tv229[rsp], rax
	mov	rcx, QWORD PTR tv229[rsp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG64575
	call	printf
	lea	rcx, QWORD PTR $T27[rsp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 307  : 
; 308  : 		return 0;

	xor	eax, eax

; 309  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@test_eulerAngleYXZ@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1512				; 000005e8H
	pop	rdi
	pop	rsi
	ret	0
?test@test_eulerAngleYXZ@@YAHXZ ENDP			; test_eulerAngleYXZ::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_euler_angle.cpp
_TEXT	SEGMENT
Error$ = 32
V$ = 56
AngleY$ = 100
AngleZ$ = 132
axisX$ = 168
axisY$ = 216
axisZ$ = 264
V1$ = 312
$T12 = 352
$T13 = 416
$T14 = 480
$T15 = 544
$T16 = 608
V2$ = 680
$T17 = 720
V3$ = 792
$T18 = 832
$T19 = 896
$T20 = 960
$T21 = 1032
$T22 = 1036
$T23 = 1040
$T24 = 1044
$T25 = 1048
$T26 = 1052
tv85 = 1056
tv147 = 1064
tv166 = 1072
tv177 = 1076
__$ArrayPad$ = 1080
?test@test_eulerAngleZY@@YAHXZ PROC			; test_eulerAngleZY::test

; 262  : 	{

$LN7:
	push	rdi
	sub	rsp, 1088				; 00000440H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 264				; 00000108H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 263  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 264  : 
; 265  : 		glm::vec4 const V(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR V$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 266  : 
; 267  : 		float const AngleY(glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR AngleY$[rsp], xmm0

; 268  : 		float const AngleZ(glm::pi<float>() * 0.25f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR AngleZ$[rsp], xmm0

; 269  : 
; 270  : 		glm::vec3 const axisX(1.0f, 0.0f, 0.0f);

	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR axisX$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 271  : 		glm::vec3 const axisY(0.0f, 1.0f, 0.0f);

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR axisY$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 272  : 		glm::vec3 const axisZ(0.0f, 0.0f, 1.0f);

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR axisZ$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 273  : 
; 274  : 		glm::vec4 const V1 = (glm::rotate(glm::mat4(1.0f), AngleZ, axisZ) * glm::rotate(glm::mat4(1.0f), AngleY, axisY)) * V;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T21[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T22[rsp], xmm0
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisY$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	QWORD PTR tv85[rsp], rax
	lea	rdx, QWORD PTR $T22[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisZ$[rsp]
	movss	xmm2, DWORD PTR __real@3f490fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	rcx, QWORD PTR tv85[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 275  : 		glm::vec4 const V2 = glm::eulerAngleZY(AngleZ, AngleY) * V;

	lea	r8, QWORD PTR AngleY$[rsp]
	lea	rdx, QWORD PTR AngleZ$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZY<float>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 276  : 		glm::vec4 const V3 = glm::eulerAngleZ(AngleZ) * glm::eulerAngleY(AngleY) * V;

	lea	rdx, QWORD PTR AngleY$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleY<float>
	mov	QWORD PTR tv147[rsp], rax
	lea	rdx, QWORD PTR AngleZ$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
	mov	rcx, QWORD PTR tv147[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 277  : 		Error += glm::all(glm::epsilonEqual(V1, V2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T23[rsp], xmm0
	lea	r9, QWORD PTR $T23[rsp]
	lea	r8, QWORD PTR V2$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv166[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 278  : 		Error += glm::all(glm::epsilonEqual(V1, V3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T25[rsp], xmm0
	lea	r9, QWORD PTR $T25[rsp]
	lea	r8, QWORD PTR V3$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv177[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv177[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv177[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 279  : 
; 280  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 281  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@test_eulerAngleZY@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1088				; 00000440H
	pop	rdi
	ret	0
?test@test_eulerAngleZY@@YAHXZ ENDP			; test_eulerAngleZY::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_euler_angle.cpp
_TEXT	SEGMENT
Error$ = 32
V$ = 56
AngleY$ = 100
AngleZ$ = 132
axisX$ = 168
axisY$ = 216
axisZ$ = 264
V1$ = 312
$T12 = 352
$T13 = 416
$T14 = 480
$T15 = 544
$T16 = 608
V2$ = 680
$T17 = 720
V3$ = 792
$T18 = 832
$T19 = 896
$T20 = 960
$T21 = 1032
$T22 = 1036
$T23 = 1040
$T24 = 1044
$T25 = 1048
$T26 = 1052
tv85 = 1056
tv147 = 1064
tv166 = 1072
tv177 = 1076
__$ArrayPad$ = 1080
?test@test_eulerAngleYZ@@YAHXZ PROC			; test_eulerAngleYZ::test

; 237  : 	{

$LN7:
	push	rdi
	sub	rsp, 1088				; 00000440H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 264				; 00000108H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 238  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 239  : 
; 240  : 		glm::vec4 const V(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR V$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 241  : 
; 242  : 		float const AngleY(glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR AngleY$[rsp], xmm0

; 243  : 		float const AngleZ(glm::pi<float>() * 0.25f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR AngleZ$[rsp], xmm0

; 244  : 
; 245  : 		glm::vec3 const axisX(1.0f, 0.0f, 0.0f);

	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR axisX$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 246  : 		glm::vec3 const axisY(0.0f, 1.0f, 0.0f);

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR axisY$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 247  : 		glm::vec3 const axisZ(0.0f, 0.0f, 1.0f);

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR axisZ$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 248  : 
; 249  : 		glm::vec4 const V1 = (glm::rotate(glm::mat4(1.0f), AngleY, axisY) * glm::rotate(glm::mat4(1.0f), AngleZ, axisZ)) * V;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T21[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T22[rsp], xmm0
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisZ$[rsp]
	movss	xmm2, DWORD PTR __real@3f490fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	QWORD PTR tv85[rsp], rax
	lea	rdx, QWORD PTR $T22[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisY$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	rcx, QWORD PTR tv85[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 250  : 		glm::vec4 const V2 = glm::eulerAngleYZ(AngleY, AngleZ) * V;

	lea	r8, QWORD PTR AngleZ$[rsp]
	lea	rdx, QWORD PTR AngleY$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYZ<float>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 251  : 		glm::vec4 const V3 = glm::eulerAngleY(AngleY) * glm::eulerAngleZ(AngleZ) * V;

	lea	rdx, QWORD PTR AngleZ$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
	mov	QWORD PTR tv147[rsp], rax
	lea	rdx, QWORD PTR AngleY$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleY<float>
	mov	rcx, QWORD PTR tv147[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 252  : 		Error += glm::all(glm::epsilonEqual(V1, V2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T23[rsp], xmm0
	lea	r9, QWORD PTR $T23[rsp]
	lea	r8, QWORD PTR V2$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv166[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 253  : 		Error += glm::all(glm::epsilonEqual(V1, V3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T25[rsp], xmm0
	lea	r9, QWORD PTR $T25[rsp]
	lea	r8, QWORD PTR V3$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv177[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv177[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv177[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 254  : 
; 255  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 256  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@test_eulerAngleYZ@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1088				; 00000440H
	pop	rdi
	ret	0
?test@test_eulerAngleYZ@@YAHXZ ENDP			; test_eulerAngleYZ::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_euler_angle.cpp
_TEXT	SEGMENT
Error$ = 32
V$ = 56
AngleX$ = 100
AngleZ$ = 132
axisX$ = 168
axisZ$ = 216
V1$ = 264
$T11 = 304
$T12 = 368
$T13 = 432
$T14 = 496
$T15 = 560
V2$ = 632
$T16 = 672
V3$ = 744
$T17 = 784
$T18 = 848
$T19 = 912
$T20 = 984
$T21 = 988
$T22 = 992
$T23 = 996
$T24 = 1000
$T25 = 1004
tv81 = 1008
tv143 = 1016
tv162 = 1024
tv173 = 1028
__$ArrayPad$ = 1032
?test@test_eulerAngleZX@@YAHXZ PROC			; test_eulerAngleZX::test

; 213  : 	{

$LN7:
	push	rdi
	sub	rsp, 1040				; 00000410H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 252				; 000000fcH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 214  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 215  : 
; 216  : 		glm::vec4 const V(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR V$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 217  : 
; 218  : 		float const AngleX(glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR AngleX$[rsp], xmm0

; 219  : 		float const AngleZ(glm::pi<float>() * 0.25f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR AngleZ$[rsp], xmm0

; 220  : 
; 221  : 		glm::vec3 const axisX(1.0f, 0.0f, 0.0f);

	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR axisX$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 222  : 		glm::vec3 const axisZ(0.0f, 0.0f, 1.0f);

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR axisZ$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 223  : 
; 224  : 		glm::vec4 const V1 = (glm::rotate(glm::mat4(1.0f), AngleZ, axisZ) * glm::rotate(glm::mat4(1.0f), AngleX, axisX)) * V;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T20[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T21[rsp], xmm0
	lea	rdx, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisX$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	QWORD PTR tv81[rsp], rax
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisZ$[rsp]
	movss	xmm2, DWORD PTR __real@3f490fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	rcx, QWORD PTR tv81[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 225  : 		glm::vec4 const V2 = glm::eulerAngleZX(AngleZ, AngleX) * V;

	lea	r8, QWORD PTR AngleX$[rsp]
	lea	rdx, QWORD PTR AngleZ$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZX<float>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 226  : 		glm::vec4 const V3 = glm::eulerAngleZ(AngleZ) * glm::eulerAngleX(AngleX) * V;

	lea	rdx, QWORD PTR AngleX$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleX<float>
	mov	QWORD PTR tv143[rsp], rax
	lea	rdx, QWORD PTR AngleZ$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 227  : 		Error += glm::all(glm::epsilonEqual(V1, V2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T22[rsp], xmm0
	lea	r9, QWORD PTR $T22[rsp]
	lea	r8, QWORD PTR V2$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv162[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv162[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv162[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 228  : 		Error += glm::all(glm::epsilonEqual(V1, V3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T24[rsp], xmm0
	lea	r9, QWORD PTR $T24[rsp]
	lea	r8, QWORD PTR V3$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv173[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv173[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv173[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 229  : 
; 230  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 231  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@test_eulerAngleZX@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1040				; 00000410H
	pop	rdi
	ret	0
?test@test_eulerAngleZX@@YAHXZ ENDP			; test_eulerAngleZX::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_euler_angle.cpp
_TEXT	SEGMENT
Error$ = 32
V$ = 56
AngleX$ = 100
AngleZ$ = 132
axisX$ = 168
axisZ$ = 216
V1$ = 264
$T11 = 304
$T12 = 368
$T13 = 432
$T14 = 496
$T15 = 560
V2$ = 632
$T16 = 672
V3$ = 744
$T17 = 784
$T18 = 848
$T19 = 912
$T20 = 984
$T21 = 988
$T22 = 992
$T23 = 996
$T24 = 1000
$T25 = 1004
tv81 = 1008
tv143 = 1016
tv162 = 1024
tv173 = 1028
__$ArrayPad$ = 1032
?test@test_eulerAngleXZ@@YAHXZ PROC			; test_eulerAngleXZ::test

; 189  : 	{

$LN7:
	push	rdi
	sub	rsp, 1040				; 00000410H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 252				; 000000fcH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 190  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 191  : 
; 192  : 		glm::vec4 const V(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR V$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 193  : 
; 194  : 		float const AngleX(glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR AngleX$[rsp], xmm0

; 195  : 		float const AngleZ(glm::pi<float>() * 0.25f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR AngleZ$[rsp], xmm0

; 196  : 
; 197  : 		glm::vec3 const axisX(1.0f, 0.0f, 0.0f);

	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR axisX$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 198  : 		glm::vec3 const axisZ(0.0f, 0.0f, 1.0f);

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR axisZ$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 199  : 
; 200  : 		glm::vec4 const V1 = (glm::rotate(glm::mat4(1.0f), AngleX, axisX) * glm::rotate(glm::mat4(1.0f), AngleZ, axisZ)) * V;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T20[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T21[rsp], xmm0
	lea	rdx, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisZ$[rsp]
	movss	xmm2, DWORD PTR __real@3f490fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	QWORD PTR tv81[rsp], rax
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisX$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	rcx, QWORD PTR tv81[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 201  : 		glm::vec4 const V2 = glm::eulerAngleXZ(AngleX, AngleZ) * V;

	lea	r8, QWORD PTR AngleZ$[rsp]
	lea	rdx, QWORD PTR AngleX$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXZ<float>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 202  : 		glm::vec4 const V3 = glm::eulerAngleX(AngleX) * glm::eulerAngleZ(AngleZ) * V;

	lea	rdx, QWORD PTR AngleZ$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
	mov	QWORD PTR tv143[rsp], rax
	lea	rdx, QWORD PTR AngleX$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleX<float>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 203  : 		Error += glm::all(glm::epsilonEqual(V1, V2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T22[rsp], xmm0
	lea	r9, QWORD PTR $T22[rsp]
	lea	r8, QWORD PTR V2$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv162[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv162[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv162[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 204  : 		Error += glm::all(glm::epsilonEqual(V1, V3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T24[rsp], xmm0
	lea	r9, QWORD PTR $T24[rsp]
	lea	r8, QWORD PTR V3$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv173[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv173[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv173[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 205  : 
; 206  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 207  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@test_eulerAngleXZ@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1040				; 00000410H
	pop	rdi
	ret	0
?test@test_eulerAngleXZ@@YAHXZ ENDP			; test_eulerAngleXZ::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_euler_angle.cpp
_TEXT	SEGMENT
Error$ = 32
V$ = 56
AngleX$ = 100
AngleY$ = 132
axisX$ = 168
axisY$ = 216
V1$ = 264
$T11 = 304
$T12 = 368
$T13 = 432
$T14 = 496
$T15 = 560
V2$ = 632
$T16 = 672
V3$ = 744
$T17 = 784
$T18 = 848
$T19 = 912
$T20 = 984
$T21 = 988
$T22 = 992
$T23 = 996
$T24 = 1000
$T25 = 1004
tv81 = 1008
tv143 = 1016
tv162 = 1024
tv173 = 1028
__$ArrayPad$ = 1032
?test@test_eulerAngleYX@@YAHXZ PROC			; test_eulerAngleYX::test

; 165  : 	{

$LN7:
	push	rdi
	sub	rsp, 1040				; 00000410H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 252				; 000000fcH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 166  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 167  : 
; 168  : 		glm::vec4 const V(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR V$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 169  : 
; 170  : 		float const AngleX(glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR AngleX$[rsp], xmm0

; 171  : 		float const AngleY(glm::pi<float>() * 0.25f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR AngleY$[rsp], xmm0

; 172  : 
; 173  : 		glm::vec3 const axisX(1.0f, 0.0f, 0.0f);

	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR axisX$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 174  : 		glm::vec3 const axisY(0.0f, 1.0f, 0.0f);

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR axisY$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 175  : 
; 176  : 		glm::vec4 const V1 = (glm::rotate(glm::mat4(1.0f), AngleY, axisY) * glm::rotate(glm::mat4(1.0f), AngleX, axisX)) * V;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T20[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T21[rsp], xmm0
	lea	rdx, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisX$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	QWORD PTR tv81[rsp], rax
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisY$[rsp]
	movss	xmm2, DWORD PTR __real@3f490fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	rcx, QWORD PTR tv81[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 177  : 		glm::vec4 const V2 = glm::eulerAngleYX(AngleY, AngleX) * V;

	lea	r8, QWORD PTR AngleX$[rsp]
	lea	rdx, QWORD PTR AngleY$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYX<float>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 178  : 		glm::vec4 const V3 = glm::eulerAngleY(AngleY) * glm::eulerAngleX(AngleX) * V;

	lea	rdx, QWORD PTR AngleX$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleX<float>
	mov	QWORD PTR tv143[rsp], rax
	lea	rdx, QWORD PTR AngleY$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleY<float>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 179  : 		Error += glm::all(glm::epsilonEqual(V1, V2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T22[rsp], xmm0
	lea	r9, QWORD PTR $T22[rsp]
	lea	r8, QWORD PTR V2$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv162[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv162[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv162[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 180  : 		Error += glm::all(glm::epsilonEqual(V1, V3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T24[rsp], xmm0
	lea	r9, QWORD PTR $T24[rsp]
	lea	r8, QWORD PTR V3$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv173[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv173[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv173[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 181  : 
; 182  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 183  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@test_eulerAngleYX@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1040				; 00000410H
	pop	rdi
	ret	0
?test@test_eulerAngleYX@@YAHXZ ENDP			; test_eulerAngleYX::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
SrcA0$ = 40
SrcA1$ = 88
SrcA2$ = 136
SrcA3$ = 184
SrcB0$ = 232
SrcB1$ = 280
SrcB2$ = 328
SrcB3$ = 376
Result$ = 432
$T12 = 512
$T13 = 528
$T14 = 544
$T15 = 560
$T16 = 576
$T17 = 592
$T18 = 608
$T19 = 624
$T20 = 640
$T21 = 656
$T22 = 672
$T23 = 688
$T24 = 704
$T25 = 720
$T26 = 736
$T27 = 752
$T28 = 768
$T29 = 784
$T30 = 800
$T31 = 816
$T32 = 832
$T33 = 848
$T34 = 864
$T35 = 880
$T36 = 896
$T37 = 912
$T38 = 928
$T39 = 944
tv134 = 960
tv143 = 968
tv152 = 976
tv133 = 984
tv178 = 992
tv187 = 1000
tv196 = 1008
tv177 = 1016
tv222 = 1024
tv231 = 1032
tv240 = 1040
tv221 = 1048
tv298 = 1056
tv307 = 1064
tv316 = 1072
tv297 = 1080
__$ArrayPad$ = 1088
__$ReturnUdt$ = 1136
m1$ = 1144
m2$ = 1152
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 596  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1112				; 00000458H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 270				; 0000010eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1136]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 597  : 		typename tmat4x4<T, P>::col_type const SrcA0 = m1[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 598  : 		typename tmat4x4<T, P>::col_type const SrcA1 = m1[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 599  : 		typename tmat4x4<T, P>::col_type const SrcA2 = m1[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 600  : 		typename tmat4x4<T, P>::col_type const SrcA3 = m1[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 601  : 
; 602  : 		typename tmat4x4<T, P>::col_type const SrcB0 = m2[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 603  : 		typename tmat4x4<T, P>::col_type const SrcB1 = m2[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 604  : 		typename tmat4x4<T, P>::col_type const SrcB2 = m2[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 605  : 		typename tmat4x4<T, P>::col_type const SrcB3 = m2[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 606  : 
; 607  : 		tmat4x4<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 608  : 		Result[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv134[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv143[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv152[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv152[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv134[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv133[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv133[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 609  : 		Result[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv178[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv187[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv196[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv196[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv187[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv178[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv177[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv177[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 610  : 		Result[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv222[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv231[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv240[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv240[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv231[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv222[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv221[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 611  : 		Result[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv298[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv307[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv316[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv316[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv307[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv298[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv297[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv297[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 612  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 613  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1112				; 00000458H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_euler_angle.cpp
_TEXT	SEGMENT
Error$ = 32
V$ = 56
AngleX$ = 100
AngleY$ = 132
axisX$ = 168
axisY$ = 216
V1$ = 264
$T11 = 304
$T12 = 368
$T13 = 432
$T14 = 496
$T15 = 560
V2$ = 632
$T16 = 672
V3$ = 744
$T17 = 784
$T18 = 848
$T19 = 912
$T20 = 984
$T21 = 988
$T22 = 992
$T23 = 996
$T24 = 1000
$T25 = 1004
tv81 = 1008
tv143 = 1016
tv162 = 1024
tv173 = 1028
__$ArrayPad$ = 1032
?test@test_eulerAngleXY@@YAHXZ PROC			; test_eulerAngleXY::test

; 141  : 	{

$LN7:
	push	rdi
	sub	rsp, 1040				; 00000410H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 252				; 000000fcH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 143  : 
; 144  : 		glm::vec4 const V(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR V$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 145  : 
; 146  : 		float const AngleX(glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR AngleX$[rsp], xmm0

; 147  : 		float const AngleY(glm::pi<float>() * 0.25f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR AngleY$[rsp], xmm0

; 148  : 
; 149  : 		glm::vec3 const axisX(1.0f, 0.0f, 0.0f);

	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR axisX$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 150  : 		glm::vec3 const axisY(0.0f, 1.0f, 0.0f);

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR axisY$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 151  : 
; 152  : 		glm::vec4 const V1 = (glm::rotate(glm::mat4(1.0f), AngleX, axisX) * glm::rotate(glm::mat4(1.0f), AngleY, axisY)) * V;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T20[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T21[rsp], xmm0
	lea	rdx, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisY$[rsp]
	movss	xmm2, DWORD PTR __real@3f490fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	QWORD PTR tv81[rsp], rax
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR axisX$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	rcx, QWORD PTR tv81[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 153  : 		glm::vec4 const V2 = glm::eulerAngleXY(AngleX, AngleY) * V;

	lea	r8, QWORD PTR AngleY$[rsp]
	lea	rdx, QWORD PTR AngleX$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXY<float>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 154  : 		glm::vec4 const V3 = glm::eulerAngleX(AngleX) * glm::eulerAngleY(AngleY) * V;

	lea	rdx, QWORD PTR AngleY$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleY<float>
	mov	QWORD PTR tv143[rsp], rax
	lea	rdx, QWORD PTR AngleX$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleX<float>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR V$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR V3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 155  : 		Error += glm::all(glm::epsilonEqual(V1, V2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T22[rsp], xmm0
	lea	r9, QWORD PTR $T22[rsp]
	lea	r8, QWORD PTR V2$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv162[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv162[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv162[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 156  : 		Error += glm::all(glm::epsilonEqual(V1, V3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T24[rsp], xmm0
	lea	r9, QWORD PTR $T24[rsp]
	lea	r8, QWORD PTR V3$[rsp]
	lea	rdx, QWORD PTR V1$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv173[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv173[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv173[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 157  : 
; 158  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 159  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@test_eulerAngleXY@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1040				; 00000410H
	pop	rdi
	ret	0
?test@test_eulerAngleXY@@YAHXZ ENDP			; test_eulerAngleXY::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\euler_angles.inl
;	COMDAT ??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z
_TEXT	SEGMENT
cosZ$ = 148
sinZ$ = 180
$T5 = 196
$T6 = 200
$T7 = 204
$T8 = 208
$T9 = 212
$T10 = 216
$T11 = 220
$T12 = 224
$T13 = 228
$T14 = 232
$T15 = 236
$T16 = 240
$T17 = 244
__$ReturnUdt$ = 272
angleZ$ = 280
??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z PROC ; glm::eulerAngleZ<float>, COMDAT

; 45   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rdi, QWORD PTR [rsp+144]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+272]

; 46   : 		T cosZ = glm::cos(angleZ);

	mov	rax, QWORD PTR angleZ$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cosZ$[rsp], xmm0

; 47   : 		T sinZ = glm::sin(angleZ);

	mov	rax, QWORD PTR angleZ$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sinZ$[rsp], xmm0

; 48   : 
; 49   : 		return tmat4x4<T, defaultp>(

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T5[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T7[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T8[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T9[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T10[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T11[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T12[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T13[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T14[rsp], xmm0
	movss	xmm0, DWORD PTR sinZ$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T15[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T16[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T17[rsp], xmm0
	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T8[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T9[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T10[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T11[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T12[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T13[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T14[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR cosZ$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T15[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T16[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T17[rsp]
	lea	r8, QWORD PTR sinZ$[rsp]
	lea	rdx, QWORD PTR cosZ$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 			cosZ,	sinZ,	T(0), T(0),
; 51   : 			-sinZ,	cosZ,	T(0), T(0),
; 52   : 			T(0),	T(0),	T(1), T(0),
; 53   : 			T(0),	T(0),	T(0), T(1));
; 54   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ENDP ; glm::eulerAngleZ<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_euler_angle.cpp
_TEXT	SEGMENT
Error$ = 48
Angle$ = 68
Z$ = 104
X$ = 152
X1$ = 200
$T21 = 240
$T22 = 304
X2$ = 376
$T23 = 416
X3$ = 488
$T24 = 528
X4$ = 600
$T25 = 640
X5$ = 712
$T26 = 752
X6$ = 824
$T27 = 864
X7$ = 936
$T28 = 976
Y$ = 1048
Z1$ = 1096
$T29 = 1136
$T30 = 1200
Z2$ = 1272
$T31 = 1312
Z3$ = 1384
$T32 = 1424
Z4$ = 1496
$T33 = 1536
Z5$ = 1608
$T34 = 1648
Z6$ = 1720
$T35 = 1760
Z7$ = 1832
$T36 = 1872
$T37 = 1944
$T38 = 1948
$T39 = 1952
$T40 = 1956
$T41 = 1960
$T42 = 1964
$T43 = 1968
$T44 = 1972
$T45 = 1976
$T46 = 1980
$T47 = 1984
$T48 = 1988
$T49 = 1992
$T50 = 1996
$T51 = 2000
$T52 = 2004
$T53 = 2008
$T54 = 2012
$T55 = 2016
$T56 = 2020
$T57 = 2024
$T58 = 2028
$T59 = 2032
$T60 = 2036
$T61 = 2040
$T62 = 2044
$T63 = 2048
$T64 = 2052
$T65 = 2056
$T66 = 2060
$T67 = 2064
$T68 = 2068
$T69 = 2072
$T70 = 2076
$T71 = 2080
$T72 = 2084
$T73 = 2088
$T74 = 2092
tv169 = 2096
tv180 = 2100
tv191 = 2104
tv234 = 2108
tv245 = 2112
tv256 = 2116
tv325 = 2120
tv336 = 2124
tv347 = 2128
tv390 = 2132
tv401 = 2136
tv412 = 2140
__$ArrayPad$ = 2144
?test@test_eulerAngleZ@@YAHXZ PROC			; test_eulerAngleZ::test

; 98   : 	{

$LN27:
	push	rdi
	sub	rsp, 2160				; 00000870H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 528				; 00000210H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 99   : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 100  : 
; 101  : 		float const Angle(glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR Angle$[rsp], xmm0

; 102  : 		glm::vec3 const Z(0.0f, 0.0f, 1.0f);

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Z$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 103  : 
; 104  : 		glm::vec4 const X(1.0f, 0.0f, 0.0f, 1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR X$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 105  : 		glm::vec4 const X1 = glm::rotate(glm::mat4(1.0f), Angle, Z) * X;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T37[rsp], xmm0
	lea	rdx, QWORD PTR $T37[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR Z$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 106  : 		glm::vec4 const X2 = glm::eulerAngleZ(Angle) * X;

	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 107  : 		glm::vec4 const X3 = glm::eulerAngleZX(Angle, 0.0f) * X;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T38[rsp], xmm0
	lea	r8, QWORD PTR $T38[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZX<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 108  : 		glm::vec4 const X4 = glm::eulerAngleXZ(0.0f, Angle) * X;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T39[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T39[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXZ<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X4$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 109  : 		glm::vec4 const X5 = glm::eulerAngleZY(Angle, 0.0f) * X;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T40[rsp], xmm0
	lea	r8, QWORD PTR $T40[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZY<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X5$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 110  : 		glm::vec4 const X6 = glm::eulerAngleYZ(0.0f, Angle) * X;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T41[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T41[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYZ<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X6$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 111  : 		glm::vec4 const X7 = glm::eulerAngleYXZ(0.0f, 0.0f, Angle) * X;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T42[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T43[rsp], xmm0
	lea	r9, QWORD PTR Angle$[rsp]
	lea	r8, QWORD PTR $T42[rsp]
	lea	rdx, QWORD PTR $T43[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::eulerAngleYXZ<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X7$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 112  : 		Error += glm::all(glm::epsilonEqual(X1, X2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T44[rsp], xmm0
	lea	r9, QWORD PTR $T44[rsp]
	lea	r8, QWORD PTR X2$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv169[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv169[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv169[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 113  : 		Error += glm::all(glm::epsilonEqual(X1, X3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T46[rsp], xmm0
	lea	r9, QWORD PTR $T46[rsp]
	lea	r8, QWORD PTR X3$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv180[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv180[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv180[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 114  : 		Error += glm::all(glm::epsilonEqual(X1, X4, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T48[rsp], xmm0
	lea	r9, QWORD PTR $T48[rsp]
	lea	r8, QWORD PTR X4$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T49[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv191[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv191[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv191[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 115  : 		Error += glm::all(glm::epsilonEqual(X1, X5, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T50[rsp], xmm0
	lea	r9, QWORD PTR $T50[rsp]
	lea	r8, QWORD PTR X5$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T51[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv234[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv234[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv234[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 116  : 		Error += glm::all(glm::epsilonEqual(X1, X6, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T52[rsp], xmm0
	lea	r9, QWORD PTR $T52[rsp]
	lea	r8, QWORD PTR X6$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T53[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv245[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv245[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv245[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 117  : 		Error += glm::all(glm::epsilonEqual(X1, X7, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T54[rsp], xmm0
	lea	r9, QWORD PTR $T54[rsp]
	lea	r8, QWORD PTR X7$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T55[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv256[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv256[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv256[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 118  : 
; 119  : 		glm::vec4 const Y(1.0f, 0.0f, 0.0f, 1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Y$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 120  : 		glm::vec4 const Z1 = glm::rotate(glm::mat4(1.0f), Angle, Z) * Y;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T56[rsp], xmm0
	lea	rdx, QWORD PTR $T56[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR Z$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 121  : 		glm::vec4 const Z2 = glm::eulerAngleZ(Angle) * Y;

	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 122  : 		glm::vec4 const Z3 = glm::eulerAngleZX(Angle, 0.0f) * Y;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T57[rsp], xmm0
	lea	r8, QWORD PTR $T57[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZX<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 123  : 		glm::vec4 const Z4 = glm::eulerAngleXZ(0.0f, Angle) * Y;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T58[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T58[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXZ<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z4$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 124  : 		glm::vec4 const Z5 = glm::eulerAngleZY(Angle, 0.0f) * Y;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T59[rsp], xmm0
	lea	r8, QWORD PTR $T59[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZY<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z5$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 125  : 		glm::vec4 const Z6 = glm::eulerAngleYZ(0.0f, Angle) * Y;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T60[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T60[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYZ<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z6$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 126  : 		glm::vec4 const Z7 = glm::eulerAngleYXZ(0.0f, 0.0f, Angle) * Y;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T61[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T62[rsp], xmm0
	lea	r9, QWORD PTR Angle$[rsp]
	lea	r8, QWORD PTR $T61[rsp]
	lea	rdx, QWORD PTR $T62[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::eulerAngleYXZ<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z7$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 127  : 		Error += glm::all(glm::epsilonEqual(Z1, Z2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T63[rsp], xmm0
	lea	r9, QWORD PTR $T63[rsp]
	lea	r8, QWORD PTR Z2$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T64[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv325[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv325[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv325[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 128  : 		Error += glm::all(glm::epsilonEqual(Z1, Z3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T65[rsp], xmm0
	lea	r9, QWORD PTR $T65[rsp]
	lea	r8, QWORD PTR Z3$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv336[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv336[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv336[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 129  : 		Error += glm::all(glm::epsilonEqual(Z1, Z4, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T67[rsp], xmm0
	lea	r9, QWORD PTR $T67[rsp]
	lea	r8, QWORD PTR Z4$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T68[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv347[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv347[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv347[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 130  : 		Error += glm::all(glm::epsilonEqual(Z1, Z5, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T69[rsp], xmm0
	lea	r9, QWORD PTR $T69[rsp]
	lea	r8, QWORD PTR Z5$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T70[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test
	mov	DWORD PTR tv390[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv390[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv390[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 131  : 		Error += glm::all(glm::epsilonEqual(Z1, Z6, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T71[rsp], xmm0
	lea	r9, QWORD PTR $T71[rsp]
	lea	r8, QWORD PTR Z6$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T72[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test
	mov	DWORD PTR tv401[rsp], 0
	jmp	SHORT $LN24@test
$LN23@test:
	mov	DWORD PTR tv401[rsp], 1
$LN24@test:
	mov	eax, DWORD PTR tv401[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 132  : 		Error += glm::all(glm::epsilonEqual(Z1, Z7, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T73[rsp], xmm0
	lea	r9, QWORD PTR $T73[rsp]
	lea	r8, QWORD PTR Z7$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T74[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test
	mov	DWORD PTR tv412[rsp], 0
	jmp	SHORT $LN26@test
$LN25@test:
	mov	DWORD PTR tv412[rsp], 1
$LN26@test:
	mov	eax, DWORD PTR tv412[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 133  : 
; 134  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 135  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@test_eulerAngleZ@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2160				; 00000870H
	pop	rdi
	ret	0
?test@test_eulerAngleZ@@YAHXZ ENDP			; test_eulerAngleZ::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\euler_angles.inl
;	COMDAT ??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 96
tv65 = 168
__$ArrayPad$ = 176
__$ReturnUdt$ = 208
angleZ$ = 216
angleY$ = 224
??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z PROC ; glm::eulerAngleZY<float>, COMDAT

; 130  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 192				; 000000c0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 131  : 		return eulerAngleZ(angleZ) * eulerAngleY(angleY);

	mov	rdx, QWORD PTR angleY$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleY<float>
	mov	QWORD PTR tv65[rsp], rax
	mov	rdx, QWORD PTR angleZ$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 132  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ENDP ; glm::eulerAngleZY<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\euler_angles.inl
;	COMDAT ??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 96
tv65 = 168
__$ArrayPad$ = 176
__$ReturnUdt$ = 208
angleY$ = 216
angleZ$ = 224
??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z PROC ; glm::eulerAngleYZ<float>, COMDAT

; 120  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 192				; 000000c0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 121  : 		return eulerAngleY(angleY) * eulerAngleZ(angleZ);

	mov	rdx, QWORD PTR angleZ$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
	mov	QWORD PTR tv65[rsp], rax
	mov	rdx, QWORD PTR angleY$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleY<float>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 122  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ENDP ; glm::eulerAngleYZ<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\euler_angles.inl
;	COMDAT ??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z
_TEXT	SEGMENT
cosY$ = 148
sinY$ = 180
$T5 = 196
$T6 = 200
$T7 = 204
$T8 = 208
$T9 = 212
$T10 = 216
$T11 = 220
$T12 = 224
$T13 = 228
$T14 = 232
$T15 = 236
$T16 = 240
$T17 = 244
__$ReturnUdt$ = 272
angleY$ = 280
??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z PROC ; glm::eulerAngleY<float>, COMDAT

; 29   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rdi, QWORD PTR [rsp+144]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+272]

; 30   : 		T cosY = glm::cos(angleY);

	mov	rax, QWORD PTR angleY$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cosY$[rsp], xmm0

; 31   : 		T sinY = glm::sin(angleY);

	mov	rax, QWORD PTR angleY$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sinY$[rsp], xmm0

; 32   : 
; 33   : 		return tmat4x4<T, defaultp>(

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T5[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T7[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T8[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T9[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T10[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T11[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T12[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T13[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T14[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T15[rsp], xmm0
	movss	xmm0, DWORD PTR sinY$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T16[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T17[rsp], xmm0
	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T8[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T9[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR cosY$[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T10[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR sinY$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T11[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T12[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T13[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T14[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T15[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T16[rsp]
	lea	r8, QWORD PTR $T17[rsp]
	lea	rdx, QWORD PTR cosY$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 34   : 			cosY,	T(0),	-sinY,	T(0),
; 35   : 			T(0),	T(1),	T(0),	T(0),
; 36   : 			sinY,	T(0),	cosY,	T(0),
; 37   : 			T(0),	T(0),	T(0),	T(1));
; 38   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ENDP ; glm::eulerAngleY<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_euler_angle.cpp
_TEXT	SEGMENT
Error$ = 48
Angle$ = 68
Y$ = 104
X$ = 152
X1$ = 200
$T21 = 240
$T22 = 304
X2$ = 376
$T23 = 416
X3$ = 488
$T24 = 528
X4$ = 600
$T25 = 640
X5$ = 712
$T26 = 752
X6$ = 824
$T27 = 864
X7$ = 936
$T28 = 976
Z$ = 1048
Z1$ = 1096
$T29 = 1136
Z2$ = 1208
$T30 = 1248
$T31 = 1312
Z3$ = 1384
$T32 = 1424
Z4$ = 1496
$T33 = 1536
Z5$ = 1608
$T34 = 1648
Z6$ = 1720
$T35 = 1760
Z7$ = 1832
$T36 = 1872
$T37 = 1944
$T38 = 1948
$T39 = 1952
$T40 = 1956
$T41 = 1960
$T42 = 1964
$T43 = 1968
$T44 = 1972
$T45 = 1976
$T46 = 1980
$T47 = 1984
$T48 = 1988
$T49 = 1992
$T50 = 1996
$T51 = 2000
$T52 = 2004
$T53 = 2008
$T54 = 2012
$T55 = 2016
$T56 = 2020
$T57 = 2024
$T58 = 2028
$T59 = 2032
$T60 = 2036
$T61 = 2040
$T62 = 2044
$T63 = 2048
$T64 = 2052
$T65 = 2056
$T66 = 2060
$T67 = 2064
$T68 = 2068
$T69 = 2072
$T70 = 2076
$T71 = 2080
$T72 = 2084
$T73 = 2088
$T74 = 2092
tv169 = 2096
tv180 = 2100
tv191 = 2104
tv234 = 2108
tv245 = 2112
tv256 = 2116
tv325 = 2120
tv336 = 2124
tv347 = 2128
tv390 = 2132
tv401 = 2136
tv412 = 2140
__$ArrayPad$ = 2144
?test@test_eulerAngleY@@YAHXZ PROC			; test_eulerAngleY::test

; 55   : 	{

$LN27:
	push	rdi
	sub	rsp, 2160				; 00000870H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 528				; 00000210H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 56   : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 57   : 
; 58   : 		float const Angle(glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR Angle$[rsp], xmm0

; 59   : 		glm::vec3 const Y(0.0f, 1.0f, 0.0f);

	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Y$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 60   : 
; 61   : 		glm::vec4 const X(1.0f, 0.0f, 0.0f, 1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR X$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 62   : 		glm::vec4 const X1 = glm::rotate(glm::mat4(1.0f), Angle, Y) * X;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T37[rsp], xmm0
	lea	rdx, QWORD PTR $T37[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR Y$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 63   : 		glm::vec4 const X2 = glm::eulerAngleY(Angle) * X;

	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleY<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 64   : 		glm::vec4 const X3 = glm::eulerAngleYX(Angle, 0.0f) * X;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T38[rsp], xmm0
	lea	r8, QWORD PTR $T38[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYX<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 65   : 		glm::vec4 const X4 = glm::eulerAngleXY(0.0f, Angle) * X;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T39[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T39[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXY<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X4$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 66   : 		glm::vec4 const X5 = glm::eulerAngleYZ(Angle, 0.0f) * X;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T40[rsp], xmm0
	lea	r8, QWORD PTR $T40[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYZ<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X5$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 67   : 		glm::vec4 const X6 = glm::eulerAngleZY(0.0f, Angle) * X;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T41[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T41[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZY<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X6$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 68   : 		glm::vec4 const X7 = glm::eulerAngleYXZ(Angle, 0.0f, 0.0f) * X;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T42[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T43[rsp], xmm0
	lea	r9, QWORD PTR $T42[rsp]
	lea	r8, QWORD PTR $T43[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::eulerAngleYXZ<float>
	lea	r8, QWORD PTR X$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR X7$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 69   : 		Error += glm::all(glm::epsilonEqual(X1, X2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T44[rsp], xmm0
	lea	r9, QWORD PTR $T44[rsp]
	lea	r8, QWORD PTR X2$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv169[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv169[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv169[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 70   : 		Error += glm::all(glm::epsilonEqual(X1, X3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T46[rsp], xmm0
	lea	r9, QWORD PTR $T46[rsp]
	lea	r8, QWORD PTR X3$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv180[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv180[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv180[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 71   : 		Error += glm::all(glm::epsilonEqual(X1, X4, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T48[rsp], xmm0
	lea	r9, QWORD PTR $T48[rsp]
	lea	r8, QWORD PTR X4$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T49[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv191[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv191[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv191[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 72   : 		Error += glm::all(glm::epsilonEqual(X1, X5, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T50[rsp], xmm0
	lea	r9, QWORD PTR $T50[rsp]
	lea	r8, QWORD PTR X5$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T51[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv234[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv234[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv234[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 73   : 		Error += glm::all(glm::epsilonEqual(X1, X6, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T52[rsp], xmm0
	lea	r9, QWORD PTR $T52[rsp]
	lea	r8, QWORD PTR X6$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T53[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv245[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv245[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv245[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 74   : 		Error += glm::all(glm::epsilonEqual(X1, X7, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T54[rsp], xmm0
	lea	r9, QWORD PTR $T54[rsp]
	lea	r8, QWORD PTR X7$[rsp]
	lea	rdx, QWORD PTR X1$[rsp]
	lea	rcx, QWORD PTR $T55[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv256[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv256[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv256[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 75   : 
; 76   : 		glm::vec4 const Z(0.0f, 0.0f, 1.0f, 1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Z$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 77   : 		glm::vec4 const Z1 = glm::eulerAngleY(Angle) * Z;

	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$eulerAngleY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleY<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 78   : 		glm::vec4 const Z2 = glm::rotate(glm::mat4(1.0f), Angle, Y) * Z;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T56[rsp], xmm0
	lea	rdx, QWORD PTR $T56[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR Y$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 79   : 		glm::vec4 const Z3 = glm::eulerAngleYX(Angle, 0.0f) * Z;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T57[rsp], xmm0
	lea	r8, QWORD PTR $T57[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYX<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 80   : 		glm::vec4 const Z4 = glm::eulerAngleXY(0.0f, Angle) * Z;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T58[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T58[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXY<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z4$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 81   : 		glm::vec4 const Z5 = glm::eulerAngleYZ(Angle, 0.0f) * Z;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T59[rsp], xmm0
	lea	r8, QWORD PTR $T59[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$eulerAngleYZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYZ<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z5$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 82   : 		glm::vec4 const Z6 = glm::eulerAngleZY(0.0f, Angle) * Z;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T60[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T60[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$eulerAngleZY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZY<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z6$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 83   : 		glm::vec4 const Z7 = glm::eulerAngleYXZ(Angle, 0.0f, 0.0f) * Z;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T61[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T62[rsp], xmm0
	lea	r9, QWORD PTR $T61[rsp]
	lea	r8, QWORD PTR $T62[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::eulerAngleYXZ<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z7$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 84   : 		Error += glm::all(glm::epsilonEqual(Z1, Z2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T63[rsp], xmm0
	lea	r9, QWORD PTR $T63[rsp]
	lea	r8, QWORD PTR Z2$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T64[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv325[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv325[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv325[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 85   : 		Error += glm::all(glm::epsilonEqual(Z1, Z3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T65[rsp], xmm0
	lea	r9, QWORD PTR $T65[rsp]
	lea	r8, QWORD PTR Z3$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv336[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv336[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv336[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 86   : 		Error += glm::all(glm::epsilonEqual(Z1, Z4, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T67[rsp], xmm0
	lea	r9, QWORD PTR $T67[rsp]
	lea	r8, QWORD PTR Z4$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T68[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv347[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv347[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv347[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 87   : 		Error += glm::all(glm::epsilonEqual(Z1, Z5, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T69[rsp], xmm0
	lea	r9, QWORD PTR $T69[rsp]
	lea	r8, QWORD PTR Z5$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T70[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test
	mov	DWORD PTR tv390[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv390[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv390[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 88   : 		Error += glm::all(glm::epsilonEqual(Z1, Z6, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T71[rsp], xmm0
	lea	r9, QWORD PTR $T71[rsp]
	lea	r8, QWORD PTR Z6$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T72[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test
	mov	DWORD PTR tv401[rsp], 0
	jmp	SHORT $LN24@test
$LN23@test:
	mov	DWORD PTR tv401[rsp], 1
$LN24@test:
	mov	eax, DWORD PTR tv401[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 89   : 		Error += glm::all(glm::epsilonEqual(Z1, Z7, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T73[rsp], xmm0
	lea	r9, QWORD PTR $T73[rsp]
	lea	r8, QWORD PTR Z7$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T74[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test
	mov	DWORD PTR tv412[rsp], 0
	jmp	SHORT $LN26@test
$LN25@test:
	mov	DWORD PTR tv412[rsp], 1
$LN26@test:
	mov	eax, DWORD PTR tv412[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 90   : 
; 91   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 92   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@test_eulerAngleY@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2160				; 00000870H
	pop	rdi
	ret	0
?test@test_eulerAngleY@@YAHXZ ENDP			; test_eulerAngleY::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
tv66 = 80
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec4>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\euler_angles.inl
;	COMDAT ??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z
_TEXT	SEGMENT
tmp_ch$ = 32
tmp_sh$ = 36
tmp_cp$ = 40
tmp_sp$ = 44
tmp_cb$ = 48
tmp_sb$ = 52
Result$ = 80
tv86 = 160
tv93 = 164
tv136 = 168
tv153 = 172
tv160 = 176
tv170 = 180
tv183 = 184
tv190 = 188
tv197 = 192
__$ArrayPad$ = 200
__$ReturnUdt$ = 240
yaw$ = 248
pitch$ = 256
roll$ = 264
??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z PROC ; glm::eulerAngleYXZ<float>, COMDAT

; 176  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+240]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 177  : 		T tmp_ch = glm::cos(yaw);

	mov	rax, QWORD PTR yaw$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR tmp_ch$[rsp], xmm0

; 178  : 		T tmp_sh = glm::sin(yaw);

	mov	rax, QWORD PTR yaw$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR tmp_sh$[rsp], xmm0

; 179  : 		T tmp_cp = glm::cos(pitch);

	mov	rax, QWORD PTR pitch$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR tmp_cp$[rsp], xmm0

; 180  : 		T tmp_sp = glm::sin(pitch);

	mov	rax, QWORD PTR pitch$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR tmp_sp$[rsp], xmm0

; 181  : 		T tmp_cb = glm::cos(roll);

	mov	rax, QWORD PTR roll$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR tmp_cb$[rsp], xmm0

; 182  : 		T tmp_sb = glm::sin(roll);

	mov	rax, QWORD PTR roll$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR tmp_sb$[rsp], xmm0

; 183  : 
; 184  : 		tmat4x4<T, defaultp> Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ		; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 185  : 		Result[0][0] = tmp_ch * tmp_cb + tmp_sh * tmp_sp * tmp_sb;

	movss	xmm0, DWORD PTR tmp_ch$[rsp]
	mulss	xmm0, DWORD PTR tmp_cb$[rsp]
	movss	xmm1, DWORD PTR tmp_sh$[rsp]
	mulss	xmm1, DWORD PTR tmp_sp$[rsp]
	mulss	xmm1, DWORD PTR tmp_sb$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv86[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv86[rsp]
	movss	DWORD PTR [rax], xmm0

; 186  : 		Result[0][1] = tmp_sb * tmp_cp;

	movss	xmm0, DWORD PTR tmp_sb$[rsp]
	mulss	xmm0, DWORD PTR tmp_cp$[rsp]
	movss	DWORD PTR tv93[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv93[rsp]
	movss	DWORD PTR [rax], xmm0

; 187  : 		Result[0][2] = -tmp_sh * tmp_cb + tmp_ch * tmp_sp * tmp_sb;

	movss	xmm0, DWORD PTR tmp_sh$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR tmp_cb$[rsp]
	movss	xmm1, DWORD PTR tmp_ch$[rsp]
	mulss	xmm1, DWORD PTR tmp_sp$[rsp]
	mulss	xmm1, DWORD PTR tmp_sb$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv136[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv136[rsp]
	movss	DWORD PTR [rax], xmm0

; 188  : 		Result[0][3] = static_cast<T>(0);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 189  : 		Result[1][0] = -tmp_ch * tmp_sb + tmp_sh * tmp_sp * tmp_cb;

	movss	xmm0, DWORD PTR tmp_ch$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR tmp_sb$[rsp]
	movss	xmm1, DWORD PTR tmp_sh$[rsp]
	mulss	xmm1, DWORD PTR tmp_sp$[rsp]
	mulss	xmm1, DWORD PTR tmp_cb$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv153[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv153[rsp]
	movss	DWORD PTR [rax], xmm0

; 190  : 		Result[1][1] = tmp_cb * tmp_cp;

	movss	xmm0, DWORD PTR tmp_cb$[rsp]
	mulss	xmm0, DWORD PTR tmp_cp$[rsp]
	movss	DWORD PTR tv160[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv160[rsp]
	movss	DWORD PTR [rax], xmm0

; 191  : 		Result[1][2] = tmp_sb * tmp_sh + tmp_ch * tmp_sp * tmp_cb;

	movss	xmm0, DWORD PTR tmp_sb$[rsp]
	mulss	xmm0, DWORD PTR tmp_sh$[rsp]
	movss	xmm1, DWORD PTR tmp_ch$[rsp]
	mulss	xmm1, DWORD PTR tmp_sp$[rsp]
	mulss	xmm1, DWORD PTR tmp_cb$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv170[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv170[rsp]
	movss	DWORD PTR [rax], xmm0

; 192  : 		Result[1][3] = static_cast<T>(0);

	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 193  : 		Result[2][0] = tmp_sh * tmp_cp;

	movss	xmm0, DWORD PTR tmp_sh$[rsp]
	mulss	xmm0, DWORD PTR tmp_cp$[rsp]
	movss	DWORD PTR tv183[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv183[rsp]
	movss	DWORD PTR [rax], xmm0

; 194  : 		Result[2][1] = -tmp_sp;

	movss	xmm0, DWORD PTR tmp_sp$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv190[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv190[rsp]
	movss	DWORD PTR [rax], xmm0

; 195  : 		Result[2][2] = tmp_ch * tmp_cp;

	movss	xmm0, DWORD PTR tmp_ch$[rsp]
	mulss	xmm0, DWORD PTR tmp_cp$[rsp]
	movss	DWORD PTR tv197[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv197[rsp]
	movss	DWORD PTR [rax], xmm0

; 196  : 		Result[2][3] = static_cast<T>(0);

	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 197  : 		Result[3][0] = static_cast<T>(0);

	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 198  : 		Result[3][1] = static_cast<T>(0);

	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 199  : 		Result[3][2] = static_cast<T>(0);

	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 200  : 		Result[3][3] = static_cast<T>(1);

	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax], xmm0

; 201  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 202  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ENDP ; glm::eulerAngleYXZ<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\euler_angles.inl
;	COMDAT ??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 96
tv65 = 168
__$ArrayPad$ = 176
__$ReturnUdt$ = 208
angleZ$ = 216
angleX$ = 224
??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z PROC ; glm::eulerAngleZX<float>, COMDAT

; 110  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 192				; 000000c0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 111  : 		return eulerAngleZ(angleZ) * eulerAngleX(angleX);

	mov	rdx, QWORD PTR angleX$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleX<float>
	mov	QWORD PTR tv65[rsp], rax
	mov	rdx, QWORD PTR angleZ$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 112  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ENDP ; glm::eulerAngleZX<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\euler_angles.inl
;	COMDAT ??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 96
tv65 = 168
__$ArrayPad$ = 176
__$ReturnUdt$ = 208
angleX$ = 216
angleZ$ = 224
??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z PROC ; glm::eulerAngleXZ<float>, COMDAT

; 100  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 192				; 000000c0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 101  : 		return eulerAngleX(angleX) * eulerAngleZ(angleZ);

	mov	rdx, QWORD PTR angleZ$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$eulerAngleZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleZ<float>
	mov	QWORD PTR tv65[rsp], rax
	mov	rdx, QWORD PTR angleX$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleX<float>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 102  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ENDP ; glm::eulerAngleXZ<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\euler_angles.inl
;	COMDAT ??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
_TEXT	SEGMENT
cosX$ = 148
sinX$ = 164
cosY$ = 180
sinY$ = 196
$T5 = 200
$T6 = 204
$T7 = 208
$T8 = 212
$T9 = 216
$T10 = 220
$T11 = 224
$T12 = 228
$T13 = 232
$T14 = 236
$T15 = 240
$T16 = 244
$T17 = 248
$T18 = 252
__$ReturnUdt$ = 272
angleY$ = 280
angleX$ = 288
??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z PROC ; glm::eulerAngleYX<float>, COMDAT

; 81   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rdi, QWORD PTR [rsp+144]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+272]

; 82   : 		T cosX = glm::cos(angleX);

	mov	rax, QWORD PTR angleX$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cosX$[rsp], xmm0

; 83   : 		T sinX = glm::sin(angleX);

	mov	rax, QWORD PTR angleX$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sinX$[rsp], xmm0

; 84   : 		T cosY = glm::cos(angleY);

	mov	rax, QWORD PTR angleY$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cosY$[rsp], xmm0

; 85   : 		T sinY = glm::sin(angleY);

	mov	rax, QWORD PTR angleY$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sinY$[rsp], xmm0

; 86   : 
; 87   : 		return tmat4x4<T, defaultp>(

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T5[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T7[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T8[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T9[rsp], xmm0
	movss	xmm0, DWORD PTR cosY$[rsp]
	mulss	xmm0, DWORD PTR cosX$[rsp]
	movss	DWORD PTR $T10[rsp], xmm0
	movss	xmm0, DWORD PTR sinX$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T11[rsp], xmm0
	movss	xmm0, DWORD PTR sinY$[rsp]
	mulss	xmm0, DWORD PTR cosX$[rsp]
	movss	DWORD PTR $T12[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T13[rsp], xmm0
	movss	xmm0, DWORD PTR cosY$[rsp]
	mulss	xmm0, DWORD PTR sinX$[rsp]
	movss	DWORD PTR $T14[rsp], xmm0
	movss	xmm0, DWORD PTR sinY$[rsp]
	mulss	xmm0, DWORD PTR sinX$[rsp]
	movss	DWORD PTR $T15[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T16[rsp], xmm0
	movss	xmm0, DWORD PTR sinY$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T17[rsp], xmm0
	mov	DWORD PTR $T18[rsp], 0
	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T8[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T9[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T10[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T11[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T12[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T13[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T14[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR cosX$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T15[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T16[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T17[rsp]
	lea	r8, QWORD PTR $T18[rsp]
	lea	rdx, QWORD PTR cosY$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0MHMMMMMMMMMMMMMM@?$tmat4x4@M$0A@@glm@@QEAA@AEBMAEBH00000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 88   : 			cosY,          0,      -sinY,    T(0),
; 89   : 			sinY * sinX,  cosX, cosY * sinX, T(0),
; 90   : 			sinY * cosX, -sinX, cosY * cosX, T(0),
; 91   : 			T(0),         T(0),     T(0),    T(1));
; 92   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ENDP ; glm::eulerAngleYX<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\euler_angles.inl
;	COMDAT ??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z
_TEXT	SEGMENT
cosX$ = 148
sinX$ = 180
cosY$ = 212
sinY$ = 244
$T7 = 260
$T8 = 264
$T9 = 268
$T10 = 272
$T11 = 276
$T12 = 280
$T13 = 284
$T14 = 288
$T15 = 292
$T16 = 296
$T17 = 300
$T18 = 304
__$ReturnUdt$ = 336
angleX$ = 344
angleY$ = 352
??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z PROC ; glm::eulerAngleXY<float>, COMDAT

; 62   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rdi, QWORD PTR [rsp+144]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+336]

; 63   : 		T cosX = glm::cos(angleX);

	mov	rax, QWORD PTR angleX$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cosX$[rsp], xmm0

; 64   : 		T sinX = glm::sin(angleX);

	mov	rax, QWORD PTR angleX$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sinX$[rsp], xmm0

; 65   : 		T cosY = glm::cos(angleY);

	mov	rax, QWORD PTR angleY$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cosY$[rsp], xmm0

; 66   : 		T sinY = glm::sin(angleY);

	mov	rax, QWORD PTR angleY$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sinY$[rsp], xmm0

; 67   : 
; 68   : 		return tmat4x4<T, defaultp>(

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T7[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T8[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T9[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T10[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T11[rsp], xmm0
	movss	xmm0, DWORD PTR cosX$[rsp]
	mulss	xmm0, DWORD PTR cosY$[rsp]
	movss	DWORD PTR $T12[rsp], xmm0
	movss	xmm0, DWORD PTR sinX$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR cosY$[rsp]
	movss	DWORD PTR $T13[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T14[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T15[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T16[rsp], xmm0
	movss	xmm0, DWORD PTR sinY$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR cosX$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T17[rsp], xmm0
	movss	xmm0, DWORD PTR sinX$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR sinY$[rsp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, xmm1
	movss	DWORD PTR $T18[rsp], xmm0
	lea	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T8[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T9[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T10[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T11[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T12[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T13[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR sinY$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T14[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR sinX$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR cosX$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T15[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T16[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T17[rsp]
	lea	r8, QWORD PTR $T18[rsp]
	lea	rdx, QWORD PTR cosY$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 69   : 			cosY,   -sinX * -sinY,  cosX * -sinY,   T(0),
; 70   : 			T(0),   cosX,           sinX,           T(0),
; 71   : 			sinY,   -sinX * cosY,   cosX * cosY,    T(0),
; 72   : 			T(0),   T(0),           T(0),           T(1));
; 73   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 320				; 00000140H
	pop	rdi
	ret	0
??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ENDP ; glm::eulerAngleXY<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\euler_angles.inl
;	COMDAT ??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z
_TEXT	SEGMENT
cosX$ = 148
sinX$ = 180
$T5 = 196
$T6 = 200
$T7 = 204
$T8 = 208
$T9 = 212
$T10 = 216
$T11 = 220
$T12 = 224
$T13 = 228
$T14 = 232
$T15 = 236
$T16 = 240
$T17 = 244
__$ReturnUdt$ = 272
angleX$ = 280
??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z PROC ; glm::eulerAngleX<float>, COMDAT

; 13   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rdi, QWORD PTR [rsp+144]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+272]

; 14   : 		T cosX = glm::cos(angleX);

	mov	rax, QWORD PTR angleX$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cosX$[rsp], xmm0

; 15   : 		T sinX = glm::sin(angleX);

	mov	rax, QWORD PTR angleX$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sinX$[rsp], xmm0

; 16   : 	
; 17   : 		return tmat4x4<T, defaultp>(

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T5[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T7[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T8[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T9[rsp], xmm0
	movss	xmm0, DWORD PTR sinX$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T10[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T11[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T12[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T13[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T14[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T15[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T16[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T17[rsp], xmm0
	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T8[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T9[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR cosX$[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T10[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T11[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T12[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR sinX$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR cosX$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T13[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T14[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T15[rsp]
	lea	r8, QWORD PTR $T16[rsp]
	lea	rdx, QWORD PTR $T17[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 			T(1), T(0), T(0), T(0),
; 19   : 			T(0), cosX, sinX, T(0),
; 20   : 			T(0),-sinX, cosX, T(0),
; 21   : 			T(0), T(0), T(0), T(1));
; 22   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ENDP ; glm::eulerAngleX<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
Mov0$ = 40
Mov1$ = 88
Mul0$ = 136
Mul1$ = 184
Add0$ = 232
Mov2$ = 280
Mov3$ = 328
Mul2$ = 376
Mul3$ = 424
Add1$ = 472
Add2$ = 520
__$ReturnUdt$ = 592
m$ = 600
v$ = 608
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 506  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+592]

; 507  : /*
; 508  : 		__m128 v0 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(0, 0, 0, 0));
; 509  : 		__m128 v1 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(1, 1, 1, 1));
; 510  : 		__m128 v2 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(2, 2, 2, 2));
; 511  : 		__m128 v3 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(3, 3, 3, 3));
; 512  : 
; 513  : 		__m128 m0 = _mm_mul_ps(m[0].data, v0);
; 514  : 		__m128 m1 = _mm_mul_ps(m[1].data, v1);
; 515  : 		__m128 a0 = _mm_add_ps(m0, m1);
; 516  : 
; 517  : 		__m128 m2 = _mm_mul_ps(m[2].data, v2);
; 518  : 		__m128 m3 = _mm_mul_ps(m[3].data, v3);
; 519  : 		__m128 a1 = _mm_add_ps(m2, m3);
; 520  : 
; 521  : 		__m128 a2 = _mm_add_ps(a0, a1);
; 522  : 
; 523  : 		return typename tmat4x4<T, P>::col_type(a2);
; 524  : */
; 525  : 
; 526  : 		typename tmat4x4<T, P>::col_type const Mov0(v[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 527  : 		typename tmat4x4<T, P>::col_type const Mov1(v[1]);

	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 528  : 		typename tmat4x4<T, P>::col_type const Mul0 = m[0] * Mov0;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul0$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 529  : 		typename tmat4x4<T, P>::col_type const Mul1 = m[1] * Mov1;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov1$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 530  : 		typename tmat4x4<T, P>::col_type const Add0 = Mul0 + Mul1;

	lea	r8, QWORD PTR Mul1$[rsp]
	lea	rdx, QWORD PTR Mul0$[rsp]
	lea	rcx, QWORD PTR Add0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 531  : 		typename tmat4x4<T, P>::col_type const Mov2(v[2]);

	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 532  : 		typename tmat4x4<T, P>::col_type const Mov3(v[3]);

	mov	edx, 3
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 533  : 		typename tmat4x4<T, P>::col_type const Mul2 = m[2] * Mov2;

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov2$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 534  : 		typename tmat4x4<T, P>::col_type const Mul3 = m[3] * Mov3;

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov3$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 535  : 		typename tmat4x4<T, P>::col_type const Add1 = Mul2 + Mul3;

	lea	r8, QWORD PTR Mul3$[rsp]
	lea	rdx, QWORD PTR Mul2$[rsp]
	lea	rcx, QWORD PTR Add1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 536  : 		typename tmat4x4<T, P>::col_type const Add2 = Add0 + Add1;

	lea	r8, QWORD PTR Add1$[rsp]
	lea	rdx, QWORD PTR Add0$[rsp]
	lea	rcx, QWORD PTR Add2$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 537  : 		return Add2;

	lea	rax, QWORD PTR Add2$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 538  : 
; 539  : /*
; 540  : 		return typename tmat4x4<T, P>::col_type(
; 541  : 			m[0][0] * v[0] + m[1][0] * v[1] + m[2][0] * v[2] + m[3][0] * v[3],
; 542  : 			m[0][1] * v[0] + m[1][1] * v[1] + m[2][1] * v[2] + m[3][1] * v[3],
; 543  : 			m[0][2] * v[0] + m[1][2] * v[1] + m[2][2] * v[2] + m[3][2] * v[3],
; 544  : 			m[0][3] * v[0] + m[1][3] * v[1] + m[2][3] * v[2] + m[3][3] * v[3]);
; 545  : */
; 546  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 568				; 00000238H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_transform.inl
;	COMDAT ??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
a$ = 32
c$ = 36
s$ = 40
axis$ = 56
temp$ = 104
Rotate$ = 160
Result$ = 256
$T7 = 336
$T8 = 352
$T9 = 368
$T10 = 384
$T11 = 400
$T12 = 416
$T13 = 432
$T14 = 448
$T15 = 464
$T16 = 480
$T17 = 496
$T18 = 512
$T19 = 528
$T20 = 544
$T21 = 560
tv84 = 576
tv90 = 584
tv130 = 592
tv135 = 600
tv140 = 604
tv148 = 608
tv153 = 616
tv158 = 620
tv166 = 624
tv171 = 632
tv176 = 636
tv184 = 640
tv190 = 648
tv198 = 656
tv203 = 664
tv208 = 668
tv216 = 672
tv221 = 680
tv226 = 684
tv234 = 688
tv239 = 696
tv244 = 700
tv252 = 704
tv258 = 712
tv270 = 720
tv265 = 728
tv285 = 736
tv280 = 744
tv299 = 752
tv264 = 760
tv321 = 768
tv316 = 776
tv336 = 784
tv331 = 792
tv350 = 800
tv315 = 808
tv372 = 816
tv367 = 824
tv387 = 832
tv382 = 840
tv401 = 848
tv366 = 856
tv418 = 864
__$ArrayPad$ = 872
__$ReturnUdt$ = 912
m$ = 920
angle$ = 928
v$ = 936
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::rotate<float,0>, COMDAT

; 20   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 888				; 00000378H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 214				; 000000d6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+912]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 21   : 		T const a = angle;

	movss	xmm0, DWORD PTR angle$[rsp]
	movss	DWORD PTR a$[rsp], xmm0

; 22   : 		T const c = cos(a);

	movss	xmm0, DWORD PTR a$[rsp]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR c$[rsp], xmm0

; 23   : 		T const s = sin(a);

	movss	xmm0, DWORD PTR a$[rsp]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR s$[rsp], xmm0

; 24   : 
; 25   : 		tvec3<T, P> axis(normalize(v));

	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR axis$[rsp]
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>

; 26   : 		tvec3<T, P> temp((T(1) - c) * axis);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR c$[rsp]
	lea	r8, QWORD PTR axis$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR temp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>

; 27   : 
; 28   : 		tmat4x4<T, P> Rotate(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 29   : 		Rotate[0][0] = c + temp[0] * axis[0];

	xor	edx, edx
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR c$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv90[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv90[rsp]
	movss	DWORD PTR [rax], xmm0

; 30   : 		Rotate[0][1] = temp[0] * axis[1] + s * axis[2];

	xor	edx, edx
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv130[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv130[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv135[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv135[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv140[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv140[rsp]
	movss	DWORD PTR [rax], xmm0

; 31   : 		Rotate[0][2] = temp[0] * axis[2] - s * axis[1];

	xor	edx, edx
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv148[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv148[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv153[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv153[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv158[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv158[rsp]
	movss	DWORD PTR [rax], xmm0

; 32   : 
; 33   : 		Rotate[1][0] = temp[1] * axis[0] - s * axis[2];

	mov	edx, 1
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv166[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv166[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv171[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv171[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv176[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv176[rsp]
	movss	DWORD PTR [rax], xmm0

; 34   : 		Rotate[1][1] = c + temp[1] * axis[1];

	mov	edx, 1
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv184[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv184[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR c$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv190[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv190[rsp]
	movss	DWORD PTR [rax], xmm0

; 35   : 		Rotate[1][2] = temp[1] * axis[2] + s * axis[0];

	mov	edx, 1
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv198[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv198[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv203[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv203[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv208[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv208[rsp]
	movss	DWORD PTR [rax], xmm0

; 36   : 
; 37   : 		Rotate[2][0] = temp[2] * axis[0] + s * axis[1];

	mov	edx, 2
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv216[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv216[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv221[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv221[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv226[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv226[rsp]
	movss	DWORD PTR [rax], xmm0

; 38   : 		Rotate[2][1] = temp[2] * axis[1] - s * axis[0];

	mov	edx, 2
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv234[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv234[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv239[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv239[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv244[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv244[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 		Rotate[2][2] = c + temp[2] * axis[2];

	mov	edx, 2
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv252[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv252[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR c$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv258[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv258[rsp]
	movss	DWORD PTR [rax], xmm0

; 40   : 
; 41   : 		tmat4x4<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 42   : 		Result[0] = m[0] * Rotate[0][0] + m[1] * Rotate[0][1] + m[2] * Rotate[0][2];

	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv270[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv270[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv265[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv285[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv285[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv280[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv299[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv299[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv280[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv265[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv264[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv264[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 43   : 		Result[1] = m[0] * Rotate[1][0] + m[1] * Rotate[1][1] + m[2] * Rotate[1][2];

	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv321[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv321[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv316[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv336[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv336[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv331[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv350[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv350[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv331[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv316[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv315[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv315[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 44   : 		Result[2] = m[0] * Rotate[2][0] + m[1] * Rotate[2][1] + m[2] * Rotate[2][2];

	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv372[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv372[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv367[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv387[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv387[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv382[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv401[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv401[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv382[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv367[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv366[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv366[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 45   : 		Result[3] = m[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv418[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv418[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 46   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 47   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 888				; 00000378H
	pop	rdi
	pop	rsi
	ret	0
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::rotate<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 198  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 199  : 		assert(i < this->length());

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 199				; 000000c7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 200  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 201  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
m$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 133  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 134  : 		this->value[0] = col_type(m[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 135  : 		this->value[1] = col_type(m[1]);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 136  : 		this->value[2] = col_type(m[2]);

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 137  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
v3$ = 96
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 80   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 81   : 		this->value[0] = v0;

	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 16
	rep movsb

; 82   : 		this->value[1] = v1;

	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb

; 83   : 		this->value[2] = v2;

	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 16
	rep movsb

; 84   : 		this->value[3] = v3;

	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v3$[rsp]
	mov	ecx, 16
	rep movsb

; 85   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
x0$ = 152
y0$ = 160
z0$ = 168
w0$ = 176
x1$ = 184
y1$ = 192
z1$ = 200
w1$ = 208
x2$ = 216
y2$ = 224
z2$ = 232
w2$ = 240
x3$ = 248
y3$ = 256
z3$ = 264
w3$ = 272
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z PROC	; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 66   : 		this->value[0] = col_type(x0, y0, z0, w0);

	mov	rax, QWORD PTR w0$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR z0$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mov	rax, QWORD PTR y0$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x0$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 67   : 		this->value[1] = col_type(x1, y1, z1, w1);

	mov	rax, QWORD PTR w1$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR z1$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mov	rax, QWORD PTR y1$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x1$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 68   : 		this->value[2] = col_type(x2, y2, z2, w2);

	mov	rax, QWORD PTR w2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR z2$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mov	rax, QWORD PTR y2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 69   : 		this->value[3] = col_type(x3, y3, z3, w3);

	mov	rax, QWORD PTR w3$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR z3$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mov	rax, QWORD PTR y3$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x3$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 70   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM000000000000000@Z ENDP	; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
s$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 50   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 55   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 46   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
??0?$tmat4x4@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 19   : #			endif
; 20   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$pi@M@glm@@YAMXZ
_TEXT	SEGMENT
??$pi@M@glm@@YAMXZ PROC					; glm::pi<float>, COMDAT

; 28   : 	{

$LN3:
	push	rdi
	sub	rsp, 16

; 29   : 		return genType(3.14159265358979323846264338327950288);

	movss	xmm0, DWORD PTR __real@40490fdb

; 30   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$pi@M@glm@@YAMXZ ENDP					; glm::pi<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_euler_angle.cpp
_TEXT	SEGMENT
Error$ = 48
Angle$ = 68
X$ = 104
Y$ = 152
Y1$ = 200
$T21 = 240
$T22 = 304
Y2$ = 376
$T23 = 416
Y3$ = 488
$T24 = 528
Y4$ = 600
$T25 = 640
Y5$ = 712
$T26 = 752
Y6$ = 824
$T27 = 864
Y7$ = 936
$T28 = 976
Z$ = 1048
Z1$ = 1096
$T29 = 1136
$T30 = 1200
Z2$ = 1272
$T31 = 1312
Z3$ = 1384
$T32 = 1424
Z4$ = 1496
$T33 = 1536
Z5$ = 1608
$T34 = 1648
Z6$ = 1720
$T35 = 1760
Z7$ = 1832
$T36 = 1872
$T37 = 1944
$T38 = 1948
$T39 = 1952
$T40 = 1956
$T41 = 1960
$T42 = 1964
$T43 = 1968
$T44 = 1972
$T45 = 1976
$T46 = 1980
$T47 = 1984
$T48 = 1988
$T49 = 1992
$T50 = 1996
$T51 = 2000
$T52 = 2004
$T53 = 2008
$T54 = 2012
$T55 = 2016
$T56 = 2020
$T57 = 2024
$T58 = 2028
$T59 = 2032
$T60 = 2036
$T61 = 2040
$T62 = 2044
$T63 = 2048
$T64 = 2052
$T65 = 2056
$T66 = 2060
$T67 = 2064
$T68 = 2068
$T69 = 2072
$T70 = 2076
$T71 = 2080
$T72 = 2084
$T73 = 2088
$T74 = 2092
tv169 = 2096
tv180 = 2100
tv191 = 2104
tv234 = 2108
tv245 = 2112
tv256 = 2116
tv325 = 2120
tv336 = 2124
tv347 = 2128
tv390 = 2132
tv401 = 2136
tv412 = 2140
__$ArrayPad$ = 2144
?test@test_eulerAngleX@@YAHXZ PROC			; test_eulerAngleX::test

; 12   : 	{

$LN27:
	push	rdi
	sub	rsp, 2160				; 00000870H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 528				; 00000210H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 13   : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 14   : 
; 15   : 		float const Angle(glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR Angle$[rsp], xmm0

; 16   : 		glm::vec3 const X(1.0f, 0.0f, 0.0f);

	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR X$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 17   : 
; 18   : 		glm::vec4 const Y(0.0f, 1.0f, 0.0f, 1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Y$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 19   : 		glm::vec4 const Y1 = glm::rotate(glm::mat4(1.0f), Angle, X) * Y;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T37[rsp], xmm0
	lea	rdx, QWORD PTR $T37[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR X$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Y1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 20   : 		glm::vec4 const Y2 = glm::eulerAngleX(Angle) * Y;

	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleX<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Y2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 21   : 		glm::vec4 const Y3 = glm::eulerAngleXY(Angle, 0.0f) * Y;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T38[rsp], xmm0
	lea	r8, QWORD PTR $T38[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXY<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Y3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 22   : 		glm::vec4 const Y4 = glm::eulerAngleYX(0.0f, Angle) * Y;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T39[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T39[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYX<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Y4$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 23   : 		glm::vec4 const Y5 = glm::eulerAngleXZ(Angle, 0.0f) * Y;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T40[rsp], xmm0
	lea	r8, QWORD PTR $T40[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXZ<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Y5$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 24   : 		glm::vec4 const Y6 = glm::eulerAngleZX(0.0f, Angle) * Y;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T41[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T41[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZX<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Y6$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 25   : 		glm::vec4 const Y7 = glm::eulerAngleYXZ(0.0f, Angle, 0.0f) * Y;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T42[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T43[rsp], xmm0
	lea	r9, QWORD PTR $T42[rsp]
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T43[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::eulerAngleYXZ<float>
	lea	r8, QWORD PTR Y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Y7$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 26   : 		Error += glm::all(glm::epsilonEqual(Y1, Y2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T44[rsp], xmm0
	lea	r9, QWORD PTR $T44[rsp]
	lea	r8, QWORD PTR Y2$[rsp]
	lea	rdx, QWORD PTR Y1$[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv169[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv169[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv169[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 27   : 		Error += glm::all(glm::epsilonEqual(Y1, Y3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T46[rsp], xmm0
	lea	r9, QWORD PTR $T46[rsp]
	lea	r8, QWORD PTR Y3$[rsp]
	lea	rdx, QWORD PTR Y1$[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv180[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv180[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv180[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 28   : 		Error += glm::all(glm::epsilonEqual(Y1, Y4, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T48[rsp], xmm0
	lea	r9, QWORD PTR $T48[rsp]
	lea	r8, QWORD PTR Y4$[rsp]
	lea	rdx, QWORD PTR Y1$[rsp]
	lea	rcx, QWORD PTR $T49[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv191[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv191[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv191[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 29   : 		Error += glm::all(glm::epsilonEqual(Y1, Y5, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T50[rsp], xmm0
	lea	r9, QWORD PTR $T50[rsp]
	lea	r8, QWORD PTR Y5$[rsp]
	lea	rdx, QWORD PTR Y1$[rsp]
	lea	rcx, QWORD PTR $T51[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv234[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv234[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv234[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 30   : 		Error += glm::all(glm::epsilonEqual(Y1, Y6, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T52[rsp], xmm0
	lea	r9, QWORD PTR $T52[rsp]
	lea	r8, QWORD PTR Y6$[rsp]
	lea	rdx, QWORD PTR Y1$[rsp]
	lea	rcx, QWORD PTR $T53[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv245[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv245[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv245[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 31   : 		Error += glm::all(glm::epsilonEqual(Y1, Y7, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T54[rsp], xmm0
	lea	r9, QWORD PTR $T54[rsp]
	lea	r8, QWORD PTR Y7$[rsp]
	lea	rdx, QWORD PTR Y1$[rsp]
	lea	rcx, QWORD PTR $T55[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv256[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv256[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv256[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 32   : 
; 33   : 		glm::vec4 const Z(0.0f, 0.0f, 1.0f, 1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Z$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 34   : 		glm::vec4 const Z1 = glm::rotate(glm::mat4(1.0f), Angle, X) * Z;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T56[rsp], xmm0
	lea	rdx, QWORD PTR $T56[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	r9, QWORD PTR X$[rsp]
	movss	xmm2, DWORD PTR __real@3fc90fdb
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 35   : 		glm::vec4 const Z2 = glm::eulerAngleX(Angle) * Z;

	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$eulerAngleX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM@Z ; glm::eulerAngleX<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 36   : 		glm::vec4 const Z3 = glm::eulerAngleXY(Angle, 0.0f) * Z;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T57[rsp], xmm0
	lea	r8, QWORD PTR $T57[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$eulerAngleXY@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXY<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 37   : 		glm::vec4 const Z4 = glm::eulerAngleYX(0.0f, Angle) * Z;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T58[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T58[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$eulerAngleYX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleYX<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z4$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 38   : 		glm::vec4 const Z5 = glm::eulerAngleXZ(Angle, 0.0f) * Z;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T59[rsp], xmm0
	lea	r8, QWORD PTR $T59[rsp]
	lea	rdx, QWORD PTR Angle$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$eulerAngleXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleXZ<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z5$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 39   : 		glm::vec4 const Z6 = glm::eulerAngleZX(0.0f, Angle) * Z;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T60[rsp], xmm0
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T60[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$eulerAngleZX@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM0@Z ; glm::eulerAngleZX<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z6$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 40   : 		glm::vec4 const Z7 = glm::eulerAngleYXZ(0.0f, Angle, 0.0f) * Z;

	xorps	xmm0, xmm0
	movss	DWORD PTR $T61[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T62[rsp], xmm0
	lea	r9, QWORD PTR $T61[rsp]
	lea	r8, QWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR $T62[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$eulerAngleYXZ@M@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBM00@Z ; glm::eulerAngleYXZ<float>
	lea	r8, QWORD PTR Z$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Z7$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 41   : 		Error += glm::all(glm::epsilonEqual(Z1, Z2, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T63[rsp], xmm0
	lea	r9, QWORD PTR $T63[rsp]
	lea	r8, QWORD PTR Z2$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T64[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv325[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv325[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv325[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 42   : 		Error += glm::all(glm::epsilonEqual(Z1, Z3, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T65[rsp], xmm0
	lea	r9, QWORD PTR $T65[rsp]
	lea	r8, QWORD PTR Z3$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv336[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv336[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv336[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 43   : 		Error += glm::all(glm::epsilonEqual(Z1, Z4, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T67[rsp], xmm0
	lea	r9, QWORD PTR $T67[rsp]
	lea	r8, QWORD PTR Z4$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T68[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv347[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv347[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv347[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 44   : 		Error += glm::all(glm::epsilonEqual(Z1, Z5, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T69[rsp], xmm0
	lea	r9, QWORD PTR $T69[rsp]
	lea	r8, QWORD PTR Z5$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T70[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test
	mov	DWORD PTR tv390[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv390[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv390[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 45   : 		Error += glm::all(glm::epsilonEqual(Z1, Z6, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T71[rsp], xmm0
	lea	r9, QWORD PTR $T71[rsp]
	lea	r8, QWORD PTR Z6$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T72[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test
	mov	DWORD PTR tv401[rsp], 0
	jmp	SHORT $LN24@test
$LN23@test:
	mov	DWORD PTR tv401[rsp], 1
$LN24@test:
	mov	eax, DWORD PTR tv401[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 46   : 		Error += glm::all(glm::epsilonEqual(Z1, Z7, 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T73[rsp], xmm0
	lea	r9, QWORD PTR $T73[rsp]
	lea	r8, QWORD PTR Z7$[rsp]
	lea	rdx, QWORD PTR Z1$[rsp]
	lea	rcx, QWORD PTR $T74[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test
	mov	DWORD PTR tv412[rsp], 0
	jmp	SHORT $LN26@test
$LN25@test:
	mov	DWORD PTR tv412[rsp], 1
$LN26@test:
	mov	eax, DWORD PTR tv412[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 47   : 
; 48   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 49   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@test_eulerAngleX@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2160				; 00000870H
	pop	rdi
	ret	0
?test@test_eulerAngleX@@YAHXZ ENDP			; test_eulerAngleX::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\string_cast.inl
;	COMDAT ?value@?$prefix@M@detail@glm@@SAPEBDXZ
_TEXT	SEGMENT
?value@?$prefix@M@detail@glm@@SAPEBDXZ PROC		; glm::detail::prefix<float>::value, COMDAT

; 65   : 		GLM_FUNC_QUALIFIER static char const * value() {return "";};

$LN3:
	push	rdi
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	pop	rdi
	ret	0
?value@?$prefix@M@detail@glm@@SAPEBDXZ ENDP		; glm::detail::prefix<float>::value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\string_cast.inl
;	COMDAT ?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ
_TEXT	SEGMENT
STRING_BUFFER$ = 32
text$ = 64
list$ = 4184
$T5 = 4212
__$ArrayPad$ = 4216
__$ReturnUdt$ = 4240
msg$ = 4248
?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ PROC ; glm::detail::format, COMDAT

; 11   : 	{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	mov	eax, 4224				; 00001080H
	call	__chkstk
	sub	rsp, rax
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 1048				; 00000418H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+4240]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	DWORD PTR $T5[rsp], 0

; 12   : 		std::size_t const STRING_BUFFER(4096);

	mov	QWORD PTR STRING_BUFFER$[rsp], 4096	; 00001000H

; 13   : 		char text[STRING_BUFFER];
; 14   : 		va_list list;
; 15   : 
; 16   : 		if(msg == 0)

	cmp	QWORD PTR msg$[rsp], 0
	jne	SHORT $LN2@format

; 17   : 			return std::string();

	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T5[rsp]
	or	eax, 1
	mov	DWORD PTR $T5[rsp], eax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	SHORT $LN1@format
$LN2@format:

; 18   : 
; 19   : 		va_start(list, msg);

	lea	rax, QWORD PTR msg$[rsp+8]
	mov	QWORD PTR list$[rsp], rax

; 20   : #		if(GLM_COMPILER & GLM_COMPILER_VC)
; 21   : 			vsprintf_s(text, STRING_BUFFER, msg, list);

	mov	r9, QWORD PTR list$[rsp]
	mov	r8, QWORD PTR msg$[rsp]
	mov	edx, 4096				; 00001000H
	lea	rcx, QWORD PTR text$[rsp]
	call	vsprintf_s

; 22   : #		else//
; 23   : 			vsprintf(text, msg, list);
; 24   : #		endif//
; 25   : 		va_end(list);

	mov	QWORD PTR list$[rsp], 0

; 26   : 
; 27   : 		return std::string(text);

	lea	rdx, QWORD PTR text$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T5[rsp]
	or	eax, 1
	mov	DWORD PTR $T5[rsp], eax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@format:

; 28   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4224				; 00001080H
	pop	rdi
	ret	0
?format@detail@glm@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBDZZ ENDP ; glm::detail::format
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 4668 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 4669 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4670 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 4664 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 4665 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4666 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_Ptr$1 = 32
_Al$2 = 40
$T3 = 48
this$ = 80
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT

; 4630 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 4631 :         _Mypair._Myval2._Orphan_all();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 4632 :         if (_Mypair._Myval2._Large_string_engaged()) {

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Tidy_deall

; 4633 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR _Ptr$1[rsp], rax

; 4634 :             auto& _Al          = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	QWORD PTR _Al$2[rsp], rax

; 4635 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ; std::_Destroy_in_place<char *>

; 4636 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	inc	rax
	mov	r8, rax
	mov	rdx, QWORD PTR _Ptr$1[rsp]
	mov	rcx, QWORD PTR _Al$2[rsp]
	call	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 4637 :         }
; 4638 : 
; 4639 : #if _HAS_CXX20
; 4640 :         if (_STD is_constant_evaluated()) {
; 4641 :             _Mypair._Myval2._Bx._Ptr = nullptr;
; 4642 :             _Mypair._Myval2._Mysize  = 0;
; 4643 :             _Mypair._Myval2._Myres   = 0;
; 4644 :         } else
; 4645 : #endif // _HAS_CXX20
; 4646 :         {
; 4647 :             _Mypair._Myval2._Mysize = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0

; 4648 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+32], 15

; 4649 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4650 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T3[rsp], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
	npad	1

; 4651 :         }
; 4652 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 32
$T1 = 40
this$ = 64
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT

; 4608 :     _CONSTEXPR20 void _Tidy_init() noexcept { // initialize basic_string data members

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 4609 :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 4610 :         _My_data._Mysize = 0;

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	QWORD PTR [rax+24], 0

; 4611 : 
; 4612 : #if _HAS_CXX20
; 4613 :         if (_STD is_constant_evaluated()) {
; 4614 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4615 :             auto& _Al              = _Getal();
; 4616 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4617 :             _My_data._Bx._Ptr      = _New_ptr;
; 4618 : 
; 4619 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4620 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4621 :         } else
; 4622 : #endif // _HAS_CXX20
; 4623 :         {
; 4624 :             _My_data._Myres = _BUF_SIZE - 1;

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	QWORD PTR [rax+32], 15

; 4625 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4626 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T1[rsp], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR _My_data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 4627 :         }
; 4628 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 48
_Requested$ = 56
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4515 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 4516 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	r8, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR _Requested$[rsp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth

; 4517 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
_TEXT	SEGMENT
_Masked$ = 40
$T4 = 56
_Requested$ = 80
_Old$ = 88
_Max$ = 96
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4502 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 4503 :         const size_type _Masked = _Requested | _ALLOC_MASK;

	mov	rax, QWORD PTR _Requested$[rsp]
	or	rax, 15
	mov	QWORD PTR _Masked$[rsp], rax

; 4504 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

	mov	rax, QWORD PTR _Max$[rsp]
	cmp	QWORD PTR _Masked$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 4505 :             return _Max;

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4506 :         }
; 4507 : 
; 4508 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

	xor	edx, edx
	mov	rax, QWORD PTR _Old$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Old$[rsp], rax
	jbe	SHORT $LN3@Calculate_

; 4509 :             return _Max;

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4510 :         }
; 4511 : 
; 4512 :         return (_STD max)(_Masked, _Old + _Old / 2);

	xor	edx, edx
	mov	rax, QWORD PTR _Old$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Old$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR $T4[rsp], rax
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR _Masked$[rsp]
	call	??$max@_K@std@@YAAEB_KAEB_K0@Z		; std::max<unsigned __int64>
	mov	rax, QWORD PTR [rax]
$LN1@Calculate_:

; 4513 :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Alloc_max$ = 40
_Storage_max$ = 56
$T4 = 64
$T5 = 72
$T6 = 80
this$ = 112
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT

; 3933 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 3934 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
	mov	QWORD PTR _Alloc_max$[rsp], rax

; 3935 :         const size_type _Storage_max = // can always store small string

	mov	QWORD PTR $T4[rsp], 16
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR _Alloc_max$[rsp]
	call	??$max@_K@std@@YAAEB_KAEB_K0@Z		; std::max<unsigned __int64>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Storage_max$[rsp], rax

; 3936 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3937 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	rax, QWORD PTR _Storage_max$[rsp]
	dec	rax
	mov	QWORD PTR $T5[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T6[rsp], rax
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 3938 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3939 :         );
; 3940 :     }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 48
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT

; 3911 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* c_str() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 3912 :         return _Mypair._Myval2._Myptr();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3913 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3257 :     _CONSTEXPR20 basic_string& assign(_In_z_ const _Elem* const _Ptr) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 3258 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
	mov	rcx, rax
	call	??$_Convert_size@_K@std@@YA_K_K@Z	; std::_Convert_size<unsigned __int64>
	mov	r8, rax
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3259 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
_TEXT	SEGMENT
_Old_ptr$1 = 32
$T2 = 40
$T3 = 41
this$ = 64
_Ptr$ = 72
_Count$ = 80
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3238 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 3239 :         // assign [_Ptr, _Ptr + _Count)
; 3240 :         if (_Count <= _Mypair._Myval2._Myres) {

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	cmp	QWORD PTR _Count$[rsp], rax
	ja	SHORT $LN2@assign

; 3241 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	QWORD PTR _Old_ptr$1[rsp], rax

; 3242 :             _Mypair._Myval2._Mysize = _Count;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 3243 :             _Traits::move(_Old_ptr, _Ptr, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Old_ptr$1[rsp]
	call	?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::move

; 3244 :             _Traits::assign(_Old_ptr[_Count], _Elem());

	mov	BYTE PTR $T2[rsp], 0
	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Old_ptr$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	lea	rdx, QWORD PTR $T2[rsp]
	mov	rcx, rax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3245 :             return *this;

	mov	rax, QWORD PTR this$[rsp]
	jmp	SHORT $LN1@assign
$LN2@assign:

; 3246 :         }
; 3247 : 
; 3248 :         return _Reallocate_for(

	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	mov	r9, QWORD PTR _Ptr$[rsp]
	movzx	r8d, BYTE PTR $T3[rsp]
	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
$LN1@assign:

; 3249 :             _Count,
; 3250 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3251 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3252 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3253 :             },
; 3254 :             _Ptr);
; 3255 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S8$ = 52
_To_delete$ = 72
this$ = 96
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2999 :     _CONSTEXPR20 ~basic_string() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 3000 :         _Tidy_deallocate();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 3001 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3002 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S8$[rsp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	rax, QWORD PTR $S8$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 3003 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _To_delete$[rsp], rax

; 3004 :         _Mypair._Myval2._Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 3005 :         _Delete_plain_internal(_Alproxy, _To_delete);

	mov	rdx, QWORD PTR _To_delete$[rsp]
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 3006 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3007 :     }

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
_Alproxy$ = 32
$S10$ = 52
_Proxy$ = 88
$T5 = 116
this$ = 144
_Ptr$ = 152
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2532 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T5[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
	npad	1

; 2533 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S10$[rsp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	rax, QWORD PTR $S10$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 2534 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR _Alproxy$[rsp]
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1

; 2535 :         _Tidy_init();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2536 :         assign(_Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2537 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 2538 :     }

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1
	mov	rax, QWORD PTR this$[rsp]
	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S10$ = 52
_Proxy$ = 88
$T5 = 116
this$ = 144
_Ptr$ = 152
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR this$[rbp]
	call	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S10$ = 52
_Proxy$ = 88
$T5 = 116
this$ = 144
_Ptr$ = 152
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Proxy$[rbp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2484 :         : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>

; 2485 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2486 :         _Tidy_init();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2487 :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT

; 2366 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	pop	rdi
	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT

; 2364 :         _CONSTEXPR20 _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 0
this$ = 32
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT

; 2331 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 2332 : #if _HAS_CXX20
; 2333 :         if (_STD is_constant_evaluated()) {
; 2334 :             return true;
; 2335 :         }
; 2336 : #endif // _HAS_CXX20
; 2337 :         return _BUF_SIZE <= _Myres;

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+32], 16
	jb	SHORT $LN3@Large_stri
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@Large_stri
$LN3@Large_stri:
	mov	DWORD PTR tv66[rsp], 0
$LN4@Large_stri:
	movzx	eax, BYTE PTR tv66[rsp]

; 2338 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2322 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 2323 :         const value_type* _Result = _Bx._Buf;

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	QWORD PTR _Result$[rsp], rax

; 2324 :         if (_Large_string_engaged()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Myptr

; 2325 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@D@std@@YAPEADPEAD@Z		; std::_Unfancy<char>
	mov	QWORD PTR _Result$[rsp], rax
$LN2@Myptr:

; 2326 :         }
; 2327 : 
; 2328 :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 2329 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2313 :     _CONSTEXPR20 value_type* _Myptr() noexcept {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 2314 :         value_type* _Result = _Bx._Buf;

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	QWORD PTR _Result$[rsp], rax

; 2315 :         if (_Large_string_engaged()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Myptr

; 2316 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@D@std@@YAPEADPEAD@Z		; std::_Unfancy<char>
	mov	QWORD PTR _Result$[rsp], rax
$LN2@Myptr:

; 2317 :         }
; 2318 : 
; 2319 :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 2320 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT

; 2302 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 2303 : 
; 2304 :     // length of internal buffer, [1, 16]:
; 2305 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2306 :     // roundup mask for allocated buffers, [0, 15]:
; 2307 :     static constexpr size_type _ALLOC_MASK = sizeof(value_type) <= 1 ? 15
; 2308 :                                            : sizeof(value_type) <= 2 ? 7
; 2309 :                                            : sizeof(value_type) <= 4 ? 3
; 2310 :                                            : sizeof(value_type) <= 8 ? 1
; 2311 :                                                                      : 0;
; 2312 : 
; 2313 :     _CONSTEXPR20 value_type* _Myptr() noexcept {
; 2314 :         value_type* _Result = _Bx._Buf;
; 2315 :         if (_Large_string_engaged()) {
; 2316 :             _Result = _Unfancy(_Bx._Ptr);
; 2317 :         }
; 2318 : 
; 2319 :         return _Result;
; 2320 :     }
; 2321 : 
; 2322 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 2323 :         const value_type* _Result = _Bx._Buf;
; 2324 :         if (_Large_string_engaged()) {
; 2325 :             _Result = _Unfancy(_Bx._Ptr);
; 2326 :         }
; 2327 : 
; 2328 :         return _Result;
; 2329 :     }
; 2330 : 
; 2331 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {
; 2332 : #if _HAS_CXX20
; 2333 :         if (_STD is_constant_evaluated()) {
; 2334 :             return true;
; 2335 :         }
; 2336 : #endif // _HAS_CXX20
; 2337 :         return _BUF_SIZE <= _Myres;
; 2338 :     }
; 2339 : 
; 2340 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 2341 :         // checks whether _Off is in the bounds of [0, size()]
; 2342 :         if (_Mysize < _Off) {
; 2343 :             _Xran();
; 2344 :         }
; 2345 :     }
; 2346 : 
; 2347 :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 2348 :         // checks whether _Off is in the bounds of [0, size())
; 2349 :         if (_Mysize <= _Off) {
; 2350 :             _Xran();
; 2351 :         }
; 2352 :     }
; 2353 : 
; 2354 :     [[noreturn]] static void _Xran() {
; 2355 :         _Xout_of_range("invalid string position");
; 2356 :     }
; 2357 : 
; 2358 :     _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2359 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2360 :         return (_STD min)(_Size, _Mysize - _Off);
; 2361 :     }
; 2362 : 
; 2363 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2364 :         _CONSTEXPR20 _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers
; 2365 : 
; 2366 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2367 : 
; 2368 :         value_type _Buf[_BUF_SIZE];
; 2369 :         pointer _Ptr;
; 2370 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2371 :     } _Bx;
; 2372 : 
; 2373 :     size_type _Mysize = 0; // current length of string

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0

; 2374 :     size_type _Myres  = 0; // current storage reserved for string

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+32], 0

; 2302 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, -1

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z PROC		; std::allocator<char>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$00@std@@YA_K_K@Z	; std::_Get_size_of_n<1>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2390 : [[noreturn]] inline void _Xlen_string() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 2391 :     _Xlength_error("string too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlen_strin:

; 2392 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
_Left$ = 16
_Right$ = 24
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z PROC ; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 438  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 439  : #if _HAS_CXX20
; 440  :         if (_STD is_constant_evaluated()) {
; 441  :             return _Primary_char_traits::assign(_Left, _Right);
; 442  :         }
; 443  : #endif // _HAS_CXX20
; 444  :         _Left = _Right;

	mov	rax, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR _Right$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl

; 445  :     }

	pop	rdi
	ret	0
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ENDP ; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 48
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 385  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 386  :         // find length of null-terminated string
; 387  : #if _HAS_CXX17
; 388  : #ifdef __cpp_char8_t
; 389  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 390  : #if _HAS_U8_INTRINSICS
; 391  :             return __builtin_u8strlen(_First);
; 392  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 393  :             return _Primary_char_traits::length(_First);
; 394  : #endif // _HAS_U8_INTRINSICS
; 395  :         } else
; 396  : #endif // __cpp_char8_t
; 397  :         {
; 398  :             return __builtin_strlen(_First);
; 399  :         }
; 400  : #else // _HAS_CXX17
; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

	mov	rcx, QWORD PTR _First$[rsp]
	call	strlen

; 402  : #endif // _HAS_CXX17
; 403  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 48
_First2$ = 56
_Count$ = 64
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 79   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 80   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 81   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 82   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 83   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 84   : #if _HAS_CXX20
; 85   :         if (_STD is_constant_evaluated()) {
; 86   :             // dest: [_First1, _First1 + _Count)
; 87   :             // src: [_First2, _First2 + _Count)
; 88   :             // We need to handle overlapping ranges.
; 89   :             // If _First1 is in the src range, we need a backward loop.
; 90   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 91   : 
; 92   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 93   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 94   :             bool _Loop_forward = true;
; 95   : 
; 96   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 97   :                 if (_First1 == _Src) {
; 98   :                     _Loop_forward = false;
; 99   :                     break;
; 100  :                 }
; 101  :             }
; 102  : 
; 103  :             if (_Loop_forward) {
; 104  :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 105  :                     _First1[_Idx] = _First2[_Idx];
; 106  :                 }
; 107  :             } else {
; 108  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 109  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 110  :                 }
; 111  :             }
; 112  : 
; 113  :             return _First1;
; 114  :         }
; 115  : #endif // _HAS_CXX20
; 116  : 
; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First2$[rsp]
	mov	rcx, QWORD PTR _First1$[rsp]
	call	memmove

; 118  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 119  : 
; 120  :         return _First1;

	mov	rax, QWORD PTR _First1$[rsp]

; 121  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 48
_First2$ = 56
_Count$ = 64
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap; see LWG-3085
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First2$[rsp]
	mov	rcx, QWORD PTR _First1$[rsp]
	call	memcpy

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

	mov	rax, QWORD PTR _First1$[rsp]

; 68   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1297 :     _Container_proxy* _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ PROC ; std::_Basic_container_proxy_ptr12::_Release, COMDAT

; 1299 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1300 :         _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1301 :     }

	pop	rdi
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ENDP ; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1078 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1079 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1080 :         _Orphan_all_unlocked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1081 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1219 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1220 :     if (!_Myproxy) { // no proxy, already done

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@Orphan_all

; 1221 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1222 :     }
; 1223 : 
; 1224 :     // proxy allocated, drain it
; 1225 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1226 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1227 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1228 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1229 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1231 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1232 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1233 : #if _HAS_CXX20
; 1234 :     if (_STD is_constant_evaluated()) {
; 1235 :         _Orphan_all_unlocked_v3();
; 1236 :     } else
; 1237 : #endif // _HAS_CXX20
; 1238 :     {
; 1239 :         _Orphan_all_locked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1240 :     }
; 1241 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1242 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1048 : 
; 1049 :     _Container_base12(const _Container_base12&) = delete;
; 1050 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1051 : 
; 1052 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1053 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1054 : 
; 1055 :     template <class _Alloc>
; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1058 :         _Construct_in_place(*_New_proxy, this);
; 1059 :         _Myproxy            = _New_proxy;
; 1060 :         _New_proxy->_Mycont = this;
; 1061 :     }
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1065 :         // pre: no iterators refer to the existing proxy
; 1066 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1067 :         _Construct_in_place(*_New_proxy, this);
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1070 :     }
; 1071 : 
; 1072 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1040 : 
; 1041 :     const _Container_base12* _Mycont       = nullptr;
; 1042 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 154				; 0000009aH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 166  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 80   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 319  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 264  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 265  :     return _CSTD sqrtf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sqrtf

; 266  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sin@@YAMM@Z PROC					; sin, COMDAT

; 256  : _NODISCARD _Check_return_ inline float sin(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 257  :     return _CSTD sinf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sinf

; 258  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?cos@@YAMM@Z PROC					; cos, COMDAT

; 88   : _NODISCARD _Check_return_ inline float cos(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 89   :     return _CSTD cosf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_cosf

; 90   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT vsprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
vsprintf_s PROC						; COMDAT

; 1512 :         {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1513 :             return _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_s_l

; 1514 :         }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
vsprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vsprintf_s_l
_TEXT	SEGMENT
_Result$ = 48
tv73 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsprintf_s_l PROC					; COMDAT

; 1490 :     {

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1491 :         int const _Result = __stdio_common_vsprintf_s(

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vsprintf_s
	mov	DWORD PTR _Result$[rsp], eax

; 1492 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1493 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1494 : 
; 1495 :         return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsprintf_s
	mov	DWORD PTR tv73[rsp], -1
	jmp	SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN4@vsprintf_s:
	mov	eax, DWORD PTR tv73[rsp]

; 1496 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
_vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
tv67 = 40
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rsp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
