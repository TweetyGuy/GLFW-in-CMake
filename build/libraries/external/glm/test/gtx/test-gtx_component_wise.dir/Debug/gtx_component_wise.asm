; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?min@?$numeric_limits@C@std@@SACXZ		; std::numeric_limits<signed char>::min
PUBLIC	?max@?$numeric_limits@C@std@@SACXZ		; std::numeric_limits<signed char>::max
PUBLIC	?min@?$numeric_limits@E@std@@SAEXZ		; std::numeric_limits<unsigned char>::min
PUBLIC	?max@?$numeric_limits@E@std@@SAEXZ		; std::numeric_limits<unsigned char>::max
PUBLIC	?min@?$numeric_limits@F@std@@SAFXZ		; std::numeric_limits<short>::min
PUBLIC	?max@?$numeric_limits@F@std@@SAFXZ		; std::numeric_limits<short>::max
PUBLIC	?min@?$numeric_limits@G@std@@SAGXZ		; std::numeric_limits<unsigned short>::min
PUBLIC	?max@?$numeric_limits@G@std@@SAGXZ		; std::numeric_limits<unsigned short>::max
PUBLIC	?epsilon@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::epsilon
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>
PUBLIC	??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>
PUBLIC	??$epsilonEqual@M@glm@@YA_NAEBM00@Z		; glm::epsilonEqual<float>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	?run@compNormalize@@YAHXZ			; compNormalize::run
PUBLIC	??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><int,int,int,int>
PUBLIC	??$compNormalize@ME$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@E$0A@@0@@Z ; glm::compNormalize<float,unsigned char,0,glm::tvec4>
PUBLIC	??$epsilon@M@glm@@YAMXZ				; glm::epsilon<float>
PUBLIC	??$?0HHHH@?$tvec4@C$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<signed char,0>::tvec4<signed char,0><int,int,int,int>
PUBLIC	??$compNormalize@MC$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@C$0A@@0@@Z ; glm::compNormalize<float,signed char,0,glm::tvec4>
PUBLIC	??$?0GHHG@?$tvec4@G$0A@@glm@@QEAA@GHHG@Z	; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><unsigned short,int,int,unsigned short>
PUBLIC	??$compNormalize@MG$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z ; glm::compNormalize<float,unsigned short,0,glm::tvec4>
PUBLIC	??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z		; glm::tvec4<short,0>::tvec4<short,0>
PUBLIC	??$compNormalize@MF$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@F$0A@@0@@Z ; glm::compNormalize<float,short,0,glm::tvec4>
PUBLIC	?run@compScale@@YAHXZ				; compScale::run
PUBLIC	??$compScale@EM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@E$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::compScale<unsigned char,float,0,glm::tvec4>
PUBLIC	??$compScale@CM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@C$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::compScale<signed char,float,0,glm::tvec4>
PUBLIC	??$compScale@GM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::compScale<unsigned short,float,0,glm::tvec4>
PUBLIC	??$compScale@FM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@F$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::compScale<short,float,0,glm::tvec4>
PUBLIC	main
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?call@?$compute_compNormalize@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@E$0A@@3@@Z ; glm::detail::compute_compNormalize<unsigned char,float,0,glm::tvec4,1,0>::call
PUBLIC	?call@?$compute_compNormalize@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@C$0A@@3@@Z ; glm::detail::compute_compNormalize<signed char,float,0,glm::tvec4,1,1>::call
PUBLIC	?call@?$compute_compNormalize@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z ; glm::detail::compute_compNormalize<unsigned short,float,0,glm::tvec4,1,0>::call
PUBLIC	?call@?$compute_compNormalize@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@F$0A@@3@@Z ; glm::detail::compute_compNormalize<short,float,0,glm::tvec4,1,1>::call
PUBLIC	?call@?$compute_compScale@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@E$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_compScale<unsigned char,float,0,glm::tvec4,1,0>::call
PUBLIC	?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_compScale<signed char,float,0,glm::tvec4,1,1>::call
PUBLIC	?call@?$compute_compScale@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_compScale<unsigned short,float,0,glm::tvec4,1,0>::call
PUBLIC	?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_compScale<short,float,0,glm::tvec4,1,1>::call
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator-<float,0>
PUBLIC	??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<short,0>::tvec4<short,0><float,0>
PUBLIC	??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><float,0>
PUBLIC	??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><short,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><unsigned short,0>
PUBLIC	??$?0C$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><signed char,0>
PUBLIC	??$?0E$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><unsigned char,0>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator/=<float>
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
PUBLIC	__real@00000000
PUBLIC	__real@34000000
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@42ff0000
PUBLIC	__real@437f0000
PUBLIC	__real@46ffff00
PUBLIC	__real@477fff00
PUBLIC	__real@bf800000
PUBLIC	__real@c3000000
PUBLIC	__real@c7000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@C@std@@SACXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?min@?$numeric_limits@C@std@@SACXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@C@std@@SACXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?max@?$numeric_limits@C@std@@SACXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@E@std@@SAEXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?min@?$numeric_limits@E@std@@SAEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@E@std@@SAEXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?max@?$numeric_limits@E@std@@SAEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@F@std@@SAFXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?min@?$numeric_limits@F@std@@SAFXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@F@std@@SAFXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?max@?$numeric_limits@F@std@@SAFXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@G@std@@SAGXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?min@?$numeric_limits@G@std@@SAGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@G@std@@SAGXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?max@?$numeric_limits@G@std@@SAGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?epsilon@?$numeric_limits@M@std@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?epsilon@?$numeric_limits@M@std@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?run@compNormalize@@YAHXZ DD imagerel $LN35
	DD	imagerel $LN35+1682
	DD	imagerel $unwind$?run@compNormalize@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compNormalize@ME$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@E$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$compNormalize@ME$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@E$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilon@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??$epsilon@M@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@C$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@C$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compNormalize@MC$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@C$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$compNormalize@MC$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@C$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0GHHG@?$tvec4@G$0A@@glm@@QEAA@GHHG@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?0GHHG@?$tvec4@G$0A@@glm@@QEAA@GHHG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compNormalize@MG$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$compNormalize@MG$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compNormalize@MF$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@F$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$compNormalize@MF$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@F$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?run@compScale@@YAHXZ DD imagerel $LN35
	DD	imagerel $LN35+1280
	DD	imagerel $unwind$?run@compScale@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compScale@EM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@E$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$compScale@EM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@E$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compScale@CM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@C$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$compScale@CM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@C$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compScale@GM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$compScale@GM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compScale@FM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@F$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$compScale@FM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@F$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_compNormalize@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@E$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$?call@?$compute_compNormalize@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@E$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_compNormalize@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@C$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+170
	DD	imagerel $unwind$?call@?$compute_compNormalize@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@C$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_compNormalize@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$?call@?$compute_compNormalize@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_compNormalize@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@F$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+166
	DD	imagerel $unwind$?call@?$compute_compNormalize@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@F$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_compScale@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@E$0A@@3@AEBU?$tvec4@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?call@?$compute_compScale@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@E$0A@@3@AEBU?$tvec4@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_compScale@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?call@?$compute_compScale@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0C$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?0C$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0E$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?0E$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c7000000
CONST	SEGMENT
__real@c7000000 DD 0c7000000r			; -32768
CONST	ENDS
;	COMDAT __real@c3000000
CONST	SEGMENT
__real@c3000000 DD 0c3000000r			; -128
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46ffff00
CONST	SEGMENT
__real@46ffff00 DD 046ffff00r			; 32767.5
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42ff0000
CONST	SEGMENT
__real@42ff0000 DD 042ff0000r			; 127.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@34000000
CONST	SEGMENT
__real@34000000 DD 034000000r			; 1.19209e-07
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0E$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0C$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z DD 032b01H
	DD	0120112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$0 DB 053H ; glm::detail::compute_compScale<short,float,0,glm::tvec4,1,1>::call
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	064H
	DB	00H
	ORG $+1
?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$1 DB 052H ; glm::detail::compute_compScale<short,float,0,glm::tvec4,1,1>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcVarDesc DD 068H ; glm::detail::compute_compScale<short,float,0,glm::tvec4,1,1>::call
	DD	08H
	DQ	FLAT:?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$0
	ORG $+96
?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcFrameData DD 02H ; glm::detail::compute_compScale<short,float,0,glm::tvec4,1,1>::call
	DD	00H
	DQ	FLAT:?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_compScale@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z DD 032b01H
	DD	0120112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$0 DB 053H ; glm::detail::compute_compScale<signed char,float,0,glm::tvec4,1,1>::call
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	064H
	DB	00H
	ORG $+1
?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$1 DB 052H ; glm::detail::compute_compScale<signed char,float,0,glm::tvec4,1,1>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcVarDesc DD 064H ; glm::detail::compute_compScale<signed char,float,0,glm::tvec4,1,1>::call
	DD	04H
	DQ	FLAT:?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcName$0
	ORG $+96
?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcFrameData DD 02H ; glm::detail::compute_compScale<signed char,float,0,glm::tvec4,1,1>::call
	DD	00H
	DQ	FLAT:?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_compScale@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@E$0A@@3@AEBU?$tvec4@M$0A@@3@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_compNormalize@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@F$0A@@3@@Z DD 020f01H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_compNormalize@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_compNormalize@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@C$0A@@3@@Z DD 020f01H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_compNormalize@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@E$0A@@3@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compScale@FM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@F$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compScale@GM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compScale@CM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@C$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compScale@EM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@E$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compNormalize@MF$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@F$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z DD 011701H
	DD	07017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compNormalize@MG$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0GHHG@?$tvec4@G$0A@@glm@@QEAA@GHHG@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compNormalize@MC$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@C$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@C$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilon@M@glm@@YAMXZ DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compNormalize@ME$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@E$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
xdata	SEGMENT
$unwind$?run@compNormalize@@YAHXZ DD 031a01H
	DD	0340109H
	DD	07002H
$unwind$?run@compScale@@YAHXZ DD 031a01H
	DD	02a0109H
	DD	07002H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
?run@compNormalize@@YAHXZ$rtcName$0 DB 041H		; compNormalize::run
	DB	00H
	ORG $+2
?run@compNormalize@@YAHXZ$rtcName$1 DB 041H		; compNormalize::run
	DB	00H
	ORG $+2
?run@compNormalize@@YAHXZ$rtcName$2 DB 041H		; compNormalize::run
	DB	00H
	ORG $+2
?run@compNormalize@@YAHXZ$rtcName$3 DB 041H		; compNormalize::run
	DB	00H
	ORG $+2
?run@compNormalize@@YAHXZ$rtcVarDesc DD 0d8H		; compNormalize::run
	DD	010H
	DQ	FLAT:?run@compNormalize@@YAHXZ$rtcName$3
	DD	0a8H
	DD	010H
	DQ	FLAT:?run@compNormalize@@YAHXZ$rtcName$2
	DD	078H
	DD	010H
	DQ	FLAT:?run@compNormalize@@YAHXZ$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:?run@compNormalize@@YAHXZ$rtcName$0
	ORG $+192
?run@compNormalize@@YAHXZ$rtcFrameData DD 04H		; compNormalize::run
	DD	00H
	DQ	FLAT:?run@compNormalize@@YAHXZ$rtcVarDesc
?run@compScale@@YAHXZ$rtcName$0 DB 041H			; compScale::run
	DB	00H
	ORG $+2
?run@compScale@@YAHXZ$rtcName$1 DB 041H			; compScale::run
	DB	00H
	ORG $+2
?run@compScale@@YAHXZ$rtcName$2 DB 041H			; compScale::run
	DB	00H
	ORG $+2
?run@compScale@@YAHXZ$rtcName$3 DB 041H			; compScale::run
	DB	00H
	ORG $+2
?run@compScale@@YAHXZ$rtcVarDesc DD 0a8H		; compScale::run
	DD	08H
	DQ	FLAT:?run@compScale@@YAHXZ$rtcName$3
	DD	088H
	DD	08H
	DQ	FLAT:?run@compScale@@YAHXZ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?run@compScale@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?run@compScale@@YAHXZ$rtcName$0
	ORG $+192
?run@compScale@@YAHXZ$rtcFrameData DD 04H		; compScale::run
	DD	00H
	DQ	FLAT:?run@compScale@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?epsilon@?$numeric_limits@M@std@@SAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@G@std@@SAGXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@G@std@@SAGXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@F@std@@SAFXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@F@std@@SAFXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@E@std@@SAEXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@E@std@@SAEXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@C@std@@SACXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@C@std@@SACXZ DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_div<float,0,0>::call, COMDAT

; 68   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 69   : 			return tvec4<T, P>(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	divss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	divss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	divss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	divss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 70   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_div<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator/=<float>, COMDAT

; 432  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 433  : 		return (*this = detail::compute_vec4_div<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 434  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 390  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 391  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 392  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0E$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0E$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><unsigned char,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+3]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0E$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0C$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0C$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><signed char,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, BYTE PTR [rax+1]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, BYTE PTR [rax+2]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, BYTE PTR [rax+3]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0C$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><signed char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><unsigned short,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 724  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 725  : 		return tvec4<T, P>(v) /= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator/=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 726  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><short,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	movsx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><float,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+4], ax

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+6], ax

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<short,0>::tvec4<short,0><float,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+4], ax

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+6], ax

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<short,0>::tvec4<short,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator-<float,0>, COMDAT

; 664  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 665  : 		return tvec4<T, P>(v) -= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z
_TEXT	SEGMENT
Max$ = 32
Scaled$ = 56
Result$ = 104
$T5 = 116
__$ReturnUdt$ = 160
v$ = 168
?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z PROC ; glm::detail::compute_compScale<short,float,0,glm::tvec4,1,1>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 51   : 			floatType const Max = static_cast<floatType>(std::numeric_limits<T>::max()) + static_cast<floatType>(0.5);

	call	?max@?$numeric_limits@F@std@@SAFXZ	; std::numeric_limits<short>::max
	cwde
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR Max$[rsp], xmm0

; 52   : 			vecType<floatType, P> const Scaled(v * Max);

	movss	xmm2, DWORD PTR __real@46ffff00
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR Scaled$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>

; 53   : 			vecType<T, P> const Result(Scaled - static_cast<floatType>(0.5));

	movss	xmm2, DWORD PTR __real@3f000000
	lea	rdx, QWORD PTR Scaled$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$[rsp]
	call	??$?0M$0A@@?$tvec4@F$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<short,0>::tvec4<short,0><float,0>

; 54   : 			return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR Result$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 55   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ENDP ; glm::detail::compute_compScale<short,float,0,glm::tvec4,1,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ?call@?$compute_compScale@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
__$ReturnUdt$ = 96
v$ = 104
?call@?$compute_compScale@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z PROC ; glm::detail::compute_compScale<unsigned short,float,0,glm::tvec4,1,0>::call, COMDAT

; 62   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 63   : 			return vecType<T, P>(vecType<floatType, P>(v) * static_cast<floatType>(std::numeric_limits<T>::max()));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	call	?max@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::max
	movzx	eax, ax
	cvtsi2ss xmm0, eax
	movaps	xmm2, xmm0
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0M$0A@@?$tvec4@G$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 64   : 		}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_compScale@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ENDP ; glm::detail::compute_compScale<unsigned short,float,0,glm::tvec4,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z
_TEXT	SEGMENT
Max$ = 32
Scaled$ = 56
Result$ = 100
$T5 = 116
__$ReturnUdt$ = 160
v$ = 168
?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z PROC ; glm::detail::compute_compScale<signed char,float,0,glm::tvec4,1,1>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 51   : 			floatType const Max = static_cast<floatType>(std::numeric_limits<T>::max()) + static_cast<floatType>(0.5);

	call	?max@?$numeric_limits@C@std@@SACXZ	; std::numeric_limits<signed char>::max
	movsx	eax, al
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR Max$[rsp], xmm0

; 52   : 			vecType<floatType, P> const Scaled(v * Max);

	movss	xmm2, DWORD PTR __real@42ff0000
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR Scaled$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>

; 53   : 			vecType<T, P> const Result(Scaled - static_cast<floatType>(0.5));

	movss	xmm2, DWORD PTR __real@3f000000
	lea	rdx, QWORD PTR Scaled$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$[rsp]
	call	??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>

; 54   : 			return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 55   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ENDP ; glm::detail::compute_compScale<signed char,float,0,glm::tvec4,1,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ?call@?$compute_compScale@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@E$0A@@3@AEBU?$tvec4@M$0A@@3@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
__$ReturnUdt$ = 96
v$ = 104
?call@?$compute_compScale@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@E$0A@@3@AEBU?$tvec4@M$0A@@3@@Z PROC ; glm::detail::compute_compScale<unsigned char,float,0,glm::tvec4,1,0>::call, COMDAT

; 62   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 63   : 			return vecType<T, P>(vecType<floatType, P>(v) * static_cast<floatType>(std::numeric_limits<T>::max()));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	call	?max@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::max
	movzx	eax, al
	cvtsi2ss xmm0, eax
	movaps	xmm2, xmm0
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 64   : 		}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_compScale@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@E$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ENDP ; glm::detail::compute_compScale<unsigned char,float,0,glm::tvec4,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ?call@?$compute_compNormalize@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@F$0A@@3@@Z
_TEXT	SEGMENT
Min$ = 32
Max$ = 36
$T1 = 40
$T2 = 56
$T3 = 72
$T4 = 88
__$ReturnUdt$ = 128
v$ = 136
?call@?$compute_compNormalize@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@F$0A@@3@@Z PROC ; glm::detail::compute_compNormalize<short,float,0,glm::tvec4,1,1>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 18   : 			floatType const Min = static_cast<floatType>(std::numeric_limits<T>::min());

	call	?min@?$numeric_limits@F@std@@SAFXZ	; std::numeric_limits<short>::min
	cwde
	cvtsi2ss xmm0, eax
	movss	DWORD PTR Min$[rsp], xmm0

; 19   : 			floatType const Max = static_cast<floatType>(std::numeric_limits<T>::max());

	call	?max@?$numeric_limits@F@std@@SAFXZ	; std::numeric_limits<short>::max
	cwde
	cvtsi2ss xmm0, eax
	movss	DWORD PTR Max$[rsp], xmm0

; 20   : 			return (vecType<floatType, P>(v) - Min) / (Max - Min) * static_cast<floatType>(2) - static_cast<floatType>(1);

	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0F$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@F$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><short,0>
	movss	xmm2, DWORD PTR __real@c7000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	movss	xmm2, DWORD PTR __real@477fff00
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	movss	xmm2, DWORD PTR __real@40000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 21   : 		}

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?call@?$compute_compNormalize@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@F$0A@@3@@Z ENDP ; glm::detail::compute_compNormalize<short,float,0,glm::tvec4,1,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ?call@?$compute_compNormalize@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z
_TEXT	SEGMENT
$T1 = 32
tv67 = 48
__$ReturnUdt$ = 80
v$ = 88
?call@?$compute_compNormalize@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z PROC ; glm::detail::compute_compNormalize<unsigned short,float,0,glm::tvec4,1,0>::call, COMDAT

; 28   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 29   : 			return vecType<floatType, P>(v) / static_cast<floatType>(std::numeric_limits<T>::max());

	call	?max@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::max
	movzx	eax, ax
	cvtsi2ss xmm0, eax
	movss	DWORD PTR tv67[rsp], xmm0
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0G$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@G$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><unsigned short,0>
	movss	xmm0, DWORD PTR tv67[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 30   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_compNormalize@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z ENDP ; glm::detail::compute_compNormalize<unsigned short,float,0,glm::tvec4,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ?call@?$compute_compNormalize@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@C$0A@@3@@Z
_TEXT	SEGMENT
Min$ = 32
Max$ = 36
$T1 = 40
$T2 = 56
$T3 = 72
$T4 = 88
__$ReturnUdt$ = 128
v$ = 136
?call@?$compute_compNormalize@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@C$0A@@3@@Z PROC ; glm::detail::compute_compNormalize<signed char,float,0,glm::tvec4,1,1>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 18   : 			floatType const Min = static_cast<floatType>(std::numeric_limits<T>::min());

	call	?min@?$numeric_limits@C@std@@SACXZ	; std::numeric_limits<signed char>::min
	movsx	eax, al
	cvtsi2ss xmm0, eax
	movss	DWORD PTR Min$[rsp], xmm0

; 19   : 			floatType const Max = static_cast<floatType>(std::numeric_limits<T>::max());

	call	?max@?$numeric_limits@C@std@@SACXZ	; std::numeric_limits<signed char>::max
	movsx	eax, al
	cvtsi2ss xmm0, eax
	movss	DWORD PTR Max$[rsp], xmm0

; 20   : 			return (vecType<floatType, P>(v) - Min) / (Max - Min) * static_cast<floatType>(2) - static_cast<floatType>(1);

	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0C$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@C$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><signed char,0>
	movss	xmm2, DWORD PTR __real@c3000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	movss	xmm2, DWORD PTR __real@437f0000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	movss	xmm2, DWORD PTR __real@40000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 21   : 		}

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?call@?$compute_compNormalize@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@C$0A@@3@@Z ENDP ; glm::detail::compute_compNormalize<signed char,float,0,glm::tvec4,1,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ?call@?$compute_compNormalize@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@E$0A@@3@@Z
_TEXT	SEGMENT
$T1 = 32
tv67 = 48
__$ReturnUdt$ = 80
v$ = 88
?call@?$compute_compNormalize@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@E$0A@@3@@Z PROC ; glm::detail::compute_compNormalize<unsigned char,float,0,glm::tvec4,1,0>::call, COMDAT

; 28   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 29   : 			return vecType<floatType, P>(v) / static_cast<floatType>(std::numeric_limits<T>::max());

	call	?max@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::max
	movzx	eax, al
	cvtsi2ss xmm0, eax
	movss	DWORD PTR tv67[rsp], xmm0
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0E$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@E$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><unsigned char,0>
	movss	xmm0, DWORD PTR tv67[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 30   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_compNormalize@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@E$0A@@3@@Z ENDP ; glm::detail::compute_compNormalize<unsigned char,float,0,glm::tvec4,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_component_wise.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 108  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 109  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 110  : 
; 111  : 	Error += compNormalize::run();

	call	?run@compNormalize@@YAHXZ		; compNormalize::run
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 112  : 	Error += compScale::run();

	call	?run@compScale@@YAHXZ			; compScale::run
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 113  : 
; 114  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 115  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ??$compScale@FM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@F$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$compScale@FM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@F$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::compScale<short,float,0,glm::tvec4>, COMDAT

; 87   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 88   : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "'compScale' accepts only floating-point types for 'floatType' template parameter");
; 89   : 
; 90   : 		return detail::compute_compScale<T, floatType, P, vecType, std::numeric_limits<T>::is_integer, std::numeric_limits<T>::is_signed>::call(v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_compScale@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@F$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_compScale<short,float,0,glm::tvec4,1,1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 91   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$compScale@FM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@F$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::compScale<short,float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ??$compScale@GM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$compScale@GM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::compScale<unsigned short,float,0,glm::tvec4>, COMDAT

; 87   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 88   : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "'compScale' accepts only floating-point types for 'floatType' template parameter");
; 89   : 
; 90   : 		return detail::compute_compScale<T, floatType, P, vecType, std::numeric_limits<T>::is_integer, std::numeric_limits<T>::is_signed>::call(v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_compScale@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@G$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_compScale<unsigned short,float,0,glm::tvec4,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 91   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$compScale@GM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::compScale<unsigned short,float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ??$compScale@CM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@C$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$compScale@CM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@C$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::compScale<signed char,float,0,glm::tvec4>, COMDAT

; 87   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 88   : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "'compScale' accepts only floating-point types for 'floatType' template parameter");
; 89   : 
; 90   : 		return detail::compute_compScale<T, floatType, P, vecType, std::numeric_limits<T>::is_integer, std::numeric_limits<T>::is_signed>::call(v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_compScale@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@C$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_compScale<signed char,float,0,glm::tvec4,1,1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 91   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$compScale@CM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@C$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::compScale<signed char,float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ??$compScale@EM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@E$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$compScale@EM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@E$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::compScale<unsigned char,float,0,glm::tvec4>, COMDAT

; 87   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 88   : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "'compScale' accepts only floating-point types for 'floatType' template parameter");
; 89   : 
; 90   : 		return detail::compute_compScale<T, floatType, P, vecType, std::numeric_limits<T>::is_integer, std::numeric_limits<T>::is_signed>::call(v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_compScale@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@E$0A@@3@AEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_compScale<unsigned char,float,0,glm::tvec4,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 91   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$compScale@EM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@E$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::compScale<unsigned char,float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_component_wise.cpp
_TEXT	SEGMENT
Error$ = 48
A$7 = 68
A$8 = 100
A$9 = 136
A$10 = 168
$T11 = 180
$T12 = 196
$T13 = 212
$T14 = 228
tv64 = 244
tv76 = 248
tv78 = 252
tv83 = 256
tv87 = 260
tv91 = 264
tv135 = 268
tv139 = 272
tv143 = 276
tv147 = 280
tv149 = 284
tv161 = 288
tv163 = 292
tv168 = 296
tv172 = 300
tv176 = 304
tv188 = 308
tv224 = 312
tv228 = 316
tv232 = 320
?run@compScale@@YAHXZ PROC				; compScale::run

; 64   : 	{

$LN35:
	push	rdi
	sub	rsp, 336				; 00000150H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 65   : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 66   : 
; 67   : 		{
; 68   : 			glm::u8vec4 const A = glm::compScale<glm::u8>(glm::vec4(0.0f, 0.2f, 0.5f, 1.0f));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3e4ccccd
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$7[rsp]
	call	??$compScale@EM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@E$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::compScale<unsigned char,float,0,glm::tvec4>

; 69   : 
; 70   : 			Error += A.x == std::numeric_limits<glm::u8>::min() ? 0 : 1;

	movzx	eax, BYTE PTR A$7[rsp]
	mov	DWORD PTR tv64[rsp], eax
	call	?min@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::min
	movzx	eax, al
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	jne	SHORT $LN3@run
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN4@run
$LN3@run:
	mov	DWORD PTR tv76[rsp], 1
$LN4@run:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 71   : 			Error += A.y < (std::numeric_limits<glm::u8>::max() >> 2) ? 0 : 1;

	movzx	eax, BYTE PTR A$7[rsp+1]
	mov	DWORD PTR tv78[rsp], eax
	call	?max@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::max
	movzx	eax, al
	sar	eax, 2
	mov	ecx, DWORD PTR tv78[rsp]
	cmp	ecx, eax
	jge	SHORT $LN5@run
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN6@run
$LN5@run:
	mov	DWORD PTR tv83[rsp], 1
$LN6@run:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 72   : 			Error += A.z == 127 ? 0 : 1;

	movzx	eax, BYTE PTR A$7[rsp+2]
	cmp	eax, 127				; 0000007fH
	jne	SHORT $LN7@run
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN8@run
$LN7@run:
	mov	DWORD PTR tv87[rsp], 1
$LN8@run:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 73   : 			Error += A.w == 255 ? 0 : 1;

	movzx	eax, BYTE PTR A$7[rsp+3]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN9@run
	mov	DWORD PTR tv91[rsp], 0
	jmp	SHORT $LN10@run
$LN9@run:
	mov	DWORD PTR tv91[rsp], 1
$LN10@run:
	mov	eax, DWORD PTR tv91[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 74   : 		}
; 75   : 
; 76   : 		{
; 77   : 			glm::i8vec4 const A = glm::compScale<glm::i8>(glm::vec4(0.0f,-1.0f, 0.5f, 1.0f));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@bf800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$8[rsp]
	call	??$compScale@CM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@C$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::compScale<signed char,float,0,glm::tvec4>

; 78   : 
; 79   : 			Error += A.x == 0 ? 0 : 1;

	movsx	eax, BYTE PTR A$8[rsp]
	test	eax, eax
	jne	SHORT $LN11@run
	mov	DWORD PTR tv135[rsp], 0
	jmp	SHORT $LN12@run
$LN11@run:
	mov	DWORD PTR tv135[rsp], 1
$LN12@run:
	mov	eax, DWORD PTR tv135[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 80   : 			Error += A.y == -128 ? 0 : 1;

	movsx	eax, BYTE PTR A$8[rsp+1]
	cmp	eax, -128				; ffffffffffffff80H
	jne	SHORT $LN13@run
	mov	DWORD PTR tv139[rsp], 0
	jmp	SHORT $LN14@run
$LN13@run:
	mov	DWORD PTR tv139[rsp], 1
$LN14@run:
	mov	eax, DWORD PTR tv139[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 81   : 			Error += A.z == 63 ? 0 : 1;

	movsx	eax, BYTE PTR A$8[rsp+2]
	cmp	eax, 63					; 0000003fH
	jne	SHORT $LN15@run
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN16@run
$LN15@run:
	mov	DWORD PTR tv143[rsp], 1
$LN16@run:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 82   : 			Error += A.w == 127 ? 0 : 1;

	movsx	eax, BYTE PTR A$8[rsp+3]
	cmp	eax, 127				; 0000007fH
	jne	SHORT $LN17@run
	mov	DWORD PTR tv147[rsp], 0
	jmp	SHORT $LN18@run
$LN17@run:
	mov	DWORD PTR tv147[rsp], 1
$LN18@run:
	mov	eax, DWORD PTR tv147[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 83   : 		}
; 84   : 
; 85   : 		{
; 86   : 			glm::u16vec4 const A = glm::compScale<glm::u16>(glm::vec4(0.0f, 0.2f, 0.5f, 1.0f));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3e4ccccd
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$9[rsp]
	call	??$compScale@GM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@G$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::compScale<unsigned short,float,0,glm::tvec4>

; 87   : 
; 88   : 			Error += A.x == std::numeric_limits<glm::u16>::min() ? 0 : 1;

	movzx	eax, WORD PTR A$9[rsp]
	mov	DWORD PTR tv149[rsp], eax
	call	?min@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::min
	movzx	eax, ax
	mov	ecx, DWORD PTR tv149[rsp]
	cmp	ecx, eax
	jne	SHORT $LN19@run
	mov	DWORD PTR tv161[rsp], 0
	jmp	SHORT $LN20@run
$LN19@run:
	mov	DWORD PTR tv161[rsp], 1
$LN20@run:
	mov	eax, DWORD PTR tv161[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 89   : 			Error += A.y < (std::numeric_limits<glm::u16>::max() >> 2) ? 0 : 1;

	movzx	eax, WORD PTR A$9[rsp+2]
	mov	DWORD PTR tv163[rsp], eax
	call	?max@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::max
	movzx	eax, ax
	sar	eax, 2
	mov	ecx, DWORD PTR tv163[rsp]
	cmp	ecx, eax
	jge	SHORT $LN21@run
	mov	DWORD PTR tv168[rsp], 0
	jmp	SHORT $LN22@run
$LN21@run:
	mov	DWORD PTR tv168[rsp], 1
$LN22@run:
	mov	eax, DWORD PTR tv168[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 90   : 			Error += A.z == 32767 ? 0 : 1;

	movzx	eax, WORD PTR A$9[rsp+4]
	cmp	eax, 32767				; 00007fffH
	jne	SHORT $LN23@run
	mov	DWORD PTR tv172[rsp], 0
	jmp	SHORT $LN24@run
$LN23@run:
	mov	DWORD PTR tv172[rsp], 1
$LN24@run:
	mov	eax, DWORD PTR tv172[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 91   : 			Error += A.w == 65535 ? 0 : 1;

	movzx	eax, WORD PTR A$9[rsp+6]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN25@run
	mov	DWORD PTR tv176[rsp], 0
	jmp	SHORT $LN26@run
$LN25@run:
	mov	DWORD PTR tv176[rsp], 1
$LN26@run:
	mov	eax, DWORD PTR tv176[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 92   : 		}
; 93   : 
; 94   : 		{
; 95   : 			glm::i16vec4 const A = glm::compScale<glm::i16>(glm::vec4(0.0f,-1.0f, 0.5f, 1.0f));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@bf800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$10[rsp]
	call	??$compScale@FM$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@F$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::compScale<short,float,0,glm::tvec4>

; 96   : 
; 97   : 			Error += A.x == 0 ? 0 : 1;

	movsx	eax, WORD PTR A$10[rsp]
	test	eax, eax
	jne	SHORT $LN27@run
	mov	DWORD PTR tv188[rsp], 0
	jmp	SHORT $LN28@run
$LN27@run:
	mov	DWORD PTR tv188[rsp], 1
$LN28@run:
	mov	eax, DWORD PTR tv188[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 98   : 			Error += A.y == -32768 ? 0 : 1;

	movsx	eax, WORD PTR A$10[rsp+2]
	cmp	eax, -32768				; ffffffffffff8000H
	jne	SHORT $LN29@run
	mov	DWORD PTR tv224[rsp], 0
	jmp	SHORT $LN30@run
$LN29@run:
	mov	DWORD PTR tv224[rsp], 1
$LN30@run:
	mov	eax, DWORD PTR tv224[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 99   : 			Error += A.z == 16383 ? 0 : 1;

	movsx	eax, WORD PTR A$10[rsp+4]
	cmp	eax, 16383				; 00003fffH
	jne	SHORT $LN31@run
	mov	DWORD PTR tv228[rsp], 0
	jmp	SHORT $LN32@run
$LN31@run:
	mov	DWORD PTR tv228[rsp], 1
$LN32@run:
	mov	eax, DWORD PTR tv228[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 100  : 			Error += A.w == 32767 ? 0 : 1;

	movsx	eax, WORD PTR A$10[rsp+6]
	cmp	eax, 32767				; 00007fffH
	jne	SHORT $LN33@run
	mov	DWORD PTR tv232[rsp], 0
	jmp	SHORT $LN34@run
$LN33@run:
	mov	DWORD PTR tv232[rsp], 1
$LN34@run:
	mov	eax, DWORD PTR tv232[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 101  : 		}
; 102  : 
; 103  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 104  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?run@compScale@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 336				; 00000150H
	pop	rdi
	ret	0
?run@compScale@@YAHXZ ENDP				; compScale::run
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ??$compNormalize@MF$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@F$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$compNormalize@MF$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@F$0A@@0@@Z PROC ; glm::compNormalize<float,short,0,glm::tvec4>, COMDAT

; 79   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 80   : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "'compNormalize' accepts only floating-point types for 'floatType' template parameter");
; 81   : 
; 82   : 		return detail::compute_compNormalize<T, floatType, P, vecType, std::numeric_limits<T>::is_integer, std::numeric_limits<T>::is_signed>::call(v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_compNormalize@FM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@F$0A@@3@@Z ; glm::detail::compute_compNormalize<short,float,0,glm::tvec4,1,1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 83   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$compNormalize@MF$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@F$0A@@0@@Z ENDP ; glm::compNormalize<float,short,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z PROC			; glm::tvec4<short,0>::tvec4<short,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR a$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR b$[rsp]
	mov	WORD PTR [rax+2], cx
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR c$[rsp]
	mov	WORD PTR [rax+4], cx
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR d$[rsp]
	mov	WORD PTR [rax+6], cx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z ENDP			; glm::tvec4<short,0>::tvec4<short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ??$compNormalize@MG$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$compNormalize@MG$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z PROC ; glm::compNormalize<float,unsigned short,0,glm::tvec4>, COMDAT

; 79   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 80   : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "'compNormalize' accepts only floating-point types for 'floatType' template parameter");
; 81   : 
; 82   : 		return detail::compute_compNormalize<T, floatType, P, vecType, std::numeric_limits<T>::is_integer, std::numeric_limits<T>::is_signed>::call(v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_compNormalize@GM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@G$0A@@3@@Z ; glm::detail::compute_compNormalize<unsigned short,float,0,glm::tvec4,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 83   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$compNormalize@MG$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z ENDP ; glm::compNormalize<float,unsigned short,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0GHHG@?$tvec4@G$0A@@glm@@QEAA@GHHG@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0GHHG@?$tvec4@G$0A@@glm@@QEAA@GHHG@Z PROC		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><unsigned short,int,int,unsigned short>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR a$[rsp]
	mov	WORD PTR [rax], cx

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR b$[rsp]
	mov	WORD PTR [rax+2], cx

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR c$[rsp]
	mov	WORD PTR [rax+4], cx

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR d$[rsp]
	mov	WORD PTR [rax+6], cx

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0GHHG@?$tvec4@G$0A@@glm@@QEAA@GHHG@Z ENDP		; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><unsigned short,int,int,unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ??$compNormalize@MC$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@C$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$compNormalize@MC$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@C$0A@@0@@Z PROC ; glm::compNormalize<float,signed char,0,glm::tvec4>, COMDAT

; 79   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 80   : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "'compNormalize' accepts only floating-point types for 'floatType' template parameter");
; 81   : 
; 82   : 		return detail::compute_compNormalize<T, floatType, P, vecType, std::numeric_limits<T>::is_integer, std::numeric_limits<T>::is_signed>::call(v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_compNormalize@CM$0A@Utvec4@glm@@$00$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@C$0A@@3@@Z ; glm::detail::compute_compNormalize<signed char,float,0,glm::tvec4,1,1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 83   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$compNormalize@MC$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@C$0A@@0@@Z ENDP ; glm::compNormalize<float,signed char,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@C$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@C$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<signed char,0>::tvec4<signed char,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rax+2], cl

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR d$[rsp]
	mov	BYTE PTR [rax+3], cl

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@C$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<signed char,0>::tvec4<signed char,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$epsilon@M@glm@@YAMXZ
_TEXT	SEGMENT
??$epsilon@M@glm@@YAMXZ PROC				; glm::epsilon<float>, COMDAT

; 10   : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 11   : 		return std::numeric_limits<genType>::epsilon();

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon

; 12   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilon@M@glm@@YAMXZ ENDP				; glm::epsilon<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\component_wise.inl
;	COMDAT ??$compNormalize@ME$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@E$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$compNormalize@ME$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@E$0A@@0@@Z PROC ; glm::compNormalize<float,unsigned char,0,glm::tvec4>, COMDAT

; 79   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 80   : 		GLM_STATIC_ASSERT(std::numeric_limits<floatType>::is_iec559, "'compNormalize' accepts only floating-point types for 'floatType' template parameter");
; 81   : 
; 82   : 		return detail::compute_compNormalize<T, floatType, P, vecType, std::numeric_limits<T>::is_integer, std::numeric_limits<T>::is_signed>::call(v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_compNormalize@EM$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU?$tvec4@E$0A@@3@@Z ; glm::detail::compute_compNormalize<unsigned char,float,0,glm::tvec4,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 83   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$compNormalize@ME$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@E$0A@@0@@Z ENDP ; glm::compNormalize<float,unsigned char,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rax+2], cl

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR d$[rsp]
	mov	BYTE PTR [rax+3], cl

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_component_wise.cpp
_TEXT	SEGMENT
Error$ = 48
A$7 = 72
A$8 = 120
A$9 = 168
A$10 = 216
$T11 = 244
$T12 = 248
$T13 = 252
$T14 = 256
$T15 = 260
$T16 = 264
$T17 = 268
$T18 = 272
$T19 = 276
$T20 = 280
$T21 = 284
$T22 = 292
$T23 = 296
$T24 = 300
$T25 = 304
$T26 = 308
$T27 = 316
$T28 = 320
$T29 = 324
$T30 = 328
tv79 = 332
tv82 = 336
tv85 = 340
tv94 = 344
tv143 = 348
tv146 = 352
tv149 = 356
tv158 = 360
tv164 = 364
tv168 = 368
tv172 = 372
tv184 = 376
tv187 = 380
tv190 = 384
tv199 = 388
tv67 = 392
tv218 = 396
tv221 = 400
tv256 = 404
tv265 = 408
?run@compNormalize@@YAHXZ PROC				; compNormalize::run

; 10   : 	{

$LN35:
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 92					; 0000005cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11   : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 12   : 
; 13   : 		{
; 14   : 			glm::vec4 const A = glm::compNormalize<float>(glm::u8vec4(0, 127, 128, 255));

	mov	DWORD PTR [rsp+32], 255			; 000000ffH
	mov	r9d, 128				; 00000080H
	mov	r8d, 127				; 0000007fH
	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$7[rsp]
	call	??$compNormalize@ME$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@E$0A@@0@@Z ; glm::compNormalize<float,unsigned char,0,glm::tvec4>

; 15   : 
; 16   : 			Error += glm::epsilonEqual(A.x, 0.0f, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T12[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T13[rsp], xmm0
	lea	r8, QWORD PTR $T12[rsp]
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR A$7[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@run
	mov	DWORD PTR tv79[rsp], 0
	jmp	SHORT $LN4@run
$LN3@run:
	mov	DWORD PTR tv79[rsp], 1
$LN4@run:
	mov	eax, DWORD PTR tv79[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 17   : 			Error += A.y < 0.5f ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR A$7[rsp+4]
	jbe	SHORT $LN5@run
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN6@run
$LN5@run:
	mov	DWORD PTR tv82[rsp], 1
$LN6@run:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 18   : 			Error += A.z > 0.5f ? 0 : 1;

	movss	xmm0, DWORD PTR A$7[rsp+8]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN7@run
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN8@run
$LN7@run:
	mov	DWORD PTR tv85[rsp], 1
$LN8@run:
	mov	eax, DWORD PTR tv85[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 19   : 			Error += glm::epsilonEqual(A.w, 1.0f, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T14[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T15[rsp], xmm0
	lea	r8, QWORD PTR $T14[rsp]
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR A$7[rsp+12]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@run
	mov	DWORD PTR tv94[rsp], 0
	jmp	SHORT $LN10@run
$LN9@run:
	mov	DWORD PTR tv94[rsp], 1
$LN10@run:
	mov	eax, DWORD PTR tv94[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 20   : 		}
; 21   : 
; 22   : 		{
; 23   : 			glm::vec4 const A = glm::compNormalize<float>(glm::i8vec4(-128, -1, 0, 127));

	mov	DWORD PTR [rsp+32], 127			; 0000007fH
	xor	r9d, r9d
	mov	r8d, -1
	mov	edx, -128				; ffffffffffffff80H
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?0HHHH@?$tvec4@C$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<signed char,0>::tvec4<signed char,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$8[rsp]
	call	??$compNormalize@MC$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@C$0A@@0@@Z ; glm::compNormalize<float,signed char,0,glm::tvec4>

; 24   : 
; 25   : 			Error += glm::epsilonEqual(A.x,-1.0f, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T17[rsp], xmm0
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR $T18[rsp], xmm0
	lea	r8, QWORD PTR $T17[rsp]
	lea	rdx, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR A$8[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@run
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN12@run
$LN11@run:
	mov	DWORD PTR tv143[rsp], 1
$LN12@run:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 26   : 			Error += A.y < 0.0f ? 0 : 1;

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR A$8[rsp+4]
	jbe	SHORT $LN13@run
	mov	DWORD PTR tv146[rsp], 0
	jmp	SHORT $LN14@run
$LN13@run:
	mov	DWORD PTR tv146[rsp], 1
$LN14@run:
	mov	eax, DWORD PTR tv146[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 27   : 			Error += A.z > 0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR A$8[rsp+8]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN15@run
	mov	DWORD PTR tv149[rsp], 0
	jmp	SHORT $LN16@run
$LN15@run:
	mov	DWORD PTR tv149[rsp], 1
$LN16@run:
	mov	eax, DWORD PTR tv149[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 28   : 			Error += glm::epsilonEqual(A.w, 1.0f, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T19[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T20[rsp], xmm0
	lea	r8, QWORD PTR $T19[rsp]
	lea	rdx, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR A$8[rsp+12]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@run
	mov	DWORD PTR tv158[rsp], 0
	jmp	SHORT $LN18@run
$LN17@run:
	mov	DWORD PTR tv158[rsp], 1
$LN18@run:
	mov	eax, DWORD PTR tv158[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 29   : 		}
; 30   : 
; 31   : 		{
; 32   : 			glm::vec4 const A = glm::compNormalize<float>(glm::u16vec4(

	call	?max@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::max
	mov	WORD PTR tv164[rsp], ax
	call	?max@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::max
	movzx	eax, ax
	sar	eax, 1
	inc	eax
	mov	DWORD PTR tv168[rsp], eax
	call	?max@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::max
	movzx	eax, ax
	sar	eax, 1
	mov	DWORD PTR tv172[rsp], eax
	call	?min@?$numeric_limits@G@std@@SAGXZ	; std::numeric_limits<unsigned short>::min
	movzx	ecx, WORD PTR tv164[rsp]
	mov	WORD PTR [rsp+32], cx
	mov	ecx, DWORD PTR tv168[rsp]
	mov	r9d, ecx
	mov	ecx, DWORD PTR tv172[rsp]
	mov	r8d, ecx
	movzx	edx, ax
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?0GHHG@?$tvec4@G$0A@@glm@@QEAA@GHHG@Z ; glm::tvec4<unsigned short,0>::tvec4<unsigned short,0><unsigned short,int,int,unsigned short>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$9[rsp]
	call	??$compNormalize@MG$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@G$0A@@0@@Z ; glm::compNormalize<float,unsigned short,0,glm::tvec4>

; 33   : 				std::numeric_limits<glm::u16>::min(),
; 34   : 				(std::numeric_limits<glm::u16>::max() >> 1) + 0,
; 35   : 				(std::numeric_limits<glm::u16>::max() >> 1) + 1,
; 36   : 				std::numeric_limits<glm::u16>::max()));
; 37   : 
; 38   : 			Error += glm::epsilonEqual(A.x, 0.0f, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T22[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T23[rsp], xmm0
	lea	r8, QWORD PTR $T22[rsp]
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR A$9[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@run
	mov	DWORD PTR tv184[rsp], 0
	jmp	SHORT $LN20@run
$LN19@run:
	mov	DWORD PTR tv184[rsp], 1
$LN20@run:
	mov	eax, DWORD PTR tv184[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 39   : 			Error += A.y < 0.5f ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR A$9[rsp+4]
	jbe	SHORT $LN21@run
	mov	DWORD PTR tv187[rsp], 0
	jmp	SHORT $LN22@run
$LN21@run:
	mov	DWORD PTR tv187[rsp], 1
$LN22@run:
	mov	eax, DWORD PTR tv187[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 40   : 			Error += A.z > 0.5f ? 0 : 1;

	movss	xmm0, DWORD PTR A$9[rsp+8]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN23@run
	mov	DWORD PTR tv190[rsp], 0
	jmp	SHORT $LN24@run
$LN23@run:
	mov	DWORD PTR tv190[rsp], 1
$LN24@run:
	mov	eax, DWORD PTR tv190[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 41   : 			Error += glm::epsilonEqual(A.w, 1.0f, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T24[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T25[rsp], xmm0
	lea	r8, QWORD PTR $T24[rsp]
	lea	rdx, QWORD PTR $T25[rsp]
	lea	rcx, QWORD PTR A$9[rsp+12]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@run
	mov	DWORD PTR tv199[rsp], 0
	jmp	SHORT $LN26@run
$LN25@run:
	mov	DWORD PTR tv199[rsp], 1
$LN26@run:
	mov	eax, DWORD PTR tv199[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 42   : 		}
; 43   : 
; 44   : 		{
; 45   : 			glm::vec4 const A = glm::compNormalize<float>(glm::i16vec4(

	call	?max@?$numeric_limits@F@std@@SAFXZ	; std::numeric_limits<short>::max
	mov	WORD PTR tv67[rsp], ax
	call	?min@?$numeric_limits@F@std@@SAFXZ	; std::numeric_limits<short>::min
	movzx	ecx, WORD PTR tv67[rsp]
	mov	WORD PTR [rsp+32], cx
	xor	r9d, r9d
	mov	r8w, -1
	movzx	edx, ax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??0?$tvec4@F$0A@@glm@@QEAA@FFFF@Z	; glm::tvec4<short,0>::tvec4<short,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$10[rsp]
	call	??$compNormalize@MF$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@F$0A@@0@@Z ; glm::compNormalize<float,short,0,glm::tvec4>

; 46   : 				std::numeric_limits<glm::i16>::min(),
; 47   : 				static_cast<glm::i16>(-1),
; 48   : 				static_cast<glm::i16>(0),
; 49   : 				std::numeric_limits<glm::i16>::max()));
; 50   : 
; 51   : 			Error += glm::epsilonEqual(A.x,-1.0f, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T27[rsp], xmm0
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR $T28[rsp], xmm0
	lea	r8, QWORD PTR $T27[rsp]
	lea	rdx, QWORD PTR $T28[rsp]
	lea	rcx, QWORD PTR A$10[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@run
	mov	DWORD PTR tv218[rsp], 0
	jmp	SHORT $LN28@run
$LN27@run:
	mov	DWORD PTR tv218[rsp], 1
$LN28@run:
	mov	eax, DWORD PTR tv218[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 52   : 			Error += A.y < 0.0f ? 0 : 1;

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR A$10[rsp+4]
	jbe	SHORT $LN29@run
	mov	DWORD PTR tv221[rsp], 0
	jmp	SHORT $LN30@run
$LN29@run:
	mov	DWORD PTR tv221[rsp], 1
$LN30@run:
	mov	eax, DWORD PTR tv221[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 53   : 			Error += A.z > 0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR A$10[rsp+8]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN31@run
	mov	DWORD PTR tv256[rsp], 0
	jmp	SHORT $LN32@run
$LN31@run:
	mov	DWORD PTR tv256[rsp], 1
$LN32@run:
	mov	eax, DWORD PTR tv256[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 54   : 			Error += glm::epsilonEqual(A.w, 1.0f, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T29[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T30[rsp], xmm0
	lea	r8, QWORD PTR $T29[rsp]
	lea	rdx, QWORD PTR $T30[rsp]
	lea	rcx, QWORD PTR A$10[rsp+12]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@run
	mov	DWORD PTR tv265[rsp], 0
	jmp	SHORT $LN34@run
$LN33@run:
	mov	DWORD PTR tv265[rsp], 1
$LN34@run:
	mov	eax, DWORD PTR tv265[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 55   : 		}
; 56   : 
; 57   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 58   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?run@compNormalize@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 416				; 000001a0H
	pop	rdi
	ret	0
?run@compNormalize@@YAHXZ ENDP				; compNormalize::run
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M@glm@@YA_NAEBM00@Z
_TEXT	SEGMENT
tv68 = 32
x$ = 64
y$ = 72
epsilon$ = 80
??$epsilonEqual@M@glm@@YA_NAEBM00@Z PROC		; glm::epsilonEqual<float>, COMDAT

; 21   : 	{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 22   : 		return abs(x - y) < epsilon;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@epsilonEqu
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@epsilonEqu
$LN3@epsilonEqu:
	mov	DWORD PTR tv68[rsp], 0
$LN4@epsilonEqu:
	movzx	eax, BYTE PTR tv68[rsp]

; 23   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilonEqual@M@glm@@YA_NAEBM00@Z ENDP		; glm::epsilonEqual<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx], al

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+1], al

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2], al

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+3], al

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx], al

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+1], al

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2], al

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+3], al

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?epsilon@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?epsilon@?$numeric_limits@M@std@@SAMXZ PROC		; std::numeric_limits<float>::epsilon, COMDAT

; 872  :     _NODISCARD static constexpr float epsilon() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 873  :         return FLT_EPSILON;

	movss	xmm0, DWORD PTR __real@34000000

; 874  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?epsilon@?$numeric_limits@M@std@@SAMXZ ENDP		; std::numeric_limits<float>::epsilon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@G@std@@SAGXZ
_TEXT	SEGMENT
?max@?$numeric_limits@G@std@@SAGXZ PROC			; std::numeric_limits<unsigned short>::max, COMDAT

; 686  :     _NODISCARD static constexpr unsigned short(max)() noexcept {

$LN3:
	push	rdi

; 687  :         return USHRT_MAX;

	mov	eax, 65535				; 0000ffffH

; 688  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@G@std@@SAGXZ ENDP			; std::numeric_limits<unsigned short>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@G@std@@SAGXZ
_TEXT	SEGMENT
?min@?$numeric_limits@G@std@@SAGXZ PROC			; std::numeric_limits<unsigned short>::min, COMDAT

; 682  :     _NODISCARD static constexpr unsigned short(min)() noexcept {

$LN3:
	push	rdi

; 683  :         return 0;

	xor	eax, eax

; 684  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@G@std@@SAGXZ ENDP			; std::numeric_limits<unsigned short>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@F@std@@SAFXZ
_TEXT	SEGMENT
?max@?$numeric_limits@F@std@@SAFXZ PROC			; std::numeric_limits<short>::max, COMDAT

; 508  :     _NODISCARD static constexpr short(max)() noexcept {

$LN3:
	push	rdi

; 509  :         return SHRT_MAX;

	mov	eax, 32767				; 00007fffH

; 510  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@F@std@@SAFXZ ENDP			; std::numeric_limits<short>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@F@std@@SAFXZ
_TEXT	SEGMENT
?min@?$numeric_limits@F@std@@SAFXZ PROC			; std::numeric_limits<short>::min, COMDAT

; 504  :     _NODISCARD static constexpr short(min)() noexcept {

$LN3:
	push	rdi

; 505  :         return SHRT_MIN;

	mov	eax, -32768				; ffffffffffff8000H

; 506  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@F@std@@SAFXZ ENDP			; std::numeric_limits<short>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@E@std@@SAEXZ
_TEXT	SEGMENT
?max@?$numeric_limits@E@std@@SAEXZ PROC			; std::numeric_limits<unsigned char>::max, COMDAT

; 286  :     _NODISCARD static constexpr unsigned char(max)() noexcept {

$LN3:
	push	rdi

; 287  :         return UCHAR_MAX;

	mov	al, 255					; 000000ffH

; 288  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@E@std@@SAEXZ ENDP			; std::numeric_limits<unsigned char>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@E@std@@SAEXZ
_TEXT	SEGMENT
?min@?$numeric_limits@E@std@@SAEXZ PROC			; std::numeric_limits<unsigned char>::min, COMDAT

; 282  :     _NODISCARD static constexpr unsigned char(min)() noexcept {

$LN3:
	push	rdi

; 283  :         return 0;

	xor	al, al

; 284  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@E@std@@SAEXZ ENDP			; std::numeric_limits<unsigned char>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@C@std@@SACXZ
_TEXT	SEGMENT
?max@?$numeric_limits@C@std@@SACXZ PROC			; std::numeric_limits<signed char>::max, COMDAT

; 242  :     _NODISCARD static constexpr signed char(max)() noexcept {

$LN3:
	push	rdi

; 243  :         return SCHAR_MAX;

	mov	al, 127					; 0000007fH

; 244  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@C@std@@SACXZ ENDP			; std::numeric_limits<signed char>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@C@std@@SACXZ
_TEXT	SEGMENT
?min@?$numeric_limits@C@std@@SACXZ PROC			; std::numeric_limits<signed char>::min, COMDAT

; 238  :     _NODISCARD static constexpr signed char(min)() noexcept {

$LN3:
	push	rdi

; 239  :         return SCHAR_MIN;

	mov	al, -128				; ffffffffffffff80H

; 240  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@C@std@@SACXZ ENDP			; std::numeric_limits<signed char>::min
_TEXT	ENDS
END
