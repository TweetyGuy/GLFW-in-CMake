; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	main
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z		; glm::tvec3<float,0>::tvec3<float,0><double,double,double>
PUBLIC	??$?DN@glm@@YA?AU?$tvec3@M$0A@@0@AEBNU10@@Z	; glm::operator*<double>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
PUBLIC	?length@?$tvec3@_N$0A@@glm@@SAHXZ		; glm::tvec3<bool,0>::length
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
PUBLIC	??$?DH@glm@@YA?AU?$tvec3@M$0A@@0@AEBHU10@@Z	; glm::operator*<int>
PUBLIC	??$?DI@glm@@YA?AU?$tvec3@M$0A@@0@AEBIU10@@Z	; glm::operator*<unsigned int>
PUBLIC	??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?KH@glm@@YA?AU?$tvec3@M$0A@@0@U10@AEBH@Z	; glm::operator/<int>
PUBLIC	??$?KH@glm@@YA?AU?$tmat3x3@M$0A@@0@U10@AEBH@Z	; glm::operator/<int>
PUBLIC	??$?DN@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBNU10@@Z	; glm::operator*<double>
PUBLIC	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec3<float,0>::operator*=<float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tmat3x3<float,0>::operator*=<float>
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4008cccccccccccd
PUBLIC	__real@c022333333333333
EXTRN	__imp__wassert:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN19
	DD	imagerel $LN19+1571
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN@glm@@YA?AU?$tvec3@M$0A@@0@AEBNU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?DN@glm@@YA?AU?$tvec3@M$0A@@0@AEBNU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+282
	DD	imagerel $unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DH@glm@@YA?AU?$tvec3@M$0A@@0@AEBHU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?DH@glm@@YA?AU?$tvec3@M$0A@@0@AEBHU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DI@glm@@YA?AU?$tvec3@M$0A@@0@AEBIU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$?DI@glm@@YA?AU?$tvec3@M$0A@@0@AEBIU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+323
	DD	imagerel $unwind$??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+179
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+545
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KH@glm@@YA?AU?$tvec3@M$0A@@0@U10@AEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?KH@glm@@YA?AU?$tvec3@M$0A@@0@U10@AEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KH@glm@@YA?AU?$tmat3x3@M$0A@@0@U10@AEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?KH@glm@@YA?AU?$tmat3x3@M$0A@@0@U10@AEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBNU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?DN@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBNU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT __real@c022333333333333
CONST	SEGMENT
__real@c022333333333333 DQ 0c022333333333333r	; -9.1
CONST	ENDS
;	COMDAT __real@4008cccccccccccd
CONST	SEGMENT
__real@4008cccccccccccd DQ 04008cccccccccccdr	; 3.1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@M@Z DD 021001H
	DD	0700c3210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBNU10@@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KH@glm@@YA?AU?$tmat3x3@M$0A@@0@U10@AEBH@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KH@glm@@YA?AU?$tvec3@M$0A@@0@U10@AEBH@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	07011b215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z DD 031901H
	DD	07015a219H
	DD	06014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DI@glm@@YA?AU?$tvec3@M$0A@@0@AEBIU10@@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DH@glm@@YA?AU?$tvec3@M$0A@@0@AEBHU10@@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN@glm@@YA?AU?$tvec3@M$0A@@0@AEBNU10@@Z DD 031501H
	DD	070114215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	025H
	DD	0609H
voltbl	ENDS
xdata	SEGMENT
$unwind$main DD	042d19H
	DD	069010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0330H
xdata	ENDS
CONST	SEGMENT
main$rtcName$0 DB 076H
	DB	00H
	ORG $+2
main$rtcName$1 DB 06dH
	DB	00H
	ORG $+2
main$rtcName$2 DB 077H
	DB	00H
	ORG $+6
main$rtcVarDesc DD 0d8H
	DD	0cH
	DQ	FLAT:main$rtcName$2
	DD	098H
	DD	024H
	DQ	FLAT:main$rtcName$1
	DD	068H
	DD	0cH
	DQ	FLAT:main$rtcName$0
	ORG $+144
main$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 021901H
	DD	070155219H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
this$ = 48
s$ = 56
??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tmat3x3<float,0>::operator*=<float>, COMDAT

; 269  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 270  : 		this->value[0] *= s;

	mov	eax, 12
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movss	xmm1, DWORD PTR s$[rsp]
	mov	rcx, rax
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 271  : 		this->value[1] *= s;

	mov	eax, 12
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movss	xmm1, DWORD PTR s$[rsp]
	mov	rcx, rax
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 272  : 		this->value[2] *= s;

	mov	eax, 12
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movss	xmm1, DWORD PTR s$[rsp]
	mov	rcx, rax
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 273  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 274  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tmat3x3<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec3<float,0>::operator*=<float>, COMDAT

; 242  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 243  : 		this->x *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 244  : 		this->y *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 245  : 		this->z *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 246  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 247  : 	}

	pop	rdi
	ret	0
??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec3<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_multiplication.hpp
;	COMDAT ??$?DN@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBNU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
s$ = 72
rh$ = 80
??$?DN@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBNU10@@Z PROC	; glm::operator*<double>, COMDAT

; 62   : GLM_IMPLEMENT_SCAL_MULT(mat3)

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR s$[rsp]
	cvtsd2ss xmm0, QWORD PTR [rax]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR rh$[rsp]
	call	??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tmat3x3<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$?DN@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBNU10@@Z ENDP	; glm::operator*<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_multiplication.hpp
;	COMDAT ??$?KH@glm@@YA?AU?$tmat3x3@M$0A@@0@U10@AEBH@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
lh$ = 72
s$ = 80
??$?KH@glm@@YA?AU?$tmat3x3@M$0A@@0@U10@AEBH@Z PROC	; glm::operator/<int>, COMDAT

; 62   : GLM_IMPLEMENT_SCAL_MULT(mat3)

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR s$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR lh$[rsp]
	call	??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tmat3x3<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$?KH@glm@@YA?AU?$tmat3x3@M$0A@@0@U10@AEBH@Z ENDP	; glm::operator/<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_multiplication.hpp
;	COMDAT ??$?KH@glm@@YA?AU?$tvec3@M$0A@@0@U10@AEBH@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
lh$ = 72
s$ = 80
??$?KH@glm@@YA?AU?$tvec3@M$0A@@0@U10@AEBH@Z PROC	; glm::operator/<int>, COMDAT

; 55   : GLM_IMPLEMENT_SCAL_MULT(vec3)

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR s$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR lh$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$?KH@glm@@YA?AU?$tvec3@M$0A@@0@U10@AEBH@Z ENDP	; glm::operator/<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
tv73 = 32
tv82 = 36
tv91 = 40
tv132 = 44
tv141 = 48
tv150 = 52
tv159 = 56
tv168 = 60
__$ReturnUdt$ = 80
m$ = 88
v$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 429  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 430  : 		return typename tmat3x3<T, P>::col_type(

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv73[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv73[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv82[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv82[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv91[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv132[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv132[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv141[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv141[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv150[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv159[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv159[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv168[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv168[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv91[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv150[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 431  : 			m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z,
; 432  : 			m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z,
; 433  : 			m[0][2] * v.x + m[1][2] * v.y + m[2][2] * v.z);
; 434  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv66 = 72
tv74 = 80
__$ReturnUdt$ = 112
scalar$ = 120
m$ = 128
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 420  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 421  : 		return tmat3x3<T, P>(

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 422  : 			m[0] * scalar,
; 423  : 			m[1] * scalar,
; 424  : 			m[2] * scalar);
; 425  : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv78 = 68
tv90 = 72
tv134 = 76
this$ = 112
x1$ = 120
y1$ = 128
z1$ = 136
x2$ = 144
y2$ = 152
z2$ = 160
x3$ = 168
y3$ = 176
z3$ = 184
??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>, COMDAT

; 92   : 	{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 93   : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1));

	cvtsi2ss xmm0, DWORD PTR z1$[rsp]
	cvtsi2ss xmm1, DWORD PTR y1$[rsp]
	cvtsi2ss xmm2, DWORD PTR x1$[rsp]
	movss	DWORD PTR tv78[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv78[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 94   : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2));

	cvtsi2ss xmm0, DWORD PTR z2$[rsp]
	cvtsi2ss xmm1, DWORD PTR y2$[rsp]
	cvtsi2ss xmm2, DWORD PTR x2$[rsp]
	movss	DWORD PTR tv90[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv90[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 95   : 		this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3));

	cvtsi2ss xmm0, DWORD PTR z3$[rsp]
	cvtsi2ss xmm1, DWORD PTR y3$[rsp]
	cvtsi2ss xmm2, DWORD PTR x3$[rsp]
	movss	DWORD PTR tv134[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv134[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 96   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_multiplication.hpp
;	COMDAT ??$?DI@glm@@YA?AU?$tvec3@M$0A@@0@AEBIU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
s$ = 72
rh$ = 80
??$?DI@glm@@YA?AU?$tvec3@M$0A@@0@AEBIU10@@Z PROC	; glm::operator*<unsigned int>, COMDAT

; 55   : GLM_IMPLEMENT_SCAL_MULT(vec3)

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cvtsi2ss xmm0, rax
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR rh$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$?DI@glm@@YA?AU?$tvec3@M$0A@@0@AEBIU10@@Z ENDP	; glm::operator*<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_multiplication.hpp
;	COMDAT ??$?DH@glm@@YA?AU?$tvec3@M$0A@@0@AEBHU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
s$ = 72
rh$ = 80
??$?DH@glm@@YA?AU?$tvec3@M$0A@@0@AEBHU10@@Z PROC	; glm::operator*<int>, COMDAT

; 55   : GLM_IMPLEMENT_SCAL_MULT(vec3)

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR s$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR rh$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$?DH@glm@@YA?AU?$tvec3@M$0A@@0@AEBHU10@@Z ENDP	; glm::operator*<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec3>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_N$0A@@glm@@SAHXZ PROC			; glm::tvec3<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 198  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 199  : 		assert(i < this->length());

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 199				; 000000c7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 200  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 201  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 73   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 74   : 		this->value[0] = v0;

	mov	eax, 12
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 12
	rep movsb

; 75   : 		this->value[1] = v1;

	mov	eax, 12
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 12
	rep movsb

; 76   : 		this->value[2] = v2;

	mov	eax, 12
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 12
	rep movsb

; 77   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\scalar_multiplication.hpp
;	COMDAT ??$?DN@glm@@YA?AU?$tvec3@M$0A@@0@AEBNU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 64
s$ = 72
rh$ = 80
??$?DN@glm@@YA?AU?$tvec3@M$0A@@0@AEBNU10@@Z PROC	; glm::operator*<double>, COMDAT

; 55   : GLM_IMPLEMENT_SCAL_MULT(vec3)

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR s$[rsp]
	cvtsd2ss xmm0, QWORD PTR [rax]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR rh$[rsp]
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??$?DN@glm@@YA?AU?$tvec3@M$0A@@0@AEBNU10@@Z ENDP	; glm::operator*<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><double,double,double>, COMDAT

; 80   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsd2ss xmm0, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsd2ss xmm0, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><double,double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_scalar_multiplication.cpp
_TEXT	SEGMENT
Error$ = 80
v$ = 104
m$ = 152
w$ = 216
$T6 = 248
$T7 = 288
$T8 = 328
$T9 = 376
$T10 = 384
$T11 = 396
$T12 = 400
$T13 = 404
$T14 = 416
$T15 = 420
$T16 = 424
$T17 = 436
$T18 = 440
$T19 = 444
$T20 = 456
$T21 = 468
$T22 = 472
$T23 = 476
$T24 = 488
$T25 = 500
$T26 = 504
$T27 = 508
$T28 = 520
$T29 = 528
$T30 = 536
$T31 = 548
$T32 = 552
$T33 = 568
$T34 = 576
$T35 = 588
$T36 = 592
$T37 = 608
$T38 = 624
$T39 = 640
$T40 = 656
$T41 = 672
$T42 = 720
$T43 = 768
tv80 = 784
tv94 = 788
tv140 = 792
tv175 = 796
tv193 = 800
tv211 = 804
tv229 = 808
tv247 = 812
__$ArrayPad$ = 816
main	PROC

; 7    : {

$LN19:
	push	rsi
	push	rdi
	sub	rsp, 840				; 00000348H
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 190				; 000000beH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 8    : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 9    : 	glm::vec3 v(0.5, 3.1, -9.1);

	movsd	xmm3, QWORD PTR __real@c022333333333333
	movsd	xmm2, QWORD PTR __real@4008cccccccccccd
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	lea	rcx, QWORD PTR v$[rsp]
	call	??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<float,0>::tvec3<float,0><double,double,double>

; 10   : 
; 11   : 	Error += glm::all(glm::equal(v, 1.0 * v)) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T9[rsp], xmm0
	lea	rax, QWORD PTR $T36[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T36[rsp]
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?DN@glm@@YA?AU?$tvec3@M$0A@@0@AEBNU10@@Z ; glm::operator*<double>
	mov	r8, rax
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@main
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN4@main
$LN3@main:
	mov	DWORD PTR tv80[rsp], 1
$LN4@main:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 12   : 	Error += glm::all(glm::equal(v, 1 * v)) ? 0 : 1;

	mov	DWORD PTR $T12[rsp], 1
	lea	rax, QWORD PTR $T37[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T37[rsp]
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DH@glm@@YA?AU?$tvec3@M$0A@@0@AEBHU10@@Z ; glm::operator*<int>
	mov	r8, rax
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@main
	mov	DWORD PTR tv94[rsp], 0
	jmp	SHORT $LN6@main
$LN5@main:
	mov	DWORD PTR tv94[rsp], 1
$LN6@main:
	mov	eax, DWORD PTR tv94[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 13   : 	Error += glm::all(glm::equal(v, 1u * v)) ? 0 : 1;

	mov	DWORD PTR $T15[rsp], 1
	lea	rax, QWORD PTR $T38[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T38[rsp]
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?DI@glm@@YA?AU?$tvec3@M$0A@@0@AEBIU10@@Z ; glm::operator*<unsigned int>
	mov	r8, rax
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@main
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN8@main
$LN7@main:
	mov	DWORD PTR tv140[rsp], 1
$LN8@main:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 14   : 
; 15   : 	glm::mat3 m(1, 2, 3, 4, 5, 6, 7, 8, 9);

	mov	DWORD PTR [rsp+72], 9
	mov	DWORD PTR [rsp+64], 8
	mov	DWORD PTR [rsp+56], 7
	mov	DWORD PTR [rsp+48], 6
	mov	DWORD PTR [rsp+40], 5
	mov	DWORD PTR [rsp+32], 4
	mov	r9d, 3
	mov	r8d, 2
	mov	edx, 1
	lea	rcx, QWORD PTR m$[rsp]
	call	??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>

; 16   : 	glm::vec3 w = 0.5f * m * v;

	lea	r8, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR v$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR w$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 17   : 
; 18   : 	Error += glm::all(glm::equal((m*v)/2, w)) ? 0 : 1;

	mov	DWORD PTR $T18[rsp], 2
	lea	r8, QWORD PTR v$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
	lea	rcx, QWORD PTR $T39[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T18[rsp]
	lea	rdx, QWORD PTR $T39[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?KH@glm@@YA?AU?$tvec3@M$0A@@0@U10@AEBH@Z ; glm::operator/<int>
	lea	r8, QWORD PTR w$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@main
	mov	DWORD PTR tv175[rsp], 0
	jmp	SHORT $LN10@main
$LN9@main:
	mov	DWORD PTR tv175[rsp], 1
$LN10@main:
	mov	eax, DWORD PTR tv175[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 19   : 	Error += glm::all(glm::equal(m*(v/2), w)) ? 0 : 1;

	mov	DWORD PTR $T22[rsp], 2
	lea	rax, QWORD PTR $T40[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T22[rsp]
	lea	rdx, QWORD PTR $T40[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?KH@glm@@YA?AU?$tvec3@M$0A@@0@U10@AEBH@Z ; glm::operator/<int>
	mov	r8, rax
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR w$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@main
	mov	DWORD PTR tv193[rsp], 0
	jmp	SHORT $LN12@main
$LN11@main:
	mov	DWORD PTR tv193[rsp], 1
$LN12@main:
	mov	eax, DWORD PTR tv193[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 20   : 	Error += glm::all(glm::equal((m/2)*v, w)) ? 0 : 1;

	mov	DWORD PTR $T26[rsp], 2
	lea	rax, QWORD PTR $T41[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 36					; 00000024H
	rep movsb
	lea	r8, QWORD PTR $T26[rsp]
	lea	rdx, QWORD PTR $T41[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?KH@glm@@YA?AU?$tmat3x3@M$0A@@0@U10@AEBH@Z ; glm::operator/<int>
	lea	r8, QWORD PTR v$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR w$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@main
	mov	DWORD PTR tv211[rsp], 0
	jmp	SHORT $LN14@main
$LN13@main:
	mov	DWORD PTR tv211[rsp], 1
$LN14@main:
	mov	eax, DWORD PTR tv211[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 21   : 	Error += glm::all(glm::equal((0.5*m)*v, w)) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR $T29[rsp], xmm0
	lea	rax, QWORD PTR $T42[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 36					; 00000024H
	rep movsb
	lea	r8, QWORD PTR $T42[rsp]
	lea	rdx, QWORD PTR $T29[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?DN@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBNU10@@Z ; glm::operator*<double>
	lea	r8, QWORD PTR v$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
	lea	r8, QWORD PTR w$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@main
	mov	DWORD PTR tv229[rsp], 0
	jmp	SHORT $LN16@main
$LN15@main:
	mov	DWORD PTR tv229[rsp], 1
$LN16@main:
	mov	eax, DWORD PTR tv229[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 22   : 	Error += glm::all(glm::equal(0.5*(m*v), w)) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR $T33[rsp], xmm0
	lea	r8, QWORD PTR v$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
	lea	rcx, QWORD PTR $T43[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T43[rsp]
	lea	rdx, QWORD PTR $T33[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?DN@glm@@YA?AU?$tvec3@M$0A@@0@AEBNU10@@Z ; glm::operator*<double>
	lea	r8, QWORD PTR w$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@main
	mov	DWORD PTR tv247[rsp], 0
	jmp	SHORT $LN18@main
$LN17@main:
	mov	DWORD PTR tv247[rsp], 1
$LN18@main:
	mov	eax, DWORD PTR tv247[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 23   : 
; 24   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 25   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:main$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 840				; 00000348H
	pop	rdi
	pop	rsi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
tv67 = 40
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rsp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
