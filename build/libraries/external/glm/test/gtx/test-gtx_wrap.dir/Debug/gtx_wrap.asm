; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??$epsilonEqual@M@glm@@YA_NAEBM00@Z		; glm::epsilonEqual<float>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	?test@clamp@@YAHXZ				; clamp::test
PUBLIC	??$clamp@M@glm@@YAMAEBM@Z			; glm::clamp<float>
PUBLIC	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::clamp<float,0,glm::tvec2>
PUBLIC	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec2>
PUBLIC	?length@?$tvec2@_N$0A@@glm@@SAHXZ		; glm::tvec2<bool,0>::length
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::clamp<float,0,glm::tvec3>
PUBLIC	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
PUBLIC	?length@?$tvec3@_N$0A@@glm@@SAHXZ		; glm::tvec3<bool,0>::length
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
PUBLIC	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::clamp<float,0,glm::tvec4>
PUBLIC	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	?length@?$tvec1@M$0A@@glm@@SAHXZ		; glm::tvec1<float,0>::length
PUBLIC	??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec1<float,0>::operator[]
PUBLIC	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec1<float,0>::operator[]
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::clamp<float,0,glm::tvec1>
PUBLIC	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec1>
PUBLIC	?length@?$tvec1@_N$0A@@glm@@SAHXZ		; glm::tvec1<bool,0>::length
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<bool,0>::tvec1<bool,0>
PUBLIC	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
PUBLIC	?test@repeat@@YAHXZ				; repeat::test
PUBLIC	??$repeat@M@glm@@YAMAEBM@Z			; glm::repeat<float>
PUBLIC	??$repeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::repeat<float,0,glm::tvec2>
PUBLIC	??$repeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::repeat<float,0,glm::tvec3>
PUBLIC	??$repeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::repeat<float,0,glm::tvec4>
PUBLIC	??$repeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::repeat<float,0,glm::tvec1>
PUBLIC	?test@mirrorClamp@@YAHXZ			; mirrorClamp::test
PUBLIC	??$mirrorClamp@M@glm@@YAMAEBM@Z			; glm::mirrorClamp<float>
PUBLIC	??$mirrorClamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::mirrorClamp<float,0,glm::tvec2>
PUBLIC	??$mirrorClamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::mirrorClamp<float,0,glm::tvec3>
PUBLIC	??$mirrorClamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::mirrorClamp<float,0,glm::tvec4>
PUBLIC	??$mirrorClamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::mirrorClamp<float,0,glm::tvec1>
PUBLIC	?test@mirrorRepeat@@YAHXZ			; mirrorRepeat::test
PUBLIC	??$mirrorRepeat@M@glm@@YAMAEBM@Z		; glm::mirrorRepeat<float>
PUBLIC	??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::mirrorRepeat<float,0,glm::tvec2>
PUBLIC	??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::mirrorRepeat<float,0,glm::tvec3>
PUBLIC	??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::mirrorRepeat<float,0,glm::tvec4>
PUBLIC	??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::mirrorRepeat<float,0,glm::tvec1>
PUBLIC	main
PUBLIC	?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@00@Z ; glm::clamp<float,0,glm::tvec2>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>
PUBLIC	??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec2>
PUBLIC	??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z ; glm::clamp<float,0,glm::tvec3>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
PUBLIC	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
PUBLIC	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@00@Z ; glm::clamp<float,0,glm::tvec4>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
PUBLIC	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
PUBLIC	??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@00@Z ; glm::clamp<float,0,glm::tvec1>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec1>
PUBLIC	??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec1>
PUBLIC	??$fract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec2>
PUBLIC	??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec3>
PUBLIC	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
PUBLIC	??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec1>
PUBLIC	??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec2>
PUBLIC	??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec2>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::greaterThanEqual<float,0,glm::tvec2>
PUBLIC	??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec2>
PUBLIC	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
PUBLIC	??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec3>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::greaterThanEqual<float,0,glm::tvec3>
PUBLIC	??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec3>
PUBLIC	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
PUBLIC	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::greaterThanEqual<float,0,glm::tvec4>
PUBLIC	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>
PUBLIC	??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec1>
PUBLIC	??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec1>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ; glm::greaterThanEqual<float,0,glm::tvec1>
PUBLIC	??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec1>
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec4>
PUBLIC	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec4>
PUBLIC	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
PUBLIC	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec2>
PUBLIC	??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec2>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_clamp_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_fract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
PUBLIC	??$min@M@glm@@YAMMM@Z				; glm::min<float>
PUBLIC	??$max@M@glm@@YAMMM@Z				; glm::max<float>
PUBLIC	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator/<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator/<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator/<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator/<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec1>
PUBLIC	??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec1>
PUBLIC	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec3>
PUBLIC	??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec3>
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator/=<float>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
PUBLIC	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
PUBLIC	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
PUBLIC	??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3727c5ac
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3fc00000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40466666
PUBLIC	__real@bf000000
PUBLIC	__real@bf666666
PUBLIC	__real@bf800000
PUBLIC	__real@c0400000
PUBLIC	__real@c0466666
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__wassert:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	floorf:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?floor@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?floor@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@clamp@@YAHXZ DD imagerel $LN21
	DD	imagerel $LN21+1513
	DD	imagerel $unwind$?test@clamp@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$clamp@M@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@00@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@00@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@repeat@@YAHXZ DD imagerel $LN23
	DD	imagerel $LN23+1665
	DD	imagerel $unwind$?test@repeat@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$repeat@M@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$repeat@M@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$repeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$repeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$repeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$repeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$repeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$repeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$repeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$repeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@mirrorClamp@@YAHXZ DD imagerel $LN29
	DD	imagerel $LN29+2126
	DD	imagerel $unwind$?test@mirrorClamp@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mirrorClamp@M@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$mirrorClamp@M@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mirrorClamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$mirrorClamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mirrorClamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$mirrorClamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mirrorClamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$mirrorClamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mirrorClamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$mirrorClamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@mirrorRepeat@@YAHXZ DD imagerel $LN29
	DD	imagerel $LN29+2126
	DD	imagerel $unwind$?test@mirrorRepeat@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mirrorRepeat@M@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$mirrorRepeat@M@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+367
	DD	imagerel $unwind$??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+373
	DD	imagerel $unwind$??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+373
	DD	imagerel $unwind$??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+367
	DD	imagerel $unwind$??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@00@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+280
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@00@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@00@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$fract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+280
	DD	imagerel $unwind$??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_clamp_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@00@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?call@?$compute_clamp_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?call@?$compute_fract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+232
	DD	imagerel $unwind$?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+247
	DD	imagerel $unwind$?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+247
	DD	imagerel $unwind$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+230
	DD	imagerel $unwind$?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$min@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$max@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0466666
CONST	SEGMENT
__real@c0466666 DD 0c0466666r			; -3.1
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@40466666
CONST	SEGMENT
__real@40466666 DD 040466666r			; 3.1
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'1', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z DD 022f01H
	DD	070157219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcVarDesc DD 024H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
	DD	04H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z DD 033001H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z DD 033001H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z DD 022f01H
	DD	070157219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
	DD	08H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_clamp_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@00@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<float,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<float,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<float,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<float,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<float,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<float,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@00@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@00@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@00@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 032b01H
	DD	01c0112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcName$0 DB 041H ; glm::mirrorRepeat<float,0,glm::tvec1>
	DB	062H
	DB	073H
	DB	00H
??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcName$1 DB 043H ; glm::mirrorRepeat<float,0,glm::tvec1>
	DB	06cH
	DB	061H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+2
??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcName$2 DB 046H ; glm::mirrorRepeat<float,0,glm::tvec1>
	DB	06cH
	DB	06fH
	DB	06fH
	DB	072H
	DB	00H
	ORG $+2
??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcName$3 DB 052H ; glm::mirrorRepeat<float,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+3
??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcName$4 DB 04dH ; glm::mirrorRepeat<float,0,glm::tvec1>
	DB	069H
	DB	072H
	DB	072H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+5
??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcFrameData DD 05H ; glm::mirrorRepeat<float,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcVarDesc
	ORG $+8
??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 0a4H ; glm::mirrorRepeat<float,0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcName$4
	DD	084H
	DD	04H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcName$3
	DD	064H
	DD	04H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 032b01H
	DD	02e0112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcName$0 DB 041H ; glm::mirrorRepeat<float,0,glm::tvec4>
	DB	062H
	DB	073H
	DB	00H
??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcName$1 DB 043H ; glm::mirrorRepeat<float,0,glm::tvec4>
	DB	06cH
	DB	061H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+2
??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcName$2 DB 046H ; glm::mirrorRepeat<float,0,glm::tvec4>
	DB	06cH
	DB	06fH
	DB	06fH
	DB	072H
	DB	00H
	ORG $+2
??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcName$3 DB 052H ; glm::mirrorRepeat<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+3
??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcName$4 DB 04dH ; glm::mirrorRepeat<float,0,glm::tvec4>
	DB	069H
	DB	072H
	DB	072H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+5
??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcFrameData DD 05H ; glm::mirrorRepeat<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcVarDesc
	ORG $+8
??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 0e8H ; glm::mirrorRepeat<float,0,glm::tvec4>
	DD	010H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 032b01H
	DD	02c0112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcName$0 DB 041H ; glm::mirrorRepeat<float,0,glm::tvec3>
	DB	062H
	DB	073H
	DB	00H
??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcName$1 DB 043H ; glm::mirrorRepeat<float,0,glm::tvec3>
	DB	06cH
	DB	061H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+2
??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcName$2 DB 046H ; glm::mirrorRepeat<float,0,glm::tvec3>
	DB	06cH
	DB	06fH
	DB	06fH
	DB	072H
	DB	00H
	ORG $+2
??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcName$3 DB 052H ; glm::mirrorRepeat<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+3
??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcName$4 DB 04dH ; glm::mirrorRepeat<float,0,glm::tvec3>
	DB	069H
	DB	072H
	DB	072H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+5
??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcFrameData DD 05H ; glm::mirrorRepeat<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcVarDesc
	ORG $+8
??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 0e8H ; glm::mirrorRepeat<float,0,glm::tvec3>
	DD	0cH
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcName$4
	DD	0b8H
	DD	0cH
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcName$3
	DD	088H
	DD	0cH
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcName$2
	DD	058H
	DD	0cH
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 032b01H
	DD	01e0112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcName$0 DB 041H ; glm::mirrorRepeat<float,0,glm::tvec2>
	DB	062H
	DB	073H
	DB	00H
??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcName$1 DB 043H ; glm::mirrorRepeat<float,0,glm::tvec2>
	DB	06cH
	DB	061H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+2
??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcName$2 DB 046H ; glm::mirrorRepeat<float,0,glm::tvec2>
	DB	06cH
	DB	06fH
	DB	06fH
	DB	072H
	DB	00H
	ORG $+2
??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcName$3 DB 052H ; glm::mirrorRepeat<float,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+3
??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcName$4 DB 04dH ; glm::mirrorRepeat<float,0,glm::tvec2>
	DB	069H
	DB	072H
	DB	072H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+5
??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcFrameData DD 05H ; glm::mirrorRepeat<float,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcVarDesc
	ORG $+8
??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 0a8H ; glm::mirrorRepeat<float,0,glm::tvec2>
	DD	08H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcName$4
	DD	088H
	DD	08H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcName$3
	DD	068H
	DD	08H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mirrorRepeat@M@glm@@YAMAEBM@Z DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mirrorClamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mirrorClamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mirrorClamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mirrorClamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mirrorClamp@M@glm@@YAMAEBM@Z DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$repeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$repeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$repeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$repeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$repeat@M@glm@@YAMAEBM@Z DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@00@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z DD 031a01H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z DD 031a01H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@00@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M@glm@@YAMAEBM@Z DD 020a01H
	DD	07006720aH
xdata	ENDS
xdata	SEGMENT
$unwind$?test@clamp@@YAHXZ DD 031a01H
	DD	0500109H
	DD	07002H
$unwind$?test@repeat@@YAHXZ DD 031a01H
	DD	0560109H
	DD	07002H
$unwind$?test@mirrorClamp@@YAHXZ DD 031a01H
	DD	0680109H
	DD	07002H
$unwind$?test@mirrorRepeat@@YAHXZ DD 031a01H
	DD	0680109H
	DD	07002H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
?test@clamp@@YAHXZ$rtcName$0 DB 041H			; clamp::test
	DB	00H
	ORG $+2
?test@clamp@@YAHXZ$rtcName$1 DB 042H			; clamp::test
	DB	00H
	ORG $+2
?test@clamp@@YAHXZ$rtcName$2 DB 043H			; clamp::test
	DB	00H
	ORG $+2
?test@clamp@@YAHXZ$rtcName$3 DB 044H			; clamp::test
	DB	00H
	ORG $+2
?test@clamp@@YAHXZ$rtcName$4 DB 045H			; clamp::test
	DB	00H
	ORG $+2
?test@clamp@@YAHXZ$rtcName$5 DB 04bH			; clamp::test
	DB	00H
	ORG $+2
?test@clamp@@YAHXZ$rtcName$6 DB 04cH			; clamp::test
	DB	00H
	ORG $+2
?test@clamp@@YAHXZ$rtcName$7 DB 04dH			; clamp::test
	DB	00H
	ORG $+2
?test@clamp@@YAHXZ$rtcName$8 DB 04eH			; clamp::test
	DB	00H
	ORG $+6
?test@clamp@@YAHXZ$rtcFrameData DD 09H			; clamp::test
	DD	00H
	DQ	FLAT:?test@clamp@@YAHXZ$rtcVarDesc
?test@repeat@@YAHXZ$rtcName$0 DB 041H			; repeat::test
	DB	00H
	ORG $+6
?test@clamp@@YAHXZ$rtcVarDesc DD 0154H			; clamp::test
	DD	04H
	DQ	FLAT:?test@clamp@@YAHXZ$rtcName$8
	DD	0128H
	DD	010H
	DQ	FLAT:?test@clamp@@YAHXZ$rtcName$7
	DD	0f8H
	DD	0cH
	DQ	FLAT:?test@clamp@@YAHXZ$rtcName$6
	DD	0d8H
	DD	08H
	DQ	FLAT:?test@clamp@@YAHXZ$rtcName$5
	DD	0b4H
	DD	04H
	DQ	FLAT:?test@clamp@@YAHXZ$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:?test@clamp@@YAHXZ$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:?test@clamp@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test@clamp@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@clamp@@YAHXZ$rtcName$0
	ORG $+432
?test@repeat@@YAHXZ$rtcName$1 DB 042H			; repeat::test
	DB	00H
	ORG $+2
?test@repeat@@YAHXZ$rtcName$2 DB 043H			; repeat::test
	DB	00H
	ORG $+2
?test@repeat@@YAHXZ$rtcName$3 DB 044H			; repeat::test
	DB	00H
	ORG $+2
?test@repeat@@YAHXZ$rtcName$4 DB 045H			; repeat::test
	DB	00H
	ORG $+2
?test@repeat@@YAHXZ$rtcName$5 DB 046H			; repeat::test
	DB	00H
	ORG $+2
?test@repeat@@YAHXZ$rtcName$6 DB 04bH			; repeat::test
	DB	00H
	ORG $+2
?test@repeat@@YAHXZ$rtcName$7 DB 04cH			; repeat::test
	DB	00H
	ORG $+2
?test@repeat@@YAHXZ$rtcName$8 DB 04dH			; repeat::test
	DB	00H
	ORG $+2
?test@repeat@@YAHXZ$rtcName$9 DB 04eH			; repeat::test
	DB	00H
	ORG $+6
?test@repeat@@YAHXZ$rtcFrameData DD 0aH			; repeat::test
	DD	00H
	DQ	FLAT:?test@repeat@@YAHXZ$rtcVarDesc
?test@mirrorClamp@@YAHXZ$rtcName$0 DB 041H		; mirrorClamp::test
	DB	00H
	ORG $+6
?test@repeat@@YAHXZ$rtcVarDesc DD 0174H			; repeat::test
	DD	04H
	DQ	FLAT:?test@repeat@@YAHXZ$rtcName$9
	DD	0148H
	DD	010H
	DQ	FLAT:?test@repeat@@YAHXZ$rtcName$8
	DD	0118H
	DD	0cH
	DQ	FLAT:?test@repeat@@YAHXZ$rtcName$7
	DD	0f8H
	DD	08H
	DQ	FLAT:?test@repeat@@YAHXZ$rtcName$6
	DD	0d4H
	DD	04H
	DQ	FLAT:?test@repeat@@YAHXZ$rtcName$5
	DD	0b4H
	DD	04H
	DQ	FLAT:?test@repeat@@YAHXZ$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:?test@repeat@@YAHXZ$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:?test@repeat@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test@repeat@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@repeat@@YAHXZ$rtcName$0
	ORG $+480
?test@mirrorClamp@@YAHXZ$rtcName$1 DB 042H		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcName$2 DB 043H		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcName$3 DB 044H		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcName$4 DB 045H		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcName$5 DB 046H		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcName$6 DB 047H		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcName$7 DB 048H		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcName$8 DB 049H		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcName$9 DB 04bH		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcName$10 DB 04cH		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcName$11 DB 04dH		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcName$12 DB 04eH		; mirrorClamp::test
	DB	00H
	ORG $+2
?test@mirrorClamp@@YAHXZ$rtcVarDesc DD 01d4H		; mirrorClamp::test
	DD	04H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$12
	DD	01a8H
	DD	010H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$11
	DD	0178H
	DD	0cH
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$10
	DD	0158H
	DD	08H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$9
	DD	0134H
	DD	04H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$8
	DD	0114H
	DD	04H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$7
	DD	0f4H
	DD	04H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$6
	DD	0d4H
	DD	04H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$5
	DD	0b4H
	DD	04H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcName$0
	ORG $+624
?test@mirrorClamp@@YAHXZ$rtcFrameData DD 0dH		; mirrorClamp::test
	DD	00H
	DQ	FLAT:?test@mirrorClamp@@YAHXZ$rtcVarDesc
?test@mirrorRepeat@@YAHXZ$rtcName$0 DB 041H		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$1 DB 042H		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$2 DB 043H		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$3 DB 044H		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$4 DB 045H		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$5 DB 046H		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$6 DB 047H		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$7 DB 048H		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$8 DB 049H		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$9 DB 04bH		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$10 DB 04cH		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$11 DB 04dH		; mirrorRepeat::test
	DB	00H
	ORG $+2
?test@mirrorRepeat@@YAHXZ$rtcName$12 DB 04eH		; mirrorRepeat::test
	DB	00H
	ORG $+6
?test@mirrorRepeat@@YAHXZ$rtcFrameData DD 0dH		; mirrorRepeat::test
	DD	00H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcVarDesc
	ORG $+8
?test@mirrorRepeat@@YAHXZ$rtcVarDesc DD 01d4H		; mirrorRepeat::test
	DD	04H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$12
	DD	01a8H
	DD	010H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$11
	DD	0178H
	DD	0cH
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$10
	DD	0158H
	DD	08H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$9
	DD	0134H
	DD	04H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$8
	DD	0114H
	DD	04H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$7
	DD	0f4H
	DD	04H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$6
	DD	0d4H
	DD	04H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$5
	DD	0b4H
	DD	04H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@mirrorRepeat@@YAHXZ$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?floor@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_div<float,0,0>::call, COMDAT

; 68   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 69   : 			return tvec4<T, P>(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	divss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	divss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	divss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	divss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 70   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_div<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
a$ = 64
b$ = 72
?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec1>::call, COMDAT

; 60   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 61   : 			return tvec1<T, P>(Func(a.x, b.x));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
tv72 = 36
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec3>::call, COMDAT

; 78   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 79   : 			return tvec3<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 80   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec1,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec1,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator/=<float>, COMDAT

; 446  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 447  : 		return (*this = detail::compute_vec4_div<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 448  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec3>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec3>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec1>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec1>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 573  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 574  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 			v1.x * v2.x,
; 576  : 			v1.y * v2.y);
; 577  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 613  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 614  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	divss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	divss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 615  : 			v1.x / v2.x,
; 616  : 			v1.y / v2.y);
; 617  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
tv70 = 36
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 41   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 709  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 710  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	divss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	divss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 711  : 			v1.x / v2.x,
; 712  : 			v1.y / v2.y,
; 713  : 			v1.z / v2.z);
; 714  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 748  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 749  : 		return tvec4<T, P>(v1) /= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator/=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 750  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 372  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 373  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 			v1.x * v2.x);
; 375  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 393  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 394  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 			v1.x / v2.x);
; 396  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv78 = 56
__$ReturnUdt$ = 80
Func$ = 88
a$ = 96
b$ = 104
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec4>::call, COMDAT

; 87   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 88   : 			return tvec4<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z), Func(a.w, b.w));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$max@M@glm@@YAMMM@Z PROC				; glm::max<float>, COMDAT

; 24   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	SHORT $LN3@max
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@max
$LN3@max:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@max:
	movss	xmm0, DWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M@glm@@YAMMM@Z ENDP				; glm::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$min@M@glm@@YAMMM@Z PROC				; glm::min<float>, COMDAT

; 16   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	movss	xmm0, DWORD PTR y$[rsp]
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN3@min
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@min
$LN3@min:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@min:
	movss	xmm0, DWORD PTR tv65[rsp]

; 19   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M@glm@@YAMMM@Z ENDP				; glm::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv83 = 56
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
a$ = 104
?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<float,0>::tvec1<float,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec1<float,0>::operator[]
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
__$ReturnUdt$ = 64
a$ = 72
b$ = 80
?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call, COMDAT

; 254  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 255  : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
; 256  : 			return a - b * floor(a / b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec1>
	mov	r8, rax
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 257  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv83 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
a$ = 136
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ReturnUdt$ = 96
a$ = 104
b$ = 112
?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call, COMDAT

; 254  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 255  : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
; 256  : 			return a - b * floor(a / b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	mov	r8, rax
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 257  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv83 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
a$ = 136
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
__$ReturnUdt$ = 96
a$ = 104
b$ = 112
?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_mod<float,0,glm::tvec3,0>::call, COMDAT

; 254  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 255  : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
; 256  : 			return a - b * floor(a / b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
	mov	r8, rax
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 257  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_mod<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 52
tv83 = 56
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
a$ = 104
?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<float,0>::tvec2<float,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR Result$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_mod<float,0,glm::tvec2,0>::call, COMDAT

; 254  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 255  : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
; 256  : 			return a - b * floor(a / b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec2>
	mov	r8, rax
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 257  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_mod<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_fract<float,0,glm::tvec1,0>::call, COMDAT

; 227  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 228  : 			return x - floor(x);

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec1>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 229  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_fract<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_fract<float,0,glm::tvec4,0>::call, COMDAT

; 227  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 228  : 			return x - floor(x);

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 229  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_fract<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_fract<float,0,glm::tvec3,0>::call, COMDAT

; 227  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 228  : 			return x - floor(x);

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 229  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_fract<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_fract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
?call@?$compute_fract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_fract<float,0,glm::tvec2,0>::call, COMDAT

; 227  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 228  : 			return x - floor(x);

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec2>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 229  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_fract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_fract<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_clamp_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
minVal$ = 80
maxVal$ = 88
?call@?$compute_clamp_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@00@Z PROC ; glm::detail::compute_clamp_vector<float,0,glm::tvec1,0>::call, COMDAT

; 282  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 283  : 			return min(max(x, minVal), maxVal);

	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec1>
	mov	r8, QWORD PTR maxVal$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 284  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_clamp_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@00@Z ENDP ; glm::detail::compute_clamp_vector<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
minVal$ = 80
maxVal$ = 88
?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z PROC ; glm::detail::compute_clamp_vector<float,0,glm::tvec3,0>::call, COMDAT

; 282  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 283  : 			return min(max(x, minVal), maxVal);

	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec3>
	mov	r8, QWORD PTR maxVal$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 284  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z ENDP ; glm::detail::compute_clamp_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec2>::call, COMDAT

; 30   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 			return tvec2<R, P>(Func(v.x), Func(v.y));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 32   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec4>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec4>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z PROC ; glm::mix<float,bool,0,glm::tvec1>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ENDP ; glm::mix<float,bool,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z PROC ; glm::greaterThanEqual<float,0,glm::tvec1>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ENDP ; glm::greaterThanEqual<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 329  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 331  : 			v1.x + v2.x);
; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC ; glm::mod<float,0,glm::tvec1>, COMDAT

; 459  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 460  : 		return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP ; glm::mod<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec1>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::mix<float,bool,0,glm::tvec4>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::mix<float,bool,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::greaterThanEqual<float,0,glm::tvec4>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::greaterThanEqual<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::mod<float,0,glm::tvec4>, COMDAT

; 459  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 460  : 		return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::mod<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec4>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::mix<float,bool,0,glm::tvec3>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::mix<float,bool,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::greaterThanEqual<float,0,glm::tvec3>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::greaterThanEqual<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 574  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 575  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	addss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 576  : 			v1.x + v2.x,
; 577  : 			v1.y + v2.y,
; 578  : 			v1.z + v2.z);
; 579  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::mod<float,0,glm::tvec3>, COMDAT

; 459  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 460  : 		return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mod@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::mod<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec3>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::mix<float,bool,0,glm::tvec2>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::mix<float,bool,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::greaterThanEqual<float,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::greaterThanEqual<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 493  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 494  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 495  : 			v1.x + v2.x,
; 496  : 			v1.y + v2.y);
; 497  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::mod<float,0,glm::tvec2>, COMDAT

; 459  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 460  : 		return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mod@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::mod<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec2>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::fract<float,0,glm::tvec1>, COMDAT

; 433  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 434  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'fract' only accept floating-point inputs");
; 435  : 		return detail::compute_fract<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 436  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::fract<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::fract<float,0,glm::tvec4>, COMDAT

; 433  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 434  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'fract' only accept floating-point inputs");
; 435  : 		return detail::compute_fract<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fract@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 436  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::fract<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::fract<float,0,glm::tvec3>, COMDAT

; 433  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 434  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'fract' only accept floating-point inputs");
; 435  : 		return detail::compute_fract<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fract@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 436  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::fract<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$fract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$fract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::fract<float,0,glm::tvec2>, COMDAT

; 433  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 434  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'fract' only accept floating-point inputs");
; 435  : 		return detail::compute_fract<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 436  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$fract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::fract<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec1>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec1>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@00@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
minVal$ = 64
maxVal$ = 72
??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@00@Z PROC ; glm::clamp<float,0,glm::tvec1>, COMDAT

; 558  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 559  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 560  : 		return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, minVal, maxVal);

	mov	r9, QWORD PTR maxVal$[rsp]
	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_clamp_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 561  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@00@Z ENDP ; glm::clamp<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@00@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
minVal$ = 64
maxVal$ = 72
??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@00@Z PROC ; glm::clamp<float,0,glm::tvec4>, COMDAT

; 558  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 559  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 560  : 		return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, minVal, maxVal);

	mov	r9, QWORD PTR maxVal$[rsp]
	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 561  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@00@Z ENDP ; glm::clamp<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec3>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec3>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	subss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
minVal$ = 64
maxVal$ = 72
??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z PROC ; glm::clamp<float,0,glm::tvec3>, COMDAT

; 558  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 559  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 560  : 		return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, minVal, maxVal);

	mov	r9, QWORD PTR maxVal$[rsp]
	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_clamp_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 561  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z ENDP ; glm::clamp<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec2>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec2>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@00@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
minVal$ = 64
maxVal$ = 72
??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@00@Z PROC ; glm::clamp<float,0,glm::tvec2>, COMDAT

; 558  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 559  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 560  : 		return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, minVal, maxVal);

	mov	r9, QWORD PTR maxVal$[rsp]
	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 561  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@00@Z ENDP ; glm::clamp<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
minVal$ = 80
maxVal$ = 88
?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z PROC ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call, COMDAT

; 282  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 283  : 			return min(max(x, minVal), maxVal);

	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec4>
	mov	r8, QWORD PTR maxVal$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 284  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ENDP ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
minVal$ = 80
maxVal$ = 88
?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z PROC ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call, COMDAT

; 282  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 283  : 			return min(max(x, minVal), maxVal);

	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec2>
	mov	r8, QWORD PTR maxVal$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 284  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z ENDP ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_wrap.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 180  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 181  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 182  : 
; 183  : 	Error += clamp::test();

	call	?test@clamp@@YAHXZ			; clamp::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 184  : 	Error += repeat::test();

	call	?test@repeat@@YAHXZ			; repeat::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 185  : 	Error += mirrorClamp::test();

	call	?test@mirrorClamp@@YAHXZ		; mirrorClamp::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 186  : 	Error += mirrorRepeat::test();

	call	?test@mirrorRepeat@@YAHXZ		; mirrorRepeat::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 187  : 
; 188  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 189  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
Abs$ = 36
Clamp$ = 68
Floor$ = 100
Rest$ = 132
Mirror$ = 164
$T8 = 180
$T9 = 184
$T10 = 188
$T11 = 192
$T12 = 196
$T13 = 200
tv68 = 208
tv84 = 216
__$ReturnUdt$ = 240
Texcoord$ = 248
??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::mirrorRepeat<float,0,glm::tvec1>, COMDAT

; 44   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+240]

; 45   : 		vecType<T, P> const Abs = glm::abs(Texcoord);

	mov	rdx, QWORD PTR Texcoord$[rsp]
	lea	rcx, QWORD PTR Abs$[rsp]
	call	??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec1>

; 46   : 		vecType<T, P> const Clamp = glm::mod(glm::floor(Abs), vecType<T, P>(2));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv68[rsp], rax
	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec1>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Clamp$[rsp]
	call	??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec1>

; 47   : 		vecType<T, P> const Floor = glm::floor(Abs);

	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR Floor$[rsp]
	call	??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec1>

; 48   : 		vecType<T, P> const Rest = Abs - Floor;

	lea	r8, QWORD PTR Floor$[rsp]
	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR Rest$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 49   : 		vecType<T, P> const Mirror = Clamp + Rest;

	lea	r8, QWORD PTR Rest$[rsp]
	lea	rdx, QWORD PTR Clamp$[rsp]
	lea	rcx, QWORD PTR Mirror$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 50   : 		return mix(Rest, vecType<T, P>(1) - Rest, glm::greaterThanEqual(Mirror, vecType<T, P>(1)));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Mirror$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$greaterThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ; glm::greaterThanEqual<float,0,glm::tvec1>
	mov	QWORD PTR tv84[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	lea	r8, QWORD PTR Rest$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv84[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR Rest$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::mirrorRepeat<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
Abs$ = 40
Clamp$ = 88
Floor$ = 136
Rest$ = 184
Mirror$ = 232
$T8 = 260
$T9 = 276
$T10 = 292
$T11 = 308
$T12 = 312
$T13 = 328
tv68 = 344
tv84 = 352
__$ReturnUdt$ = 384
Texcoord$ = 392
??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::mirrorRepeat<float,0,glm::tvec4>, COMDAT

; 44   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 368				; 00000170H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+384]

; 45   : 		vecType<T, P> const Abs = glm::abs(Texcoord);

	mov	rdx, QWORD PTR Texcoord$[rsp]
	lea	rcx, QWORD PTR Abs$[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>

; 46   : 		vecType<T, P> const Clamp = glm::mod(glm::floor(Abs), vecType<T, P>(2));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv68[rsp], rax
	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Clamp$[rsp]
	call	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>

; 47   : 		vecType<T, P> const Floor = glm::floor(Abs);

	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR Floor$[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>

; 48   : 		vecType<T, P> const Rest = Abs - Floor;

	lea	r8, QWORD PTR Floor$[rsp]
	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR Rest$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 49   : 		vecType<T, P> const Mirror = Clamp + Rest;

	lea	r8, QWORD PTR Rest$[rsp]
	lea	rdx, QWORD PTR Clamp$[rsp]
	lea	rcx, QWORD PTR Mirror$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 50   : 		return mix(Rest, vecType<T, P>(1) - Rest, glm::greaterThanEqual(Mirror, vecType<T, P>(1)));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Mirror$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$greaterThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::greaterThanEqual<float,0,glm::tvec4>
	mov	QWORD PTR tv84[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r8, QWORD PTR Rest$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv84[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR Rest$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 368				; 00000170H
	pop	rdi
	ret	0
??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::mirrorRepeat<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
Abs$ = 40
Clamp$ = 88
Floor$ = 136
Rest$ = 184
Mirror$ = 232
$T8 = 260
$T9 = 272
$T10 = 284
$T11 = 296
$T12 = 300
$T13 = 312
tv68 = 328
tv84 = 336
__$ReturnUdt$ = 368
Texcoord$ = 376
??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::mirrorRepeat<float,0,glm::tvec3>, COMDAT

; 44   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 352				; 00000160H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+368]

; 45   : 		vecType<T, P> const Abs = glm::abs(Texcoord);

	mov	rdx, QWORD PTR Texcoord$[rsp]
	lea	rcx, QWORD PTR Abs$[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>

; 46   : 		vecType<T, P> const Clamp = glm::mod(glm::floor(Abs), vecType<T, P>(2));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv68[rsp], rax
	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Clamp$[rsp]
	call	??$mod@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec3>

; 47   : 		vecType<T, P> const Floor = glm::floor(Abs);

	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR Floor$[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>

; 48   : 		vecType<T, P> const Rest = Abs - Floor;

	lea	r8, QWORD PTR Floor$[rsp]
	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR Rest$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 49   : 		vecType<T, P> const Mirror = Clamp + Rest;

	lea	r8, QWORD PTR Rest$[rsp]
	lea	rdx, QWORD PTR Clamp$[rsp]
	lea	rcx, QWORD PTR Mirror$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 50   : 		return mix(Rest, vecType<T, P>(1) - Rest, glm::greaterThanEqual(Mirror, vecType<T, P>(1)));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Mirror$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$greaterThanEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::greaterThanEqual<float,0,glm::tvec3>
	mov	QWORD PTR tv84[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	lea	r8, QWORD PTR Rest$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv84[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR Rest$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 352				; 00000160H
	pop	rdi
	ret	0
??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::mirrorRepeat<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
Abs$ = 40
Clamp$ = 72
Floor$ = 104
Rest$ = 136
Mirror$ = 168
$T8 = 180
$T9 = 188
$T10 = 196
$T11 = 204
$T12 = 208
$T13 = 216
tv68 = 224
tv84 = 232
__$ReturnUdt$ = 256
Texcoord$ = 264
??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::mirrorRepeat<float,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 240				; 000000f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+256]

; 45   : 		vecType<T, P> const Abs = glm::abs(Texcoord);

	mov	rdx, QWORD PTR Texcoord$[rsp]
	lea	rcx, QWORD PTR Abs$[rsp]
	call	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>

; 46   : 		vecType<T, P> const Clamp = glm::mod(glm::floor(Abs), vecType<T, P>(2));

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv68[rsp], rax
	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec2>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Clamp$[rsp]
	call	??$mod@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec2>

; 47   : 		vecType<T, P> const Floor = glm::floor(Abs);

	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR Floor$[rsp]
	call	??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec2>

; 48   : 		vecType<T, P> const Rest = Abs - Floor;

	lea	r8, QWORD PTR Floor$[rsp]
	lea	rdx, QWORD PTR Abs$[rsp]
	lea	rcx, QWORD PTR Rest$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 49   : 		vecType<T, P> const Mirror = Clamp + Rest;

	lea	r8, QWORD PTR Rest$[rsp]
	lea	rdx, QWORD PTR Clamp$[rsp]
	lea	rcx, QWORD PTR Mirror$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 50   : 		return mix(Rest, vecType<T, P>(1) - Rest, glm::greaterThanEqual(Mirror, vecType<T, P>(1)));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Mirror$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$greaterThanEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::greaterThanEqual<float,0,glm::tvec2>
	mov	QWORD PTR tv84[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	lea	r8, QWORD PTR Rest$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv84[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR Rest$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::mirrorRepeat<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$mirrorRepeat@M@glm@@YAMAEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
Texcoord$ = 80
??$mirrorRepeat@M@glm@@YAMAEBM@Z PROC			; glm::mirrorRepeat<float>, COMDAT

; 55   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 56   : 		return mirrorRepeat(tvec1<genType, defaultp>(Texcoord)).x;

	mov	rax, QWORD PTR Texcoord$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::mirrorRepeat<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]

; 57   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$mirrorRepeat@M@glm@@YAMAEBM@Z ENDP			; glm::mirrorRepeat<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_wrap.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 52
B$ = 84
C$ = 116
D$ = 148
E$ = 180
F$ = 212
G$ = 244
H$ = 276
I$ = 308
K$ = 344
L$ = 376
M$ = 424
N$ = 468
$T16 = 484
$T17 = 488
$T18 = 492
$T19 = 496
$T20 = 500
$T21 = 504
$T22 = 508
$T23 = 512
$T24 = 516
$T25 = 520
$T26 = 524
$T27 = 528
$T28 = 532
$T29 = 536
$T30 = 540
$T31 = 544
$T32 = 548
$T33 = 552
$T34 = 556
$T35 = 560
$T36 = 564
$T37 = 568
$T38 = 572
$T39 = 576
$T40 = 580
$T41 = 584
$T42 = 588
$T43 = 592
$T44 = 600
$T45 = 608
$T46 = 616
$T47 = 620
$T48 = 632
$T49 = 644
$T50 = 656
$T51 = 660
$T52 = 676
$T53 = 692
$T54 = 708
$T55 = 712
$T56 = 716
$T57 = 720
$T58 = 724
tv72 = 728
tv82 = 732
tv92 = 736
tv134 = 740
tv144 = 744
tv154 = 748
tv164 = 752
tv174 = 756
tv184 = 760
tv226 = 768
tv238 = 776
tv248 = 784
tv260 = 792
tv270 = 800
tv282 = 808
tv292 = 816
tv304 = 824
?test@mirrorRepeat@@YAHXZ PROC				; mirrorRepeat::test

; 133  : 	{

$LN29:
	push	rdi
	sub	rsp, 832				; 00000340H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 200				; 000000c8H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 134  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 135  : 
; 136  : 		float A = glm::mirrorRepeat(0.5f);

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T16[rsp], xmm0
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$mirrorRepeat@M@glm@@YAMAEBM@Z	; glm::mirrorRepeat<float>
	movss	DWORD PTR A$[rsp], xmm0

; 137  : 		Error += glm::epsilonEqual(A, 0.5f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T17[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T18[rsp], xmm0
	lea	r8, QWORD PTR $T17[rsp]
	lea	rdx, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv72[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 138  : 
; 139  : 		float B = glm::mirrorRepeat(0.0f);

	xorps	xmm0, xmm0
	movss	DWORD PTR $T19[rsp], xmm0
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$mirrorRepeat@M@glm@@YAMAEBM@Z	; glm::mirrorRepeat<float>
	movss	DWORD PTR B$[rsp], xmm0

; 140  : 		Error += glm::epsilonEqual(B, 0.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T20[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T21[rsp], xmm0
	lea	r8, QWORD PTR $T20[rsp]
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv82[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 141  : 
; 142  : 		float C = glm::mirrorRepeat(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T22[rsp], xmm0
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$mirrorRepeat@M@glm@@YAMAEBM@Z	; glm::mirrorRepeat<float>
	movss	DWORD PTR C$[rsp], xmm0

; 143  : 		Error += glm::epsilonEqual(C, 1.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T23[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T24[rsp], xmm0
	lea	r8, QWORD PTR $T23[rsp]
	lea	rdx, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv92[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 144  : 
; 145  : 		float D = glm::mirrorRepeat(-0.5f);

	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR $T25[rsp], xmm0
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$mirrorRepeat@M@glm@@YAMAEBM@Z	; glm::mirrorRepeat<float>
	movss	DWORD PTR D$[rsp], xmm0

; 146  : 		Error += glm::epsilonEqual(D, 0.5f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T26[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T27[rsp], xmm0
	lea	r8, QWORD PTR $T26[rsp]
	lea	rdx, QWORD PTR $T27[rsp]
	lea	rcx, QWORD PTR D$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv134[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 147  : 
; 148  : 		float E = glm::mirrorRepeat(1.5f);

	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR $T28[rsp], xmm0
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$mirrorRepeat@M@glm@@YAMAEBM@Z	; glm::mirrorRepeat<float>
	movss	DWORD PTR E$[rsp], xmm0

; 149  : 		Error += glm::epsilonEqual(E, 0.5f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T29[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T30[rsp], xmm0
	lea	r8, QWORD PTR $T29[rsp]
	lea	rdx, QWORD PTR $T30[rsp]
	lea	rcx, QWORD PTR E$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv144[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 150  : 
; 151  : 		float F = glm::mirrorRepeat(0.9f);

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR $T31[rsp], xmm0
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$mirrorRepeat@M@glm@@YAMAEBM@Z	; glm::mirrorRepeat<float>
	movss	DWORD PTR F$[rsp], xmm0

; 152  : 		Error += glm::epsilonEqual(F, 0.9f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T32[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR $T33[rsp], xmm0
	lea	r8, QWORD PTR $T32[rsp]
	lea	rdx, QWORD PTR $T33[rsp]
	lea	rcx, QWORD PTR F$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv154[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 153  : 
; 154  : 		float G = glm::mirrorRepeat(3.0f);

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR $T34[rsp], xmm0
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$mirrorRepeat@M@glm@@YAMAEBM@Z	; glm::mirrorRepeat<float>
	movss	DWORD PTR G$[rsp], xmm0

; 155  : 		Error += glm::epsilonEqual(G, 1.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T35[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T36[rsp], xmm0
	lea	r8, QWORD PTR $T35[rsp]
	lea	rdx, QWORD PTR $T36[rsp]
	lea	rcx, QWORD PTR G$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv164[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv164[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 156  : 
; 157  : 		float H = glm::mirrorRepeat(-3.0f);

	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR $T37[rsp], xmm0
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$mirrorRepeat@M@glm@@YAMAEBM@Z	; glm::mirrorRepeat<float>
	movss	DWORD PTR H$[rsp], xmm0

; 158  : 		Error += glm::epsilonEqual(H, 1.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T38[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T39[rsp], xmm0
	lea	r8, QWORD PTR $T38[rsp]
	lea	rdx, QWORD PTR $T39[rsp]
	lea	rcx, QWORD PTR H$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv174[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv174[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 159  : 
; 160  : 		float I = glm::mirrorRepeat(-1.0f);

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR $T40[rsp], xmm0
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$mirrorRepeat@M@glm@@YAMAEBM@Z	; glm::mirrorRepeat<float>
	movss	DWORD PTR I$[rsp], xmm0

; 161  : 		Error += glm::epsilonEqual(I, 1.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T41[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T42[rsp], xmm0
	lea	r8, QWORD PTR $T41[rsp]
	lea	rdx, QWORD PTR $T42[rsp]
	lea	rcx, QWORD PTR I$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv184[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv184[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv184[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 162  : 
; 163  : 		glm::vec2 K = glm::mirrorRepeat(glm::vec2(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T43[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR K$[rsp]
	call	??$mirrorRepeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::mirrorRepeat<float,0,glm::tvec2>

; 164  : 		Error += glm::all(glm::epsilonEqual(K, glm::vec2(0.5f), glm::vec2(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T44[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv226[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T45[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv226[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR K$[rsp]
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test
	mov	DWORD PTR tv238[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv238[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv238[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 165  : 
; 166  : 		glm::vec3 L = glm::mirrorRepeat(glm::vec3(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T47[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR L$[rsp]
	call	??$mirrorRepeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::mirrorRepeat<float,0,glm::tvec3>

; 167  : 		Error += glm::all(glm::epsilonEqual(L, glm::vec3(0.5f), glm::vec3(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T48[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv248[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T49[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv248[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR L$[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test
	mov	DWORD PTR tv260[rsp], 0
	jmp	SHORT $LN24@test
$LN23@test:
	mov	DWORD PTR tv260[rsp], 1
$LN24@test:
	mov	eax, DWORD PTR tv260[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 168  : 
; 169  : 		glm::vec4 M = glm::mirrorRepeat(glm::vec4(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T51[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR M$[rsp]
	call	??$mirrorRepeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::mirrorRepeat<float,0,glm::tvec4>

; 170  : 		Error += glm::all(glm::epsilonEqual(M, glm::vec4(0.5f), glm::vec4(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T52[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv270[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T53[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv270[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR M$[rsp]
	lea	rcx, QWORD PTR $T54[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test
	mov	DWORD PTR tv282[rsp], 0
	jmp	SHORT $LN26@test
$LN25@test:
	mov	DWORD PTR tv282[rsp], 1
$LN26@test:
	mov	eax, DWORD PTR tv282[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 171  : 
; 172  : 		glm::vec1 N = glm::mirrorRepeat(glm::vec1(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T55[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR N$[rsp]
	call	??$mirrorRepeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::mirrorRepeat<float,0,glm::tvec1>

; 173  : 		Error += glm::all(glm::epsilonEqual(N, glm::vec1(0.5f), glm::vec1(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T56[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv292[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T57[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv292[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR N$[rsp]
	lea	rcx, QWORD PTR $T58[rsp]
	call	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@test
	mov	DWORD PTR tv304[rsp], 0
	jmp	SHORT $LN28@test
$LN27@test:
	mov	DWORD PTR tv304[rsp], 1
$LN28@test:
	mov	eax, DWORD PTR tv304[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 174  : 
; 175  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 176  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@mirrorRepeat@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 832				; 00000340H
	pop	rdi
	ret	0
?test@mirrorRepeat@@YAHXZ ENDP				; mirrorRepeat::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$mirrorClamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
Texcoord$ = 72
??$mirrorClamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::mirrorClamp<float,0,glm::tvec1>, COMDAT

; 32   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 33   : 		return glm::fract(glm::abs(Texcoord));

	mov	rdx, QWORD PTR Texcoord$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec1>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 34   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$mirrorClamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::mirrorClamp<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$mirrorClamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
Texcoord$ = 72
??$mirrorClamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::mirrorClamp<float,0,glm::tvec4>, COMDAT

; 32   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 33   : 		return glm::fract(glm::abs(Texcoord));

	mov	rdx, QWORD PTR Texcoord$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 34   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$mirrorClamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::mirrorClamp<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$mirrorClamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
Texcoord$ = 72
??$mirrorClamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::mirrorClamp<float,0,glm::tvec3>, COMDAT

; 32   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 33   : 		return glm::fract(glm::abs(Texcoord));

	mov	rdx, QWORD PTR Texcoord$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 34   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$mirrorClamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::mirrorClamp<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$mirrorClamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
Texcoord$ = 72
??$mirrorClamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::mirrorClamp<float,0,glm::tvec2>, COMDAT

; 32   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 33   : 		return glm::fract(glm::abs(Texcoord));

	mov	rdx, QWORD PTR Texcoord$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$fract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 34   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$mirrorClamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::mirrorClamp<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$mirrorClamp@M@glm@@YAMAEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
Texcoord$ = 80
??$mirrorClamp@M@glm@@YAMAEBM@Z PROC			; glm::mirrorClamp<float>, COMDAT

; 38   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 39   : 		return mirrorClamp(tvec1<genType, defaultp>(Texcoord)).x;

	mov	rax, QWORD PTR Texcoord$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$mirrorClamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::mirrorClamp<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]

; 40   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$mirrorClamp@M@glm@@YAMAEBM@Z ENDP			; glm::mirrorClamp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_wrap.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 52
B$ = 84
C$ = 116
D$ = 148
E$ = 180
F$ = 212
G$ = 244
H$ = 276
I$ = 308
K$ = 344
L$ = 376
M$ = 424
N$ = 468
$T16 = 484
$T17 = 488
$T18 = 492
$T19 = 496
$T20 = 500
$T21 = 504
$T22 = 508
$T23 = 512
$T24 = 516
$T25 = 520
$T26 = 524
$T27 = 528
$T28 = 532
$T29 = 536
$T30 = 540
$T31 = 544
$T32 = 548
$T33 = 552
$T34 = 556
$T35 = 560
$T36 = 564
$T37 = 568
$T38 = 572
$T39 = 576
$T40 = 580
$T41 = 584
$T42 = 588
$T43 = 592
$T44 = 600
$T45 = 608
$T46 = 616
$T47 = 620
$T48 = 632
$T49 = 644
$T50 = 656
$T51 = 660
$T52 = 676
$T53 = 692
$T54 = 708
$T55 = 712
$T56 = 716
$T57 = 720
$T58 = 724
tv72 = 728
tv82 = 732
tv92 = 736
tv134 = 740
tv144 = 744
tv154 = 748
tv164 = 752
tv174 = 756
tv184 = 760
tv226 = 768
tv238 = 776
tv248 = 784
tv260 = 792
tv270 = 800
tv282 = 808
tv292 = 816
tv304 = 824
?test@mirrorClamp@@YAHXZ PROC				; mirrorClamp::test

; 84   : 	{

$LN29:
	push	rdi
	sub	rsp, 832				; 00000340H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 200				; 000000c8H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 85   : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 86   : 
; 87   : 		float A = glm::mirrorClamp(0.5f);

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T16[rsp], xmm0
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$mirrorClamp@M@glm@@YAMAEBM@Z		; glm::mirrorClamp<float>
	movss	DWORD PTR A$[rsp], xmm0

; 88   : 		Error += glm::epsilonEqual(A, 0.5f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T17[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T18[rsp], xmm0
	lea	r8, QWORD PTR $T17[rsp]
	lea	rdx, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv72[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 89   : 
; 90   : 		float B = glm::mirrorClamp(0.0f);

	xorps	xmm0, xmm0
	movss	DWORD PTR $T19[rsp], xmm0
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$mirrorClamp@M@glm@@YAMAEBM@Z		; glm::mirrorClamp<float>
	movss	DWORD PTR B$[rsp], xmm0

; 91   : 		Error += glm::epsilonEqual(B, 0.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T20[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T21[rsp], xmm0
	lea	r8, QWORD PTR $T20[rsp]
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv82[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 92   : 
; 93   : 		float C = glm::mirrorClamp(1.1f);

	movss	xmm0, DWORD PTR __real@3f8ccccd
	movss	DWORD PTR $T22[rsp], xmm0
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$mirrorClamp@M@glm@@YAMAEBM@Z		; glm::mirrorClamp<float>
	movss	DWORD PTR C$[rsp], xmm0

; 94   : 		Error += glm::epsilonEqual(C, 0.1f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T23[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR $T24[rsp], xmm0
	lea	r8, QWORD PTR $T23[rsp]
	lea	rdx, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv92[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 95   : 
; 96   : 		float D = glm::mirrorClamp(-0.5f);

	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR $T25[rsp], xmm0
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$mirrorClamp@M@glm@@YAMAEBM@Z		; glm::mirrorClamp<float>
	movss	DWORD PTR D$[rsp], xmm0

; 97   : 		Error += glm::epsilonEqual(D, 0.5f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T26[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T27[rsp], xmm0
	lea	r8, QWORD PTR $T26[rsp]
	lea	rdx, QWORD PTR $T27[rsp]
	lea	rcx, QWORD PTR D$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv134[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 98   : 
; 99   : 		float E = glm::mirrorClamp(1.5f);

	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR $T28[rsp], xmm0
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$mirrorClamp@M@glm@@YAMAEBM@Z		; glm::mirrorClamp<float>
	movss	DWORD PTR E$[rsp], xmm0

; 100  : 		Error += glm::epsilonEqual(E, 0.5f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T29[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T30[rsp], xmm0
	lea	r8, QWORD PTR $T29[rsp]
	lea	rdx, QWORD PTR $T30[rsp]
	lea	rcx, QWORD PTR E$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv144[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 101  : 
; 102  : 		float F = glm::mirrorClamp(0.9f);

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR $T31[rsp], xmm0
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$mirrorClamp@M@glm@@YAMAEBM@Z		; glm::mirrorClamp<float>
	movss	DWORD PTR F$[rsp], xmm0

; 103  : 		Error += glm::epsilonEqual(F, 0.9f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T32[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR $T33[rsp], xmm0
	lea	r8, QWORD PTR $T32[rsp]
	lea	rdx, QWORD PTR $T33[rsp]
	lea	rcx, QWORD PTR F$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv154[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 104  : 
; 105  : 		float G = glm::mirrorClamp(3.1f);

	movss	xmm0, DWORD PTR __real@40466666
	movss	DWORD PTR $T34[rsp], xmm0
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$mirrorClamp@M@glm@@YAMAEBM@Z		; glm::mirrorClamp<float>
	movss	DWORD PTR G$[rsp], xmm0

; 106  : 		Error += glm::epsilonEqual(G, 0.1f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T35[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR $T36[rsp], xmm0
	lea	r8, QWORD PTR $T35[rsp]
	lea	rdx, QWORD PTR $T36[rsp]
	lea	rcx, QWORD PTR G$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv164[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv164[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 107  : 
; 108  : 		float H = glm::mirrorClamp(-3.1f);

	movss	xmm0, DWORD PTR __real@c0466666
	movss	DWORD PTR $T37[rsp], xmm0
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$mirrorClamp@M@glm@@YAMAEBM@Z		; glm::mirrorClamp<float>
	movss	DWORD PTR H$[rsp], xmm0

; 109  : 		Error += glm::epsilonEqual(H, 0.1f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T38[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR $T39[rsp], xmm0
	lea	r8, QWORD PTR $T38[rsp]
	lea	rdx, QWORD PTR $T39[rsp]
	lea	rcx, QWORD PTR H$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv174[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv174[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 110  : 
; 111  : 		float I = glm::mirrorClamp(-0.9f);

	movss	xmm0, DWORD PTR __real@bf666666
	movss	DWORD PTR $T40[rsp], xmm0
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$mirrorClamp@M@glm@@YAMAEBM@Z		; glm::mirrorClamp<float>
	movss	DWORD PTR I$[rsp], xmm0

; 112  : 		Error += glm::epsilonEqual(I, 0.9f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T41[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR $T42[rsp], xmm0
	lea	r8, QWORD PTR $T41[rsp]
	lea	rdx, QWORD PTR $T42[rsp]
	lea	rcx, QWORD PTR I$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv184[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv184[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv184[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 113  : 
; 114  : 		glm::vec2 K = glm::mirrorClamp(glm::vec2(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T43[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR K$[rsp]
	call	??$mirrorClamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::mirrorClamp<float,0,glm::tvec2>

; 115  : 		Error += glm::all(glm::epsilonEqual(K, glm::vec2(0.5f), glm::vec2(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T44[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv226[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T45[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv226[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR K$[rsp]
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test
	mov	DWORD PTR tv238[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv238[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv238[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 116  : 
; 117  : 		glm::vec3 L = glm::mirrorClamp(glm::vec3(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T47[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR L$[rsp]
	call	??$mirrorClamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::mirrorClamp<float,0,glm::tvec3>

; 118  : 		Error += glm::all(glm::epsilonEqual(L, glm::vec3(0.5f), glm::vec3(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T48[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv248[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T49[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv248[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR L$[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test
	mov	DWORD PTR tv260[rsp], 0
	jmp	SHORT $LN24@test
$LN23@test:
	mov	DWORD PTR tv260[rsp], 1
$LN24@test:
	mov	eax, DWORD PTR tv260[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 119  : 
; 120  : 		glm::vec4 M = glm::mirrorClamp(glm::vec4(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T51[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR M$[rsp]
	call	??$mirrorClamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::mirrorClamp<float,0,glm::tvec4>

; 121  : 		Error += glm::all(glm::epsilonEqual(M, glm::vec4(0.5f), glm::vec4(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T52[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv270[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T53[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv270[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR M$[rsp]
	lea	rcx, QWORD PTR $T54[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test
	mov	DWORD PTR tv282[rsp], 0
	jmp	SHORT $LN26@test
$LN25@test:
	mov	DWORD PTR tv282[rsp], 1
$LN26@test:
	mov	eax, DWORD PTR tv282[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 122  : 
; 123  : 		glm::vec1 N = glm::mirrorClamp(glm::vec1(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T55[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR N$[rsp]
	call	??$mirrorClamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::mirrorClamp<float,0,glm::tvec1>

; 124  : 		Error += glm::all(glm::epsilonEqual(N, glm::vec1(0.5f), glm::vec1(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T56[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv292[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T57[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv292[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR N$[rsp]
	lea	rcx, QWORD PTR $T58[rsp]
	call	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@test
	mov	DWORD PTR tv304[rsp], 0
	jmp	SHORT $LN28@test
$LN27@test:
	mov	DWORD PTR tv304[rsp], 1
$LN28@test:
	mov	eax, DWORD PTR tv304[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 125  : 
; 126  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 127  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@mirrorClamp@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 832				; 00000340H
	pop	rdi
	ret	0
?test@mirrorClamp@@YAHXZ ENDP				; mirrorClamp::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$repeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Texcoord$ = 56
??$repeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::repeat<float,0,glm::tvec1>, COMDAT

; 20   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 21   : 		return glm::fract(Texcoord);

	mov	rdx, QWORD PTR Texcoord$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 22   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$repeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::repeat<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$repeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Texcoord$ = 56
??$repeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::repeat<float,0,glm::tvec4>, COMDAT

; 20   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 21   : 		return glm::fract(Texcoord);

	mov	rdx, QWORD PTR Texcoord$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$fract@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 22   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$repeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::repeat<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$repeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Texcoord$ = 56
??$repeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::repeat<float,0,glm::tvec3>, COMDAT

; 20   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 21   : 		return glm::fract(Texcoord);

	mov	rdx, QWORD PTR Texcoord$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$fract@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 22   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$repeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::repeat<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$repeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Texcoord$ = 56
??$repeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::repeat<float,0,glm::tvec2>, COMDAT

; 20   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 21   : 		return glm::fract(Texcoord);

	mov	rdx, QWORD PTR Texcoord$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$fract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 22   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$repeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::repeat<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$repeat@M@glm@@YAMAEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
Texcoord$ = 80
??$repeat@M@glm@@YAMAEBM@Z PROC				; glm::repeat<float>, COMDAT

; 26   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 27   : 		return repeat(tvec1<genType, defaultp>(Texcoord)).x;

	mov	rax, QWORD PTR Texcoord$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$repeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::repeat<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]

; 28   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$repeat@M@glm@@YAMAEBM@Z ENDP				; glm::repeat<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_wrap.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 52
B$ = 84
C$ = 116
D$ = 148
E$ = 180
F$ = 212
K$ = 248
L$ = 280
M$ = 328
N$ = 372
$T13 = 388
$T14 = 392
$T15 = 396
$T16 = 400
$T17 = 404
$T18 = 408
$T19 = 412
$T20 = 416
$T21 = 420
$T22 = 424
$T23 = 428
$T24 = 432
$T25 = 436
$T26 = 440
$T27 = 444
$T28 = 448
$T29 = 452
$T30 = 456
$T31 = 460
$T32 = 468
$T33 = 476
$T34 = 484
$T35 = 488
$T36 = 500
$T37 = 512
$T38 = 524
$T39 = 528
$T40 = 544
$T41 = 560
$T42 = 576
$T43 = 580
$T44 = 584
$T45 = 588
$T46 = 592
tv72 = 596
tv82 = 600
tv92 = 604
tv134 = 608
tv144 = 612
tv154 = 616
tv164 = 624
tv176 = 632
tv186 = 640
tv230 = 648
tv240 = 656
tv252 = 664
tv262 = 672
tv274 = 680
?test@repeat@@YAHXZ PROC				; repeat::test

; 44   : 	{

$LN23:
	push	rdi
	sub	rsp, 688				; 000002b0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 164				; 000000a4H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 45   : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 46   : 
; 47   : 		float A = glm::repeat(0.5f);

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T13[rsp], xmm0
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$repeat@M@glm@@YAMAEBM@Z		; glm::repeat<float>
	movss	DWORD PTR A$[rsp], xmm0

; 48   : 		Error += glm::epsilonEqual(A, 0.5f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T14[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T15[rsp], xmm0
	lea	r8, QWORD PTR $T14[rsp]
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv72[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 49   : 
; 50   : 		float B = glm::repeat(0.0f);

	xorps	xmm0, xmm0
	movss	DWORD PTR $T16[rsp], xmm0
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$repeat@M@glm@@YAMAEBM@Z		; glm::repeat<float>
	movss	DWORD PTR B$[rsp], xmm0

; 51   : 		Error += glm::epsilonEqual(B, 0.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T17[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T18[rsp], xmm0
	lea	r8, QWORD PTR $T17[rsp]
	lea	rdx, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv82[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 52   : 
; 53   : 		float C = glm::repeat(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T19[rsp], xmm0
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$repeat@M@glm@@YAMAEBM@Z		; glm::repeat<float>
	movss	DWORD PTR C$[rsp], xmm0

; 54   : 		Error += glm::epsilonEqual(C, 0.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T20[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T21[rsp], xmm0
	lea	r8, QWORD PTR $T20[rsp]
	lea	rdx, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv92[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 55   : 
; 56   : 		float D = glm::repeat(-0.5f);

	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR $T22[rsp], xmm0
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$repeat@M@glm@@YAMAEBM@Z		; glm::repeat<float>
	movss	DWORD PTR D$[rsp], xmm0

; 57   : 		Error += glm::epsilonEqual(D, 0.5f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T23[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T24[rsp], xmm0
	lea	r8, QWORD PTR $T23[rsp]
	lea	rdx, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR D$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv134[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 58   : 
; 59   : 		float E = glm::repeat(1.5f);

	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR $T25[rsp], xmm0
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$repeat@M@glm@@YAMAEBM@Z		; glm::repeat<float>
	movss	DWORD PTR E$[rsp], xmm0

; 60   : 		Error += glm::epsilonEqual(E, 0.5f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T26[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T27[rsp], xmm0
	lea	r8, QWORD PTR $T26[rsp]
	lea	rdx, QWORD PTR $T27[rsp]
	lea	rcx, QWORD PTR E$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv144[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 61   : 
; 62   : 		float F = glm::repeat(0.9f);

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR $T28[rsp], xmm0
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$repeat@M@glm@@YAMAEBM@Z		; glm::repeat<float>
	movss	DWORD PTR F$[rsp], xmm0

; 63   : 		Error += glm::epsilonEqual(F, 0.9f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T29[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR $T30[rsp], xmm0
	lea	r8, QWORD PTR $T29[rsp]
	lea	rdx, QWORD PTR $T30[rsp]
	lea	rcx, QWORD PTR F$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv154[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 64   : 
; 65   : 		glm::vec2 K = glm::repeat(glm::vec2(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T31[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR K$[rsp]
	call	??$repeat@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::repeat<float,0,glm::tvec2>

; 66   : 		Error += glm::all(glm::epsilonEqual(K, glm::vec2(0.5f), glm::vec2(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T32[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv164[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T33[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv164[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR K$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv176[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv176[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv176[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 67   : 
; 68   : 		glm::vec3 L = glm::repeat(glm::vec3(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T35[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR L$[rsp]
	call	??$repeat@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::repeat<float,0,glm::tvec3>

; 69   : 		Error += glm::all(glm::epsilonEqual(L, glm::vec3(0.5f), glm::vec3(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T36[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv186[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T37[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv186[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR L$[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv230[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv230[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv230[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 70   : 
; 71   : 		glm::vec4 M = glm::repeat(glm::vec4(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T39[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR M$[rsp]
	call	??$repeat@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::repeat<float,0,glm::tvec4>

; 72   : 		Error += glm::all(glm::epsilonEqual(M, glm::vec4(0.5f), glm::vec4(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv240[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T41[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv240[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR M$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv252[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv252[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv252[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 73   : 
; 74   : 		glm::vec1 N = glm::repeat(glm::vec1(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T43[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR N$[rsp]
	call	??$repeat@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::repeat<float,0,glm::tvec1>

; 75   : 		Error += glm::all(glm::epsilonEqual(N, glm::vec1(0.5f), glm::vec1(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T44[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv262[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T45[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv262[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR N$[rsp]
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test
	mov	DWORD PTR tv274[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv274[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv274[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 76   : 
; 77   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 78   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@repeat@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 688				; 000002b0H
	pop	rdi
	ret	0
?test@repeat@@YAHXZ ENDP				; repeat::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec1>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<bool,0>::tvec1<bool,0>, COMDAT

; 34   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<bool,0>::tvec1<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 71   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 73   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 74   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_N$0A@@glm@@SAHXZ PROC			; glm::tvec1<bool,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@00@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
epsilon$ = 88
??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@00@Z PROC ; glm::epsilonEqual<float,0,glm::tvec1>, COMDAT

; 76   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 77   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR $T1[rsp], eax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec1>
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 78   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@00@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
tv66 = 40
__$ReturnUdt$ = 64
Texcoord$ = 72
??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::clamp<float,0,glm::tvec1>, COMDAT

; 8    : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 9    : 		return glm::clamp(Texcoord, vecType<T, P>(0), vecType<T, P>(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv66[rsp], rax
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR Texcoord$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@00@Z ; glm::clamp<float,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 10   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::clamp<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 39   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 34   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT

; 71   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 73   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$0A@@glm@@SAHXZ PROC			; glm::tvec1<float,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@M$0A@@glm@@SAHXZ ENDP			; glm::tvec1<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z PROC ; glm::epsilonEqual<float,0,glm::tvec4>, COMDAT

; 76   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H

; 77   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR epsilon$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 78   : 	}

	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
tv66 = 64
__$ReturnUdt$ = 96
Texcoord$ = 104
??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::clamp<float,0,glm::tvec4>, COMDAT

; 8    : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 9    : 		return glm::clamp(Texcoord, vecType<T, P>(0), vecType<T, P>(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv66[rsp], rax
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR Texcoord$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@00@Z ; glm::clamp<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 10   : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::clamp<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec3>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_N$0A@@glm@@SAHXZ PROC			; glm::tvec3<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z PROC ; glm::epsilonEqual<float,0,glm::tvec3>, COMDAT

; 76   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H

; 77   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR epsilon$[rsp]
	mov	ecx, 12
	rep movsb
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 78   : 	}

	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
tv66 = 56
__$ReturnUdt$ = 80
Texcoord$ = 88
??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::clamp<float,0,glm::tvec3>, COMDAT

; 8    : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 9    : 		return glm::clamp(Texcoord, vecType<T, P>(0), vecType<T, P>(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv66[rsp], rax
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR Texcoord$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z ; glm::clamp<float,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 10   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::clamp<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec2>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_N$0A@@glm@@SAHXZ PROC			; glm::tvec2<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@00@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
epsilon$ = 104
??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@00@Z PROC ; glm::epsilonEqual<float,0,glm::tvec2>, COMDAT

; 76   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 77   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T1[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 78   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@00@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv66 = 48
__$ReturnUdt$ = 80
Texcoord$ = 88
??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::clamp<float,0,glm::tvec2>, COMDAT

; 8    : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 9    : 		return glm::clamp(Texcoord, vecType<T, P>(0), vecType<T, P>(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv66[rsp], rax
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR Texcoord$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@00@Z ; glm::clamp<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 10   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::clamp<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\wrap.inl
;	COMDAT ??$clamp@M@glm@@YAMAEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
Texcoord$ = 80
??$clamp@M@glm@@YAMAEBM@Z PROC				; glm::clamp<float>, COMDAT

; 14   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 15   : 		return clamp(tvec1<genType, defaultp>(Texcoord)).x;

	mov	rax, QWORD PTR Texcoord$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::clamp<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]

; 16   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$clamp@M@glm@@YAMAEBM@Z ENDP				; glm::clamp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_wrap.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 52
B$ = 84
C$ = 116
D$ = 148
E$ = 180
K$ = 216
L$ = 248
M$ = 296
N$ = 340
$T12 = 356
$T13 = 360
$T14 = 364
$T15 = 368
$T16 = 372
$T17 = 376
$T18 = 380
$T19 = 384
$T20 = 388
$T21 = 392
$T22 = 396
$T23 = 400
$T24 = 404
$T25 = 408
$T26 = 412
$T27 = 416
$T28 = 424
$T29 = 432
$T30 = 440
$T31 = 444
$T32 = 456
$T33 = 468
$T34 = 480
$T35 = 484
$T36 = 500
$T37 = 516
$T38 = 532
$T39 = 536
$T40 = 540
$T41 = 544
$T42 = 548
tv72 = 552
tv82 = 556
tv92 = 560
tv134 = 564
tv144 = 568
tv154 = 576
tv166 = 584
tv176 = 592
tv188 = 600
tv230 = 608
tv242 = 616
tv252 = 624
tv264 = 632
?test@clamp@@YAHXZ PROC					; clamp::test

; 7    : 	{

$LN21:
	push	rdi
	sub	rsp, 640				; 00000280H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 152				; 00000098H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8    : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 9    : 
; 10   : 		float A = glm::clamp(0.5f);

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T12[rsp], xmm0
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$clamp@M@glm@@YAMAEBM@Z		; glm::clamp<float>
	movss	DWORD PTR A$[rsp], xmm0

; 11   : 		Error += glm::epsilonEqual(A, 0.5f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T13[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T14[rsp], xmm0
	lea	r8, QWORD PTR $T13[rsp]
	lea	rdx, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv72[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 12   : 
; 13   : 		float B = glm::clamp(0.0f);

	xorps	xmm0, xmm0
	movss	DWORD PTR $T15[rsp], xmm0
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$clamp@M@glm@@YAMAEBM@Z		; glm::clamp<float>
	movss	DWORD PTR B$[rsp], xmm0

; 14   : 		Error += glm::epsilonEqual(B, 0.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T16[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T17[rsp], xmm0
	lea	r8, QWORD PTR $T16[rsp]
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv82[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 15   : 
; 16   : 		float C = glm::clamp(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T18[rsp], xmm0
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$clamp@M@glm@@YAMAEBM@Z		; glm::clamp<float>
	movss	DWORD PTR C$[rsp], xmm0

; 17   : 		Error += glm::epsilonEqual(C, 1.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T19[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T20[rsp], xmm0
	lea	r8, QWORD PTR $T19[rsp]
	lea	rdx, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv92[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 18   : 
; 19   : 		float D = glm::clamp(-0.5f);

	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR $T21[rsp], xmm0
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$clamp@M@glm@@YAMAEBM@Z		; glm::clamp<float>
	movss	DWORD PTR D$[rsp], xmm0

; 20   : 		Error += glm::epsilonEqual(D, 0.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T22[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T23[rsp], xmm0
	lea	r8, QWORD PTR $T22[rsp]
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR D$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv134[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 21   : 
; 22   : 		float E = glm::clamp(1.5f);

	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR $T24[rsp], xmm0
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$clamp@M@glm@@YAMAEBM@Z		; glm::clamp<float>
	movss	DWORD PTR E$[rsp], xmm0

; 23   : 		Error += glm::epsilonEqual(E, 1.0f, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T25[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T26[rsp], xmm0
	lea	r8, QWORD PTR $T25[rsp]
	lea	rdx, QWORD PTR $T26[rsp]
	lea	rcx, QWORD PTR E$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv144[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 24   : 
; 25   : 		glm::vec2 K = glm::clamp(glm::vec2(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T27[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR K$[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::clamp<float,0,glm::tvec2>

; 26   : 		Error += glm::all(glm::epsilonEqual(K, glm::vec2(0.5f), glm::vec2(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T28[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv154[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T29[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv154[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR K$[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv166[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 27   : 
; 28   : 		glm::vec3 L = glm::clamp(glm::vec3(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T31[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR L$[rsp]
	call	??$clamp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::clamp<float,0,glm::tvec3>

; 29   : 		Error += glm::all(glm::epsilonEqual(L, glm::vec3(0.5f), glm::vec3(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T32[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv176[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T33[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv176[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR L$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv188[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv188[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv188[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 30   : 
; 31   : 		glm::vec4 M = glm::clamp(glm::vec4(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T35[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR M$[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::clamp<float,0,glm::tvec4>

; 32   : 		Error += glm::all(glm::epsilonEqual(M, glm::vec4(0.5f), glm::vec4(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T36[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv230[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T37[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv230[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR M$[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv242[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv242[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv242[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 33   : 
; 34   : 		glm::vec1 N = glm::clamp(glm::vec1(0.5f));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T39[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR N$[rsp]
	call	??$clamp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::clamp<float,0,glm::tvec1>

; 35   : 		Error += glm::all(glm::epsilonEqual(N, glm::vec1(0.5f), glm::vec1(0.00001f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3727c5ac
	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv252[rsp], rax
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T41[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv252[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, QWORD PTR N$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv264[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv264[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv264[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 36   : 
; 37   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 38   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@clamp@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 640				; 00000280H
	pop	rdi
	ret	0
?test@clamp@@YAHXZ ENDP					; clamp::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M@glm@@YA_NAEBM00@Z
_TEXT	SEGMENT
tv68 = 32
x$ = 64
y$ = 72
epsilon$ = 80
??$epsilonEqual@M@glm@@YA_NAEBM00@Z PROC		; glm::epsilonEqual<float>, COMDAT

; 21   : 	{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 22   : 		return abs(x - y) < epsilon;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@epsilonEqu
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@epsilonEqu
$LN3@epsilonEqu:
	mov	DWORD PTR tv68[rsp], 0
$LN4@epsilonEqu:
	movzx	eax, BYTE PTR tv68[rsp]

; 23   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilonEqual@M@glm@@YA_NAEBM00@Z ENDP		; glm::epsilonEqual<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?floor@@YAMM@Z PROC					; floor, COMDAT

; 124  : _NODISCARD _Check_return_ inline float floor(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 125  : #if _HAS_CMATH_INTRINSICS
; 126  :     return __floorf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	floorf

; 127  : #elif defined(__clang__)
; 128  :     return __builtin_floorf(_Xx);
; 129  : #else // ^^^ defined(__clang__) ^^^ / vvv intrinsics unavailable vvv
; 130  :     return _CSTD floorf(_Xx);
; 131  : #endif // ^^^ intrinsics unavailable ^^^
; 132  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
END
