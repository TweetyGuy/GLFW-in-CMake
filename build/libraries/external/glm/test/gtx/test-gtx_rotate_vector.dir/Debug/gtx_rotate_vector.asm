; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@XZ			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	?test_rotate@@YAHXZ				; test_rotate
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	??$pi@M@glm@@YAMXZ				; glm::pi<float>
PUBLIC	??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z ; glm::rotate<float,0>
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
PUBLIC	??$rotate@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM0@Z ; glm::rotate<float,0>
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$rotate@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBMAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
PUBLIC	??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateX<float,0>
PUBLIC	??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateX<float,0>
PUBLIC	??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateY<float,0>
PUBLIC	??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateY<float,0>
PUBLIC	??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateZ<float,0>
PUBLIC	??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateZ<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>
PUBLIC	??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::orientation<float,0>
PUBLIC	?test_rotateX@@YAHXZ				; test_rotateX
PUBLIC	?test_rotateY@@YAHXZ				; test_rotateY
PUBLIC	?test_rotateZ@@YAHXZ				; test_rotateZ
PUBLIC	?test_orientation@@YAHXZ			; test_orientation
PUBLIC	main
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
PUBLIC	?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
PUBLIC	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
PUBLIC	?length@?$tvec3@_N$0A@@glm@@SAHXZ		; glm::tvec3<bool,0>::length
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
PUBLIC	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
PUBLIC	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
PUBLIC	??$inversesqrt@M@glm@@YAMM@Z			; glm::inversesqrt<float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z	; glm::operator*<float,0>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40490fdb
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__wassert:PROC
EXTRN	__imp_acosf:PROC
EXTRN	__imp_cosf:PROC
EXTRN	__imp_sinf:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?acos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?acos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?cos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sin@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sin@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_rotate@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+935
	DD	imagerel $unwind$?test_rotate@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pi@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$??$pi@M@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+219
	DD	imagerel $unwind$??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotate@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM0@Z DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$??$rotate@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotate@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBMAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$??$rotate@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBMAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+246
	DD	imagerel $unwind$??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+246
	DD	imagerel $unwind$??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+251
	DD	imagerel $unwind$??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+251
	DD	imagerel $unwind$??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+244
	DD	imagerel $unwind$??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+244
	DD	imagerel $unwind$??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+331
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN4
	DD	imagerel $LN4+212
	DD	imagerel $unwind$??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_rotateX@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+208
	DD	imagerel $unwind$?test_rotateX@@YAHXZ
$pdata$?test_rotateY@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+208
	DD	imagerel $unwind$?test_rotateY@@YAHXZ
$pdata$?test_rotateZ@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+208
	DD	imagerel $unwind$?test_rotateZ@@YAHXZ
$pdata$?test_orientation@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+193
	DD	imagerel $unwind$?test_orientation@@YAHXZ
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@MAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@MAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+224
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+545
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+491
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+282
	DD	imagerel $unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inversesqrt@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$inversesqrt@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+2694
	DD	imagerel $unwind$??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+190
	DD	imagerel $unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	041H
	DW	0a6cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z DD 044919H
	DD	06f011eH
	DD	060167017H
	DD	imagerel __GSHandlerCheck
	DD	0368H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 061H ; glm::rotate<float,0>
	DB	078H
	DB	069H
	DB	073H
	DB	00H
	ORG $+3
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$1 DB 074H ; glm::rotate<float,0>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$2 DB 052H ; glm::rotate<float,0>
	DB	06fH
	DB	074H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+1
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$3 DB 052H ; glm::rotate<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 0100H ; glm::rotate<float,0>
	DD	040H
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$3
	DD	0a0H
	DD	040H
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$2
	DD	068H
	DD	0cH
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+192
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 04H ; glm::rotate<float,0>
	DD	00H
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inversesqrt@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z DD 043101H
	DD	0470118H
	DD	060107011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$0 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$1 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$2 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$3 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$4 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$5 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$6 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$7 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$8 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	033H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$9 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$10 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcFrameData DD 0bH ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcVarDesc
	ORG $+8
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 0208H ; glm::operator*<float,0>
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$10
	DD	01d8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$9
	DD	01a8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$8
	DD	0178H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$7
	DD	0148H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$6
	DD	0118H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$5
	DD	0e8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	06dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@MAEBU?$tvec3@M$0A@@0@@Z DD 022719H
	DD	07011f218H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::orientation<float,0>
	DB	06fH
	DB	074H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	041H
	DB	078H
	DB	069H
	DB	073H
	DB	00H
	ORG $+3
??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 028H ; glm::orientation<float,0>
	DD	0cH
	DQ	FLAT:??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::orientation<float,0>
	DD	00H
	DQ	FLAT:??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcName$0 DB 052H ; glm::rotateZ<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc DD 028H ; glm::rotateZ<float,0>
	DD	010H
	DQ	FLAT:??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcName$0
	ORG $+48
??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData DD 01H ; glm::rotateZ<float,0>
	DD	00H
	DQ	FLAT:??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcName$0 DB 052H ; glm::rotateZ<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc DD 028H ; glm::rotateZ<float,0>
	DD	0cH
	DQ	FLAT:??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcName$0
	ORG $+48
??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData DD 01H ; glm::rotateZ<float,0>
	DD	00H
	DQ	FLAT:??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcName$0 DB 052H ; glm::rotateY<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc DD 028H ; glm::rotateY<float,0>
	DD	010H
	DQ	FLAT:??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcName$0
	ORG $+48
??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData DD 01H ; glm::rotateY<float,0>
	DD	00H
	DQ	FLAT:??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcName$0 DB 052H ; glm::rotateY<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc DD 028H ; glm::rotateY<float,0>
	DD	0cH
	DQ	FLAT:??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcName$0
	ORG $+48
??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData DD 01H ; glm::rotateY<float,0>
	DD	00H
	DQ	FLAT:??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcName$0 DB 052H ; glm::rotateX<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc DD 028H ; glm::rotateX<float,0>
	DD	010H
	DQ	FLAT:??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcName$0
	ORG $+48
??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData DD 01H ; glm::rotateX<float,0>
	DD	00H
	DQ	FLAT:??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcName$0 DB 052H ; glm::rotateX<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc DD 028H ; glm::rotateX<float,0>
	DD	0cH
	DQ	FLAT:??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcName$0
	ORG $+48
??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData DD 01H ; glm::rotateX<float,0>
	DD	00H
	DQ	FLAT:??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	023H
	DB	066H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotate@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBMAEBU?$tvec3@M$0A@@0@@Z DD 022819H
	DD	07015d219H
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	026H
	DB	079H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotate@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM0@Z DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z DD 022a01H
	DD	070107214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z$rtcName$0 DB 052H ; glm::rotate<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc DD 028H ; glm::rotate<float,0>
	DD	08H
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z$rtcName$0
	ORG $+48
??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData DD 01H ; glm::rotate<float,0>
	DD	00H
	DQ	FLAT:??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pi@M@glm@@YAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_orientation@@YAHXZ
	DD	024H
	DD	0a8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_rotate@@YAHXZ
	DD	024H
	DD	038eH
voltbl	ENDS
xdata	SEGMENT
$unwind$?test_rotate@@YAHXZ DD 032c19H
	DD	0680109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0330H
$unwind$?test_rotateX@@YAHXZ DD 031a01H
	DD	0180109H
	DD	07002H
$unwind$?test_rotateY@@YAHXZ DD 031a01H
	DD	0180109H
	DD	07002H
$unwind$?test_rotateZ@@YAHXZ DD 031a01H
	DD	0180109H
	DD	07002H
$unwind$?test_orientation@@YAHXZ DD 032c19H
	DD	01a0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
?test_rotate@@YAHXZ$rtcName$0 DB 041H			; test_rotate
	DB	00H
	ORG $+2
?test_rotate@@YAHXZ$rtcName$1 DB 042H			; test_rotate
	DB	00H
	ORG $+2
?test_rotate@@YAHXZ$rtcName$2 DB 043H			; test_rotate
	DB	00H
	ORG $+2
?test_rotate@@YAHXZ$rtcName$3 DB 044H			; test_rotate
	DB	00H
	ORG $+2
?test_rotate@@YAHXZ$rtcName$4 DB 045H			; test_rotate
	DB	00H
	ORG $+2
?test_rotate@@YAHXZ$rtcName$5 DB 046H			; test_rotate
	DB	00H
	ORG $+2
?test_rotate@@YAHXZ$rtcName$6 DB 047H			; test_rotate
	DB	00H
	ORG $+2
?test_rotate@@YAHXZ$rtcName$7 DB 048H			; test_rotate
	DB	00H
	ORG $+2
?test_rotate@@YAHXZ$rtcName$8 DB 049H			; test_rotate
	DB	00H
	ORG $+2
?test_rotate@@YAHXZ$rtcName$9 DB 04fH			; test_rotate
	DB	00H
	ORG $+2
?test_rotate@@YAHXZ$rtcFrameData DD 0aH			; test_rotate
	DD	00H
	DQ	FLAT:?test_rotate@@YAHXZ$rtcVarDesc
?test_rotateX@@YAHXZ$rtcName$0 DB 044H			; test_rotateX
	DB	00H
	ORG $+6
?test_rotate@@YAHXZ$rtcVarDesc DD 01f0H			; test_rotate
	DD	040H
	DQ	FLAT:?test_rotate@@YAHXZ$rtcName$9
	DD	01b8H
	DD	010H
	DQ	FLAT:?test_rotate@@YAHXZ$rtcName$8
	DD	0188H
	DD	0cH
	DQ	FLAT:?test_rotate@@YAHXZ$rtcName$7
	DD	0158H
	DD	010H
	DQ	FLAT:?test_rotate@@YAHXZ$rtcName$6
	DD	0128H
	DD	0cH
	DQ	FLAT:?test_rotate@@YAHXZ$rtcName$5
	DD	0f8H
	DD	010H
	DQ	FLAT:?test_rotate@@YAHXZ$rtcName$4
	DD	0c8H
	DD	0cH
	DQ	FLAT:?test_rotate@@YAHXZ$rtcName$3
	DD	098H
	DD	010H
	DQ	FLAT:?test_rotate@@YAHXZ$rtcName$2
	DD	068H
	DD	0cH
	DQ	FLAT:?test_rotate@@YAHXZ$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?test_rotate@@YAHXZ$rtcName$0
	ORG $+480
?test_rotateX@@YAHXZ$rtcName$1 DB 045H			; test_rotateX
	DB	00H
	ORG $+6
?test_rotateX@@YAHXZ$rtcFrameData DD 02H		; test_rotateX
	DD	00H
	DQ	FLAT:?test_rotateX@@YAHXZ$rtcVarDesc
?test_rotateY@@YAHXZ$rtcName$0 DB 046H			; test_rotateY
	DB	00H
	ORG $+6
?test_rotateX@@YAHXZ$rtcVarDesc DD 078H			; test_rotateX
	DD	010H
	DQ	FLAT:?test_rotateX@@YAHXZ$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?test_rotateX@@YAHXZ$rtcName$0
	ORG $+96
?test_rotateY@@YAHXZ$rtcName$1 DB 047H			; test_rotateY
	DB	00H
	ORG $+6
?test_rotateY@@YAHXZ$rtcFrameData DD 02H		; test_rotateY
	DD	00H
	DQ	FLAT:?test_rotateY@@YAHXZ$rtcVarDesc
?test_rotateZ@@YAHXZ$rtcName$0 DB 048H			; test_rotateZ
	DB	00H
	ORG $+6
?test_rotateY@@YAHXZ$rtcVarDesc DD 078H			; test_rotateY
	DD	010H
	DQ	FLAT:?test_rotateY@@YAHXZ$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?test_rotateY@@YAHXZ$rtcName$0
	ORG $+96
?test_rotateZ@@YAHXZ$rtcName$1 DB 049H			; test_rotateZ
	DB	00H
	ORG $+6
?test_rotateZ@@YAHXZ$rtcFrameData DD 02H		; test_rotateZ
	DD	00H
	DQ	FLAT:?test_rotateZ@@YAHXZ$rtcVarDesc
?test_orientation@@YAHXZ$rtcName$0 DB 04fH		; test_orientation
	DB	00H
	ORG $+6
?test_rotateZ@@YAHXZ$rtcVarDesc DD 078H			; test_rotateZ
	DD	010H
	DQ	FLAT:?test_rotateZ@@YAHXZ$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?test_rotateZ@@YAHXZ$rtcName$0
	ORG $+96
?test_orientation@@YAHXZ$rtcVarDesc DD 040H		; test_orientation
	DD	040H
	DQ	FLAT:?test_orientation@@YAHXZ$rtcName$0
	ORG $+48
?test_orientation@@YAHXZ$rtcFrameData DD 01H		; test_orientation
	DD	00H
	DQ	FLAT:?test_orientation@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sin@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?acos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 021901H
	DD	070155219H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
scalar$ = 72
v$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 646  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 647  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	mulss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR scalar$[rsp]
	mulss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mulss	xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 648  : 			scalar * v.x,
; 649  : 			scalar * v.y,
; 650  : 			scalar * v.z);
; 651  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call, COMDAT

; 57   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 59   : 			return tmp.x + tmp.y + tmp.z;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	addss	xmm0, DWORD PTR tmp$[rsp+8]

; 60   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv88 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<float,0,0>::call, COMDAT

; 77   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx+4]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm2, DWORD PTR [rax+8]
	mulss	xmm2, DWORD PTR [rcx]
	subss	xmm1, xmm2
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm3, DWORD PTR [rax+4]
	mulss	xmm3, DWORD PTR [rcx+8]
	subss	xmm2, xmm3
	movss	DWORD PTR tv88[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv88[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\matrix_transform.inl
;	COMDAT ??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
a$ = 32
c$ = 36
s$ = 40
axis$ = 56
temp$ = 104
Rotate$ = 160
Result$ = 256
$T7 = 336
$T8 = 352
$T9 = 368
$T10 = 384
$T11 = 400
$T12 = 416
$T13 = 432
$T14 = 448
$T15 = 464
$T16 = 480
$T17 = 496
$T18 = 512
$T19 = 528
$T20 = 544
$T21 = 560
tv84 = 576
tv90 = 584
tv130 = 592
tv135 = 600
tv140 = 604
tv148 = 608
tv153 = 616
tv158 = 620
tv166 = 624
tv171 = 632
tv176 = 636
tv184 = 640
tv190 = 648
tv198 = 656
tv203 = 664
tv208 = 668
tv216 = 672
tv221 = 680
tv226 = 684
tv234 = 688
tv239 = 696
tv244 = 700
tv252 = 704
tv258 = 712
tv270 = 720
tv265 = 728
tv285 = 736
tv280 = 744
tv299 = 752
tv264 = 760
tv321 = 768
tv316 = 776
tv336 = 784
tv331 = 792
tv350 = 800
tv315 = 808
tv372 = 816
tv367 = 824
tv387 = 832
tv382 = 840
tv401 = 848
tv366 = 856
tv418 = 864
__$ArrayPad$ = 872
__$ReturnUdt$ = 912
m$ = 920
angle$ = 928
v$ = 936
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::rotate<float,0>, COMDAT

; 20   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 888				; 00000378H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 214				; 000000d6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+912]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 21   : 		T const a = angle;

	movss	xmm0, DWORD PTR angle$[rsp]
	movss	DWORD PTR a$[rsp], xmm0

; 22   : 		T const c = cos(a);

	movss	xmm0, DWORD PTR a$[rsp]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR c$[rsp], xmm0

; 23   : 		T const s = sin(a);

	movss	xmm0, DWORD PTR a$[rsp]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR s$[rsp], xmm0

; 24   : 
; 25   : 		tvec3<T, P> axis(normalize(v));

	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR axis$[rsp]
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>

; 26   : 		tvec3<T, P> temp((T(1) - c) * axis);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR c$[rsp]
	lea	r8, QWORD PTR axis$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR temp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>

; 27   : 
; 28   : 		tmat4x4<T, P> Rotate(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 29   : 		Rotate[0][0] = c + temp[0] * axis[0];

	xor	edx, edx
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv84[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR c$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv90[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv90[rsp]
	movss	DWORD PTR [rax], xmm0

; 30   : 		Rotate[0][1] = temp[0] * axis[1] + s * axis[2];

	xor	edx, edx
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv130[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv130[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv135[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv135[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv140[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv140[rsp]
	movss	DWORD PTR [rax], xmm0

; 31   : 		Rotate[0][2] = temp[0] * axis[2] - s * axis[1];

	xor	edx, edx
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv148[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv148[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv153[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv153[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv158[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv158[rsp]
	movss	DWORD PTR [rax], xmm0

; 32   : 
; 33   : 		Rotate[1][0] = temp[1] * axis[0] - s * axis[2];

	mov	edx, 1
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv166[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv166[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv171[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv171[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv176[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv176[rsp]
	movss	DWORD PTR [rax], xmm0

; 34   : 		Rotate[1][1] = c + temp[1] * axis[1];

	mov	edx, 1
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv184[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv184[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR c$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv190[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv190[rsp]
	movss	DWORD PTR [rax], xmm0

; 35   : 		Rotate[1][2] = temp[1] * axis[2] + s * axis[0];

	mov	edx, 1
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv198[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv198[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv203[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv203[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv208[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv208[rsp]
	movss	DWORD PTR [rax], xmm0

; 36   : 
; 37   : 		Rotate[2][0] = temp[2] * axis[0] + s * axis[1];

	mov	edx, 2
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv216[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv216[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv221[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv221[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv226[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv226[rsp]
	movss	DWORD PTR [rax], xmm0

; 38   : 		Rotate[2][1] = temp[2] * axis[1] - s * axis[0];

	mov	edx, 2
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv234[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv234[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv239[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv239[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv244[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv244[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 		Rotate[2][2] = c + temp[2] * axis[2];

	mov	edx, 2
	lea	rcx, QWORD PTR temp$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv252[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR axis$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv252[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR c$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv258[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv258[rsp]
	movss	DWORD PTR [rax], xmm0

; 40   : 
; 41   : 		tmat4x4<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 42   : 		Result[0] = m[0] * Rotate[0][0] + m[1] * Rotate[0][1] + m[2] * Rotate[0][2];

	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv270[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv270[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv265[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv285[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv285[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv280[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv299[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv299[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv280[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv265[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv264[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv264[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 43   : 		Result[1] = m[0] * Rotate[1][0] + m[1] * Rotate[1][1] + m[2] * Rotate[1][2];

	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv321[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv321[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv316[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv336[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv336[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv331[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv350[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv350[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv331[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv316[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv315[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv315[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 44   : 		Result[2] = m[0] * Rotate[2][0] + m[1] * Rotate[2][1] + m[2] * Rotate[2][2];

	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv372[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv372[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv367[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv387[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv387[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv382[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Rotate$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv401[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv401[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv382[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv367[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv366[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv366[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 45   : 		Result[3] = m[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv418[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv418[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 46   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 47   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 888				; 00000378H
	pop	rdi
	pop	rsi
	ret	0
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::rotate<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT

; 204  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,0>, COMDAT

; 138  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 135  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 136  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 137  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 138  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$inversesqrt@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$inversesqrt@M@glm@@YAMM@Z PROC			; glm::inversesqrt<float>, COMDAT

; 131  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 132  : 		return static_cast<genType>(1) / sqrt(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?sqrt@@YAMM@Z				; sqrt
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1

; 133  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$inversesqrt@M@glm@@YAMM@Z ENDP			; glm::inversesqrt<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec3>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::cross<float,0>, COMDAT

; 180  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 182  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::cross<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec3>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_N$0A@@glm@@SAHXZ PROC			; glm::tvec3<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call, COMDAT

; 91   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 92   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");
; 93   : 
; 94   : 			return v * inversesqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	call	??$inversesqrt@M@glm@@YAMM@Z		; glm::inversesqrt<float>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 95   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
Mov0$ = 40
Mov1$ = 88
Mul0$ = 136
Mul1$ = 184
Add0$ = 232
Mov2$ = 280
Mov3$ = 328
Mul2$ = 376
Mul3$ = 424
Add1$ = 472
Add2$ = 520
__$ReturnUdt$ = 592
m$ = 600
v$ = 608
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 506  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+592]

; 507  : /*
; 508  : 		__m128 v0 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(0, 0, 0, 0));
; 509  : 		__m128 v1 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(1, 1, 1, 1));
; 510  : 		__m128 v2 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(2, 2, 2, 2));
; 511  : 		__m128 v3 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(3, 3, 3, 3));
; 512  : 
; 513  : 		__m128 m0 = _mm_mul_ps(m[0].data, v0);
; 514  : 		__m128 m1 = _mm_mul_ps(m[1].data, v1);
; 515  : 		__m128 a0 = _mm_add_ps(m0, m1);
; 516  : 
; 517  : 		__m128 m2 = _mm_mul_ps(m[2].data, v2);
; 518  : 		__m128 m3 = _mm_mul_ps(m[3].data, v3);
; 519  : 		__m128 a1 = _mm_add_ps(m2, m3);
; 520  : 
; 521  : 		__m128 a2 = _mm_add_ps(a0, a1);
; 522  : 
; 523  : 		return typename tmat4x4<T, P>::col_type(a2);
; 524  : */
; 525  : 
; 526  : 		typename tmat4x4<T, P>::col_type const Mov0(v[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 527  : 		typename tmat4x4<T, P>::col_type const Mov1(v[1]);

	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 528  : 		typename tmat4x4<T, P>::col_type const Mul0 = m[0] * Mov0;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul0$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 529  : 		typename tmat4x4<T, P>::col_type const Mul1 = m[1] * Mov1;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov1$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 530  : 		typename tmat4x4<T, P>::col_type const Add0 = Mul0 + Mul1;

	lea	r8, QWORD PTR Mul1$[rsp]
	lea	rdx, QWORD PTR Mul0$[rsp]
	lea	rcx, QWORD PTR Add0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 531  : 		typename tmat4x4<T, P>::col_type const Mov2(v[2]);

	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 532  : 		typename tmat4x4<T, P>::col_type const Mov3(v[3]);

	mov	edx, 3
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 533  : 		typename tmat4x4<T, P>::col_type const Mul2 = m[2] * Mov2;

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov2$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 534  : 		typename tmat4x4<T, P>::col_type const Mul3 = m[3] * Mov3;

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov3$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 535  : 		typename tmat4x4<T, P>::col_type const Add1 = Mul2 + Mul3;

	lea	r8, QWORD PTR Mul3$[rsp]
	lea	rdx, QWORD PTR Mul2$[rsp]
	lea	rcx, QWORD PTR Add1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 536  : 		typename tmat4x4<T, P>::col_type const Add2 = Add0 + Add1;

	lea	r8, QWORD PTR Add1$[rsp]
	lea	rdx, QWORD PTR Add0$[rsp]
	lea	rcx, QWORD PTR Add2$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 537  : 		return Add2;

	lea	rax, QWORD PTR Add2$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 538  : 
; 539  : /*
; 540  : 		return typename tmat4x4<T, P>::col_type(
; 541  : 			m[0][0] * v[0] + m[1][0] * v[1] + m[2][0] * v[2] + m[3][0] * v[3],
; 542  : 			m[0][1] * v[0] + m[1][1] * v[1] + m[2][1] * v[2] + m[3][1] * v[3],
; 543  : 			m[0][2] * v[0] + m[1][2] * v[1] + m[2][2] * v[2] + m[3][2] * v[3],
; 544  : 			m[0][3] * v[0] + m[1][3] * v[1] + m[2][3] * v[2] + m[3][3] * v[3]);
; 545  : */
; 546  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 568				; 00000238H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
tv73 = 32
tv82 = 36
tv91 = 40
tv132 = 44
tv141 = 48
tv150 = 52
tv159 = 56
tv168 = 60
__$ReturnUdt$ = 80
m$ = 88
v$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 429  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 430  : 		return typename tmat3x3<T, P>::col_type(

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv73[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv73[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv82[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv82[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv91[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv132[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv132[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv141[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv141[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv150[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv159[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv159[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv168[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv168[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv91[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv150[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 431  : 			m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z,
; 432  : 			m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z,
; 433  : 			m[0][2] * v.x + m[1][2] * v.y + m[2][2] * v.z);
; 434  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 198  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 199  : 		assert(i < this->length());

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 199				; 000000c7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 200  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 201  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
m$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 133  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 134  : 		this->value[0] = col_type(m[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 135  : 		this->value[1] = col_type(m[1]);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 136  : 		this->value[2] = col_type(m[2]);

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 137  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\transform.inl
;	COMDAT ??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@MAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 104
__$ArrayPad$ = 112
__$ReturnUdt$ = 144
angle$ = 152
v$ = 160
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@MAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::rotate<float,0>, COMDAT

; 14   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 15   : 		return rotate(tmat4x4<T, P>(static_cast<T>(1)), angle, v);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T2[rsp], xmm0
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	r9, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR angle$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 16   : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@MAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::rotate<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_rotate_vector.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 63   : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 64   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 65   : 
; 66   : 	Error += test_rotate();

	call	?test_rotate@@YAHXZ			; test_rotate
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 67   : 	Error += test_rotateX();

	call	?test_rotateX@@YAHXZ			; test_rotateX
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 68   : 	Error += test_rotateY();

	call	?test_rotateY@@YAHXZ			; test_rotateY
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 69   : 	Error += test_rotateZ();

	call	?test_rotateZ@@YAHXZ			; test_rotateZ
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 70   : 	Error += test_orientation();

	call	?test_orientation@@YAHXZ		; test_orientation
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 71   : 
; 72   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 73   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_rotate_vector.cpp
_TEXT	SEGMENT
Error$ = 32
O$ = 64
$T4 = 144
$T5 = 156
$T6 = 168
tv66 = 184
__$ArrayPad$ = 192
?test_orientation@@YAHXZ PROC				; test_orientation

; 54   : {

$LN3:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 55   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 56   : 
; 57   : 	glm::mat4 O = glm::orientation(glm::normalize(glm::vec3(1)), glm::vec3(0, 0, 1));

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR O$[rsp]
	call	??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::orientation<float,0>

; 58   : 
; 59   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 60   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_orientation@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_orientation@@YAHXZ ENDP				; test_orientation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_rotate_vector.cpp
_TEXT	SEGMENT
Error$ = 48
H$ = 72
I$ = 120
$T5 = 148
$T6 = 152
$T7 = 164
$T8 = 168
?test_rotateZ@@YAHXZ PROC				; test_rotateZ

; 44   : {

$LN3:
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 45   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 46   : 
; 47   : 	glm::vec3 H = glm::rotateZ(glm::vec3(1, 0, 0), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T5[rsp], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	lea	r8, QWORD PTR $T5[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR H$[rsp]
	call	??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateZ<float,0>

; 48   : 	glm::vec4 I = glm::rotateZ(glm::vec4(1, 0, 0,1 ), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T7[rsp], xmm0
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	lea	r8, QWORD PTR $T7[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR I$[rsp]
	call	??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateZ<float,0>

; 49   : 
; 50   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 51   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_rotateZ@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_rotateZ@@YAHXZ ENDP				; test_rotateZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_rotate_vector.cpp
_TEXT	SEGMENT
Error$ = 48
F$ = 72
G$ = 120
$T5 = 148
$T6 = 152
$T7 = 164
$T8 = 168
?test_rotateY@@YAHXZ PROC				; test_rotateY

; 33   : {

$LN3:
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 34   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 35   : 
; 36   : 	glm::vec3 F = glm::rotateY(glm::vec3(1, 0, 0), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T5[rsp], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	lea	r8, QWORD PTR $T5[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR F$[rsp]
	call	??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateY<float,0>

; 37   : 	glm::vec4 G = glm::rotateY(glm::vec4(1, 0, 0, 1), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T7[rsp], xmm0
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	lea	r8, QWORD PTR $T7[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR G$[rsp]
	call	??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateY<float,0>

; 38   : 
; 39   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 40   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_rotateY@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_rotateY@@YAHXZ ENDP				; test_rotateY
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_rotate_vector.cpp
_TEXT	SEGMENT
Error$ = 48
D$ = 72
E$ = 120
$T5 = 148
$T6 = 152
$T7 = 164
$T8 = 168
?test_rotateX@@YAHXZ PROC				; test_rotateX

; 23   : {

$LN3:
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 24   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 25   : 
; 26   : 	glm::vec3 D = glm::rotateX(glm::vec3(1, 0, 0), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T5[rsp], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	lea	r8, QWORD PTR $T5[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR D$[rsp]
	call	??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateX<float,0>

; 27   : 	glm::vec4 E = glm::rotateX(glm::vec4(1, 0, 0, 1), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T7[rsp], xmm0
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	lea	r8, QWORD PTR $T7[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR E$[rsp]
	call	??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateX<float,0>

; 28   : 
; 29   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 30   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_rotateX@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_rotateX@@YAHXZ ENDP				; test_rotateX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\rotate_vector.inl
;	COMDAT ??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
RotationAxis$ = 40
Angle$ = 68
$T4 = 72
$T5 = 76
__$ReturnUdt$ = 96
Normal$ = 104
Up$ = 112
??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::orientation<float,0>, COMDAT

; 179  : 	{

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 180  : 		if(all(equal(Normal, Up)))

	mov	r8, QWORD PTR Up$[rsp]
	mov	rdx, QWORD PTR Normal$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@orientatio

; 181  : 			return tmat4x4<T, P>(T(1));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T5[rsp], xmm0
	lea	rdx, QWORD PTR $T5[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	SHORT $LN1@orientatio
$LN2@orientatio:

; 182  : 
; 183  : 		tvec3<T, P> RotationAxis = cross(Up, Normal);

	mov	r8, QWORD PTR Normal$[rsp]
	mov	rdx, QWORD PTR Up$[rsp]
	lea	rcx, QWORD PTR RotationAxis$[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>

; 184  : 		T Angle = acos(dot(Normal, Up));

	mov	rdx, QWORD PTR Up$[rsp]
	mov	rcx, QWORD PTR Normal$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	call	?acos@@YAMM@Z				; acos
	movss	DWORD PTR Angle$[rsp], xmm0

; 185  : 
; 186  : 		return rotate(Angle, RotationAxis);

	lea	r8, QWORD PTR RotationAxis$[rsp]
	movss	xmm1, DWORD PTR Angle$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@orientatio:

; 187  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::orientation<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::normalize<float,0,glm::tvec3>, COMDAT

; 195  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 196  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");
; 197  : 
; 198  : 		return detail::compute_normalize<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::normalize<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
s$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 50   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 55   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 46   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\rotate_vector.inl
;	COMDAT ??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
Result$ = 40
Cos$ = 68
Sin$ = 72
__$ReturnUdt$ = 112
v$ = 120
angle$ = 128
??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::rotateZ<float,0>, COMDAT

; 163  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 164  : 		tvec4<T, P> Result = v;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb

; 165  : 		T const Cos(cos(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR Cos$[rsp], xmm0

; 166  : 		T const Sin(sin(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR Sin$[rsp], xmm0

; 167  : 
; 168  : 		Result.x = v.x * Cos - v.y * Sin;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR Cos$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR Sin$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp], xmm0

; 169  : 		Result.y = v.x * Sin + v.y * Cos;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR Sin$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR Cos$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp+4], xmm0

; 170  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 171  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::rotateZ<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\rotate_vector.inl
;	COMDAT ??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
Result$ = 40
Cos$ = 68
Sin$ = 72
__$ReturnUdt$ = 112
v$ = 120
angle$ = 128
??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::rotateZ<float,0>, COMDAT

; 115  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 116  : 		tvec3<T, P> Result = v;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 12
	rep movsb

; 117  : 		T const Cos(cos(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR Cos$[rsp], xmm0

; 118  : 		T const Sin(sin(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR Sin$[rsp], xmm0

; 119  : 
; 120  : 		Result.x = v.x * Cos - v.y * Sin;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR Cos$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR Sin$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp], xmm0

; 121  : 		Result.y = v.x * Sin + v.y * Cos;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR Sin$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR Cos$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp+4], xmm0

; 122  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 123  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::rotateZ<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\rotate_vector.inl
;	COMDAT ??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
Result$ = 40
Cos$ = 68
Sin$ = 72
__$ReturnUdt$ = 112
v$ = 120
angle$ = 128
??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::rotateY<float,0>, COMDAT

; 147  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 148  : 		tvec4<T, P> Result = v;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb

; 149  : 		T const Cos(cos(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR Cos$[rsp], xmm0

; 150  : 		T const Sin(sin(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR Sin$[rsp], xmm0

; 151  : 
; 152  : 		Result.x =  v.x * Cos + v.z * Sin;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR Cos$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR Sin$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp], xmm0

; 153  : 		Result.z = -v.x * Sin + v.z * Cos;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR Sin$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR Cos$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp+8], xmm0

; 154  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 155  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::rotateY<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\rotate_vector.inl
;	COMDAT ??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
Result$ = 40
Cos$ = 68
Sin$ = 72
__$ReturnUdt$ = 112
v$ = 120
angle$ = 128
??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::rotateY<float,0>, COMDAT

; 99   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 100  : 		tvec3<T, P> Result = v;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 12
	rep movsb

; 101  : 		T const Cos(cos(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR Cos$[rsp], xmm0

; 102  : 		T const Sin(sin(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR Sin$[rsp], xmm0

; 103  : 
; 104  : 		Result.x =  v.x * Cos + v.z * Sin;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR Cos$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR Sin$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp], xmm0

; 105  : 		Result.z = -v.x * Sin + v.z * Cos;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR Sin$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR Cos$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp+8], xmm0

; 106  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 107  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::rotateY<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\rotate_vector.inl
;	COMDAT ??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
Result$ = 40
Cos$ = 68
Sin$ = 72
__$ReturnUdt$ = 112
v$ = 120
angle$ = 128
??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::rotateX<float,0>, COMDAT

; 131  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 132  : 		tvec4<T, P> Result = v;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb

; 133  : 		T const Cos(cos(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR Cos$[rsp], xmm0

; 134  : 		T const Sin(sin(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR Sin$[rsp], xmm0

; 135  : 
; 136  : 		Result.y = v.y * Cos - v.z * Sin;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR Cos$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR Sin$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp+4], xmm0

; 137  : 		Result.z = v.y * Sin + v.z * Cos;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR Sin$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR Cos$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp+8], xmm0

; 138  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::rotateX<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\rotate_vector.inl
;	COMDAT ??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
Result$ = 40
Cos$ = 68
Sin$ = 72
__$ReturnUdt$ = 112
v$ = 120
angle$ = 128
??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::rotateX<float,0>, COMDAT

; 83   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 84   : 		tvec3<T, P> Result(v);

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 12
	rep movsb

; 85   : 		T const Cos(cos(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR Cos$[rsp], xmm0

; 86   : 		T const Sin(sin(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR Sin$[rsp], xmm0

; 87   : 
; 88   : 		Result.y = v.y * Cos - v.z * Sin;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR Cos$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR Sin$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp+4], xmm0

; 89   : 		Result.z = v.y * Sin + v.z * Cos;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR Sin$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR Cos$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp+8], xmm0

; 90   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 91   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::rotateX<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\rotate_vector.inl
;	COMDAT ??$rotate@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBMAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 104
__$ReturnUdt$ = 128
v$ = 136
angle$ = 144
normal$ = 152
??$rotate@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBMAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::rotate<float,0>, COMDAT

; 73   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 74   : 		return rotate(angle, normal) * v;

	mov	r8, QWORD PTR normal$[rsp]
	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 75   : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$rotate@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBMAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::rotate<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\rotate_vector.inl
;	COMDAT ??$rotate@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 96
__$ArrayPad$ = 144
__$ReturnUdt$ = 176
v$ = 184
angle$ = 192
normal$ = 200
??$rotate@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM0@Z PROC ; glm::rotate<float,0>, COMDAT

; 51   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 52   : 		return tmat3x3<T, P>(glm::rotate(angle, normal)) * v;

	mov	r8, QWORD PTR normal$[rsp]
	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@MAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 53   : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$rotate@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM0@Z ENDP ; glm::rotate<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\rotate_vector.inl
;	COMDAT ??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
Result$ = 40
Cos$ = 52
Sin$ = 56
__$ReturnUdt$ = 80
v$ = 88
angle$ = 96
??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::rotate<float,0>, COMDAT

; 34   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 35   : 		tvec2<T, P> Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@XZ		; glm::tvec2<float,0>::tvec2<float,0>

; 36   : 		T const Cos(cos(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR Cos$[rsp], xmm0

; 37   : 		T const Sin(sin(angle));

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR Sin$[rsp], xmm0

; 38   : 
; 39   : 		Result.x = v.x * Cos - v.y * Sin;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR Cos$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR Sin$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp], xmm0

; 40   : 		Result.y = v.x * Sin + v.y * Cos;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR Sin$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR Cos$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR Result$[rsp+4], xmm0

; 41   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR Result$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 42   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::rotate<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$pi@M@glm@@YAMXZ
_TEXT	SEGMENT
??$pi@M@glm@@YAMXZ PROC					; glm::pi<float>, COMDAT

; 28   : 	{

$LN3:
	push	rdi
	sub	rsp, 16

; 29   : 		return genType(3.14159265358979323846264338327950288);

	movss	xmm0, DWORD PTR __real@40490fdb

; 30   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$pi@M@glm@@YAMXZ ENDP					; glm::pi<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_rotate_vector.cpp
_TEXT	SEGMENT
Error$ = 48
A$ = 72
B$ = 104
C$ = 152
D$ = 200
E$ = 248
F$ = 296
G$ = 344
H$ = 392
I$ = 440
O$ = 496
$T13 = 576
$T14 = 580
$T15 = 588
$T16 = 600
$T17 = 604
$T18 = 616
$T19 = 628
$T20 = 632
$T21 = 648
$T22 = 652
$T23 = 664
$T24 = 668
$T25 = 684
$T26 = 688
$T27 = 700
$T28 = 704
$T29 = 720
$T30 = 724
$T31 = 736
$T32 = 740
$T33 = 756
$T34 = 768
$T35 = 780
tv75 = 792
tv91 = 800
tv203 = 808
__$ArrayPad$ = 816
?test_rotate@@YAHXZ PROC				; test_rotate

; 5    : {

$LN3:
	push	rdi
	sub	rsp, 832				; 00000340H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 196				; 000000c4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 6    : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 7    : 
; 8    : 	glm::vec2 A = glm::rotate(glm::vec2(1, 0), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T13[rsp], xmm0
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	lea	r8, QWORD PTR $T13[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBM@Z ; glm::rotate<float,0>

; 9    : 	glm::vec3 B = glm::rotate(glm::vec3(1, 0, 0), glm::pi<float>() * 0.5f, glm::vec3(0, 0, 1));

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T16[rsp], xmm0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv75[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	rcx, QWORD PTR tv75[rsp]
	mov	r9, rcx
	lea	r8, QWORD PTR $T16[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR B$[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM0@Z ; glm::rotate<float,0>

; 10   : 	glm::vec4 C = glm::rotate(glm::vec4(1, 0, 0, 1), glm::pi<float>() * 0.5f, glm::vec3(0, 0, 1));

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T19[rsp], xmm0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv91[rsp], rax
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rcx, QWORD PTR tv91[rsp]
	mov	r9, rcx
	lea	r8, QWORD PTR $T19[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR C$[rsp]
	call	??$rotate@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBMAEBU?$tvec3@M$0A@@0@@Z ; glm::rotate<float,0>

; 11   : 	glm::vec3 D = glm::rotateX(glm::vec3(1, 0, 0), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T21[rsp], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	lea	r8, QWORD PTR $T21[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR D$[rsp]
	call	??$rotateX@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateX<float,0>

; 12   : 	glm::vec4 E = glm::rotateX(glm::vec4(1, 0, 0, 1), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T23[rsp], xmm0
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	lea	r8, QWORD PTR $T23[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR E$[rsp]
	call	??$rotateX@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateX<float,0>

; 13   : 	glm::vec3 F = glm::rotateY(glm::vec3(1, 0, 0), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T25[rsp], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	lea	r8, QWORD PTR $T25[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR F$[rsp]
	call	??$rotateY@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateY<float,0>

; 14   : 	glm::vec4 G = glm::rotateY(glm::vec4(1, 0, 0, 1), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T27[rsp], xmm0
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	lea	r8, QWORD PTR $T27[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR G$[rsp]
	call	??$rotateY@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateY<float,0>

; 15   : 	glm::vec3 H = glm::rotateZ(glm::vec3(1, 0, 0), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T29[rsp], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	lea	r8, QWORD PTR $T29[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR H$[rsp]
	call	??$rotateZ@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateZ<float,0>

; 16   : 	glm::vec4 I = glm::rotateZ(glm::vec4(1, 0, 0,1 ), glm::pi<float>() * 0.5f);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T31[rsp], xmm0
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	lea	r8, QWORD PTR $T31[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR I$[rsp]
	call	??$rotateZ@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBM@Z ; glm::rotateZ<float,0>

; 17   : 	glm::mat4 O = glm::orientation(glm::normalize(glm::vec3(1)), glm::vec3(0, 0, 1));

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv203[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T34[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv203[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR O$[rsp]
	call	??$orientation@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::orientation<float,0>

; 18   : 
; 19   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 20   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_rotate@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 832				; 00000340H
	pop	rdi
	ret	0
?test_rotate@@YAHXZ ENDP				; test_rotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 264  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 265  :     return _CSTD sqrtf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sqrtf

; 266  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sin@@YAMM@Z PROC					; sin, COMDAT

; 256  : _NODISCARD _Check_return_ inline float sin(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 257  :     return _CSTD sinf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sinf

; 258  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?cos@@YAMM@Z PROC					; cos, COMDAT

; 88   : _NODISCARD _Check_return_ inline float cos(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 89   :     return _CSTD cosf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_cosf

; 90   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?acos@@YAMM@Z PROC					; acos, COMDAT

; 36   : _NODISCARD _Check_return_ inline float acos(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 37   :     return _CSTD acosf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_acosf

; 38   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
tv67 = 40
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rsp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
