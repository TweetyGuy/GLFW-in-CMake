; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?fpclassify@@YAHM@Z				; fpclassify
PUBLIC	?fpclassify@@YAHN@Z				; fpclassify
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	main
PUBLIC	??$isfinite@M@glm@@YA_NAEBM@Z			; glm::isfinite<float>
PUBLIC	??$isfinite@N@glm@@YA_NAEBN@Z			; glm::isfinite<double>
PUBLIC	??$isfinite@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::isfinite<float,0>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@N@Z			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??$isfinite@N$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z ; glm::isfinite<double,0>
PUBLIC	??$isfinite@M@@YA_NM@Z				; isfinite<float>
PUBLIC	??$isfinite@N@@YA_NN@Z				; isfinite<double>
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@bf800000
PUBLIC	__real@bff0000000000000
EXTRN	__imp__dtest:PROC
EXTRN	__imp__fdtest:PROC
EXTRN	__imp__wassert:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fpclassify@@YAHM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?fpclassify@@YAHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fpclassify@@YAHN@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?fpclassify@@YAHN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN19
	DD	imagerel $LN19+691
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isfinite@M@glm@@YA_NAEBM@Z DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$??$isfinite@M@glm@@YA_NAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isfinite@N@glm@@YA_NAEBN@Z DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$??$isfinite@N@glm@@YA_NAEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isfinite@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$isfinite@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@N$0A@@glm@@QEAA@N@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isfinite@N$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$isfinite@N$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isfinite@M@@YA_NM@Z DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$??$isfinite@M@@YA_NM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isfinite@N@@YA_NN@Z DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$??$isfinite@N@@YA_NN@Z
pdata	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isfinite@N@@YA_NN@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isfinite@M@@YA_NM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isfinite@N$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@N$0A@@glm@@QEAA@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isfinite@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isfinite@N@glm@@YA_NAEBN@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isfinite@M@glm@@YA_NAEBM@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
xdata	SEGMENT
$unwind$main DD	030901H
	DD	01c0109H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fpclassify@@YAHN@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fpclassify@@YAHM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ??$isfinite@N@@YA_NN@Z
_TEXT	SEGMENT
tv67 = 32
_X$ = 64
??$isfinite@N@@YA_NN@Z PROC				; isfinite<double>, COMDAT

; 400  :     {

$LN5:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 401  :         return fpclassify(_X) <= 0;

	movsd	xmm0, QWORD PTR _X$[rsp]
	call	?fpclassify@@YAHN@Z			; fpclassify
	test	eax, eax
	jg	SHORT $LN3@isfinite
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@isfinite
$LN3@isfinite:
	mov	DWORD PTR tv67[rsp], 0
$LN4@isfinite:
	movzx	eax, BYTE PTR tv67[rsp]

; 402  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isfinite@N@@YA_NN@Z ENDP				; isfinite<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ??$isfinite@M@@YA_NM@Z
_TEXT	SEGMENT
tv67 = 32
_X$ = 64
??$isfinite@M@@YA_NM@Z PROC				; isfinite<float>, COMDAT

; 400  :     {

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 401  :         return fpclassify(_X) <= 0;

	movss	xmm0, DWORD PTR _X$[rsp]
	call	?fpclassify@@YAHM@Z			; fpclassify
	test	eax, eax
	jg	SHORT $LN3@isfinite
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@isfinite
$LN3@isfinite:
	mov	DWORD PTR tv67[rsp], 0
$LN4@isfinite:
	movzx	eax, BYTE PTR tv67[rsp]

; 402  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isfinite@M@@YA_NM@Z ENDP				; isfinite<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\compatibility.inl
;	COMDAT ??$isfinite@N$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z
_TEXT	SEGMENT
tv69 = 48
tv92 = 49
tv94 = 50
__$ReturnUdt$ = 80
x$ = 88
??$isfinite@N$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z PROC ; glm::isfinite<double,0>, COMDAT

; 57   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 58   : 		return tvec4<bool, P>(

	mov	rax, QWORD PTR x$[rsp]
	add	rax, 24
	mov	rcx, rax
	call	??$isfinite@N@glm@@YA_NAEBN@Z		; glm::isfinite<double>
	mov	BYTE PTR tv69[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 16
	call	??$isfinite@N@glm@@YA_NAEBN@Z		; glm::isfinite<double>
	mov	BYTE PTR tv92[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 8
	call	??$isfinite@N@glm@@YA_NAEBN@Z		; glm::isfinite<double>
	mov	BYTE PTR tv94[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	call	??$isfinite@N@glm@@YA_NAEBN@Z		; glm::isfinite<double>
	movzx	ecx, BYTE PTR tv69[rsp]
	mov	BYTE PTR [rsp+32], cl
	movzx	ecx, BYTE PTR tv92[rsp]
	movzx	r9d, cl
	movzx	ecx, BYTE PTR tv94[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z	; glm::tvec4<bool,0>::tvec4<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 59   : 			isfinite(x.x),
; 60   : 			isfinite(x.y),
; 61   : 			isfinite(x.z),
; 62   : 			isfinite(x.w));
; 63   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$isfinite@N$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z ENDP ; glm::isfinite<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 188  : 	{}

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+24], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR d$[rsp]
	mov	BYTE PTR [rax+3], cl

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\compatibility.inl
;	COMDAT ??$isfinite@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
tv69 = 48
tv92 = 49
tv94 = 50
__$ReturnUdt$ = 80
x$ = 88
??$isfinite@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::isfinite<float,0>, COMDAT

; 57   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 58   : 		return tvec4<bool, P>(

	mov	rax, QWORD PTR x$[rsp]
	add	rax, 12
	mov	rcx, rax
	call	??$isfinite@M@glm@@YA_NAEBM@Z		; glm::isfinite<float>
	mov	BYTE PTR tv69[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 8
	call	??$isfinite@M@glm@@YA_NAEBM@Z		; glm::isfinite<float>
	mov	BYTE PTR tv92[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 4
	call	??$isfinite@M@glm@@YA_NAEBM@Z		; glm::isfinite<float>
	mov	BYTE PTR tv94[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	call	??$isfinite@M@glm@@YA_NAEBM@Z		; glm::isfinite<float>
	movzx	ecx, BYTE PTR tv69[rsp]
	mov	BYTE PTR [rsp+32], cl
	movzx	ecx, BYTE PTR tv92[rsp]
	movzx	r9d, cl
	movzx	ecx, BYTE PTR tv94[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z	; glm::tvec4<bool,0>::tvec4<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 59   : 			isfinite(x.x),
; 60   : 			isfinite(x.y),
; 61   : 			isfinite(x.z),
; 62   : 			isfinite(x.w));
; 63   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$isfinite@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::isfinite<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\compatibility.inl
;	COMDAT ??$isfinite@N@glm@@YA_NAEBN@Z
_TEXT	SEGMENT
tv68 = 32
x$ = 64
??$isfinite@N@glm@@YA_NAEBN@Z PROC			; glm::isfinite<double>, COMDAT

; 12   : 	{

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 13   : #		if GLM_HAS_CXX11_STL
; 14   : 			return std::isfinite(x) != 0;

	mov	rax, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	call	??$isfinite@N@@YA_NN@Z			; isfinite<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@isfinite
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@isfinite
$LN3@isfinite:
	mov	DWORD PTR tv68[rsp], 0
$LN4@isfinite:
	movzx	eax, BYTE PTR tv68[rsp]

; 15   : #		elif GLM_COMPILER & GLM_COMPILER_VC
; 16   : 			return _finite(x);
; 17   : #		elif GLM_COMPILER & GLM_COMPILER_GCC && GLM_PLATFORM & GLM_PLATFORM_ANDROID
; 18   : 			return _isfinite(x) != 0;
; 19   : #		else
; 20   : 			if (std::numeric_limits<genType>::is_integer || std::denorm_absent == std::numeric_limits<genType>::has_denorm)
; 21   : 				return std::numeric_limits<genType>::min() <= x && std::numeric_limits<genType>::max() >= x;
; 22   : 			else
; 23   : 				return -std::numeric_limits<genType>::max() <= x && std::numeric_limits<genType>::max() >= x;
; 24   : #		endif
; 25   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isfinite@N@glm@@YA_NAEBN@Z ENDP			; glm::isfinite<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\compatibility.inl
;	COMDAT ??$isfinite@M@glm@@YA_NAEBM@Z
_TEXT	SEGMENT
tv68 = 32
x$ = 64
??$isfinite@M@glm@@YA_NAEBM@Z PROC			; glm::isfinite<float>, COMDAT

; 12   : 	{

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 13   : #		if GLM_HAS_CXX11_STL
; 14   : 			return std::isfinite(x) != 0;

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	??$isfinite@M@@YA_NM@Z			; isfinite<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@isfinite
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@isfinite
$LN3@isfinite:
	mov	DWORD PTR tv68[rsp], 0
$LN4@isfinite:
	movzx	eax, BYTE PTR tv68[rsp]

; 15   : #		elif GLM_COMPILER & GLM_COMPILER_VC
; 16   : 			return _finite(x);
; 17   : #		elif GLM_COMPILER & GLM_COMPILER_GCC && GLM_PLATFORM & GLM_PLATFORM_ANDROID
; 18   : 			return _isfinite(x) != 0;
; 19   : #		else
; 20   : 			if (std::numeric_limits<genType>::is_integer || std::denorm_absent == std::numeric_limits<genType>::has_denorm)
; 21   : 				return std::numeric_limits<genType>::min() <= x && std::numeric_limits<genType>::max() >= x;
; 22   : 			else
; 23   : 				return -std::numeric_limits<genType>::max() <= x && std::numeric_limits<genType>::max() >= x;
; 24   : #		endif
; 25   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isfinite@M@glm@@YA_NAEBM@Z ENDP			; glm::isfinite<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_compatibility.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 40
$T3 = 48
$T4 = 56
$T5 = 64
$T6 = 80
$T7 = 88
$T8 = 120
$T9 = 124
$T10 = 140
$T11 = 144
$T12 = 176
tv68 = 180
tv74 = 184
tv80 = 188
tv86 = 192
tv130 = 196
tv142 = 200
tv154 = 204
tv166 = 208
main	PROC

; 4    : {

$LN19:
	push	rdi
	sub	rsp, 224				; 000000e0H

; 5    : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 6    : 
; 7    : 	Error += glm::isfinite(1.0f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T1[rsp], xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$isfinite@M@glm@@YA_NAEBM@Z		; glm::isfinite<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@main
	mov	DWORD PTR tv68[rsp], 0
	jmp	SHORT $LN4@main
$LN3@main:
	mov	DWORD PTR tv68[rsp], 1
$LN4@main:
	mov	eax, DWORD PTR tv68[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 8    : 	Error += glm::isfinite(1.0) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T2[rsp], xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$isfinite@N@glm@@YA_NAEBN@Z		; glm::isfinite<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@main
	mov	DWORD PTR tv74[rsp], 0
	jmp	SHORT $LN6@main
$LN5@main:
	mov	DWORD PTR tv74[rsp], 1
$LN6@main:
	mov	eax, DWORD PTR tv74[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 9    : 	Error += glm::isfinite(-1.0f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR $T3[rsp], xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$isfinite@M@glm@@YA_NAEBM@Z		; glm::isfinite<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@main
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN8@main
$LN7@main:
	mov	DWORD PTR tv80[rsp], 1
$LN8@main:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 10   : 	Error += glm::isfinite(-1.0) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR $T4[rsp], xmm0
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$isfinite@N@glm@@YA_NAEBN@Z		; glm::isfinite<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@main
	mov	DWORD PTR tv86[rsp], 0
	jmp	SHORT $LN10@main
$LN9@main:
	mov	DWORD PTR tv86[rsp], 1
$LN10@main:
	mov	eax, DWORD PTR tv86[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 11   : 
; 12   : 	Error += glm::all(glm::isfinite(glm::vec4(1.0f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$isfinite@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::isfinite<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@main
	mov	DWORD PTR tv130[rsp], 0
	jmp	SHORT $LN12@main
$LN11@main:
	mov	DWORD PTR tv130[rsp], 1
$LN12@main:
	mov	eax, DWORD PTR tv130[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 13   : 	Error += glm::all(glm::isfinite(glm::dvec4(1.0))) ? 0 : 1;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@N@Z		; glm::tvec4<double,0>::tvec4<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$isfinite@N$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z ; glm::isfinite<double,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@main
	mov	DWORD PTR tv142[rsp], 0
	jmp	SHORT $LN14@main
$LN13@main:
	mov	DWORD PTR tv142[rsp], 1
$LN14@main:
	mov	eax, DWORD PTR tv142[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 14   : 	Error += glm::all(glm::isfinite(glm::vec4(-1.0f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$isfinite@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::isfinite<float,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@main
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN16@main
$LN15@main:
	mov	DWORD PTR tv154[rsp], 1
$LN16@main:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 15   : 	Error += glm::all(glm::isfinite(glm::dvec4(-1.0))) ? 0 : 1;

	movsd	xmm1, QWORD PTR __real@bff0000000000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@N@Z		; glm::tvec4<double,0>::tvec4<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$isfinite@N$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z ; glm::isfinite<double,0>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@main
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN18@main
$LN17@main:
	mov	DWORD PTR tv166[rsp], 1
$LN18@main:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 16   : 
; 17   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 18   : }

	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ?fpclassify@@YAHN@Z
_TEXT	SEGMENT
_X$ = 48
?fpclassify@@YAHN@Z PROC				; fpclassify, COMDAT

; 294  :     {

$LN3:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 295  :         return _dtest(&_X);

	lea	rcx, QWORD PTR _X$[rsp]
	call	QWORD PTR __imp__dtest
	cwde

; 296  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?fpclassify@@YAHN@Z ENDP				; fpclassify
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ?fpclassify@@YAHM@Z
_TEXT	SEGMENT
_X$ = 48
?fpclassify@@YAHM@Z PROC				; fpclassify, COMDAT

; 289  :     {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 290  :         return _fdtest(&_X);

	lea	rcx, QWORD PTR _X$[rsp]
	call	QWORD PTR __imp__fdtest
	cwde

; 291  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?fpclassify@@YAHM@Z ENDP				; fpclassify
_TEXT	ENDS
END
