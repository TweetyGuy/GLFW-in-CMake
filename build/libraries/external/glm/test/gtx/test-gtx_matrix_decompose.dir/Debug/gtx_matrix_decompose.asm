; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	main
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@XZ			; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z ; glm::decompose<float,0>
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	??$determinant@M$0A@Utmat4x4@glm@@@glm@@YAMAEBU?$tmat4x4@M$0A@@0@@Z ; glm::determinant<float,0,glm::tmat4x4>
PUBLIC	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>
PUBLIC	??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::transpose<float,0,glm::tmat4x4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
PUBLIC	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
PUBLIC	??$scale@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@M@Z ; glm::detail::scale<float,0>
PUBLIC	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
PUBLIC	??$combine@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@0MM@Z ; glm::detail::combine<float,0>
PUBLIC	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
PUBLIC	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec3<float,0>::operator*=<float>
PUBLIC	?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z ; glm::detail::compute_determinant<glm::tmat4x4,float,0,0>::call
PUBLIC	?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
PUBLIC	?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,float,0,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@38d1b717
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__wassert:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+276
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+331
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z DD imagerel $LN34
	DD	imagerel $LN34+5135
	DD	imagerel $unwind$??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$determinant@M$0A@Utmat4x4@glm@@@glm@@YAMAEBU?$tmat4x4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$determinant@M$0A@Utmat4x4@glm@@@glm@@YAMAEBU?$tmat4x4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+491
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$scale@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@M@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$scale@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$combine@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@0MM@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$??$combine@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@0MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+2387
	DD	imagerel $unwind$?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+5983
	DD	imagerel $unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+1432
	DD	imagerel $unwind$?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+190
	DD	imagerel $unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z DD 031701H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	057eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD 043e19H
	DD	0230113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0100H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0 DB 072H ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc DD 030H ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
	DD	040H
	DQ	FLAT:?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+48
?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData DD 01H ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	01746H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD 033d19H
	DD	01060112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0820H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$1 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$2 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$3 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$4 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	034H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$5 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	035H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$6 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$7 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$8 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$9 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$10 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$11 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$12 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$13 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$14 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	041H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$15 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	042H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$16 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$17 DB 052H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06fH
	DB	077H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$18 DB 044H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06fH
	DB	074H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$19 DB 04fH ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	065H
	DB	04fH
	DB	076H
	DB	065H
	DB	072H
	DB	044H
	DB	065H
	DB	074H
	DB	065H
	DB	072H
	DB	06dH
	DB	069H
	DB	06eH
	DB	061H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+5
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc DD 0444H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DD	04H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$19
	DD	0418H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$18
	DD	03e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$17
	DD	0390H
	DD	040H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$16
	DD	0358H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$15
	DD	0328H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$14
	DD	02f8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$13
	DD	02c8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$12
	DD	0298H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$11
	DD	0268H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$10
	DD	0238H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$9
	DD	0208H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$8
	DD	01d8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$7
	DD	01a8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$6
	DD	0178H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$5
	DD	0148H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$4
	DD	0118H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$3
	DD	0e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$2
	DD	0b8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$1
	DD	088H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+960
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData DD 014H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z DD 032601H
	DD	030010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z$rtcName$0 DB 044H ; glm::detail::compute_determinant<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	074H
	DB	043H
	DB	06fH
	DB	066H
	DB	00H
	ORG $+9
?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z$rtcVarDesc DD 068H ; glm::detail::compute_determinant<glm::tmat4x4,float,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_determinant<glm::tmat4x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$combine@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@0MM@Z DD 021a01H
	DD	07016721aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$scale@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z DD 043101H
	DD	0470118H
	DD	060107011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$0 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$1 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$2 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$3 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$4 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$5 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$6 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$7 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$8 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	033H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$9 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$10 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcFrameData DD 0bH ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcVarDesc
	ORG $+8
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 0208H ; glm::operator*<float,0>
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$10
	DD	01d8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$9
	DD	01a8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$8
	DD	0178H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$7
	DD	0148H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$6
	DD	0118H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$5
	DD	0e8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$determinant@M$0A@Utmat4x4@glm@@@glm@@YAMAEBU?$tmat4x4@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	013f5H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z DD 044819H
	DD	07f011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	03e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$0 DB 04cH ; glm::decompose<float,0>
	DB	06fH
	DB	063H
	DB	061H
	DB	06cH
	DB	04dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$5 DB 052H ; glm::decompose<float,0>
	DB	06fH
	DB	077H
	DB	00H
??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$1 DB 050H ; glm::decompose<float,0>
	DB	065H
	DB	072H
	DB	073H
	DB	070H
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	076H
	DB	065H
	DB	04dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+6
??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$2 DB 052H ; glm::decompose<float,0>
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	048H
	DB	061H
	DB	06eH
	DB	064H
	DB	053H
	DB	069H
	DB	064H
	DB	065H
	DB	00H
	ORG $+2
??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$3 DB 049H ; glm::decompose<float,0>
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	050H
	DB	065H
	DB	072H
	DB	073H
	DB	070H
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	076H
	DB	065H
	DB	04dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+3
??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$6 DB 050H ; glm::decompose<float,0>
	DB	064H
	DB	075H
	DB	06dH
	DB	033H
	DB	00H
	ORG $+6
??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$4 DB 054H ; glm::decompose<float,0>
	DB	072H
	DB	061H
	DB	06eH
	DB	073H
	DB	070H
	DB	06fH
	DB	073H
	DB	065H
	DB	064H
	DB	049H
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	050H
	DB	065H
	DB	072H
	DB	073H
	DB	070H
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	076H
	DB	065H
	DB	04dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+5
??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcFrameData DD 07H ; glm::decompose<float,0>
	DD	00H
	DQ	FLAT:??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcVarDesc
	ORG $+8
??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcVarDesc DD 0228H ; glm::decompose<float,0>
	DD	0cH
	DQ	FLAT:??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$6
	DD	01e8H
	DD	024H
	DQ	FLAT:??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$5
	DD	0190H
	DD	040H
	DQ	FLAT:??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$4
	DD	0130H
	DD	040H
	DQ	FLAT:??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$3
	DD	0f8H
	DD	010H
	DQ	FLAT:??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$2
	DD	0a0H
	DD	040H
	DQ	FLAT:??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$1
	DD	040H
	DD	040H
	DQ	FLAT:??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	024H
	DD	0fbH
voltbl	ENDS
xdata	SEGMENT
$unwind$main DD	032c19H
	DD	0340109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0198H
xdata	ENDS
CONST	SEGMENT
main$rtcName$0 DB 04dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+1
main$rtcName$1 DB 053H
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+2
main$rtcName$2 DB 04fH
	DB	072H
	DB	069H
	DB	065H
	DB	06eH
	DB	074H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+4
main$rtcName$3 DB 054H
	DB	072H
	DB	061H
	DB	06eH
	DB	073H
	DB	06cH
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
main$rtcName$4 DB 053H
	DB	06bH
	DB	065H
	DB	077H
	DB	00H
	ORG $+7
main$rtcName$5 DB 050H
	DB	065H
	DB	072H
	DB	073H
	DB	070H
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	076H
	DB	065H
	DB	00H
	ORG $+12
main$rtcVarDesc DD 0168H
	DD	010H
	DQ	FLAT:main$rtcName$5
	DD	0138H
	DD	0cH
	DQ	FLAT:main$rtcName$4
	DD	0108H
	DD	0cH
	DQ	FLAT:main$rtcName$3
	DD	0d8H
	DD	010H
	DQ	FLAT:main$rtcName$2
	DD	0a8H
	DD	0cH
	DQ	FLAT:main$rtcName$1
	DD	050H
	DD	040H
	DQ	FLAT:main$rtcName$0
	ORG $+288
main$rtcFrameData DD 06H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 021901H
	DD	070155219H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv66 = 112
tv74 = 120
tv82 = 128
__$ReturnUdt$ = 160
m$ = 168
s$ = 176
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::operator*<float,0>, COMDAT

; 482  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 483  : 		return tmat4x4<T, P>(

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv82[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 484  : 			m[0] * s,
; 485  : 			m[1] * s,
; 486  : 			m[2] * s,
; 487  : 			m[3] * s);
; 488  : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv88 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<float,0,0>::call, COMDAT

; 77   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx+4]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm2, DWORD PTR [rax+8]
	mulss	xmm2, DWORD PTR [rcx]
	subss	xmm1, xmm2
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm3, DWORD PTR [rax+4]
	mulss	xmm3, DWORD PTR [rcx+8]
	subss	xmm2, xmm3
	movss	DWORD PTR tv88[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv88[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 574  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 575  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	addss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 576  : 			v1.x + v2.x,
; 577  : 			v1.y + v2.y,
; 578  : 			v1.z + v2.z);
; 579  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call, COMDAT

; 57   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 59   : 			return tmp.x + tmp.y + tmp.z;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	addss	xmm0, DWORD PTR tmp$[rsp+8]

; 60   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 673  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	divss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	divss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 675  : 			v.x / scalar,
; 676  : 			v.y / scalar,
; 677  : 			v.z / scalar);
; 678  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec3,float,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	call	?sqrt@@YAMM@Z				; sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
result$ = 48
tv76 = 128
tv88 = 136
tv132 = 144
tv144 = 152
tv156 = 160
tv168 = 168
tv180 = 176
tv192 = 184
tv204 = 192
tv216 = 200
tv228 = 208
tv240 = 216
tv252 = 224
tv264 = 232
tv276 = 240
tv288 = 248
__$ArrayPad$ = 256
__$ReturnUdt$ = 304
m$ = 312
?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call, COMDAT

; 176  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+304]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 177  : 			tmat4x4<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 178  : 			result[0][0] = m[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 179  : 			result[0][1] = m[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 180  : 			result[0][2] = m[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv132[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv132[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 181  : 			result[0][3] = m[3][0];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv144[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv144[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 182  : 
; 183  : 			result[1][0] = m[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv156[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv156[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 184  : 			result[1][1] = m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv168[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv168[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 185  : 			result[1][2] = m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv180[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv180[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 186  : 			result[1][3] = m[3][1];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv192[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv192[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 187  : 
; 188  : 			result[2][0] = m[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv204[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv204[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 189  : 			result[2][1] = m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv216[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv216[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 190  : 			result[2][2] = m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv228[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv228[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 191  : 			result[2][3] = m[3][2];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv240[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv240[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 192  : 
; 193  : 			result[3][0] = m[0][3];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv252[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv252[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 194  : 			result[3][1] = m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv264[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv264[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 195  : 			result[3][2] = m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv276[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv276[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 196  : 			result[3][3] = m[3][3];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv288[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv288[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 197  : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 198  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
Coef00$ = 48
Coef02$ = 52
Coef03$ = 56
Coef04$ = 60
Coef06$ = 64
Coef07$ = 68
Coef08$ = 72
Coef10$ = 76
Coef11$ = 80
Coef12$ = 84
Coef14$ = 88
Coef15$ = 92
Coef16$ = 96
Coef18$ = 100
Coef19$ = 104
Coef20$ = 108
Coef22$ = 112
Coef23$ = 116
Fac0$ = 136
Fac1$ = 184
Fac2$ = 232
Fac3$ = 280
Fac4$ = 328
Fac5$ = 376
Vec0$ = 424
Vec1$ = 472
Vec2$ = 520
Vec3$ = 568
Inv0$ = 616
Inv1$ = 664
Inv2$ = 712
Inv3$ = 760
SignA$ = 808
SignB$ = 856
Inverse$ = 912
Row0$ = 1000
Dot0$ = 1048
Dot1$ = 1076
OneOverDeterminant$ = 1092
$T23 = 1120
$T24 = 1136
$T25 = 1152
$T26 = 1168
$T27 = 1184
$T28 = 1200
$T29 = 1216
$T30 = 1232
$T31 = 1248
$T32 = 1264
$T33 = 1280
$T34 = 1296
$T35 = 1312
$T36 = 1328
$T37 = 1344
$T38 = 1360
$T39 = 1376
$T40 = 1392
$T41 = 1408
$T42 = 1424
tv68 = 1440
tv76 = 1448
tv81 = 1456
tv95 = 1464
tv135 = 1472
tv140 = 1480
tv154 = 1488
tv162 = 1496
tv167 = 1504
tv181 = 1512
tv189 = 1520
tv194 = 1528
tv208 = 1536
tv216 = 1544
tv221 = 1552
tv235 = 1560
tv243 = 1568
tv248 = 1576
tv262 = 1584
tv270 = 1592
tv275 = 1600
tv289 = 1608
tv297 = 1616
tv302 = 1624
tv316 = 1632
tv324 = 1640
tv329 = 1648
tv343 = 1656
tv351 = 1664
tv356 = 1672
tv370 = 1680
tv378 = 1688
tv383 = 1696
tv397 = 1704
tv405 = 1712
tv410 = 1720
tv424 = 1728
tv432 = 1736
tv437 = 1744
tv451 = 1752
tv459 = 1760
tv464 = 1768
tv478 = 1776
tv486 = 1784
tv491 = 1792
tv505 = 1800
tv513 = 1808
tv518 = 1816
tv532 = 1824
tv540 = 1832
tv545 = 1840
tv559 = 1848
tv567 = 1856
tv572 = 1864
tv618 = 1872
tv625 = 1880
tv632 = 1888
tv647 = 1896
tv654 = 1904
tv661 = 1912
tv676 = 1920
tv683 = 1928
tv690 = 1936
tv705 = 1944
tv712 = 1952
tv719 = 1960
tv729 = 1968
tv735 = 1976
tv780 = 1984
tv786 = 1992
tv799 = 2000
tv805 = 2008
tv818 = 2016
tv824 = 2024
tv848 = 2032
tv853 = 2040
tv858 = 2048
tv873 = 2056
tv880 = 2064
tv887 = 2072
__$ArrayPad$ = 2080
__$ReturnUdt$ = 2112
m$ = 2120
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call, COMDAT

; 300  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 2096				; 00000830H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 512				; 00000200H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2112]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 301  : 			T Coef00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv68[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv76[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv81[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv81[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv76[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef00$[rsp], xmm0

; 302  : 			T Coef02 = m[1][2] * m[3][3] - m[3][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv95[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv95[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv135[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv135[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef02$[rsp], xmm0

; 303  : 			T Coef03 = m[1][2] * m[2][3] - m[2][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv154[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv154[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv162[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv167[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv167[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv162[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef03$[rsp], xmm0

; 304  : 
; 305  : 			T Coef04 = m[2][1] * m[3][3] - m[3][1] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv181[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv181[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv189[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv194[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv194[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv189[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef04$[rsp], xmm0

; 306  : 			T Coef06 = m[1][1] * m[3][3] - m[3][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv208[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv208[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv216[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv221[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv216[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef06$[rsp], xmm0

; 307  : 			T Coef07 = m[1][1] * m[2][3] - m[2][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv235[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv235[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv243[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv248[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv243[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef07$[rsp], xmm0

; 308  : 
; 309  : 			T Coef08 = m[2][1] * m[3][2] - m[3][1] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv262[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv262[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv270[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv275[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv275[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv270[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef08$[rsp], xmm0

; 310  : 			T Coef10 = m[1][1] * m[3][2] - m[3][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv289[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv289[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv297[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv302[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv302[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv297[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef10$[rsp], xmm0

; 311  : 			T Coef11 = m[1][1] * m[2][2] - m[2][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv316[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv316[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv324[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv329[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv329[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv324[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef11$[rsp], xmm0

; 312  : 
; 313  : 			T Coef12 = m[2][0] * m[3][3] - m[3][0] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv343[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv343[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv351[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv356[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv356[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv351[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef12$[rsp], xmm0

; 314  : 			T Coef14 = m[1][0] * m[3][3] - m[3][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv370[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv370[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv378[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv383[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv383[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv378[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef14$[rsp], xmm0

; 315  : 			T Coef15 = m[1][0] * m[2][3] - m[2][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv397[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv397[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv405[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv410[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv410[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv405[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef15$[rsp], xmm0

; 316  : 
; 317  : 			T Coef16 = m[2][0] * m[3][2] - m[3][0] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv424[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv424[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv432[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv437[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv437[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv432[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef16$[rsp], xmm0

; 318  : 			T Coef18 = m[1][0] * m[3][2] - m[3][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv451[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv451[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv459[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv464[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv464[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv459[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef18$[rsp], xmm0

; 319  : 			T Coef19 = m[1][0] * m[2][2] - m[2][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv478[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv478[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv486[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv491[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv491[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv486[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef19$[rsp], xmm0

; 320  : 
; 321  : 			T Coef20 = m[2][0] * m[3][1] - m[3][0] * m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv505[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv505[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv513[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv518[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv518[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv513[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef20$[rsp], xmm0

; 322  : 			T Coef22 = m[1][0] * m[3][1] - m[3][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv532[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv532[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv540[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv545[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv545[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv540[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef22$[rsp], xmm0

; 323  : 			T Coef23 = m[1][0] * m[2][1] - m[2][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv559[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv559[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv567[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv572[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv572[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv567[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef23$[rsp], xmm0

; 324  : 
; 325  : 			tvec4<T, P> Fac0(Coef00, Coef00, Coef02, Coef03);

	movss	xmm0, DWORD PTR Coef03$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef02$[rsp]
	movss	xmm2, DWORD PTR Coef00$[rsp]
	movss	xmm1, DWORD PTR Coef00$[rsp]
	lea	rcx, QWORD PTR Fac0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 326  : 			tvec4<T, P> Fac1(Coef04, Coef04, Coef06, Coef07);

	movss	xmm0, DWORD PTR Coef07$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef06$[rsp]
	movss	xmm2, DWORD PTR Coef04$[rsp]
	movss	xmm1, DWORD PTR Coef04$[rsp]
	lea	rcx, QWORD PTR Fac1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 327  : 			tvec4<T, P> Fac2(Coef08, Coef08, Coef10, Coef11);

	movss	xmm0, DWORD PTR Coef11$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef10$[rsp]
	movss	xmm2, DWORD PTR Coef08$[rsp]
	movss	xmm1, DWORD PTR Coef08$[rsp]
	lea	rcx, QWORD PTR Fac2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 328  : 			tvec4<T, P> Fac3(Coef12, Coef12, Coef14, Coef15);

	movss	xmm0, DWORD PTR Coef15$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef14$[rsp]
	movss	xmm2, DWORD PTR Coef12$[rsp]
	movss	xmm1, DWORD PTR Coef12$[rsp]
	lea	rcx, QWORD PTR Fac3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 329  : 			tvec4<T, P> Fac4(Coef16, Coef16, Coef18, Coef19);

	movss	xmm0, DWORD PTR Coef19$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef18$[rsp]
	movss	xmm2, DWORD PTR Coef16$[rsp]
	movss	xmm1, DWORD PTR Coef16$[rsp]
	lea	rcx, QWORD PTR Fac4$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 330  : 			tvec4<T, P> Fac5(Coef20, Coef20, Coef22, Coef23);

	movss	xmm0, DWORD PTR Coef23$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef22$[rsp]
	movss	xmm2, DWORD PTR Coef20$[rsp]
	movss	xmm1, DWORD PTR Coef20$[rsp]
	lea	rcx, QWORD PTR Fac5$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 331  : 
; 332  : 			tvec4<T, P> Vec0(m[1][0], m[0][0], m[0][0], m[0][0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv618[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv625[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv632[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv618[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv625[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv632[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 333  : 			tvec4<T, P> Vec1(m[1][1], m[0][1], m[0][1], m[0][1]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv647[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv654[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv661[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv647[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv654[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv661[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 334  : 			tvec4<T, P> Vec2(m[1][2], m[0][2], m[0][2], m[0][2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv676[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv683[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv690[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv676[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv683[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv690[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 335  : 			tvec4<T, P> Vec3(m[1][3], m[0][3], m[0][3], m[0][3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv705[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv712[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv719[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv705[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv712[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv719[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 336  : 
; 337  : 			tvec4<T, P> Inv0(Vec1 * Fac0 - Vec2 * Fac1 + Vec3 * Fac2);

	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv729[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv735[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv735[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv729[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 338  : 			tvec4<T, P> Inv1(Vec0 * Fac0 - Vec2 * Fac3 + Vec3 * Fac4);

	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv780[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv786[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv786[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv780[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 339  : 			tvec4<T, P> Inv2(Vec0 * Fac1 - Vec1 * Fac3 + Vec3 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv799[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv805[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv805[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv799[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv2$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 340  : 			tvec4<T, P> Inv3(Vec0 * Fac2 - Vec1 * Fac4 + Vec2 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv818[rsp], rax
	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv824[rsp], rax
	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv824[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv818[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv3$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 341  : 
; 342  : 			tvec4<T, P> SignA(+1, -1, +1, -1);

	mov	DWORD PTR [rsp+32], -1
	mov	r9d, 1
	mov	r8d, -1
	mov	edx, 1
	lea	rcx, QWORD PTR SignA$[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 343  : 			tvec4<T, P> SignB(-1, +1, -1, +1);

	mov	DWORD PTR [rsp+32], 1
	mov	r9d, -1
	mov	r8d, 1
	mov	edx, -1
	lea	rcx, QWORD PTR SignB$[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 344  : 			tmat4x4<T, P> Inverse(Inv0 * SignA, Inv1 * SignB, Inv2 * SignA, Inv3 * SignB);

	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv3$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv848[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv2$[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv853[rsp], rax
	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv1$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv858[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv0$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv848[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv853[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv858[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 345  : 
; 346  : 			tvec4<T, P> Row0(Inverse[0][0], Inverse[1][0], Inverse[2][0], Inverse[3][0]);

	mov	edx, 3
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv873[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv880[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv887[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv873[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv880[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv887[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Row0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 347  : 
; 348  : 			tvec4<T, P> Dot0(m[0] * Row0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Row0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Dot0$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 349  : 			T Dot1 = (Dot0.x + Dot0.y) + (Dot0.z + Dot0.w);

	movss	xmm0, DWORD PTR Dot0$[rsp]
	addss	xmm0, DWORD PTR Dot0$[rsp+4]
	movss	xmm1, DWORD PTR Dot0$[rsp+8]
	addss	xmm1, DWORD PTR Dot0$[rsp+12]
	addss	xmm0, xmm1
	movss	DWORD PTR Dot1$[rsp], xmm0

; 350  : 
; 351  : 			T OneOverDeterminant = static_cast<T>(1) / Dot1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR Dot1$[rsp]
	movss	DWORD PTR OneOverDeterminant$[rsp], xmm0

; 352  : 
; 353  : 			return Inverse * OneOverDeterminant;

	lea	r8, QWORD PTR OneOverDeterminant$[rsp]
	lea	rdx, QWORD PTR Inverse$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 354  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2096				; 00000830H
	pop	rdi
	ret	0
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z
_TEXT	SEGMENT
SubFactor00$ = 64
SubFactor01$ = 68
SubFactor02$ = 72
SubFactor03$ = 76
SubFactor04$ = 80
SubFactor05$ = 84
DetCof$ = 104
tv68 = 136
tv76 = 144
tv81 = 152
tv95 = 160
tv135 = 168
tv140 = 176
tv154 = 184
tv162 = 192
tv167 = 200
tv181 = 208
tv189 = 216
tv194 = 224
tv208 = 232
tv216 = 240
tv221 = 248
tv235 = 256
tv243 = 264
tv248 = 272
tv266 = 280
tv274 = 284
tv284 = 288
tv292 = 292
tv300 = 296
tv309 = 300
tv317 = 304
tv325 = 308
tv335 = 312
tv343 = 316
tv351 = 320
tv365 = 328
tv370 = 336
tv375 = 344
tv381 = 352
tv386 = 360
tv392 = 368
tv397 = 376
m$ = 400
?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z PROC ; glm::detail::compute_determinant<glm::tmat4x4,float,0,0>::call, COMDAT

; 229  : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 384				; 00000180H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+400]

; 230  : 			T SubFactor00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv68[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv76[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv81[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv81[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv76[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR SubFactor00$[rsp], xmm0

; 231  : 			T SubFactor01 = m[2][1] * m[3][3] - m[3][1] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv95[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv95[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv135[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv135[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR SubFactor01$[rsp], xmm0

; 232  : 			T SubFactor02 = m[2][1] * m[3][2] - m[3][1] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv154[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv154[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv162[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv167[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv167[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv162[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR SubFactor02$[rsp], xmm0

; 233  : 			T SubFactor03 = m[2][0] * m[3][3] - m[3][0] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv181[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv181[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv189[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv194[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv194[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv189[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR SubFactor03$[rsp], xmm0

; 234  : 			T SubFactor04 = m[2][0] * m[3][2] - m[3][0] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv208[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv208[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv216[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv221[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv216[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR SubFactor04$[rsp], xmm0

; 235  : 			T SubFactor05 = m[2][0] * m[3][1] - m[3][0] * m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv235[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv235[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv243[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv248[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv243[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR SubFactor05$[rsp], xmm0

; 236  : 
; 237  : 			tvec4<T, P> DetCof(

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor02$[rsp]
	movss	DWORD PTR tv266[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor04$[rsp]
	movss	xmm1, DWORD PTR tv266[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv274[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor05$[rsp]
	movss	xmm1, DWORD PTR tv274[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv284[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor01$[rsp]
	movss	DWORD PTR tv292[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor03$[rsp]
	movss	xmm1, DWORD PTR tv292[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv300[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor05$[rsp]
	movss	xmm1, DWORD PTR tv300[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv309[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor00$[rsp]
	movss	DWORD PTR tv317[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor03$[rsp]
	movss	xmm1, DWORD PTR tv317[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv325[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor04$[rsp]
	movss	xmm1, DWORD PTR tv325[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv335[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor00$[rsp]
	movss	DWORD PTR tv343[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor01$[rsp]
	movss	xmm1, DWORD PTR tv343[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv351[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR SubFactor02$[rsp]
	movss	xmm1, DWORD PTR tv351[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv284[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv309[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv335[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR DetCof$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 238  : 				+ (m[1][1] * SubFactor00 - m[1][2] * SubFactor01 + m[1][3] * SubFactor02),
; 239  : 				- (m[1][0] * SubFactor00 - m[1][2] * SubFactor03 + m[1][3] * SubFactor04),
; 240  : 				+ (m[1][0] * SubFactor01 - m[1][1] * SubFactor03 + m[1][3] * SubFactor05),
; 241  : 				- (m[1][0] * SubFactor02 - m[1][1] * SubFactor04 + m[1][2] * SubFactor05));
; 242  : 
; 243  : 			return

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv365[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR DetCof$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv365[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv370[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv375[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR DetCof$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv375[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv370[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv381[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv386[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR DetCof$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv386[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv381[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv392[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv397[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR DetCof$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv397[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv392[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1

; 244  : 				m[0][0] * DetCof[0] + m[0][1] * DetCof[1] +
; 245  : 				m[0][2] * DetCof[2] + m[0][3] * DetCof[3];
; 246  : 		}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 384				; 00000180H
	pop	rdi
	ret	0
?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z ENDP ; glm::detail::compute_determinant<glm::tmat4x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec3<float,0>::operator*=<float>, COMDAT

; 242  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 243  : 		this->x *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 244  : 		this->y *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 245  : 		this->z *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 246  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 247  : 	}

	pop	rdi
	ret	0
??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec3<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::cross<float,0>, COMDAT

; 180  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 182  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::cross<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\matrix_decompose.inl
;	COMDAT ??$combine@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@0MM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
tv65 = 56
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
ascl$ = 104
bscl$ = 112
??$combine@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@0MM@Z PROC ; glm::detail::combine<float,0>, COMDAT

; 14   : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 15   : 		return (a * ascl) + (b * bscl);

	movss	xmm2, DWORD PTR bscl$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv65[rsp], rax
	movss	xmm2, DWORD PTR ascl$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 16   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$combine@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@0MM@Z ENDP ; glm::detail::combine<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec3>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\matrix_decompose.inl
;	COMDAT ??$scale@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@M@Z
_TEXT	SEGMENT
$T1 = 32
tv65 = 44
__$ReturnUdt$ = 64
v$ = 72
desiredLength$ = 80
??$scale@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@M@Z PROC ; glm::detail::scale<float,0>, COMDAT

; 20   : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 21   : 		return v * desiredLength / length(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	movss	DWORD PTR tv65[rsp], xmm0
	movss	xmm2, DWORD PTR desiredLength$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm0, DWORD PTR tv65[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 22   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$scale@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@M@Z ENDP ; glm::detail::scale<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::length<float,0,glm::tvec3>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,float,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::length<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,0>, COMDAT

; 138  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 135  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 136  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 137  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 138  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
Mov0$ = 40
Mov1$ = 88
Mul0$ = 136
Mul1$ = 184
Add0$ = 232
Mov2$ = 280
Mov3$ = 328
Mul2$ = 376
Mul3$ = 424
Add1$ = 472
Add2$ = 520
__$ReturnUdt$ = 592
m$ = 600
v$ = 608
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 506  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+592]

; 507  : /*
; 508  : 		__m128 v0 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(0, 0, 0, 0));
; 509  : 		__m128 v1 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(1, 1, 1, 1));
; 510  : 		__m128 v2 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(2, 2, 2, 2));
; 511  : 		__m128 v3 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(3, 3, 3, 3));
; 512  : 
; 513  : 		__m128 m0 = _mm_mul_ps(m[0].data, v0);
; 514  : 		__m128 m1 = _mm_mul_ps(m[1].data, v1);
; 515  : 		__m128 a0 = _mm_add_ps(m0, m1);
; 516  : 
; 517  : 		__m128 m2 = _mm_mul_ps(m[2].data, v2);
; 518  : 		__m128 m3 = _mm_mul_ps(m[3].data, v3);
; 519  : 		__m128 a1 = _mm_add_ps(m2, m3);
; 520  : 
; 521  : 		__m128 a2 = _mm_add_ps(a0, a1);
; 522  : 
; 523  : 		return typename tmat4x4<T, P>::col_type(a2);
; 524  : */
; 525  : 
; 526  : 		typename tmat4x4<T, P>::col_type const Mov0(v[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 527  : 		typename tmat4x4<T, P>::col_type const Mov1(v[1]);

	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 528  : 		typename tmat4x4<T, P>::col_type const Mul0 = m[0] * Mov0;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul0$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 529  : 		typename tmat4x4<T, P>::col_type const Mul1 = m[1] * Mov1;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov1$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 530  : 		typename tmat4x4<T, P>::col_type const Add0 = Mul0 + Mul1;

	lea	r8, QWORD PTR Mul1$[rsp]
	lea	rdx, QWORD PTR Mul0$[rsp]
	lea	rcx, QWORD PTR Add0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 531  : 		typename tmat4x4<T, P>::col_type const Mov2(v[2]);

	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 532  : 		typename tmat4x4<T, P>::col_type const Mov3(v[3]);

	mov	edx, 3
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 533  : 		typename tmat4x4<T, P>::col_type const Mul2 = m[2] * Mov2;

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov2$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 534  : 		typename tmat4x4<T, P>::col_type const Mul3 = m[3] * Mov3;

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov3$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 535  : 		typename tmat4x4<T, P>::col_type const Add1 = Mul2 + Mul3;

	lea	r8, QWORD PTR Mul3$[rsp]
	lea	rdx, QWORD PTR Mul2$[rsp]
	lea	rcx, QWORD PTR Add1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 536  : 		typename tmat4x4<T, P>::col_type const Add2 = Add0 + Add1;

	lea	r8, QWORD PTR Add1$[rsp]
	lea	rdx, QWORD PTR Add0$[rsp]
	lea	rcx, QWORD PTR Add2$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 537  : 		return Add2;

	lea	rax, QWORD PTR Add2$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 538  : 
; 539  : /*
; 540  : 		return typename tmat4x4<T, P>::col_type(
; 541  : 			m[0][0] * v[0] + m[1][0] * v[1] + m[2][0] * v[2] + m[3][0] * v[3],
; 542  : 			m[0][1] * v[0] + m[1][1] * v[1] + m[2][1] * v[2] + m[3][1] * v[3],
; 543  : 			m[0][2] * v[0] + m[1][2] * v[1] + m[2][2] * v[2] + m[3][2] * v[3],
; 544  : 			m[0][3] * v[0] + m[1][3] * v[1] + m[2][3] * v[2] + m[3][3] * v[3]);
; 545  : */
; 546  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 568				; 00000238H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z PROC ; glm::transpose<float,0,glm::tmat4x4>, COMDAT

; 378  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 379  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'transpose' only accept floating-point inputs");
; 380  : 		return detail::compute_transpose<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ENDP ; glm::transpose<float,0,glm::tmat4x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z PROC ; glm::inverse<float,0,glm::tmat4x4>, COMDAT

; 392  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 393  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'inverse' only accept floating-point inputs");
; 394  : 		return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ENDP ; glm::inverse<float,0,glm::tmat4x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$determinant@M$0A@Utmat4x4@glm@@@glm@@YAMAEBU?$tmat4x4@M$0A@@0@@Z
_TEXT	SEGMENT
m$ = 64
??$determinant@M$0A@Utmat4x4@glm@@@glm@@YAMAEBU?$tmat4x4@M$0A@@0@@Z PROC ; glm::determinant<float,0,glm::tmat4x4>, COMDAT

; 385  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 386  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'determinant' only accept floating-point inputs");
; 387  : 		return detail::compute_determinant<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rcx, QWORD PTR m$[rsp]
	call	?call@?$compute_determinant@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tmat4x4@M$0A@@3@@Z ; glm::detail::compute_determinant<glm::tmat4x4,float,0,0>::call

; 388  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$determinant@M$0A@Utmat4x4@glm@@@glm@@YAMAEBU?$tmat4x4@M$0A@@0@@Z ENDP ; glm::determinant<float,0,glm::tmat4x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT

; 204  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\matrix_decompose.inl
;	COMDAT ??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
LocalMatrix$ = 64
i$10 = 132
j$11 = 136
PerspectiveMatrix$ = 160
i$12 = 228
RightHandSide$13 = 248
InversePerspectiveMatrix$14 = 304
TransposedInversePerspectiveMatrix$15 = 400
Row$ = 488
Pdum3$ = 552
i$16 = 580
j$17 = 584
i$18 = 588
s$ = 592
t$ = 596
x$ = 600
y$ = 604
z$ = 608
w$ = 612
$T19 = 624
$T20 = 640
$T21 = 656
$T22 = 668
$T23 = 684
$T24 = 696
$T25 = 708
$T26 = 720
$T27 = 732
$T28 = 744
$T29 = 756
tv88 = 768
tv168 = 776
tv177 = 784
tv186 = 792
tv195 = 800
tv248 = 808
tv277 = 816
tv422 = 824
tv432 = 832
tv439 = 840
tv487 = 848
tv499 = 856
tv511 = 864
tv523 = 872
tv534 = 880
tv548 = 888
tv554 = 892
tv567 = 896
tv579 = 904
tv591 = 912
tv603 = 920
tv617 = 928
tv623 = 932
tv635 = 936
tv648 = 944
tv660 = 952
tv675 = 960
tv681 = 964
tv693 = 968
tv705 = 976
tv718 = 984
__$ArrayPad$ = 992
ModelMatrix$ = 1040
Scale$ = 1048
Orientation$ = 1056
Translation$ = 1064
Skew$ = 1072
Perspective$ = 1080
??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z PROC ; glm::decompose<float,0>, COMDAT

; 31   : 	{

$LN34:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1016				; 000003f8H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 242				; 000000f2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1040]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 32   : 		tmat4x4<T, P> LocalMatrix(ModelMatrix);

	lea	rax, QWORD PTR LocalMatrix$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR ModelMatrix$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb

; 33   : 
; 34   : 		// Normalize the matrix.
; 35   : 		if(LocalMatrix[3][3] == static_cast<T>(0))

	mov	edx, 3
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN20@decompose
	jne	SHORT $LN20@decompose

; 36   : 			return false;

	xor	al, al
	jmp	$LN1@decompose
$LN20@decompose:

; 37   : 
; 38   : 		for(length_t i = 0; i < 4; ++i)

	mov	DWORD PTR i$10[rsp], 0
	jmp	SHORT $LN4@decompose
$LN2@decompose:
	mov	eax, DWORD PTR i$10[rsp]
	inc	eax
	mov	DWORD PTR i$10[rsp], eax
$LN4@decompose:
	cmp	DWORD PTR i$10[rsp], 4
	jge	$LN3@decompose

; 39   : 		for(length_t j = 0; j < 4; ++j)

	mov	DWORD PTR j$11[rsp], 0
	jmp	SHORT $LN7@decompose
$LN5@decompose:
	mov	eax, DWORD PTR j$11[rsp]
	inc	eax
	mov	DWORD PTR j$11[rsp], eax
$LN7@decompose:
	cmp	DWORD PTR j$11[rsp], 4
	jge	SHORT $LN6@decompose

; 40   : 			LocalMatrix[i][j] /= LocalMatrix[3][3];

	mov	edx, DWORD PTR i$10[rsp]
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, DWORD PTR j$11[rsp]
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	divss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv88[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN5@decompose
$LN6@decompose:
	jmp	$LN2@decompose
$LN3@decompose:

; 41   : 
; 42   : 		// perspectiveMatrix is used to solve for perspective, but it also provides
; 43   : 		// an easy way to test for singularity of the upper 3x3 component.
; 44   : 		tmat4x4<T, P> PerspectiveMatrix(LocalMatrix);

	lea	rax, QWORD PTR PerspectiveMatrix$[rsp]
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb

; 45   : 
; 46   : 		for(length_t i = 0; i < 3; i++)

	mov	DWORD PTR i$12[rsp], 0
	jmp	SHORT $LN10@decompose
$LN8@decompose:
	mov	eax, DWORD PTR i$12[rsp]
	inc	eax
	mov	DWORD PTR i$12[rsp], eax
$LN10@decompose:
	cmp	DWORD PTR i$12[rsp], 3
	jge	SHORT $LN9@decompose

; 47   : 			PerspectiveMatrix[i][3] = static_cast<T>(0);

	mov	edx, DWORD PTR i$12[rsp]
	lea	rcx, QWORD PTR PerspectiveMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN8@decompose
$LN9@decompose:

; 48   : 		PerspectiveMatrix[3][3] = static_cast<T>(1);

	mov	edx, 3
	lea	rcx, QWORD PTR PerspectiveMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax], xmm0

; 49   : 
; 50   : 		/// TODO: Fixme!
; 51   : 		if(determinant(PerspectiveMatrix) == static_cast<T>(0))

	lea	rcx, QWORD PTR PerspectiveMatrix$[rsp]
	call	??$determinant@M$0A@Utmat4x4@glm@@@glm@@YAMAEBU?$tmat4x4@M$0A@@0@@Z ; glm::determinant<float,0,glm::tmat4x4>
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN21@decompose
	jne	SHORT $LN21@decompose

; 52   : 			return false;

	xor	al, al
	jmp	$LN1@decompose
$LN21@decompose:

; 53   : 
; 54   : 		// First, isolate perspective.  This is the messiest.
; 55   : 		if(LocalMatrix[0][3] != static_cast<T>(0) || LocalMatrix[1][3] != static_cast<T>(0) || LocalMatrix[2][3] != static_cast<T>(0))

	xor	edx, edx
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN24@decompose
	jne	SHORT $LN24@decompose
	mov	edx, 1
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN24@decompose
	jne	SHORT $LN24@decompose
	mov	edx, 2
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN33@decompose
	je	$LN22@decompose
$LN33@decompose:
$LN24@decompose:

; 56   : 		{
; 57   : 			// rightHandSide is the right hand side of the equation.
; 58   : 			tvec4<T, P> RightHandSide;

	lea	rcx, QWORD PTR RightHandSide$13[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@XZ		; glm::tvec4<float,0>::tvec4<float,0>

; 59   : 			RightHandSide[0] = LocalMatrix[0][3];

	xor	edx, edx
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv168[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR RightHandSide$13[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv168[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 60   : 			RightHandSide[1] = LocalMatrix[1][3];

	mov	edx, 1
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv177[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR RightHandSide$13[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv177[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 61   : 			RightHandSide[2] = LocalMatrix[2][3];

	mov	edx, 2
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv186[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR RightHandSide$13[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv186[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 62   : 			RightHandSide[3] = LocalMatrix[3][3];

	mov	edx, 3
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv195[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR RightHandSide$13[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv195[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 63   : 
; 64   : 			// Solve the equation by inverting PerspectiveMatrix and multiplying
; 65   : 			// rightHandSide by the inverse.  (This is the easiest way, not
; 66   : 			// necessarily the best.)
; 67   : 			tmat4x4<T, P> InversePerspectiveMatrix = glm::inverse(PerspectiveMatrix);//   inverse(PerspectiveMatrix, inversePerspectiveMatrix);

	lea	rdx, QWORD PTR PerspectiveMatrix$[rsp]
	lea	rcx, QWORD PTR InversePerspectiveMatrix$14[rsp]
	call	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>

; 68   : 			tmat4x4<T, P> TransposedInversePerspectiveMatrix = glm::transpose(InversePerspectiveMatrix);//   transposeMatrix4(inversePerspectiveMatrix, transposedInversePerspectiveMatrix);

	lea	rdx, QWORD PTR InversePerspectiveMatrix$14[rsp]
	lea	rcx, QWORD PTR TransposedInversePerspectiveMatrix$15[rsp]
	call	??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::transpose<float,0,glm::tmat4x4>

; 69   : 
; 70   : 			Perspective = TransposedInversePerspectiveMatrix * RightHandSide;

	lea	r8, QWORD PTR RightHandSide$13[rsp]
	lea	rdx, QWORD PTR TransposedInversePerspectiveMatrix$15[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
	mov	rdi, QWORD PTR Perspective$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 71   : 			//  v4MulPointByMatrix(rightHandSide, transposedInversePerspectiveMatrix, perspectivePoint);
; 72   : 
; 73   : 			// Clear the perspective partition
; 74   : 			LocalMatrix[0][3] = LocalMatrix[1][3] = LocalMatrix[2][3] = static_cast<T>(0);

	mov	edx, 2
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 75   : 			LocalMatrix[3][3] = static_cast<T>(1);

	mov	edx, 3
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax], xmm0

; 76   : 		}

	jmp	SHORT $LN23@decompose
$LN22@decompose:

; 77   : 		else
; 78   : 		{
; 79   : 			// No perspective.
; 80   : 			Perspective = tvec4<T, P>(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rdi, QWORD PTR Perspective$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN23@decompose:

; 81   : 		}
; 82   : 
; 83   : 		// Next take care of translation (easy).
; 84   : 		Translation = tvec3<T, P>(LocalMatrix[3]);

	mov	edx, 3
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	rdi, QWORD PTR Translation$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 85   : 		LocalMatrix[3] = tvec4<T, P>(0, 0, 0, LocalMatrix[3].w);

	mov	edx, 3
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv248[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 86   : 
; 87   : 		tvec3<T, P> Row[3], Pdum3;

	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	lea	rcx, QWORD PTR Row$[rsp]
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	lea	rcx, QWORD PTR Pdum3$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@XZ		; glm::tvec3<float,0>::tvec3<float,0>

; 88   : 
; 89   : 		// Now get scale and shear.
; 90   : 		for(length_t i = 0; i < 3; ++i)

	mov	DWORD PTR i$16[rsp], 0
	jmp	SHORT $LN13@decompose
$LN11@decompose:
	mov	eax, DWORD PTR i$16[rsp]
	inc	eax
	mov	DWORD PTR i$16[rsp], eax
$LN13@decompose:
	cmp	DWORD PTR i$16[rsp], 3
	jge	$LN12@decompose

; 91   : 			for(int j = 0; j < 3; ++j)

	mov	DWORD PTR j$17[rsp], 0
	jmp	SHORT $LN16@decompose
$LN14@decompose:
	mov	eax, DWORD PTR j$17[rsp]
	inc	eax
	mov	DWORD PTR j$17[rsp], eax
$LN16@decompose:
	cmp	DWORD PTR j$17[rsp], 3
	jge	SHORT $LN15@decompose

; 92   : 				Row[i][j] = LocalMatrix[i][j];

	mov	edx, DWORD PTR i$16[rsp]
	lea	rcx, QWORD PTR LocalMatrix$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, DWORD PTR j$17[rsp]
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv277[rsp], rax
	movsxd	rcx, DWORD PTR i$16[rsp]
	imul	rcx, rcx, 12
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	edx, DWORD PTR j$17[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv277[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN14@decompose
$LN15@decompose:
	jmp	$LN11@decompose
$LN12@decompose:

; 93   : 
; 94   : 		// Compute X scale factor and normalize first row.
; 95   : 		Scale.x = length(Row[0]);// v3Length(Row[0]);

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	mov	rax, QWORD PTR Scale$[rsp]
	movss	DWORD PTR [rax], xmm0

; 96   : 
; 97   : 		Row[0] = detail::scale(Row[0], static_cast<T>(1));

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$scale@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@M@Z ; glm::detail::scale<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	lea	rdi, QWORD PTR Row$[rsp+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 98   : 
; 99   : 		// Compute XY shear factor and make 2nd row orthogonal to 1st.
; 100  : 		Skew.z = dot(Row[0], Row[1]);

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	ecx, 12
	imul	rcx, rcx, 0
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	rdx, rax
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	mov	rax, QWORD PTR Skew$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 101  : 		Row[1] = detail::combine(Row[1], Row[0], static_cast<T>(1), -Skew.z);

	mov	rax, QWORD PTR Skew$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	ecx, 12
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$combine@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@0MM@Z ; glm::detail::combine<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	lea	rdi, QWORD PTR Row$[rsp+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 102  : 
; 103  : 		// Now, compute Y scale and normalize 2nd row.
; 104  : 		Scale.y = length(Row[1]);

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	mov	rax, QWORD PTR Scale$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 105  : 		Row[1] = detail::scale(Row[1], static_cast<T>(1));

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$scale@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@M@Z ; glm::detail::scale<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	lea	rdi, QWORD PTR Row$[rsp+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 106  : 		Skew.z /= Scale.y;

	mov	rax, QWORD PTR Skew$[rsp]
	mov	rcx, QWORD PTR Scale$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR Skew$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 107  : 
; 108  : 		// Compute XZ and YZ shears, orthogonalize 3rd row.
; 109  : 		Skew.y = glm::dot(Row[0], Row[2]);

	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	ecx, 12
	imul	rcx, rcx, 0
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	rdx, rax
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	mov	rax, QWORD PTR Skew$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 110  : 		Row[2] = detail::combine(Row[2], Row[0], static_cast<T>(1), -Skew.y);

	mov	rax, QWORD PTR Skew$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$combine@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@0MM@Z ; glm::detail::combine<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rdi, QWORD PTR Row$[rsp+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 111  : 		Skew.x = glm::dot(Row[1], Row[2]);

	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	ecx, 12
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	rdx, rax
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	mov	rax, QWORD PTR Skew$[rsp]
	movss	DWORD PTR [rax], xmm0

; 112  : 		Row[2] = detail::combine(Row[2], Row[1], static_cast<T>(1), -Skew.x);

	mov	rax, QWORD PTR Skew$[rsp]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$combine@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@0MM@Z ; glm::detail::combine<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rdi, QWORD PTR Row$[rsp+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 113  : 
; 114  : 		// Next, get Z scale and normalize 3rd row.
; 115  : 		Scale.z = length(Row[2]);

	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	mov	rax, QWORD PTR Scale$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 116  : 		Row[2] = detail::scale(Row[2], static_cast<T>(1));

	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR Row$[rsp+rax]
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$scale@M$0A@@detail@glm@@YA?AU?$tvec3@M$0A@@1@AEBU21@M@Z ; glm::detail::scale<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rdi, QWORD PTR Row$[rsp+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 117  : 		Skew.y /= Scale.z;

	mov	rax, QWORD PTR Skew$[rsp]
	mov	rcx, QWORD PTR Scale$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	divss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR Skew$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 118  : 		Skew.x /= Scale.z;

	mov	rax, QWORD PTR Skew$[rsp]
	mov	rcx, QWORD PTR Scale$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR Skew$[rsp]
	movss	DWORD PTR [rax], xmm0

; 119  : 
; 120  : 		// At this point, the matrix (in rows[]) is orthonormal.
; 121  : 		// Check for a coordinate system flip.  If the determinant
; 122  : 		// is -1, then negate the matrix and the scaling factors.
; 123  : 		Pdum3 = cross(Row[1], Row[2]); // v3Cross(row[1], row[2], Pdum3);

	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	ecx, 12
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
	lea	rcx, QWORD PTR Pdum3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 124  : 		if(dot(Row[0], Pdum3) < 0)

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	lea	rdx, QWORD PTR Pdum3$[rsp]
	mov	rcx, rax
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN25@decompose

; 125  : 		{
; 126  : 			for(length_t i = 0; i < 3; i++)

	mov	DWORD PTR i$18[rsp], 0
	jmp	SHORT $LN19@decompose
$LN17@decompose:
	mov	eax, DWORD PTR i$18[rsp]
	inc	eax
	mov	DWORD PTR i$18[rsp], eax
$LN19@decompose:
	cmp	DWORD PTR i$18[rsp], 3
	jge	SHORT $LN18@decompose

; 127  : 			{
; 128  : 				Scale[i] *= static_cast<T>(-1);

	mov	edx, DWORD PTR i$18[rsp]
	mov	rcx, QWORD PTR Scale$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv422[rsp], rax
	mov	rax, QWORD PTR tv422[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR __real@bf800000
	mov	rax, QWORD PTR tv422[rsp]
	movss	DWORD PTR [rax], xmm0

; 129  : 				Row[i] *= static_cast<T>(-1);

	movsxd	rax, DWORD PTR i$18[rsp]
	imul	rax, rax, 12
	lea	rax, QWORD PTR Row$[rsp+rax]
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rcx, rax
	call	??$?XM@?$tvec3@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec3<float,0>::operator*=<float>

; 130  : 			}

	jmp	SHORT $LN17@decompose
$LN18@decompose:
$LN25@decompose:

; 131  : 		}
; 132  : 
; 133  : 		// Now, get the rotations out, as described in the gem.
; 134  : 
; 135  : 		// FIXME - Add the ability to return either quaternions (which are
; 136  : 		// easier to recompose with) or Euler angles (rx, ry, rz), which
; 137  : 		// are easier for authors to deal with. The latter will only be useful
; 138  : 		// when we fix https://bugs.webkit.org/show_bug.cgi?id=23799, so I
; 139  : 		// will leave the Euler angle code here for now.
; 140  : 
; 141  : 		// ret.rotateY = asin(-Row[0][2]);
; 142  : 		// if (cos(ret.rotateY) != 0) {
; 143  : 		//     ret.rotateX = atan2(Row[1][2], Row[2][2]);
; 144  : 		//     ret.rotateZ = atan2(Row[0][1], Row[0][0]);
; 145  : 		// } else {
; 146  : 		//     ret.rotateX = atan2(-Row[2][0], Row[1][1]);
; 147  : 		//     ret.rotateZ = 0;
; 148  : 		// }
; 149  : 
; 150  : 		T s, t, x, y, z, w;
; 151  : 
; 152  : 		t = Row[0][0] + Row[1][1] + Row[2][2] + static_cast<T>(1);

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv432[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	edx, 1
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv432[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv439[rsp], xmm0
	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv439[rsp]
	addss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR t$[rsp], xmm0

; 153  : 
; 154  : 		if(t > static_cast<T>(1e-4))

	movss	xmm0, DWORD PTR t$[rsp]
	comiss	xmm0, DWORD PTR __real@38d1b717
	jbe	$LN26@decompose

; 155  : 		{
; 156  : 			s = static_cast<T>(0.5) / sqrt(t);

	movss	xmm0, DWORD PTR t$[rsp]
	call	?sqrt@@YAMM@Z				; sqrt
	movss	xmm1, DWORD PTR __real@3f000000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR s$[rsp], xmm0

; 157  : 			w = static_cast<T>(0.25) / s;

	movss	xmm0, DWORD PTR __real@3e800000
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR w$[rsp], xmm0

; 158  : 			x = (Row[2][1] - Row[1][2]) * s;

	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv487[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	edx, 2
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv487[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR x$[rsp], xmm0

; 159  : 			y = (Row[0][2] - Row[2][0]) * s;

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv499[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	xor	edx, edx
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv499[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR y$[rsp], xmm0

; 160  : 			z = (Row[1][0] - Row[0][1]) * s;

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv511[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 0
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	edx, 1
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv511[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR z$[rsp], xmm0

; 161  : 		}

	jmp	$LN27@decompose
$LN26@decompose:

; 162  : 		else if(Row[0][0] > Row[1][1] && Row[0][0] > Row[2][2])

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv523[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	edx, 1
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv523[rsp]
	movss	xmm0, DWORD PTR [rcx]
	comiss	xmm0, DWORD PTR [rax]
	jbe	$LN28@decompose
	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv534[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	edx, 2
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv534[rsp]
	movss	xmm0, DWORD PTR [rcx]
	comiss	xmm0, DWORD PTR [rax]
	jbe	$LN28@decompose

; 163  : 		{ 
; 164  : 			s = sqrt (static_cast<T>(1) + Row[0][0] - Row[1][1] - Row[2][2]) * static_cast<T>(2); // S=4*qx 

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv548[rsp], xmm0
	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv548[rsp]
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv554[rsp], xmm0
	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv554[rsp]
	subss	xmm0, DWORD PTR [rax]
	call	?sqrt@@YAMM@Z				; sqrt
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR s$[rsp], xmm0

; 165  : 			x = static_cast<T>(0.25) * s;

	movss	xmm0, DWORD PTR __real@3e800000
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR x$[rsp], xmm0

; 166  : 			y = (Row[0][1] + Row[1][0]) / s; 

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv567[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	xor	edx, edx
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv567[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR y$[rsp], xmm0

; 167  : 			z = (Row[0][2] + Row[2][0]) / s; 

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv579[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	xor	edx, edx
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv579[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR z$[rsp], xmm0

; 168  : 			w = (Row[2][1] - Row[1][2]) / s;

	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv591[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	edx, 2
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv591[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR w$[rsp], xmm0

; 169  : 		}

	jmp	$LN29@decompose
$LN28@decompose:

; 170  : 		else if(Row[1][1] > Row[2][2])

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv603[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	edx, 2
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv603[rsp]
	movss	xmm0, DWORD PTR [rcx]
	comiss	xmm0, DWORD PTR [rax]
	jbe	$LN30@decompose

; 171  : 		{ 
; 172  : 			s = sqrt (static_cast<T>(1) + Row[1][1] - Row[0][0] - Row[2][2]) * static_cast<T>(2); // S=4*qy

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv617[rsp], xmm0
	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv617[rsp]
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv623[rsp], xmm0
	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv623[rsp]
	subss	xmm0, DWORD PTR [rax]
	call	?sqrt@@YAMM@Z				; sqrt
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR s$[rsp], xmm0

; 173  : 			x = (Row[0][1] + Row[1][0]) / s; 

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv635[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	xor	edx, edx
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv635[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR x$[rsp], xmm0

; 174  : 			y = static_cast<T>(0.25) * s;

	movss	xmm0, DWORD PTR __real@3e800000
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR y$[rsp], xmm0

; 175  : 			z = (Row[1][2] + Row[2][1]) / s; 

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv648[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	edx, 1
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv648[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR z$[rsp], xmm0

; 176  : 			w = (Row[0][2] - Row[2][0]) / s;

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv660[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	xor	edx, edx
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv660[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR w$[rsp], xmm0

; 177  : 		}

	jmp	$LN31@decompose
$LN30@decompose:

; 178  : 		else
; 179  : 		{ 
; 180  : 			s = sqrt(static_cast<T>(1) + Row[2][2] - Row[0][0] - Row[1][1]) * static_cast<T>(2); // S=4*qz

	mov	eax, 12
	imul	rax, rax, 2
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv675[rsp], xmm0
	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv675[rsp]
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv681[rsp], xmm0
	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv681[rsp]
	subss	xmm0, DWORD PTR [rax]
	call	?sqrt@@YAMM@Z				; sqrt
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR s$[rsp], xmm0

; 181  : 			x = (Row[0][2] + Row[2][0]) / s;

	mov	eax, 12
	imul	rax, rax, 0
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv693[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	xor	edx, edx
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv693[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR x$[rsp], xmm0

; 182  : 			y = (Row[1][2] + Row[2][1]) / s; 

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv705[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	edx, 1
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv705[rsp]
	movss	xmm0, DWORD PTR [rcx]
	addss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR y$[rsp], xmm0

; 183  : 			z = static_cast<T>(0.25) * s;

	movss	xmm0, DWORD PTR __real@3e800000
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR z$[rsp], xmm0

; 184  : 			w = (Row[1][0] - Row[0][1]) / s;

	mov	eax, 12
	imul	rax, rax, 1
	lea	rax, QWORD PTR Row$[rsp+rax]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv718[rsp], rax
	mov	ecx, 12
	imul	rcx, rcx, 0
	lea	rcx, QWORD PTR Row$[rsp+rcx]
	mov	edx, 1
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv718[rsp]
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR w$[rsp], xmm0
$LN31@decompose:
$LN29@decompose:
$LN27@decompose:

; 185  : 		}
; 186  : 
; 187  : 		Orientation.x = x;

	mov	rax, QWORD PTR Orientation$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR [rax], xmm0

; 188  : 		Orientation.y = y;

	mov	rax, QWORD PTR Orientation$[rsp]
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 189  : 		Orientation.z = z;

	mov	rax, QWORD PTR Orientation$[rsp]
	movss	xmm0, DWORD PTR z$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 190  : 		Orientation.w = w;

	mov	rax, QWORD PTR Orientation$[rsp]
	movss	xmm0, DWORD PTR w$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 191  : 
; 192  : 		return true;

	mov	al, 1
$LN1@decompose:

; 193  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1016				; 000003f8H
	pop	rdi
	pop	rsi
	ret	0
??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z ENDP ; glm::decompose<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tquat@M$0A@@glm@@QEAA@XZ PROC			; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 92   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 90   : 				: x(0), y(0), z(0), w(1)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+12], xmm0

; 92   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@XZ ENDP			; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
v3$ = 96
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 80   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 81   : 		this->value[0] = v0;

	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 16
	rep movsb

; 82   : 		this->value[1] = v1;

	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb

; 83   : 		this->value[2] = v2;

	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 16
	rep movsb

; 84   : 		this->value[3] = v3;

	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v3$[rsp]
	mov	ecx, 16
	rep movsb

; 85   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
s$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 50   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 55   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 46   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_matrix_decompose.cpp
_TEXT	SEGMENT
Error$ = 48
Matrix$ = 80
Scale$ = 168
Orientation$ = 216
Translation$ = 264
Skew$ = 312
Perspective$ = 360
$T9 = 400
__$ArrayPad$ = 408
main	PROC

; 4    : {

$LN3:
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 92					; 0000005cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 5    : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 6    : 
; 7    : 	glm::mat4 Matrix(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T9[rsp], xmm0
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR Matrix$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 8    : 
; 9    : 	glm::vec3 Scale;

	lea	rcx, QWORD PTR Scale$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@XZ		; glm::tvec3<float,0>::tvec3<float,0>

; 10   : 	glm::quat Orientation;

	lea	rcx, QWORD PTR Orientation$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@XZ		; glm::tquat<float,0>::tquat<float,0>

; 11   : 	glm::vec3 Translation;

	lea	rcx, QWORD PTR Translation$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@XZ		; glm::tvec3<float,0>::tvec3<float,0>

; 12   : 	glm::vec3 Skew(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Skew$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 13   : 	glm::vec4 Perspective(1);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Perspective$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 14   : 
; 15   : 	glm::decompose(Matrix, Scale, Orientation, Translation, Skew, Perspective);

	lea	rax, QWORD PTR Perspective$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR Skew$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR Translation$[rsp]
	lea	r8, QWORD PTR Orientation$[rsp]
	lea	rdx, QWORD PTR Scale$[rsp]
	lea	rcx, QWORD PTR Matrix$[rsp]
	call	??$decompose@M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@AEAU?$tvec3@M$0A@@0@AEAU?$tquat@M$0A@@0@11AEAU?$tvec4@M$0A@@0@@Z ; glm::decompose<float,0>

; 16   : 
; 17   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 18   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:main$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 416				; 000001a0H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 264  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 265  :     return _CSTD sqrtf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sqrtf

; 266  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
tv67 = 40
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rsp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
