; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	?test_radialGradient@@YAHXZ			; test_radialGradient
PUBLIC	??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z ; glm::radialGradient<float,0>
PUBLIC	?test_linearGradient@@YAHXZ			; test_linearGradient
PUBLIC	??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z ; glm::linearGradient<float,0>
PUBLIC	main
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$pow2@M@glm@@YAMAEBM@Z			; glm::pow2<float>
PUBLIC	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
PUBLIC	?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
EXTRN	__imp_sqrtf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_radialGradient@@YAHXZ DD imagerel $LN6
	DD	imagerel $LN6+183
	DD	imagerel $unwind$?test_radialGradient@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z DD imagerel $LN3
	DD	imagerel $LN3+420
	DD	imagerel $unwind$??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_linearGradient@@YAHXZ DD imagerel $LN6
	DD	imagerel $LN6+164
	DD	imagerel $unwind$?test_linearGradient@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z DD imagerel $LN3
	DD	imagerel $LN3+197
	DD	imagerel $unwind$??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pow2@M@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$pow2@M@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DD	08H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pow2@M@glm@@YAMAEBM@Z DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z$rtcName$0 DB 044H ; glm::linearGradient<float,0>
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+11
??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z$rtcVarDesc DD 038H ; glm::linearGradient<float,0>
	DD	08H
	DQ	FLAT:??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z$rtcName$0
	ORG $+48
??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z$rtcFrameData DD 01H ; glm::linearGradient<float,0>
	DD	00H
	DQ	FLAT:??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z DD 033501H
	DD	012011cH
	DD	07015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z$rtcName$0 DB 046H ; glm::radialGradient<float,0>
	DB	00H
	ORG $+2
??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z$rtcName$1 DB 044H ; glm::radialGradient<float,0>
	DB	00H
	ORG $+10
??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z$rtcVarDesc DD 058H ; glm::radialGradient<float,0>
	DD	08H
	DQ	FLAT:??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z$rtcName$0
	ORG $+96
??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z$rtcFrameData DD 02H ; glm::radialGradient<float,0>
	DD	00H
	DQ	FLAT:??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$?test_radialGradient@@YAHXZ DD 020601H
	DD	07002b206H
$unwind$?test_linearGradient@@YAHXZ DD 020601H
	DD	07002b206H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 573  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 574  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 			v1.x * v2.x,
; 576  : 			v1.y * v2.y);
; 577  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 96
y$ = 104
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call, COMDAT

; 47   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 48   : 			tvec2<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 49   : 			return tmp.x + tmp.y;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]

; 50   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec2>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\optimum_pow.inl
;	COMDAT ??$pow2@M@glm@@YAMAEBM@Z
_TEXT	SEGMENT
x$ = 32
??$pow2@M@glm@@YAMAEBM@Z PROC				; glm::pow2<float>, COMDAT

; 8    : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 9    : 		return x * x;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]

; 10   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$pow2@M@glm@@YAMAEBM@Z ENDP				; glm::pow2<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_gradient_paint.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 24   : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 25   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 26   : 
; 27   :     Error += test_radialGradient();

	call	?test_radialGradient@@YAHXZ		; test_radialGradient
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 28   :     Error += test_linearGradient();

	call	?test_linearGradient@@YAHXZ		; test_linearGradient
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 29   :     
; 30   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 31   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\gradient_paint.inl
;	COMDAT ??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z
_TEXT	SEGMENT
Dist$ = 56
tv75 = 68
Point0$ = 96
Point1$ = 104
Position$ = 112
??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z PROC ; glm::linearGradient<float,0>, COMDAT

; 33   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 34   : 		tvec2<T, P> Dist = Point1 - Point0;

	mov	r8, QWORD PTR Point0$[rsp]
	mov	rdx, QWORD PTR Point1$[rsp]
	lea	rcx, QWORD PTR Dist$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 35   : 		return (Dist.x * (Position.x - Point0.x) + Dist.y * (Position.y - Point0.y)) / glm::dot(Dist, Dist);

	mov	rax, QWORD PTR Position$[rsp]
	mov	rcx, QWORD PTR Point0$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR Dist$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Position$[rsp]
	mov	rcx, QWORD PTR Point0$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	xmm2, DWORD PTR Dist$[rsp+4]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR tv75[rsp], xmm0
	lea	rdx, QWORD PTR Dist$[rsp]
	lea	rcx, QWORD PTR Dist$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	xmm1, DWORD PTR tv75[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1

; 36   : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z ENDP ; glm::linearGradient<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_gradient_paint.cpp
_TEXT	SEGMENT
Error$ = 32
Gradient$ = 36
$T1 = 40
$T2 = 48
$T3 = 56
tv66 = 64
tv70 = 72
tv78 = 80
?test_linearGradient@@YAHXZ PROC			; test_linearGradient

; 14   : {

$LN6:
	push	rdi
	sub	rsp, 96					; 00000060H

; 15   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 16   : 
; 17   : 	float Gradient = glm::linearGradient(glm::vec2(0), glm::vec2(1), glm::vec2(0.5));

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv70[rsp], rax
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR tv70[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$linearGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@00@Z ; glm::linearGradient<float,0>
	movss	DWORD PTR Gradient$[rsp], xmm0

; 18   : 	Error += Gradient != 0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR Gradient$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN5@test_linea
	je	SHORT $LN3@test_linea
$LN5@test_linea:
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN4@test_linea
$LN3@test_linea:
	mov	DWORD PTR tv78[rsp], 1
$LN4@test_linea:
	mov	eax, DWORD PTR tv78[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 19   : 
; 20   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 21   : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?test_linearGradient@@YAHXZ ENDP			; test_linearGradient
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\gradient_paint.inl
;	COMDAT ??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z
_TEXT	SEGMENT
F$ = 56
D$ = 88
Radius2$ = 100
Fx2$ = 104
Fy2$ = 108
Numerator$ = 112
Denominator$ = 116
$T5 = 120
tv78 = 124
tv80 = 128
tv85 = 132
Center$ = 160
Radius$ = 168
Focal$ = 176
Position$ = 184
??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z PROC ; glm::radialGradient<float,0>, COMDAT

; 14   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 15   : 		tvec2<T, P> F = Focal - Center;

	mov	r8, QWORD PTR Center$[rsp]
	mov	rdx, QWORD PTR Focal$[rsp]
	lea	rcx, QWORD PTR F$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 16   : 		tvec2<T, P> D = Position - Focal;

	mov	r8, QWORD PTR Focal$[rsp]
	mov	rdx, QWORD PTR Position$[rsp]
	lea	rcx, QWORD PTR D$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 17   : 		T Radius2 = pow2(Radius);

	mov	rcx, QWORD PTR Radius$[rsp]
	call	??$pow2@M@glm@@YAMAEBM@Z		; glm::pow2<float>
	movss	DWORD PTR Radius2$[rsp], xmm0

; 18   : 		T Fx2 = pow2(F.x);

	lea	rcx, QWORD PTR F$[rsp]
	call	??$pow2@M@glm@@YAMAEBM@Z		; glm::pow2<float>
	movss	DWORD PTR Fx2$[rsp], xmm0

; 19   : 		T Fy2 = pow2(F.y);

	lea	rcx, QWORD PTR F$[rsp+4]
	call	??$pow2@M@glm@@YAMAEBM@Z		; glm::pow2<float>
	movss	DWORD PTR Fy2$[rsp], xmm0

; 20   : 
; 21   : 		T Numerator = (D.x * F.x + D.y * F.y) + sqrt(Radius2 * (pow2(D.x) + pow2(D.y)) - pow2(D.x * F.y - D.y * F.x));

	movss	xmm0, DWORD PTR D$[rsp]
	mulss	xmm0, DWORD PTR F$[rsp+4]
	movss	xmm1, DWORD PTR D$[rsp+4]
	mulss	xmm1, DWORD PTR F$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR $T5[rsp], xmm0
	movss	xmm0, DWORD PTR D$[rsp]
	mulss	xmm0, DWORD PTR F$[rsp]
	movss	xmm1, DWORD PTR D$[rsp+4]
	mulss	xmm1, DWORD PTR F$[rsp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR tv78[rsp], xmm0
	lea	rcx, QWORD PTR D$[rsp]
	call	??$pow2@M@glm@@YAMAEBM@Z		; glm::pow2<float>
	movss	DWORD PTR tv80[rsp], xmm0
	lea	rcx, QWORD PTR D$[rsp+4]
	call	??$pow2@M@glm@@YAMAEBM@Z		; glm::pow2<float>
	movss	xmm1, DWORD PTR tv80[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR Radius2$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv85[rsp], xmm0
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$pow2@M@glm@@YAMAEBM@Z		; glm::pow2<float>
	movss	xmm1, DWORD PTR tv85[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	?sqrt@@YAMM@Z				; sqrt
	movss	xmm1, DWORD PTR tv78[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Numerator$[rsp], xmm0

; 22   : 		T Denominator = Radius2 - (Fx2 + Fy2);

	movss	xmm0, DWORD PTR Fx2$[rsp]
	addss	xmm0, DWORD PTR Fy2$[rsp]
	movss	xmm1, DWORD PTR Radius2$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Denominator$[rsp], xmm0

; 23   : 		return Numerator / Denominator;

	movss	xmm0, DWORD PTR Numerator$[rsp]
	divss	xmm0, DWORD PTR Denominator$[rsp]

; 24   : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z ENDP ; glm::radialGradient<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_gradient_paint.cpp
_TEXT	SEGMENT
Error$ = 32
Gradient$ = 36
$T1 = 40
$T2 = 48
$T3 = 56
$T4 = 60
tv66 = 72
tv70 = 80
tv79 = 88
?test_radialGradient@@YAHXZ PROC			; test_radialGradient

; 4    : {

$LN6:
	push	rdi
	sub	rsp, 96					; 00000060H

; 5    : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 6    : 	
; 7    : 	float Gradient = glm::radialGradient(glm::vec2(0), 1.0f, glm::vec2(1), glm::vec2(0.5));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T3[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv70[rsp], rax
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv70[rsp]
	mov	r8, rcx
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rcx, rax
	call	??$radialGradient@M$0A@@glm@@YAMAEBU?$tvec2@M$0A@@0@AEBM00@Z ; glm::radialGradient<float,0>
	movss	DWORD PTR Gradient$[rsp], xmm0

; 8    : 	Error += Gradient != 0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR Gradient$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN5@test_radia
	je	SHORT $LN3@test_radia
$LN5@test_radia:
	mov	DWORD PTR tv79[rsp], 0
	jmp	SHORT $LN4@test_radia
$LN3@test_radia:
	mov	DWORD PTR tv79[rsp], 1
$LN4@test_radia:
	mov	eax, DWORD PTR tv79[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 9    : 	
; 10   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 11   : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?test_radialGradient@@YAHXZ ENDP			; test_radialGradient
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 264  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 265  :     return _CSTD sqrtf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sqrtf

; 266  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
END
