; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG76078 DB	'invalid argument', 00H
	ORG $+3
$SG76079 DB	'%s', 00H
	ORG $+1
$SG76083 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG76080 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+2
$SG76082 DB	00H, 00H
	ORG $+2
$SG70064 DB	'true', 00H
	ORG $+3
$SG76081 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG70066 DB	'false', 00H
CONST	ENDS
PUBLIC	?epsilon@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::epsilon
PUBLIC	?infinity@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::infinity
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?atan2@@YAMMM@Z					; atan2
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?log@@YAMM@Z					; log
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??$epsilonEqual@M@glm@@YA_NAEBM00@Z		; glm::epsilonEqual<float>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??$clamp@M@glm@@YAMMMM@Z			; glm::clamp<float>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$max@M@glm@@YAMMM@Z				; glm::max<float>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	?test_quat_fastMix@@YAHXZ			; test_quat_fastMix
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@XZ			; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z		; glm::tquat<float,0>::tquat<float,0>
PUBLIC	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
PUBLIC	??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z ; glm::angleAxis<float,0>
PUBLIC	??$pi@M@glm@@YAMXZ				; glm::pi<float>
PUBLIC	??$fastMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z ; glm::fastMix<float,0>
PUBLIC	?test_quat_shortMix@@YAHXZ			; test_quat_shortMix
PUBLIC	??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z ; glm::shortMix<float,0>
PUBLIC	?test_orientation@@YAHXZ			; test_orientation
PUBLIC	??$roll@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z	; glm::roll<float,0>
PUBLIC	??$pitch@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z	; glm::pitch<float,0>
PUBLIC	??$yaw@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z	; glm::yaw<float,0>
PUBLIC	?test_rotation@@YAHXZ				; test_rotation
PUBLIC	??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::rotation<float,0>
PUBLIC	??$angle@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z	; glm::angle<float,0>
PUBLIC	??$epsilon@M@glm@@YAMXZ				; glm::epsilon<float>
PUBLIC	?test_log@@YAHXZ				; test_log
PUBLIC	??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::log<float,0>
PUBLIC	??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::exp<float,0>
PUBLIC	main
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	??$min@M@glm@@YAMMM@Z				; glm::min<float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0>
PUBLIC	??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z ; glm::dot<float,0,glm::tquat>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z	; glm::operator-<float,0>
PUBLIC	??$atan@M@glm@@YAMMM@Z				; glm::atan<float>
PUBLIC	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
PUBLIC	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
PUBLIC	??$length2@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length2<float,0,glm::tvec3>
PUBLIC	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>
PUBLIC	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z	; glm::operator*<float,0>
PUBLIC	??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tquat<float,0>::operator+=<float>
PUBLIC	??$length@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z	; glm::length<float,0>
PUBLIC	?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
PUBLIC	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
PUBLIC	?call@?$compute_length2@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length2<glm::tvec3,float,0,0>::call
PUBLIC	?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,float,0,0>::call
PUBLIC	??$inversesqrt@M@glm@@YAMM@Z			; glm::inversesqrt<float>
PUBLIC	?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_quat_add<float,0,0>::call
PUBLIC	__real@00000000
PUBLIC	__real@34000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40490fdb
PUBLIC	__real@7f800000
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp_acosf:PROC
EXTRN	__imp_asinf:PROC
EXTRN	__imp_atan2f:PROC
EXTRN	__imp_cosf:PROC
EXTRN	__imp_logf:PROC
EXTRN	__imp_sinf:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?epsilon@?$numeric_limits@M@std@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?epsilon@?$numeric_limits@M@std@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?infinity@?$numeric_limits@M@std@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?infinity@?$numeric_limits@M@std@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?acos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?acos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?asin@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?asin@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?atan2@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?atan2@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?cos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?log@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?log@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sin@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sin@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M@glm@@YAMMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$clamp@M@glm@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$max@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_quat_fastMix@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+692
	DD	imagerel $unwind$?test_quat_fastMix@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+247
	DD	imagerel $unwind$??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pi@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$??$pi@M@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$??$fastMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_quat_shortMix@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+692
	DD	imagerel $unwind$?test_quat_shortMix@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z DD imagerel $LN8
	DD	imagerel $LN8+787
	DD	imagerel $unwind$??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_orientation@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+441
	DD	imagerel $unwind$?test_orientation@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$roll@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+184
	DD	imagerel $unwind$??$roll@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pitch@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+184
	DD	imagerel $unwind$??$pitch@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$yaw@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$yaw@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_rotation@@YAHXZ DD imagerel $LN5
	DD	imagerel $LN5+258
	DD	imagerel $unwind$?test_rotation@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN6
	DD	imagerel $LN6+702
	DD	imagerel $unwind$??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$angle@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??$angle@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilon@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??$epsilon@M@glm@@YAMXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_log@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$?test_log@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD imagerel $LN9
	DD	imagerel $LN9+796
	DD	imagerel $unwind$??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD imagerel $LN4
	DD	imagerel $LN4+274
	DD	imagerel $unwind$??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$min@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+165
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD imagerel $LN4
	DD	imagerel $LN4+280
	DD	imagerel $unwind$??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+152
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$atan@M@glm@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??$atan@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length2@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length2@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$length@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+237
	DD	imagerel $unwind$?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+190
	DD	imagerel $unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length2@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$?call@?$compute_length2@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inversesqrt@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$inversesqrt@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+168
	DD	imagerel $unwind$?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@7f800000
CONST	SEGMENT
__real@7f800000 DD 07f800000r			; inf
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@34000000
CONST	SEGMENT
__real@34000000 DD 034000000r			; 1.19209e-07
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inversesqrt@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length2@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcVarDesc DD 048H ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length2@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$atan@M@glm@@YAMMM@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD 032b01H
	DD	0120112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcName$0 DB 075H ; glm::exp<float,0>
	DB	00H
	ORG $+2
??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcName$1 DB 076H ; glm::exp<float,0>
	DB	00H
	ORG $+10
??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 058H ; glm::exp<float,0>
	DD	0cH
	DQ	FLAT:??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcName$0
	ORG $+96
??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcFrameData DD 02H ; glm::exp<float,0>
	DD	00H
	DQ	FLAT:??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z DD 032b01H
	DD	0140112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcName$0 DB 075H ; glm::log<float,0>
	DB	00H
	ORG $+14
??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 038H ; glm::log<float,0>
	DD	0cH
	DQ	FLAT:??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcName$0
	ORG $+48
??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcFrameData DD 01H ; glm::log<float,0>
	DD	00H
	DQ	FLAT:??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilon@M@glm@@YAMXZ DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$angle@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 043101H
	DD	01b0118H
	DD	060107011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 072H ; glm::rotation<float,0>
	DB	06fH
	DB	074H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	041H
	DB	078H
	DB	069H
	DB	073H
	DB	00H
	ORG $+3
??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 048H ; glm::rotation<float,0>
	DD	0cH
	DQ	FLAT:??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::rotation<float,0>
	DD	00H
	DQ	FLAT:??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$yaw@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pitch@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$roll@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z DD 043601H
	DD	015011dH
	DD	060157016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z$rtcName$0 DB 079H ; glm::shortMix<float,0>
	DB	032H
	DB	00H
	ORG $+13
??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z$rtcVarDesc DD 048H ; glm::shortMix<float,0>
	DD	010H
	DQ	FLAT:??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z$rtcName$0
	ORG $+48
??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z$rtcFrameData DD 01H ; glm::shortMix<float,0>
	DD	00H
	DQ	FLAT:??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z DD 021901H
	DD	07015b219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pi@M@glm@@YAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 052H ; glm::angleAxis<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::angleAxis<float,0>
	DD	010H
	DQ	FLAT:??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::angleAxis<float,0>
	DD	00H
	DQ	FLAT:??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tquat@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
xdata	SEGMENT
$unwind$?test_quat_fastMix@@YAHXZ DD 031a01H
	DD	0280109H
	DD	07002H
$unwind$?test_quat_shortMix@@YAHXZ DD 031a01H
	DD	0280109H
	DD	07002H
$unwind$?test_orientation@@YAHXZ DD 031a01H
	DD	0200109H
	DD	07002H
$unwind$?test_rotation@@YAHXZ DD 031a01H
	DD	0180109H
	DD	07002H
$unwind$?test_log@@YAHXZ DD 031a01H
	DD	0180109H
	DD	07002H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
	ORG $+2
?test_quat_fastMix@@YAHXZ$rtcName$0 DB 041H		; test_quat_fastMix
	DB	00H
	ORG $+2
?test_quat_fastMix@@YAHXZ$rtcName$1 DB 042H		; test_quat_fastMix
	DB	00H
	ORG $+2
?test_quat_fastMix@@YAHXZ$rtcName$2 DB 043H		; test_quat_fastMix
	DB	00H
	ORG $+2
?test_quat_fastMix@@YAHXZ$rtcName$3 DB 044H		; test_quat_fastMix
	DB	00H
	ORG $+6
?test_quat_fastMix@@YAHXZ$rtcVarDesc DD 0c8H		; test_quat_fastMix
	DD	010H
	DQ	FLAT:?test_quat_fastMix@@YAHXZ$rtcName$3
	DD	098H
	DD	010H
	DQ	FLAT:?test_quat_fastMix@@YAHXZ$rtcName$2
	DD	068H
	DD	010H
	DQ	FLAT:?test_quat_fastMix@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test_quat_fastMix@@YAHXZ$rtcName$0
	ORG $+192
?test_quat_fastMix@@YAHXZ$rtcFrameData DD 04H		; test_quat_fastMix
	DD	00H
	DQ	FLAT:?test_quat_fastMix@@YAHXZ$rtcVarDesc
?test_quat_shortMix@@YAHXZ$rtcName$0 DB 041H		; test_quat_shortMix
	DB	00H
	ORG $+2
?test_quat_shortMix@@YAHXZ$rtcName$1 DB 042H		; test_quat_shortMix
	DB	00H
	ORG $+2
?test_quat_shortMix@@YAHXZ$rtcName$2 DB 043H		; test_quat_shortMix
	DB	00H
	ORG $+2
?test_quat_shortMix@@YAHXZ$rtcName$3 DB 044H		; test_quat_shortMix
	DB	00H
	ORG $+2
?test_quat_shortMix@@YAHXZ$rtcVarDesc DD 0c8H		; test_quat_shortMix
	DD	010H
	DQ	FLAT:?test_quat_shortMix@@YAHXZ$rtcName$3
	DD	098H
	DD	010H
	DQ	FLAT:?test_quat_shortMix@@YAHXZ$rtcName$2
	DD	068H
	DD	010H
	DQ	FLAT:?test_quat_shortMix@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test_quat_shortMix@@YAHXZ$rtcName$0
	ORG $+192
?test_quat_shortMix@@YAHXZ$rtcFrameData DD 04H		; test_quat_shortMix
	DD	00H
	DQ	FLAT:?test_quat_shortMix@@YAHXZ$rtcVarDesc
?test_orientation@@YAHXZ$rtcName$0 DB 071H		; test_orientation
	DB	00H
	ORG $+2
?test_orientation@@YAHXZ$rtcName$1 DB 071H		; test_orientation
	DB	00H
	ORG $+2
?test_orientation@@YAHXZ$rtcName$2 DB 071H		; test_orientation
	DB	00H
	ORG $+6
?test_orientation@@YAHXZ$rtcVarDesc DD 0a8H		; test_orientation
	DD	010H
	DQ	FLAT:?test_orientation@@YAHXZ$rtcName$2
	DD	078H
	DD	010H
	DQ	FLAT:?test_orientation@@YAHXZ$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:?test_orientation@@YAHXZ$rtcName$0
	ORG $+144
?test_orientation@@YAHXZ$rtcFrameData DD 03H		; test_orientation
	DD	00H
	DQ	FLAT:?test_orientation@@YAHXZ$rtcVarDesc
?test_rotation@@YAHXZ$rtcName$0 DB 076H			; test_rotation
	DB	00H
	ORG $+2
?test_rotation@@YAHXZ$rtcName$1 DB 075H			; test_rotation
	DB	00H
	ORG $+2
?test_rotation@@YAHXZ$rtcName$2 DB 052H			; test_rotation
	DB	06fH
	DB	074H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+7
?test_rotation@@YAHXZ$rtcFrameData DD 03H		; test_rotation
	DD	00H
	DQ	FLAT:?test_rotation@@YAHXZ$rtcVarDesc
?test_log@@YAHXZ$rtcName$0 DB 071H			; test_log
	DB	00H
	ORG $+6
?test_rotation@@YAHXZ$rtcVarDesc DD 098H		; test_rotation
	DD	010H
	DQ	FLAT:?test_rotation@@YAHXZ$rtcName$2
	DD	068H
	DD	0cH
	DQ	FLAT:?test_rotation@@YAHXZ$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:?test_rotation@@YAHXZ$rtcName$0
	ORG $+144
?test_log@@YAHXZ$rtcName$1 DB 070H			; test_log
	DB	00H
	ORG $+2
?test_log@@YAHXZ$rtcName$2 DB 072H			; test_log
	DB	00H
	ORG $+2
?test_log@@YAHXZ$rtcFrameData DD 03H			; test_log
	DD	00H
	DQ	FLAT:?test_log@@YAHXZ$rtcVarDesc
	ORG $+8
?test_log@@YAHXZ$rtcVarDesc DD 098H			; test_log
	DD	010H
	DQ	FLAT:?test_log@@YAHXZ$rtcName$2
	DD	068H
	DD	010H
	DQ	FLAT:?test_log@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test_log@@YAHXZ$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M@glm@@YAMMMM@Z DD 021701H
	DD	070135217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sin@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?log@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?atan2@@YAMMM@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?asin@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?acos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?infinity@?$numeric_limits@M@std@@SAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?epsilon@?$numeric_limits@M@std@@SAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
__$ReturnUdt$ = 80
q$ = 88
p$ = 96
?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_quat_add<float,0,0>::call, COMDAT

; 26   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 27   : 			return tquat<T, P>(q.w + p.w, q.x + p.x, q.y + p.y, q.z + p.z);

	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR $T2[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T3[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 28   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_quat_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$inversesqrt@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$inversesqrt@M@glm@@YAMM@Z PROC			; glm::inversesqrt<float>, COMDAT

; 131  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 132  : 		return static_cast<genType>(1) / sqrt(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?sqrt@@YAMM@Z				; sqrt
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1

; 133  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$inversesqrt@M@glm@@YAMM@Z ENDP			; glm::inversesqrt<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec3,float,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	call	?sqrt@@YAMM@Z				; sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call, COMDAT

; 91   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 92   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");
; 93   : 
; 94   : 			return v * inversesqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	call	??$inversesqrt@M@glm@@YAMM@Z		; glm::inversesqrt<float>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 95   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\norm.inl
;	COMDAT ?call@?$compute_length2@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length2@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z PROC ; glm::detail::compute_length2<glm::tvec3,float,0,0>::call, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 14   : 			return dot(v, v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>

; 15   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length2@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ENDP ; glm::detail::compute_length2<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv88 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<float,0,0>::call, COMDAT

; 77   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx+4]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm2, DWORD PTR [rax+8]
	mulss	xmm2, DWORD PTR [rcx]
	subss	xmm1, xmm2
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm3, DWORD PTR [rax+4]
	mulss	xmm3, DWORD PTR [rcx+8]
	subss	xmm2, xmm3
	movss	DWORD PTR tv88[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv88[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call, COMDAT

; 57   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 59   : 			return tmp.x + tmp.y + tmp.z;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	addss	xmm0, DWORD PTR tmp$[rsp+8]

; 60   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 72
tv80 = 100
x$ = 128
y$ = 136
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tquat,float,0,0>::call, COMDAT

; 16   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 17   : 			tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 18   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	movss	xmm1, DWORD PTR tmp$[rsp+8]
	addss	xmm1, DWORD PTR tmp$[rsp+12]
	addss	xmm0, xmm1

; 19   : 		}

	movdqu	XMMWORD PTR [rsp+40], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+40]
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tquat,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$length@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
q$ = 64
??$length@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z PROC	; glm::length<float,0>, COMDAT

; 374  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 375  : 		return glm::sqrt(dot(q, q));

	mov	rdx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	call	??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z ; glm::dot<float,0,glm::tquat>
	call	?sqrt@@YAMM@Z				; sqrt

; 376  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z ENDP	; glm::length<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
q$ = 104
??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tquat<float,0>::operator+=<float>, COMDAT

; 241  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 242  : 		return (*this = detail::compute_quat_add<T, P, detail::is_aligned<P>::value>::call(*this, tquat<T, P>(q)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR q$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_quat_add@M$0A@$0A@@detail@glm@@SA?AU?$tquat@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_quat_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 243  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tquat<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
scalar$ = 72
v$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 646  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 647  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	mulss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR scalar$[rsp]
	mulss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mulss	xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 648  : 			scalar * v.x,
; 649  : 			scalar * v.y,
; 650  : 			scalar * v.z);
; 651  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::length<float,0,glm::tvec3>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,float,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::length<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::normalize<float,0,glm::tvec3>, COMDAT

; 195  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 196  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");
; 197  : 
; 198  : 		return detail::compute_normalize<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::normalize<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\norm.inl
;	COMDAT ??$length2@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length2@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::length2<float,0,glm::tvec3>, COMDAT

; 28   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 29   : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length2' accepts only floating-point inputs");
; 30   : 		return detail::compute_length2<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length2@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length2<glm::tvec3,float,0,0>::call

; 31   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length2@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::length2<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::cross<float,0>, COMDAT

; 180  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 182  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::cross<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec3>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$atan@M@glm@@YAMMM@Z
_TEXT	SEGMENT
y$ = 64
x$ = 72
??$atan@M@glm@@YAMMM@Z PROC				; glm::atan<float>, COMDAT

; 88   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 89   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559, "'atan' only accept floating-point input");
; 90   : 
; 91   : 		return ::std::atan2(y, x);

	movss	xmm1, DWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR y$[rsp]
	call	?atan2@@YAMMM@Z				; atan2

; 92   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$atan@M@glm@@YAMMM@Z ENDP				; glm::atan<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
__$ReturnUdt$ = 80
q$ = 88
??$?GM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z PROC	; glm::operator-<float,0>, COMDAT

; 290  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 291  : 		return tquat<T, P>(-q.w, -q.x, -q.y, -q.z);

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T2[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T3[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 292  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tquat>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utquat@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tquat@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tquat,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tquat>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
len$ = 48
oneOverLen$ = 52
$T1 = 56
$T2 = 60
$T3 = 64
$T4 = 68
$T5 = 72
$T6 = 76
$T7 = 80
$T8 = 84
__$ReturnUdt$ = 112
q$ = 120
??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z PROC ; glm::normalize<float,0>, COMDAT

; 380  : 	{

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 381  : 		T len = length(q);

	mov	rcx, QWORD PTR q$[rsp]
	call	??$length@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z ; glm::length<float,0>
	movss	DWORD PTR len$[rsp], xmm0

; 382  : 		if(len <= T(0)) // Problem

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR len$[rsp]
	jb	SHORT $LN2@normalize

; 383  : 			return tquat<T, P>(1, 0, 0, 0);

	xorps	xmm0, xmm0
	movss	DWORD PTR $T1[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T2[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T3[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@normalize
$LN2@normalize:

; 384  : 		T oneOverLen = T(1) / len;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR len$[rsp]
	movss	DWORD PTR oneOverLen$[rsp], xmm0

; 385  : 		return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR oneOverLen$[rsp]
	movss	DWORD PTR $T5[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR oneOverLen$[rsp]
	movss	DWORD PTR $T6[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR oneOverLen$[rsp]
	movss	DWORD PTR $T7[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR oneOverLen$[rsp]
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T6[rsp]
	lea	r8, QWORD PTR $T7[rsp]
	lea	rdx, QWORD PTR $T8[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@normalize:

; 386  : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ENDP ; glm::normalize<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
q$ = 88
p$ = 96
??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 298  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 299  : 		return tquat<T, P>(q) += p;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR q$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tquat@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tquat<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 300  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
__$ReturnUdt$ = 80
q$ = 88
s$ = 96
??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z PROC	; glm::operator*<float,0>, COMDAT

; 338  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 339  : 		return tquat<T, P>(

	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T2[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T3[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 340  : 			q.w * s, q.x * s, q.y * s, q.z * s);
; 341  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$min@M@glm@@YAMMM@Z PROC				; glm::min<float>, COMDAT

; 16   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	movss	xmm0, DWORD PTR y$[rsp]
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN3@min
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@min
$LN3@min:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@min:
	movss	xmm0, DWORD PTR tv65[rsp]

; 19   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M@glm@@YAMMM@Z ENDP				; glm::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_quaternion.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 93   : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 94   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 95   : 
; 96   : 	Error += test_log();

	call	?test_log@@YAHXZ			; test_log
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 97   : 	Error += test_rotation();

	call	?test_rotation@@YAHXZ			; test_rotation
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 98   : 	Error += test_quat_fastMix();

	call	?test_quat_fastMix@@YAHXZ		; test_quat_fastMix
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 99   : 	Error += test_quat_shortMix();

	call	?test_quat_shortMix@@YAHXZ		; test_quat_shortMix
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 100  : 
; 101  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 102  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\quaternion.inl
;	COMDAT ??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
u$ = 40
Angle$ = 68
v$ = 88
$T5 = 116
$T6 = 128
__$ReturnUdt$ = 160
q$ = 168
??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z PROC	; glm::exp<float,0>, COMDAT

; 47   : 	{

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 48   : 		tvec3<T, P> u(q.x, q.y, q.z);

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm3, DWORD PTR [rax+8]
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR u$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 49   : 		T const Angle = glm::length(u);

	lea	rcx, QWORD PTR u$[rsp]
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	movss	DWORD PTR Angle$[rsp], xmm0

; 50   : 		if (Angle < epsilon<T>())

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	comiss	xmm0, DWORD PTR Angle$[rsp]
	jbe	SHORT $LN2@exp

; 51   : 			return tquat<T, P>();

	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@XZ		; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	SHORT $LN1@exp
$LN2@exp:

; 52   : 
; 53   : 		tvec3<T, P> const v(u / Angle);

	movss	xmm2, DWORD PTR Angle$[rsp]
	lea	rdx, QWORD PTR u$[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 54   : 		return tquat<T, P>(cos(Angle), sin(Angle) * v);

	movss	xmm0, DWORD PTR Angle$[rsp]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR $T6[rsp], xmm0
	movss	xmm0, DWORD PTR Angle$[rsp]
	call	?sin@@YAMM@Z				; sin
	lea	r8, QWORD PTR v$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR $T6[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z ; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@exp:

; 55   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ENDP	; glm::exp<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\quaternion.inl
;	COMDAT ??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
u$ = 56
Vec3Len$ = 84
t$4 = 88
QuatLen2$5 = 92
$T6 = 96
$T7 = 100
$T8 = 104
$T9 = 108
$T10 = 112
$T11 = 116
$T12 = 120
$T13 = 124
$T14 = 128
$T15 = 132
$T16 = 136
$T17 = 140
$T18 = 144
$T19 = 148
$T20 = 152
$T21 = 156
__$ReturnUdt$ = 176
q$ = 184
??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z PROC	; glm::log<float,0>, COMDAT

; 59   : 	{

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 60   : 		tvec3<T, P> u(q.x, q.y, q.z);

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm3, DWORD PTR [rax+8]
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR u$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 61   : 		T Vec3Len = length(u);

	lea	rcx, QWORD PTR u$[rsp]
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	movss	DWORD PTR Vec3Len$[rsp], xmm0

; 62   : 
; 63   : 		if (Vec3Len < epsilon<T>())

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	comiss	xmm0, DWORD PTR Vec3Len$[rsp]
	jbe	$LN2@log

; 64   : 		{
; 65   : 			if(q.w > static_cast<T>(0))

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN4@log

; 66   : 				return tquat<T, P>(log(q.w), static_cast<T>(0), static_cast<T>(0), static_cast<T>(0));

	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T7[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T8[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	?log@@YAMM@Z				; log
	movss	DWORD PTR $T9[rsp], xmm0
	lea	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T7[rsp]
	lea	r8, QWORD PTR $T8[rsp]
	lea	rdx, QWORD PTR $T9[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@log
	jmp	$LN5@log
$LN4@log:

; 67   : 			else if(q.w < static_cast<T>(0))

	mov	rax, QWORD PTR q$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+12]
	jbe	SHORT $LN6@log

; 68   : 				return tquat<T, P>(log(-q.w), pi<T>(), static_cast<T>(0), static_cast<T>(0));

	xorps	xmm0, xmm0
	movss	DWORD PTR $T10[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T11[rsp], xmm0
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR $T12[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	call	?log@@YAMM@Z				; log
	movss	DWORD PTR $T13[rsp], xmm0
	lea	rax, QWORD PTR $T10[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T11[rsp]
	lea	r8, QWORD PTR $T12[rsp]
	lea	rdx, QWORD PTR $T13[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@log
	jmp	SHORT $LN7@log
$LN6@log:

; 69   : 			else
; 70   : 				return tquat<T, P>(std::numeric_limits<T>::infinity(), std::numeric_limits<T>::infinity(), std::numeric_limits<T>::infinity(), std::numeric_limits<T>::infinity());

	call	?infinity@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::infinity
	movss	DWORD PTR $T14[rsp], xmm0
	call	?infinity@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::infinity
	movss	DWORD PTR $T15[rsp], xmm0
	call	?infinity@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::infinity
	movss	DWORD PTR $T16[rsp], xmm0
	call	?infinity@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::infinity
	movss	DWORD PTR $T17[rsp], xmm0
	lea	rax, QWORD PTR $T14[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T15[rsp]
	lea	r8, QWORD PTR $T16[rsp]
	lea	rdx, QWORD PTR $T17[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@log
$LN7@log:
$LN5@log:

; 71   : 		}

	jmp	$LN3@log
$LN2@log:

; 72   : 		else
; 73   : 		{
; 74   : 			T t = atan(Vec3Len, T(q.w)) / Vec3Len;

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	movss	xmm0, DWORD PTR Vec3Len$[rsp]
	call	??$atan@M@glm@@YAMMM@Z			; glm::atan<float>
	divss	xmm0, DWORD PTR Vec3Len$[rsp]
	movss	DWORD PTR t$4[rsp], xmm0

; 75   : 			T QuatLen2 = Vec3Len * Vec3Len + q.w * q.w;

	movss	xmm0, DWORD PTR Vec3Len$[rsp]
	mulss	xmm0, DWORD PTR Vec3Len$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mulss	xmm1, DWORD PTR [rcx+12]
	addss	xmm0, xmm1
	movss	DWORD PTR QuatLen2$5[rsp], xmm0

; 76   : 			return tquat<T, P>(static_cast<T>(0.5) * log(QuatLen2), t * q.x, t * q.y, t * q.z);

	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR t$4[rsp]
	mulss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR $T18[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR t$4[rsp]
	mulss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR $T19[rsp], xmm0
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR t$4[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR $T20[rsp], xmm0
	movss	xmm0, DWORD PTR QuatLen2$5[rsp]
	call	?log@@YAMM@Z				; log
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T21[rsp], xmm0
	lea	rax, QWORD PTR $T18[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T19[rsp]
	lea	r8, QWORD PTR $T20[rsp]
	lea	rdx, QWORD PTR $T21[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN3@log:
$LN1@log:

; 77   : 		}
; 78   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ENDP	; glm::log<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_quaternion.cpp
_TEXT	SEGMENT
Error$ = 32
q$ = 56
p$ = 104
r$ = 152
?test_log@@YAHXZ PROC					; test_log

; 82   : {

$LN3:
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 83   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 84   : 	
; 85   : 	glm::quat q;

	lea	rcx, QWORD PTR q$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@XZ		; glm::tquat<float,0>::tquat<float,0>

; 86   : 	glm::quat p = glm::log(q);

	lea	rdx, QWORD PTR q$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	??$log@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::log<float,0>

; 87   : 	glm::quat r = glm::exp(p);

	lea	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR r$[rsp]
	call	??$exp@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::exp<float,0>

; 88   : 
; 89   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 90   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_log@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_log@@YAHXZ ENDP					; test_log
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$epsilon@M@glm@@YAMXZ
_TEXT	SEGMENT
??$epsilon@M@glm@@YAMXZ PROC				; glm::epsilon<float>, COMDAT

; 10   : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 11   : 		return std::numeric_limits<genType>::epsilon();

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon

; 12   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilon@M@glm@@YAMXZ ENDP				; glm::epsilon<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$angle@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
x$ = 64
??$angle@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z PROC	; glm::angle<float,0>, COMDAT

; 692  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 693  : 		return acos(x.w) * T(2);

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	?acos@@YAMM@Z				; acos
	mulss	xmm0, DWORD PTR __real@40000000

; 694  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$angle@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z ENDP	; glm::angle<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\quaternion.inl
;	COMDAT ??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
cosTheta$ = 48
rotationAxis$ = 72
s$ = 100
invs$ = 104
$T4 = 108
$T5 = 120
$T6 = 132
$T7 = 144
$T8 = 156
$T9 = 168
$T10 = 172
$T11 = 184
$T12 = 188
$T13 = 192
$T14 = 196
tv85 = 200
__$ReturnUdt$ = 240
orig$ = 248
dest$ = 256
??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::rotation<float,0>, COMDAT

; 177  : 	{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+240]

; 178  : 		T cosTheta = dot(orig, dest);

	mov	rdx, QWORD PTR dest$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR cosTheta$[rsp], xmm0

; 179  : 		tvec3<T, P> rotationAxis;

	lea	rcx, QWORD PTR rotationAxis$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@XZ		; glm::tvec3<float,0>::tvec3<float,0>

; 180  : 
; 181  : 		if(cosTheta >= static_cast<T>(1) - epsilon<T>())

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR cosTheta$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN2@rotation

; 182  : 			return quat();

	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@XZ		; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@rotation
$LN2@rotation:

; 183  : 
; 184  : 		if(cosTheta < static_cast<T>(-1) + epsilon<T>())

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	xmm1, DWORD PTR __real@bf800000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	comiss	xmm0, DWORD PTR cosTheta$[rsp]
	jbe	$LN3@rotation

; 185  : 		{
; 186  : 			// special case when vectors in opposite directions :
; 187  : 			// there is no "ideal" rotation axis
; 188  : 			// So guess one; any will do as long as it's perpendicular to start
; 189  : 			// This implementation favors a rotation around the Up axis (Y),
; 190  : 			// since it's often what you want to do.
; 191  : 			rotationAxis = cross(tvec3<T, P>(0, 0, 1), orig);

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, QWORD PTR orig$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
	lea	rcx, QWORD PTR rotationAxis$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 192  : 			if(length2(rotationAxis) < epsilon<T>()) // bad luck, they were parallel, try again!

	lea	rcx, QWORD PTR rotationAxis$[rsp]
	call	??$length2@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length2<float,0,glm::tvec3>
	movss	DWORD PTR tv85[rsp], xmm0
	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	xmm1, DWORD PTR tv85[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN4@rotation

; 193  : 				rotationAxis = cross(tvec3<T, P>(1, 0, 0), orig);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, QWORD PTR orig$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
	lea	rcx, QWORD PTR rotationAxis$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
$LN4@rotation:

; 194  : 
; 195  : 			rotationAxis = normalize(rotationAxis);

	lea	rdx, QWORD PTR rotationAxis$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>
	lea	rcx, QWORD PTR rotationAxis$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 196  : 			return angleAxis(pi<T>(), rotationAxis);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR $T9[rsp], xmm0
	lea	r8, QWORD PTR rotationAxis$[rsp]
	lea	rdx, QWORD PTR $T9[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z ; glm::angleAxis<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@rotation
$LN3@rotation:

; 197  : 		}
; 198  : 
; 199  : 		// Implementation from Stan Melax's Game Programming Gems 1 article
; 200  : 		rotationAxis = cross(orig, dest);

	mov	r8, QWORD PTR dest$[rsp]
	mov	rdx, QWORD PTR orig$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
	lea	rcx, QWORD PTR rotationAxis$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 201  : 
; 202  : 		T s = sqrt((T(1) + cosTheta) * static_cast<T>(2));

	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR cosTheta$[rsp]
	mulss	xmm0, DWORD PTR __real@40000000
	call	?sqrt@@YAMM@Z				; sqrt
	movss	DWORD PTR s$[rsp], xmm0

; 203  : 		T invs = static_cast<T>(1) / s;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR invs$[rsp], xmm0

; 204  : 
; 205  : 		return tquat<T, P>(

	movss	xmm0, DWORD PTR rotationAxis$[rsp+8]
	mulss	xmm0, DWORD PTR invs$[rsp]
	movss	DWORD PTR $T11[rsp], xmm0
	movss	xmm0, DWORD PTR rotationAxis$[rsp+4]
	mulss	xmm0, DWORD PTR invs$[rsp]
	movss	DWORD PTR $T12[rsp], xmm0
	movss	xmm0, DWORD PTR rotationAxis$[rsp]
	mulss	xmm0, DWORD PTR invs$[rsp]
	movss	DWORD PTR $T13[rsp], xmm0
	movss	xmm0, DWORD PTR s$[rsp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T14[rsp], xmm0
	lea	rax, QWORD PTR $T11[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T12[rsp]
	lea	r8, QWORD PTR $T13[rsp]
	lea	rdx, QWORD PTR $T14[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@rotation:

; 206  : 			s * static_cast<T>(0.5f), 
; 207  : 			rotationAxis.x * invs,
; 208  : 			rotationAxis.y * invs,
; 209  : 			rotationAxis.z * invs);
; 210  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::rotation<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_quaternion.cpp
_TEXT	SEGMENT
Error$ = 32
v$ = 56
u$ = 104
Rotation$ = 152
Angle$ = 180
tv77 = 184
tv84 = 188
?test_rotation@@YAHXZ PROC				; test_rotation

; 66   : {

$LN5:
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 67   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 68   : 
; 69   : 	glm::vec3 v(1, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR v$[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>

; 70   : 	glm::vec3 u(0, 1, 0);

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR u$[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>

; 71   : 
; 72   : 	glm::quat Rotation = glm::rotation(v, u);

	lea	r8, QWORD PTR u$[rsp]
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR Rotation$[rsp]
	call	??$rotation@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::rotation<float,0>

; 73   : 
; 74   : 	float Angle = glm::angle(Rotation);

	lea	rcx, QWORD PTR Rotation$[rsp]
	call	??$angle@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z ; glm::angle<float,0>
	movss	DWORD PTR Angle$[rsp], xmm0

; 75   : 
; 76   : 	Error += glm::abs(Angle - glm::pi<float>() * 0.5f) < glm::epsilon<float>() ? 0 : 1;

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR Angle$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv77[rsp], xmm0
	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	xmm1, DWORD PTR tv77[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@test_rotat
	mov	DWORD PTR tv84[rsp], 0
	jmp	SHORT $LN4@test_rotat
$LN3@test_rotat:
	mov	DWORD PTR tv84[rsp], 1
$LN4@test_rotat:
	mov	eax, DWORD PTR tv84[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 77   : 
; 78   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 79   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_rotation@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_rotation@@YAHXZ ENDP				; test_rotation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$yaw@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
q$ = 64
??$yaw@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z PROC	; glm::yaw<float,0>, COMDAT

; 582  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 583  : 		return asin(clamp(T(-2) * (q.x * q.z - q.w * q.y), T(-1), T(1)));

	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mulss	xmm1, DWORD PTR [rcx+4]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@c0000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@bf800000
	call	??$clamp@M@glm@@YAMMMM@Z		; glm::clamp<float>
	call	?asin@@YAMM@Z				; asin

; 584  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$yaw@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z ENDP	; glm::yaw<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$pitch@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
tv88 = 48
q$ = 80
??$pitch@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z PROC	; glm::pitch<float,0>, COMDAT

; 576  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 577  : 		return T(atan(T(2) * (q.y * q.z + q.w * q.x), q.w * q.w - q.x * q.x - q.y * q.y + q.z * q.z));

	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm2, DWORD PTR [rax+12]
	mulss	xmm2, DWORD PTR [rcx]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	movss	DWORD PTR tv88[rsp], xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv88[rsp]
	call	??$atan@M@glm@@YAMMM@Z			; glm::atan<float>

; 578  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$pitch@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z ENDP	; glm::pitch<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$roll@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z
_TEXT	SEGMENT
tv88 = 48
q$ = 80
??$roll@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z PROC	; glm::roll<float,0>, COMDAT

; 570  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 571  : 		return T(atan(T(2) * (q.x * q.y + q.w * q.z), q.w * q.w + q.x * q.x - q.y * q.y - q.z * q.z));

	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	movss	xmm2, DWORD PTR [rax+12]
	mulss	xmm2, DWORD PTR [rcx+8]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	movss	DWORD PTR tv88[rsp], xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv88[rsp]
	call	??$atan@M@glm@@YAMMM@Z			; glm::atan<float>

; 572  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$roll@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z ENDP	; glm::roll<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_quaternion.cpp
_TEXT	SEGMENT
Error$ = 48
q$6 = 72
p$7 = 100
q$8 = 120
p$9 = 148
q$10 = 168
p$11 = 196
$T12 = 200
$T13 = 204
$T14 = 208
$T15 = 212
$T16 = 216
$T17 = 220
$T18 = 224
$T19 = 228
$T20 = 232
$T21 = 236
$T22 = 240
$T23 = 244
?test_orientation@@YAHXZ PROC				; test_orientation

; 44   : {

$LN3:
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 45   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 46   : 
; 47   : 	{
; 48   : 		glm::quat q(1.0f, 0.0f, 0.0f, 1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T12[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T13[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T14[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T15[rsp], xmm0
	lea	rax, QWORD PTR $T12[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T13[rsp]
	lea	r8, QWORD PTR $T14[rsp]
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR q$6[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>

; 49   : 		float p = glm::roll(q);

	lea	rcx, QWORD PTR q$6[rsp]
	call	??$roll@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z ; glm::roll<float,0>
	movss	DWORD PTR p$7[rsp], xmm0

; 50   : 	}
; 51   : 
; 52   : 	{
; 53   : 		glm::quat q(1.0f, 0.0f, 0.0f, 1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T16[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T17[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T18[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T19[rsp], xmm0
	lea	rax, QWORD PTR $T16[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T17[rsp]
	lea	r8, QWORD PTR $T18[rsp]
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR q$8[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>

; 54   : 		float p = glm::pitch(q);

	lea	rcx, QWORD PTR q$8[rsp]
	call	??$pitch@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z ; glm::pitch<float,0>
	movss	DWORD PTR p$9[rsp], xmm0

; 55   : 	}
; 56   : 
; 57   : 	{
; 58   : 		glm::quat q(1.0f, 0.0f, 0.0f, 1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T20[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T21[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T22[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T23[rsp], xmm0
	lea	rax, QWORD PTR $T20[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T21[rsp]
	lea	r8, QWORD PTR $T22[rsp]
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR q$10[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>

; 59   : 		float p = glm::yaw(q);

	lea	rcx, QWORD PTR q$10[rsp]
	call	??$yaw@M$0A@@glm@@YAMAEBU?$tquat@M$0A@@0@@Z ; glm::yaw<float,0>
	movss	DWORD PTR p$11[rsp], xmm0

; 60   : 	}
; 61   : 
; 62   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 63   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_orientation@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
?test_orientation@@YAHXZ ENDP				; test_orientation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\quaternion.inl
;	COMDAT ??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z
_TEXT	SEGMENT
fCos$ = 48
y2$ = 72
k0$ = 100
k1$ = 104
fSin$4 = 108
fAngle$5 = 112
fOneOverSin$6 = 116
$T7 = 120
$T8 = 136
$T9 = 140
$T10 = 144
$T11 = 148
__$ReturnUdt$ = 192
x$ = 200
y$ = 208
a$ = 216
??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z PROC ; glm::shortMix<float,0>, COMDAT

; 134  : 	{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]

; 135  : 		if(a <= static_cast<T>(0)) return x;

	mov	rax, QWORD PTR a$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN2@shortMix
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR x$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@shortMix
$LN2@shortMix:

; 136  : 		if(a >= static_cast<T>(1)) return y;

	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN3@shortMix
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR y$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	jmp	$LN1@shortMix
$LN3@shortMix:

; 137  : 
; 138  : 		T fCos = dot(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??$dot@M$0A@Utquat@glm@@@glm@@YAMAEBU?$tquat@M$0A@@0@0@Z ; glm::dot<float,0,glm::tquat>
	movss	DWORD PTR fCos$[rsp], xmm0

; 139  : 		tquat<T, P> y2(y); //BUG!!! tquat<T> y2;

	lea	rax, QWORD PTR y2$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR y$[rsp]
	mov	ecx, 16
	rep movsb

; 140  : 		if(fCos < static_cast<T>(0))

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR fCos$[rsp]
	jbe	SHORT $LN4@shortMix

; 141  : 		{
; 142  : 			y2 = -y;

	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR y2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 143  : 			fCos = -fCos;

	movss	xmm0, DWORD PTR fCos$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR fCos$[rsp], xmm0
$LN4@shortMix:

; 144  : 		}
; 145  : 
; 146  : 		//if(fCos > 1.0f) // problem
; 147  : 		T k0, k1;
; 148  : 		if(fCos > (static_cast<T>(1) - epsilon<T>()))

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR fCos$[rsp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@shortMix

; 149  : 		{
; 150  : 			k0 = static_cast<T>(1) - a;

	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR k0$[rsp], xmm0

; 151  : 			k1 = static_cast<T>(0) + a; //BUG!!! 1.0f + a;

	mov	rax, QWORD PTR a$[rsp]
	xorps	xmm0, xmm0
	addss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR k1$[rsp], xmm0

; 152  : 		}

	jmp	$LN6@shortMix
$LN5@shortMix:

; 153  : 		else
; 154  : 		{
; 155  : 			T fSin = sqrt(T(1) - fCos * fCos);

	movss	xmm0, DWORD PTR fCos$[rsp]
	mulss	xmm0, DWORD PTR fCos$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	?sqrt@@YAMM@Z				; sqrt
	movss	DWORD PTR fSin$4[rsp], xmm0

; 156  : 			T fAngle = atan(fSin, fCos);

	movss	xmm1, DWORD PTR fCos$[rsp]
	movss	xmm0, DWORD PTR fSin$4[rsp]
	call	??$atan@M@glm@@YAMMM@Z			; glm::atan<float>
	movss	DWORD PTR fAngle$5[rsp], xmm0

; 157  : 			T fOneOverSin = static_cast<T>(1) / fSin;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR fSin$4[rsp]
	movss	DWORD PTR fOneOverSin$6[rsp], xmm0

; 158  : 			k0 = sin((static_cast<T>(1) - a) * fAngle) * fOneOverSin;

	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR fAngle$5[rsp]
	call	?sin@@YAMM@Z				; sin
	mulss	xmm0, DWORD PTR fOneOverSin$6[rsp]
	movss	DWORD PTR k0$[rsp], xmm0

; 159  : 			k1 = sin((static_cast<T>(0) + a) * fAngle) * fOneOverSin;

	mov	rax, QWORD PTR a$[rsp]
	xorps	xmm0, xmm0
	addss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR fAngle$5[rsp]
	call	?sin@@YAMM@Z				; sin
	mulss	xmm0, DWORD PTR fOneOverSin$6[rsp]
	movss	DWORD PTR k1$[rsp], xmm0
$LN6@shortMix:

; 160  : 		}
; 161  : 
; 162  : 		return tquat<T, P>(

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR k0$[rsp]
	mulss	xmm0, DWORD PTR [rax+8]
	movss	xmm1, DWORD PTR k1$[rsp]
	mulss	xmm1, DWORD PTR y2$[rsp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR $T8[rsp], xmm0
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR k0$[rsp]
	mulss	xmm0, DWORD PTR [rax+4]
	movss	xmm1, DWORD PTR k1$[rsp]
	mulss	xmm1, DWORD PTR y2$[rsp+4]
	addss	xmm0, xmm1
	movss	DWORD PTR $T9[rsp], xmm0
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR k0$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR k1$[rsp]
	mulss	xmm1, DWORD PTR y2$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR $T10[rsp], xmm0
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR k0$[rsp]
	mulss	xmm0, DWORD PTR [rax+12]
	movss	xmm1, DWORD PTR k1$[rsp]
	mulss	xmm1, DWORD PTR y2$[rsp+12]
	addss	xmm0, xmm1
	movss	DWORD PTR $T11[rsp], xmm0
	lea	rax, QWORD PTR $T8[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T9[rsp]
	lea	r8, QWORD PTR $T10[rsp]
	lea	rdx, QWORD PTR $T11[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tquat<float,0>::tquat<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@shortMix:

; 163  : 			k0 * x.w + k1 * y2.w,
; 164  : 			k0 * x.x + k1 * y2.x,
; 165  : 			k0 * x.y + k1 * y2.y,
; 166  : 			k0 * x.z + k1 * y2.z);
; 167  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z ENDP ; glm::shortMix<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_quaternion.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 104
C$ = 152
D$ = 200
$T7 = 228
$T8 = 240
$T9 = 244
$T10 = 256
$T11 = 260
$T12 = 264
$T13 = 276
$T14 = 280
$T15 = 284
$T16 = 288
$T17 = 292
tv134 = 296
tv142 = 300
tv150 = 304
tv158 = 308
?test_quat_shortMix@@YAHXZ PROC				; test_quat_shortMix

; 27   : {

$LN11:
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 28   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 29   : 
; 30   : 	glm::quat A = glm::angleAxis(0.0f, glm::vec3(0, 0, 1));

	xorps	xmm0, xmm0
	movss	DWORD PTR $T8[rsp], xmm0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, rax
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z ; glm::angleAxis<float,0>

; 31   : 	glm::quat B = glm::angleAxis(glm::pi<float>() * 0.5f, glm::vec3(0, 0, 1));

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T10[rsp], xmm0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, rax
	lea	rdx, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z ; glm::angleAxis<float,0>

; 32   : 	glm::quat C = glm::shortMix(A, B, 0.5f);

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T11[rsp], xmm0
	lea	r9, QWORD PTR $T11[rsp]
	lea	r8, QWORD PTR B$[rsp]
	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	??$shortMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z ; glm::shortMix<float,0>

; 33   : 	glm::quat D = glm::angleAxis(glm::pi<float>() * 0.25f, glm::vec3(0, 0, 1));

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR $T13[rsp], xmm0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, rax
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR D$[rsp]
	call	??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z ; glm::angleAxis<float,0>

; 34   : 
; 35   : 	Error += glm::epsilonEqual(C.x, D.x, 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T14[rsp], xmm0
	lea	r8, QWORD PTR $T14[rsp]
	lea	rdx, QWORD PTR D$[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_quat_
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN4@test_quat_
$LN3@test_quat_:
	mov	DWORD PTR tv134[rsp], 1
$LN4@test_quat_:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 36   : 	Error += glm::epsilonEqual(C.y, D.y, 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T15[rsp], xmm0
	lea	r8, QWORD PTR $T15[rsp]
	lea	rdx, QWORD PTR D$[rsp+4]
	lea	rcx, QWORD PTR C$[rsp+4]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_quat_
	mov	DWORD PTR tv142[rsp], 0
	jmp	SHORT $LN6@test_quat_
$LN5@test_quat_:
	mov	DWORD PTR tv142[rsp], 1
$LN6@test_quat_:
	mov	eax, DWORD PTR tv142[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 37   : 	Error += glm::epsilonEqual(C.z, D.z, 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T16[rsp], xmm0
	lea	r8, QWORD PTR $T16[rsp]
	lea	rdx, QWORD PTR D$[rsp+8]
	lea	rcx, QWORD PTR C$[rsp+8]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_quat_
	mov	DWORD PTR tv150[rsp], 0
	jmp	SHORT $LN8@test_quat_
$LN7@test_quat_:
	mov	DWORD PTR tv150[rsp], 1
$LN8@test_quat_:
	mov	eax, DWORD PTR tv150[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 38   : 	Error += glm::epsilonEqual(C.w, D.w, 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T17[rsp], xmm0
	lea	r8, QWORD PTR $T17[rsp]
	lea	rdx, QWORD PTR D$[rsp+12]
	lea	rcx, QWORD PTR C$[rsp+12]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_quat_
	mov	DWORD PTR tv158[rsp], 0
	jmp	SHORT $LN10@test_quat_
$LN9@test_quat_:
	mov	DWORD PTR tv158[rsp], 1
$LN10@test_quat_:
	mov	eax, DWORD PTR tv158[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 39   : 
; 40   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 41   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_quat_shortMix@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 320				; 00000140H
	pop	rdi
	ret	0
?test_quat_shortMix@@YAHXZ ENDP				; test_quat_shortMix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\quaternion.inl
;	COMDAT ??$fastMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 52
$T4 = 68
tv66 = 88
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
a$ = 136
??$fastMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z PROC ; glm::fastMix<float,0>, COMDAT

; 171  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 172  : 		return glm::normalize(x * (static_cast<T>(1) - a) + (y * a));

	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR $T2[rsp], xmm0
	mov	r8, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv66[rsp], rax
	lea	r8, QWORD PTR $T2[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$normalize@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 173  : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$fastMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z ENDP ; glm::fastMix<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$pi@M@glm@@YAMXZ
_TEXT	SEGMENT
??$pi@M@glm@@YAMXZ PROC					; glm::pi<float>, COMDAT

; 28   : 	{

$LN3:
	push	rdi
	sub	rsp, 16

; 29   : 		return genType(3.14159265358979323846264338327950288);

	movss	xmm0, DWORD PTR __real@40490fdb

; 30   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$pi@M@glm@@YAMXZ ENDP					; glm::pi<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
a$ = 68
s$ = 72
__$ReturnUdt$ = 112
angle$ = 120
v$ = 128
??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::angleAxis<float,0>, COMDAT

; 708  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 709  : 		tquat<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tquat<float,0>::tquat<float,0>

; 710  : 
; 711  : 		T const a(angle);

	mov	rax, QWORD PTR angle$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR a$[rsp], xmm0

; 712  : 		T const s = glm::sin(a * static_cast<T>(0.5));

	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR __real@3f000000
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR s$[rsp], xmm0

; 713  : 
; 714  : 		Result.w = glm::cos(a * static_cast<T>(0.5));

	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR __real@3f000000
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR Result$[rsp+12], xmm0

; 715  : 		Result.x = v.x * s;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR Result$[rsp], xmm0

; 716  : 		Result.y = v.y * s;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR Result$[rsp+4], xmm0

; 717  : 		Result.z = v.z * s;

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	DWORD PTR Result$[rsp+8], xmm0

; 718  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 719  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::angleAxis<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z
_TEXT	SEGMENT
this$ = 16
w$ = 24
x$ = 32
y$ = 40
z$ = 48
??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z PROC		; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 122  : 	{}

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 121  : 		: x(x), y(y), z(z), w(w)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR w$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax+12], xmm0

; 122  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@AEBM000@Z ENDP		; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
s$ = 24
v$ = 32
??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z PROC ; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 117  : 	{}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 116  : 		: x(v.x), y(v.y), z(v.z), w(s)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax+12], xmm0

; 117  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@AEBMAEBU?$tvec3@M$0A@@1@@Z ENDP ; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 112  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\quaternion.inl
;	COMDAT ??0?$tquat@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tquat@M$0A@@glm@@QEAA@XZ PROC			; glm::tquat<float,0>::tquat<float,0>, COMDAT

; 92   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 90   : 				: x(0), y(0), z(0), w(1)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+12], xmm0

; 92   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tquat@M$0A@@glm@@QEAA@XZ ENDP			; glm::tquat<float,0>::tquat<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_quaternion.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 104
C$ = 152
D$ = 200
$T7 = 228
$T8 = 240
$T9 = 244
$T10 = 256
$T11 = 260
$T12 = 264
$T13 = 276
$T14 = 280
$T15 = 284
$T16 = 288
$T17 = 292
tv134 = 296
tv142 = 300
tv150 = 304
tv158 = 308
?test_quat_fastMix@@YAHXZ PROC				; test_quat_fastMix

; 10   : {

$LN11:
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 12   : 
; 13   : 	glm::quat A = glm::angleAxis(0.0f, glm::vec3(0, 0, 1));

	xorps	xmm0, xmm0
	movss	DWORD PTR $T8[rsp], xmm0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, rax
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z ; glm::angleAxis<float,0>

; 14   : 	glm::quat B = glm::angleAxis(glm::pi<float>() * 0.5f, glm::vec3(0, 0, 1));

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T10[rsp], xmm0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, rax
	lea	rdx, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z ; glm::angleAxis<float,0>

; 15   : 	glm::quat C = glm::fastMix(A, B, 0.5f);

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T11[rsp], xmm0
	lea	r9, QWORD PTR $T11[rsp]
	lea	r8, QWORD PTR B$[rsp]
	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	??$fastMix@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBU10@0AEBM@Z ; glm::fastMix<float,0>

; 16   : 	glm::quat D = glm::angleAxis(glm::pi<float>() * 0.25f, glm::vec3(0, 0, 1));

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR $T13[rsp], xmm0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, rax
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR D$[rsp]
	call	??$angleAxis@M$0A@@glm@@YA?AU?$tquat@M$0A@@0@AEBMAEBU?$tvec3@M$0A@@0@@Z ; glm::angleAxis<float,0>

; 17   : 
; 18   : 	Error += glm::epsilonEqual(C.x, D.x, 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T14[rsp], xmm0
	lea	r8, QWORD PTR $T14[rsp]
	lea	rdx, QWORD PTR D$[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_quat_
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN4@test_quat_
$LN3@test_quat_:
	mov	DWORD PTR tv134[rsp], 1
$LN4@test_quat_:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 19   : 	Error += glm::epsilonEqual(C.y, D.y, 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T15[rsp], xmm0
	lea	r8, QWORD PTR $T15[rsp]
	lea	rdx, QWORD PTR D$[rsp+4]
	lea	rcx, QWORD PTR C$[rsp+4]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_quat_
	mov	DWORD PTR tv142[rsp], 0
	jmp	SHORT $LN6@test_quat_
$LN5@test_quat_:
	mov	DWORD PTR tv142[rsp], 1
$LN6@test_quat_:
	mov	eax, DWORD PTR tv142[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 20   : 	Error += glm::epsilonEqual(C.z, D.z, 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T16[rsp], xmm0
	lea	r8, QWORD PTR $T16[rsp]
	lea	rdx, QWORD PTR D$[rsp+8]
	lea	rcx, QWORD PTR C$[rsp+8]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_quat_
	mov	DWORD PTR tv150[rsp], 0
	jmp	SHORT $LN8@test_quat_
$LN7@test_quat_:
	mov	DWORD PTR tv150[rsp], 1
$LN8@test_quat_:
	mov	eax, DWORD PTR tv150[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 21   : 	Error += glm::epsilonEqual(C.w, D.w, 0.01f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR $T17[rsp], xmm0
	lea	r8, QWORD PTR $T17[rsp]
	lea	rdx, QWORD PTR D$[rsp+12]
	lea	rcx, QWORD PTR C$[rsp+12]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_quat_
	mov	DWORD PTR tv158[rsp], 0
	jmp	SHORT $LN10@test_quat_
$LN9@test_quat_:
	mov	DWORD PTR tv158[rsp], 1
$LN10@test_quat_:
	mov	eax, DWORD PTR tv158[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 22   : 
; 23   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 24   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_quat_fastMix@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 320				; 00000140H
	pop	rdi
	ret	0
?test_quat_fastMix@@YAHXZ ENDP				; test_quat_fastMix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 673  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	divss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	divss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 675  : 			v.x / scalar,
; 676  : 			v.y / scalar,
; 677  : 			v.z / scalar);
; 678  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$max@M@glm@@YAMMM@Z PROC				; glm::max<float>, COMDAT

; 24   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	SHORT $LN3@max
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@max
$LN3@max:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@max:
	movss	xmm0, DWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M@glm@@YAMMM@Z ENDP				; glm::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M@glm@@YAMMMM@Z
_TEXT	SEGMENT
x$ = 64
minVal$ = 72
maxVal$ = 80
??$clamp@M@glm@@YAMMMM@Z PROC				; glm::clamp<float>, COMDAT

; 544  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 545  : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 546  : 		return min(max(x, minVal), maxVal);

	movss	xmm1, DWORD PTR minVal$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	??$max@M@glm@@YAMMM@Z			; glm::max<float>
	movss	xmm1, DWORD PTR maxVal$[rsp]
	call	??$min@M@glm@@YAMMM@Z			; glm::min<float>

; 547  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$clamp@M@glm@@YAMMMM@Z ENDP				; glm::clamp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M@glm@@YA_NAEBM00@Z
_TEXT	SEGMENT
tv68 = 32
x$ = 64
y$ = 72
epsilon$ = 80
??$epsilonEqual@M@glm@@YA_NAEBM00@Z PROC		; glm::epsilonEqual<float>, COMDAT

; 21   : 	{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 22   : 		return abs(x - y) < epsilon;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@epsilonEqu
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@epsilonEqu
$LN3@epsilonEqu:
	mov	DWORD PTR tv68[rsp], 0
$LN4@epsilonEqu:
	movzx	eax, BYTE PTR tv68[rsp]

; 23   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilonEqual@M@glm@@YA_NAEBM00@Z ENDP		; glm::epsilonEqual<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 264  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 265  :     return _CSTD sqrtf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sqrtf

; 266  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sin@@YAMM@Z PROC					; sin, COMDAT

; 256  : _NODISCARD _Check_return_ inline float sin(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 257  :     return _CSTD sinf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sinf

; 258  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?log@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?log@@YAMM@Z PROC					; log, COMDAT

; 178  : _NODISCARD _Check_return_ inline float log(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 179  :     return _CSTD logf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_logf

; 180  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?log@@YAMM@Z ENDP					; log
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?cos@@YAMM@Z PROC					; cos, COMDAT

; 88   : _NODISCARD _Check_return_ inline float cos(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 89   :     return _CSTD cosf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_cosf

; 90   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?atan2@@YAMMM@Z
_TEXT	SEGMENT
_Yx$ = 64
_Xx$ = 72
?atan2@@YAMMM@Z PROC					; atan2, COMDAT

; 60   : _NODISCARD _Check_return_ inline float atan2(_In_ float _Yx, _In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 61   :     return _CSTD atan2f(_Yx, _Xx);

	movss	xmm1, DWORD PTR _Xx$[rsp]
	movss	xmm0, DWORD PTR _Yx$[rsp]
	call	QWORD PTR __imp_atan2f

; 62   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?atan2@@YAMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?asin@@YAMM@Z PROC					; asin, COMDAT

; 44   : _NODISCARD _Check_return_ inline float asin(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 45   :     return _CSTD asinf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_asinf

; 46   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?acos@@YAMM@Z PROC					; acos, COMDAT

; 36   : _NODISCARD _Check_return_ inline float acos(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 37   :     return _CSTD acosf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_acosf

; 38   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?infinity@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?infinity@?$numeric_limits@M@std@@SAMXZ PROC		; std::numeric_limits<float>::infinity, COMDAT

; 884  :     _NODISCARD static constexpr float infinity() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 885  :         return __builtin_huge_valf();

	movss	xmm0, DWORD PTR __real@7f800000

; 886  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?infinity@?$numeric_limits@M@std@@SAMXZ ENDP		; std::numeric_limits<float>::infinity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?epsilon@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?epsilon@?$numeric_limits@M@std@@SAMXZ PROC		; std::numeric_limits<float>::epsilon, COMDAT

; 872  :     _NODISCARD static constexpr float epsilon() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 873  :         return FLT_EPSILON;

	movss	xmm0, DWORD PTR __real@34000000

; 874  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?epsilon@?$numeric_limits@M@std@@SAMXZ ENDP		; std::numeric_limits<float>::epsilon
_TEXT	ENDS
END
