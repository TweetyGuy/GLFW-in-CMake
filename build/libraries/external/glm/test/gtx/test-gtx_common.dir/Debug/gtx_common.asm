; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG52135 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'x', 00H, '\', 00H, 'g', 00H, 't', 00H, 'x'
	DB	00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H
	DB	'n', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG52136 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG52137 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'x', 00H, '\', 00H, 'g', 00H, 't', 00H, 'x'
	DB	00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H
	DB	'n', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG52138 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
CONST	ENDS
PUBLIC	?fpclassify@@YAHM@Z				; fpclassify
PUBLIC	?fmod@@YAMMM@Z					; fmod
PUBLIC	?trunc@@YAMM@Z					; trunc
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??$epsilonEqual@M@glm@@YA_NAEBM00@Z		; glm::epsilonEqual<float>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	?test@fmod_@@YAHXZ				; fmod_::test
PUBLIC	??$fmod@M@glm@@YAMMM@Z				; glm::fmod<float>
PUBLIC	??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::fmod<float,0,glm::tvec4>
PUBLIC	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::fmod<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec4<int,0>::operator[]
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@H@Z			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z ; glm::fmod<int,0,glm::tvec4>
PUBLIC	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
PUBLIC	??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z ; glm::fmod<int,0,glm::tvec4>
PUBLIC	??$modTrunc@M@fmod_@@YAMMM@Z			; fmod_::modTrunc<float>
PUBLIC	?test_isdenormal@@YAHXZ				; test_isdenormal
PUBLIC	??$isdenormal@M@glm@@YA_NAEBM@Z			; glm::isdenormal<float>
PUBLIC	??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z		; glm::tvec1<bool,0>::tvec1<bool,0>
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??$isdenormal@M$0A@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@@Z ; glm::isdenormal<float,0>
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??$isdenormal@M$0A@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::isdenormal<float,0>
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$isdenormal@M$0A@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::isdenormal<float,0>
PUBLIC	??$isdenormal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::isdenormal<float,0>
PUBLIC	main
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::fmod<float,0,glm::tvec1>
PUBLIC	?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<float,0,glm::tvec4,1>::call
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
PUBLIC	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
PUBLIC	?call@?$compute_fmod@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<int,0,glm::tvec4,0>::call
PUBLIC	??$?LH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z	; glm::operator%<int,0>
PUBLIC	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<float,0,glm::tvec1,1>::call
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
PUBLIC	??$?_1H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<int,0>::operator%=<int>
PUBLIC	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	?call@?$compute_vec4_mod@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mod<int,0,0>::call
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3727c5ac
PUBLIC	__real@38d1b717
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@41200000
PUBLIC	__real@41b00000
PUBLIC	__real@c1200000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__wassert:PROC
EXTRN	__imp__fdtest:PROC
EXTRN	__imp_fmodf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	truncf:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fpclassify@@YAHM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?fpclassify@@YAHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fmod@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?fmod@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?trunc@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?trunc@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@fmod_@@YAHXZ DD imagerel $LN35
	DD	imagerel $LN35+2256
	DD	imagerel $unwind$?test@fmod_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fmod@M@glm@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$fmod@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$modTrunc@M@fmod_@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$modTrunc@M@fmod_@@YAMMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_isdenormal@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+239
	DD	imagerel $unwind$?test_isdenormal@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isdenormal@M@glm@@YA_NAEBM@Z DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$??$isdenormal@M@glm@@YA_NAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isdenormal@M$0A@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$isdenormal@M$0A@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isdenormal@M$0A@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??$isdenormal@M$0A@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isdenormal@M$0A@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$??$isdenormal@M$0A@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isdenormal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$isdenormal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fmod@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?call@?$compute_fmod@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?LH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?LH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_1H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?_1H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mod@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+151
	DD	imagerel $unwind$?call@?$compute_vec4_mod@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@41b00000
CONST	SEGMENT
__real@41b00000 DD 041b00000r			; 22
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mod@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_1H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?LH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fmod@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isdenormal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isdenormal@M$0A@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isdenormal@M$0A@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isdenormal@M$0A@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isdenormal@M@glm@@YA_NAEBM@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$modTrunc@M@fmod_@@YAMMM@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD 021901H
	DD	07015b219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fmod@M@glm@@YAMMM@Z DD 021101H
	DD	0700d7211H
xdata	ENDS
xdata	SEGMENT
$unwind$?test@fmod_@@YAHXZ DD 031a01H
	DD	0a60109H
	DD	07002H
$unwind$?test_isdenormal@@YAHXZ DD 031a01H
	DD	01a0109H
	DD	07002H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
	ORG $+2
?test@fmod_@@YAHXZ$rtcName$0 DB 041H			; fmod_::test
	DB	031H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$1 DB 043H			; fmod_::test
	DB	031H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$2 DB 041H			; fmod_::test
	DB	032H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$3 DB 042H			; fmod_::test
	DB	032H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$4 DB 043H			; fmod_::test
	DB	032H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$5 DB 041H			; fmod_::test
	DB	033H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$6 DB 043H			; fmod_::test
	DB	033H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$7 DB 041H			; fmod_::test
	DB	034H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$8 DB 042H			; fmod_::test
	DB	034H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$9 DB 043H			; fmod_::test
	DB	034H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$10 DB 041H			; fmod_::test
	DB	031H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$11 DB 043H			; fmod_::test
	DB	031H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$12 DB 041H			; fmod_::test
	DB	032H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$13 DB 042H			; fmod_::test
	DB	032H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$14 DB 043H			; fmod_::test
	DB	032H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$15 DB 041H			; fmod_::test
	DB	033H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$16 DB 043H			; fmod_::test
	DB	033H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$17 DB 041H			; fmod_::test
	DB	034H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$18 DB 042H			; fmod_::test
	DB	034H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$19 DB 043H			; fmod_::test
	DB	034H
	DB	00H
	ORG $+1
?test@fmod_@@YAHXZ$rtcName$20 DB 041H			; fmod_::test
	DB	00H
	ORG $+2
?test@fmod_@@YAHXZ$rtcName$21 DB 043H			; fmod_::test
	DB	00H
	ORG $+2
?test@fmod_@@YAHXZ$rtcName$22 DB 044H			; fmod_::test
	DB	00H
	ORG $+6
?test@fmod_@@YAHXZ$rtcFrameData DD 017H			; fmod_::test
	DD	00H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcVarDesc
?test_isdenormal@@YAHXZ$rtcName$0 DB 042H		; test_isdenormal
	DB	00H
	ORG $+6
?test@fmod_@@YAHXZ$rtcVarDesc DD 0434H			; fmod_::test
	DD	04H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$22
	DD	0414H
	DD	04H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$21
	DD	03f4H
	DD	04H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$20
	DD	03c8H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$19
	DD	0398H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$18
	DD	0368H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$17
	DD	0338H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$16
	DD	0308H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$15
	DD	02d8H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$14
	DD	02a8H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$13
	DD	0278H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$12
	DD	0248H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$11
	DD	0218H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$10
	DD	01e8H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$9
	DD	01b8H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$8
	DD	0188H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$7
	DD	0158H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$6
	DD	0128H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$5
	DD	0f8H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$4
	DD	0c8H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$3
	DD	098H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$2
	DD	068H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test@fmod_@@YAHXZ$rtcName$0
	ORG $+1104
?test_isdenormal@@YAHXZ$rtcName$1 DB 043H		; test_isdenormal
	DB	00H
	ORG $+2
?test_isdenormal@@YAHXZ$rtcName$2 DB 044H		; test_isdenormal
	DB	00H
	ORG $+2
?test_isdenormal@@YAHXZ$rtcName$3 DB 045H		; test_isdenormal
	DB	00H
	ORG $+6
?test_isdenormal@@YAHXZ$rtcVarDesc DD 094H		; test_isdenormal
	DD	04H
	DQ	FLAT:?test_isdenormal@@YAHXZ$rtcName$3
	DD	074H
	DD	03H
	DQ	FLAT:?test_isdenormal@@YAHXZ$rtcName$2
	DD	054H
	DD	02H
	DQ	FLAT:?test_isdenormal@@YAHXZ$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:?test_isdenormal@@YAHXZ$rtcName$0
	ORG $+192
?test_isdenormal@@YAHXZ$rtcFrameData DD 04H		; test_isdenormal
	DD	00H
	DQ	FLAT:?test_isdenormal@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?trunc@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fmod@@YAMMM@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fpclassify@@YAHM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mod@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv68 = 48
tv72 = 52
tv76 = 56
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mod@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mod<int,0,0>::call, COMDAT

; 77   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 78   : 			return tvec4<T, P>(a.x % b.x, a.y % b.y, a.z % b.z, a.w % b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cdq
	mov	rcx, QWORD PTR b$[rsp]
	idiv	DWORD PTR [rcx+12]
	mov	eax, edx
	mov	DWORD PTR tv68[rsp], eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rcx+8]
	cdq
	mov	rcx, QWORD PTR b$[rsp]
	idiv	DWORD PTR [rcx+8]
	mov	eax, edx
	mov	DWORD PTR tv72[rsp], eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rcx+4]
	cdq
	mov	rcx, QWORD PTR b$[rsp]
	idiv	DWORD PTR [rcx+4]
	mov	eax, edx
	mov	DWORD PTR tv76[rsp], eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rcx]
	cdq
	mov	rcx, QWORD PTR b$[rsp]
	idiv	DWORD PTR [rcx]
	mov	eax, edx
	mov	ecx, DWORD PTR tv68[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	ecx, DWORD PTR tv72[rsp]
	mov	r9d, ecx
	mov	ecx, DWORD PTR tv76[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 79   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mod@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mod<int,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
a$ = 64
b$ = 72
?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec1>::call, COMDAT

; 60   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 61   : 			return tvec1<T, P>(Func(a.x, b.x));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_1H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?_1H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<int,0>::operator%=<int>, COMDAT

; 507  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 508  : 		return (*this = detail::compute_vec4_mod<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mod@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mod<int,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 509  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_1H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<int,0>::operator%=<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_fmod<float,0,glm::tvec1,1>::call, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 14   : 			return detail::functor2<T, P, vecType>::call(std::fmod, a, b);

	mov	r9, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR a$[rsp]
	lea	rdx, OFFSET FLAT:?fmod@@YAMMM@Z		; fmod
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 15   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_fmod<float,0,glm::tvec1,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv78 = 56
__$ReturnUdt$ = 80
Func$ = 88
a$ = 96
b$ = 104
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec4>::call, COMDAT

; 87   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 88   : 			return tvec4<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z), Func(a.w, b.w));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?LH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?LH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z PROC	; glm::operator%<int,0>, COMDAT

; 780  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 781  : 		return tvec4<T, P>(v1) %= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_1H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<int,0>::operator%=<int>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 782  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?LH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator%<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ?call@?$compute_fmod@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
?call@?$compute_fmod@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_fmod<int,0,glm::tvec4,0>::call, COMDAT

; 22   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 23   : 			return a % b;

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?LH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z ; glm::operator%<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 24   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_fmod@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_fmod<int,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_fmod<float,0,glm::tvec4,1>::call, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 14   : 			return detail::functor2<T, P, vecType>::call(std::fmod, a, b);

	mov	r9, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR a$[rsp]
	lea	rdx, OFFSET FLAT:?fmod@@YAMMM@Z		; fmod
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 15   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_fmod<float,0,glm::tvec4,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z PROC ; glm::fmod<float,0,glm::tvec1>, COMDAT

; 103  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 104  : 		return detail::compute_fmod<T, P, vecType, std::numeric_limits<T>::is_iec559>::call(x, vecType<T, P>(y));

	movss	xmm1, DWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<float,0,glm::tvec1,1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 105  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ENDP ; glm::fmod<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_common.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 120  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 121  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 122  : 
; 123  : 	Error += test_isdenormal();

	call	?test_isdenormal@@YAHXZ			; test_isdenormal
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 124  : 	Error += ::fmod_::test();

	call	?test@fmod_@@YAHXZ			; fmod_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 125  : 
; 126  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 127  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$isdenormal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
tv69 = 48
tv92 = 49
tv94 = 50
__$ReturnUdt$ = 80
x$ = 88
??$isdenormal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::isdenormal<float,0>, COMDAT

; 84   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 85   : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isdenormal' only accept floating-point inputs");
; 86   : 
; 87   : 		return typename tvec4<T, P>::bool_type(

	mov	rax, QWORD PTR x$[rsp]
	add	rax, 12
	mov	rcx, rax
	call	??$isdenormal@M@glm@@YA_NAEBM@Z		; glm::isdenormal<float>
	mov	BYTE PTR tv69[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 8
	call	??$isdenormal@M@glm@@YA_NAEBM@Z		; glm::isdenormal<float>
	mov	BYTE PTR tv92[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 4
	call	??$isdenormal@M@glm@@YA_NAEBM@Z		; glm::isdenormal<float>
	mov	BYTE PTR tv94[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	call	??$isdenormal@M@glm@@YA_NAEBM@Z		; glm::isdenormal<float>
	movzx	ecx, BYTE PTR tv69[rsp]
	mov	BYTE PTR [rsp+32], cl
	movzx	ecx, BYTE PTR tv92[rsp]
	movzx	r9d, cl
	movzx	ecx, BYTE PTR tv94[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z	; glm::tvec4<bool,0>::tvec4<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 88   : 			isdenormal(x.x),
; 89   : 			isdenormal(x.y),
; 90   : 			isdenormal(x.z),
; 91   : 			isdenormal(x.w));
; 92   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$isdenormal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::isdenormal<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$isdenormal@M$0A@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
tv85 = 32
tv87 = 33
__$ReturnUdt$ = 64
x$ = 72
??$isdenormal@M$0A@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z PROC ; glm::isdenormal<float,0>, COMDAT

; 70   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 71   : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isdenormal' only accept floating-point inputs");
; 72   : 
; 73   : 		return typename tvec3<T, P>::bool_type(

	mov	rax, QWORD PTR x$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	??$isdenormal@M@glm@@YA_NAEBM@Z		; glm::isdenormal<float>
	mov	BYTE PTR tv85[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 4
	call	??$isdenormal@M@glm@@YA_NAEBM@Z		; glm::isdenormal<float>
	mov	BYTE PTR tv87[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	call	??$isdenormal@M@glm@@YA_NAEBM@Z		; glm::isdenormal<float>
	movzx	ecx, BYTE PTR tv85[rsp]
	movzx	r9d, cl
	movzx	ecx, BYTE PTR tv87[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z	; glm::tvec3<bool,0>::tvec3<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 74   : 			isdenormal(x.x),
; 75   : 			isdenormal(x.y),
; 76   : 			isdenormal(x.z));
; 77   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isdenormal@M$0A@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::isdenormal<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z PROC			; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rax+2], cl

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z ENDP			; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$isdenormal@M$0A@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
tv78 = 32
__$ReturnUdt$ = 64
x$ = 72
??$isdenormal@M$0A@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z PROC ; glm::isdenormal<float,0>, COMDAT

; 57   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 58   : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isdenormal' only accept floating-point inputs");
; 59   : 
; 60   : 		return typename tvec2<T, P>::bool_type(

	mov	rax, QWORD PTR x$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	??$isdenormal@M@glm@@YA_NAEBM@Z		; glm::isdenormal<float>
	mov	BYTE PTR tv78[rsp], al
	mov	rcx, QWORD PTR x$[rsp]
	call	??$isdenormal@M@glm@@YA_NAEBM@Z		; glm::isdenormal<float>
	movzx	ecx, BYTE PTR tv78[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z	; glm::tvec2<bool,0>::tvec2<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 			isdenormal(x.x),
; 62   : 			isdenormal(x.y));
; 63   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isdenormal@M$0A@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::isdenormal<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z PROC			; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR s1$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR s2$[rsp]
	mov	BYTE PTR [rax+1], cl

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z ENDP			; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$isdenormal@M$0A@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isdenormal@M$0A@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@@Z PROC ; glm::isdenormal<float,0>, COMDAT

; 45   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 46   : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isdenormal' only accept floating-point inputs");
; 47   : 
; 48   : 		return typename tvec1<T, P>::bool_type(

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, rax
	call	??$isdenormal@M@glm@@YA_NAEBM@Z		; glm::isdenormal<float>
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec1<bool,0>::tvec1<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 49   : 			isdenormal(x.x));
; 50   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isdenormal@M$0A@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@@Z ENDP ; glm::isdenormal<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 39   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z PROC			; glm::tvec1<bool,0>::tvec1<bool,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z ENDP			; glm::tvec1<bool,0>::tvec1<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$isdenormal@M@glm@@YA_NAEBM@Z
_TEXT	SEGMENT
tv67 = 32
x$ = 64
??$isdenormal@M@glm@@YA_NAEBM@Z PROC			; glm::isdenormal<float>, COMDAT

; 30   : 	{

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isdenormal' only accept floating-point inputs");
; 32   : 
; 33   : #		if GLM_HAS_CXX11_STL
; 34   : 			return std::fpclassify(x) == FP_SUBNORMAL;

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?fpclassify@@YAHM@Z			; fpclassify
	cmp	eax, -2
	jne	SHORT $LN3@isdenormal
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@isdenormal
$LN3@isdenormal:
	mov	DWORD PTR tv67[rsp], 0
$LN4@isdenormal:
	movzx	eax, BYTE PTR tv67[rsp]

; 35   : #		else
; 36   : 			return x != static_cast<T>(0) && std::fabs(x) < std::numeric_limits<T>::min();
; 37   : #		endif
; 38   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isdenormal@M@glm@@YA_NAEBM@Z ENDP			; glm::isdenormal<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_common.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 36
B$ = 52
C$ = 84
D$ = 116
E$ = 148
$T7 = 164
$T8 = 168
$T9 = 172
$T10 = 180
$T11 = 192
?test_isdenormal@@YAHXZ PROC				; test_isdenormal

; 107  : {

$LN3:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 108  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 109  : 
; 110  : 	bool A = glm::isdenormal(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T7[rsp], xmm0
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$isdenormal@M@glm@@YA_NAEBM@Z		; glm::isdenormal<float>
	mov	BYTE PTR A$[rsp], al

; 111  : 	glm::bvec1 B = glm::isdenormal(glm::vec1(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR B$[rsp]
	call	??$isdenormal@M$0A@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@@Z ; glm::isdenormal<float,0>

; 112  : 	glm::bvec2 C = glm::isdenormal(glm::vec2(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR C$[rsp]
	call	??$isdenormal@M$0A@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::isdenormal<float,0>

; 113  : 	glm::bvec3 D = glm::isdenormal(glm::vec3(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR D$[rsp]
	call	??$isdenormal@M$0A@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::isdenormal<float,0>

; 114  : 	glm::bvec4 E = glm::isdenormal(glm::vec4(1.0f));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR E$[rsp]
	call	??$isdenormal@M$0A@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::isdenormal<float,0>

; 115  : 
; 116  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 117  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_isdenormal@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_isdenormal@@YAHXZ ENDP				; test_isdenormal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_common.cpp
;	COMDAT ??$modTrunc@M@fmod_@@YAMMM@Z
_TEXT	SEGMENT
a$ = 64
b$ = 72
??$modTrunc@M@fmod_@@YAMMM@Z PROC			; fmod_::modTrunc<float>, COMDAT

; 11   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 12   : 		return a - b * glm::trunc(a / b);

	movss	xmm0, DWORD PTR a$[rsp]
	divss	xmm0, DWORD PTR b$[rsp]
	call	?trunc@@YAMM@Z				; trunc
	movss	xmm1, DWORD PTR b$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR a$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1

; 13   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$modTrunc@M@fmod_@@YAMMM@Z ENDP			; fmod_::modTrunc<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z PROC ; glm::fmod<int,0,glm::tvec4>, COMDAT

; 109  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		return detail::compute_fmod<T, P, vecType, std::numeric_limits<T>::is_iec559>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fmod@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<int,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 111  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z ENDP ; glm::fmod<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z PROC ; glm::fmod<int,0,glm::tvec4>, COMDAT

; 103  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 104  : 		return detail::compute_fmod<T, P, vecType, std::numeric_limits<T>::is_iec559>::call(x, vecType<T, P>(y));

	mov	edx, DWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fmod@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<int,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 105  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z ENDP ; glm::fmod<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::fmod<float,0,glm::tvec4>, COMDAT

; 109  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		return detail::compute_fmod<T, P, vecType, std::numeric_limits<T>::is_iec559>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<float,0,glm::tvec4,1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 111  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::fmod<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR d$[rsp]
	mov	BYTE PTR [rax+3], cl

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
tv66 = 80
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec4>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC ; glm::fmod<float,0,glm::tvec4>, COMDAT

; 103  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 104  : 		return detail::compute_fmod<T, P, vecType, std::numeric_limits<T>::is_iec559>::call(x, vecType<T, P>(y));

	movss	xmm1, DWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<float,0,glm::tvec4,1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 105  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP ; glm::fmod<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$fmod@M@glm@@YAMMM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
x$ = 80
y$ = 88
??$fmod@M@glm@@YAMMM@Z PROC				; glm::fmod<float>, COMDAT

; 97   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H

; 98   : 		return fmod(tvec1<genType>(x), y).x;

	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	movss	xmm2, DWORD PTR y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::fmod<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]

; 99   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$fmod@M@glm@@YAMMM@Z ENDP				; glm::fmod<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_common.cpp
_TEXT	SEGMENT
Error$ = 32
A0$26 = 36
B0$27 = 40
C0$28 = 44
A1$29 = 56
B1$30 = 84
C1$31 = 104
A2$32 = 152
B2$33 = 200
C2$34 = 248
A3$35 = 296
B3$36 = 324
C3$37 = 344
A4$38 = 392
B4$39 = 440
C4$40 = 488
A0$41 = 516
B0$42 = 520
C0$43 = 524
A1$44 = 536
B1$45 = 564
C1$46 = 584
A2$47 = 632
B2$48 = 680
C2$49 = 728
A3$50 = 776
B3$51 = 804
C3$52 = 824
A4$53 = 872
B4$54 = 920
C4$55 = 968
y$56 = 996
x$57 = 1000
A$58 = 1012
C$59 = 1044
D$60 = 1076
$T61 = 1092
$T62 = 1096
$T63 = 1112
$T64 = 1116
$T65 = 1120
$T66 = 1136
$T67 = 1140
$T68 = 1156
$T69 = 1160
$T70 = 1176
$T71 = 1180
$T72 = 1184
$T73 = 1200
$T74 = 1204
$T75 = 1208
$T76 = 1224
$T77 = 1228
$T78 = 1244
$T79 = 1248
$T80 = 1264
$T81 = 1268
$T82 = 1272
tv71 = 1276
tv90 = 1280
tv143 = 1284
tv161 = 1288
tv181 = 1292
tv190 = 1296
tv209 = 1300
tv262 = 1304
tv280 = 1308
tv300 = 1312
tv321 = 1316
tv334 = 1320
?test@fmod_@@YAHXZ PROC					; fmod_::test

; 16   : 	{

$LN35:
	push	rdi
	sub	rsp, 1328				; 00000530H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 324				; 00000144H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17   : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 18   : 
; 19   : 		{
; 20   : 			float A0(3.0);

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR A0$26[rsp], xmm0

; 21   : 			float B0(2.0f);

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR B0$27[rsp], xmm0

; 22   : 			float C0 = glm::fmod(A0, B0);

	movss	xmm1, DWORD PTR B0$27[rsp]
	movss	xmm0, DWORD PTR A0$26[rsp]
	call	??$fmod@M@glm@@YAMMM@Z			; glm::fmod<float>
	movss	DWORD PTR C0$28[rsp], xmm0

; 23   : 
; 24   : 			Error += glm::abs(C0 - 1.0f) < 0.00001f ? 0 : 1;

	movss	xmm0, DWORD PTR C0$28[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	xmm1, DWORD PTR __real@3727c5ac
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@test
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv71[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv71[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 25   : 
; 26   : 			glm::vec4 A1(3.0);

	movss	xmm1, DWORD PTR __real@40400000
	lea	rcx, QWORD PTR A1$29[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 27   : 			float B1(2.0f);

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR B1$30[rsp], xmm0

; 28   : 			glm::vec4 C1 = glm::fmod(A1, B1);

	movss	xmm2, DWORD PTR B1$30[rsp]
	lea	rdx, QWORD PTR A1$29[rsp]
	lea	rcx, QWORD PTR C1$31[rsp]
	call	??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::fmod<float,0,glm::tvec4>

; 29   : 
; 30   : 			Error += glm::all(glm::epsilonEqual(C1, glm::vec4(1.0f), 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T61[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T62[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR $T61[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR C1$31[rsp]
	lea	rcx, QWORD PTR $T63[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv90[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv90[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 31   : 
; 32   : 			glm::vec4 A2(3.0);

	movss	xmm1, DWORD PTR __real@40400000
	lea	rcx, QWORD PTR A2$32[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 33   : 			glm::vec4 B2(2.0f);

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR B2$33[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 34   : 			glm::vec4 C2 = glm::fmod(A2, B2);

	lea	r8, QWORD PTR B2$33[rsp]
	lea	rdx, QWORD PTR A2$32[rsp]
	lea	rcx, QWORD PTR C2$34[rsp]
	call	??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::fmod<float,0,glm::tvec4>

; 35   : 
; 36   : 			Error += glm::all(glm::epsilonEqual(C2, glm::vec4(1.0f), 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T64[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T65[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR $T64[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR C2$34[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv143[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 37   : 
; 38   : 			glm::ivec4 A3(3);

	mov	edx, 3
	lea	rcx, QWORD PTR A3$35[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 39   : 			int B3(2);

	mov	DWORD PTR B3$36[rsp], 2

; 40   : 			glm::ivec4 C3 = glm::fmod(A3, B3);

	mov	r8d, DWORD PTR B3$36[rsp]
	lea	rdx, QWORD PTR A3$35[rsp]
	lea	rcx, QWORD PTR C3$37[rsp]
	call	??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z ; glm::fmod<int,0,glm::tvec4>

; 41   : 
; 42   : 			Error += glm::all(glm::equal(C3, glm::ivec4(1))) ? 0 : 1;

	mov	edx, 1
	lea	rcx, QWORD PTR $T67[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR C3$37[rsp]
	lea	rcx, QWORD PTR $T68[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv161[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv161[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv161[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 43   : 
; 44   : 			glm::ivec4 A4(3);

	mov	edx, 3
	lea	rcx, QWORD PTR A4$38[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 45   : 			glm::ivec4 B4(2);

	mov	edx, 2
	lea	rcx, QWORD PTR B4$39[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 46   : 			glm::ivec4 C4 = glm::fmod(A4, B4);

	lea	r8, QWORD PTR B4$39[rsp]
	lea	rdx, QWORD PTR A4$38[rsp]
	lea	rcx, QWORD PTR C4$40[rsp]
	call	??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z ; glm::fmod<int,0,glm::tvec4>

; 47   : 
; 48   : 			Error += glm::all(glm::equal(C4, glm::ivec4(1))) ? 0 : 1;

	mov	edx, 1
	lea	rcx, QWORD PTR $T69[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR C4$40[rsp]
	lea	rcx, QWORD PTR $T70[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv181[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv181[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv181[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 49   : 		}
; 50   : 
; 51   : 		{
; 52   : 			float A0(22.0);

	movss	xmm0, DWORD PTR __real@41b00000
	movss	DWORD PTR A0$41[rsp], xmm0

; 53   : 			float B0(-10.0f);

	movss	xmm0, DWORD PTR __real@c1200000
	movss	DWORD PTR B0$42[rsp], xmm0

; 54   : 			float C0 = glm::fmod(A0, B0);

	movss	xmm1, DWORD PTR B0$42[rsp]
	movss	xmm0, DWORD PTR A0$41[rsp]
	call	??$fmod@M@glm@@YAMMM@Z			; glm::fmod<float>
	movss	DWORD PTR C0$43[rsp], xmm0

; 55   : 
; 56   : 			Error += glm::abs(C0 - 2.0f) < 0.00001f ? 0 : 1;

	movss	xmm0, DWORD PTR C0$43[rsp]
	subss	xmm0, DWORD PTR __real@40000000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	xmm1, DWORD PTR __real@3727c5ac
	comiss	xmm1, xmm0
	jbe	SHORT $LN19@test
	mov	DWORD PTR tv190[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv190[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv190[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 57   : 
; 58   : 			glm::vec4 A1(22.0);

	movss	xmm1, DWORD PTR __real@41b00000
	lea	rcx, QWORD PTR A1$44[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 59   : 			float B1(-10.0f);

	movss	xmm0, DWORD PTR __real@c1200000
	movss	DWORD PTR B1$45[rsp], xmm0

; 60   : 			glm::vec4 C1 = glm::fmod(A1, B1);

	movss	xmm2, DWORD PTR B1$45[rsp]
	lea	rdx, QWORD PTR A1$44[rsp]
	lea	rcx, QWORD PTR C1$46[rsp]
	call	??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::fmod<float,0,glm::tvec4>

; 61   : 
; 62   : 			Error += glm::all(glm::epsilonEqual(C1, glm::vec4(2.0f), 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T71[rsp], xmm0
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T72[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR $T71[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR C1$46[rsp]
	lea	rcx, QWORD PTR $T73[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test
	mov	DWORD PTR tv209[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv209[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv209[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 63   : 
; 64   : 			glm::vec4 A2(22.0);

	movss	xmm1, DWORD PTR __real@41b00000
	lea	rcx, QWORD PTR A2$47[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 65   : 			glm::vec4 B2(-10.0f);

	movss	xmm1, DWORD PTR __real@c1200000
	lea	rcx, QWORD PTR B2$48[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 66   : 			glm::vec4 C2 = glm::fmod(A2, B2);

	lea	r8, QWORD PTR B2$48[rsp]
	lea	rdx, QWORD PTR A2$47[rsp]
	lea	rcx, QWORD PTR C2$49[rsp]
	call	??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::fmod<float,0,glm::tvec4>

; 67   : 
; 68   : 			Error += glm::all(glm::epsilonEqual(C2, glm::vec4(2.0f), 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T74[rsp], xmm0
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T75[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR $T74[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR C2$49[rsp]
	lea	rcx, QWORD PTR $T76[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test
	mov	DWORD PTR tv262[rsp], 0
	jmp	SHORT $LN24@test
$LN23@test:
	mov	DWORD PTR tv262[rsp], 1
$LN24@test:
	mov	eax, DWORD PTR tv262[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 69   : 
; 70   : 			glm::ivec4 A3(22);

	mov	edx, 22
	lea	rcx, QWORD PTR A3$50[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 71   : 			int B3(-10);

	mov	DWORD PTR B3$51[rsp], -10

; 72   : 			glm::ivec4 C3 = glm::fmod(A3, B3);

	mov	r8d, DWORD PTR B3$51[rsp]
	lea	rdx, QWORD PTR A3$50[rsp]
	lea	rcx, QWORD PTR C3$52[rsp]
	call	??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z ; glm::fmod<int,0,glm::tvec4>

; 73   : 
; 74   : 			Error += glm::all(glm::equal(C3, glm::ivec4(2))) ? 0 : 1;

	mov	edx, 2
	lea	rcx, QWORD PTR $T77[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR C3$52[rsp]
	lea	rcx, QWORD PTR $T78[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test
	mov	DWORD PTR tv280[rsp], 0
	jmp	SHORT $LN26@test
$LN25@test:
	mov	DWORD PTR tv280[rsp], 1
$LN26@test:
	mov	eax, DWORD PTR tv280[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 75   : 
; 76   : 			glm::ivec4 A4(22);

	mov	edx, 22
	lea	rcx, QWORD PTR A4$53[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 77   : 			glm::ivec4 B4(-10);

	mov	edx, -10
	lea	rcx, QWORD PTR B4$54[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 78   : 			glm::ivec4 C4 = glm::fmod(A4, B4);

	lea	r8, QWORD PTR B4$54[rsp]
	lea	rdx, QWORD PTR A4$53[rsp]
	lea	rcx, QWORD PTR C4$55[rsp]
	call	??$fmod@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z ; glm::fmod<int,0,glm::tvec4>

; 79   : 
; 80   : 			Error += glm::all(glm::equal(C4, glm::ivec4(2))) ? 0 : 1;

	mov	edx, 2
	lea	rcx, QWORD PTR $T79[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR C4$55[rsp]
	lea	rcx, QWORD PTR $T80[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@test
	mov	DWORD PTR tv300[rsp], 0
	jmp	SHORT $LN28@test
$LN27@test:
	mov	DWORD PTR tv300[rsp], 1
$LN28@test:
	mov	eax, DWORD PTR tv300[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 81   : 		}
; 82   : 
; 83   : 		// http://stackoverflow.com/questions/7610631/glsl-mod-vs-hlsl-fmod
; 84   : 		{
; 85   : 			for (float y = -10.0f; y < 10.0f; y += 0.1f)

	movss	xmm0, DWORD PTR __real@c1200000
	movss	DWORD PTR y$56[rsp], xmm0
	jmp	SHORT $LN4@test
$LN2@test:
	movss	xmm0, DWORD PTR y$56[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR y$56[rsp], xmm0
$LN4@test:
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR y$56[rsp]
	jbe	$LN3@test

; 86   : 			for (float x = -10.0f; x < 10.0f; x += 0.1f)

	movss	xmm0, DWORD PTR __real@c1200000
	movss	DWORD PTR x$57[rsp], xmm0
	jmp	SHORT $LN7@test
$LN5@test:
	movss	xmm0, DWORD PTR x$57[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR x$57[rsp], xmm0
$LN7@test:
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR x$57[rsp]
	jbe	$LN6@test

; 87   : 			{
; 88   : 				float const A(std::fmod(x, y));

	movss	xmm1, DWORD PTR y$56[rsp]
	movss	xmm0, DWORD PTR x$57[rsp]
	call	?fmod@@YAMMM@Z				; fmod
	movss	DWORD PTR A$58[rsp], xmm0

; 89   : 				//float const B(std::remainder(x, y));
; 90   : 				float const C(glm::fmod(x, y));

	movss	xmm1, DWORD PTR y$56[rsp]
	movss	xmm0, DWORD PTR x$57[rsp]
	call	??$fmod@M@glm@@YAMMM@Z			; glm::fmod<float>
	movss	DWORD PTR C$59[rsp], xmm0

; 91   : 				float const D(modTrunc(x, y));

	movss	xmm1, DWORD PTR y$56[rsp]
	movss	xmm0, DWORD PTR x$57[rsp]
	call	??$modTrunc@M@fmod_@@YAMMM@Z		; fmod_::modTrunc<float>
	movss	DWORD PTR D$60[rsp], xmm0

; 92   : 
; 93   : 				//Error += glm::epsilonEqual(A, B, 0.0001f) ? 0 : 1;
; 94   : 				//assert(!Error);
; 95   : 				Error += glm::epsilonEqual(A, C, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T81[rsp], xmm0
	lea	r8, QWORD PTR $T81[rsp]
	lea	rdx, QWORD PTR C$59[rsp]
	lea	rcx, QWORD PTR A$58[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@test
	mov	DWORD PTR tv321[rsp], 0
	jmp	SHORT $LN30@test
$LN29@test:
	mov	DWORD PTR tv321[rsp], 1
$LN30@test:
	mov	eax, DWORD PTR tv321[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 96   : 				assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN31@test
	mov	r8d, 96					; 00000060H
	lea	rdx, OFFSET FLAT:$SG52135
	lea	rcx, OFFSET FLAT:$SG52136
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN31@test:

; 97   : 				Error += glm::epsilonEqual(A, D, 0.00001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T82[rsp], xmm0
	lea	r8, QWORD PTR $T82[rsp]
	lea	rdx, QWORD PTR D$60[rsp]
	lea	rcx, QWORD PTR A$58[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN32@test
	mov	DWORD PTR tv334[rsp], 0
	jmp	SHORT $LN33@test
$LN32@test:
	mov	DWORD PTR tv334[rsp], 1
$LN33@test:
	mov	eax, DWORD PTR tv334[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 98   : 				assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN34@test
	mov	r8d, 98					; 00000062H
	lea	rdx, OFFSET FLAT:$SG52137
	lea	rcx, OFFSET FLAT:$SG52138
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN34@test:

; 99   : 			}

	jmp	$LN5@test
$LN6@test:
	jmp	$LN2@test
$LN3@test:

; 100  : 		}
; 101  : 
; 102  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 103  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@fmod_@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 1328				; 00000530H
	pop	rdi
	ret	0
?test@fmod_@@YAHXZ ENDP					; fmod_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M@glm@@YA_NAEBM00@Z
_TEXT	SEGMENT
tv68 = 32
x$ = 64
y$ = 72
epsilon$ = 80
??$epsilonEqual@M@glm@@YA_NAEBM00@Z PROC		; glm::epsilonEqual<float>, COMDAT

; 21   : 	{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 22   : 		return abs(x - y) < epsilon;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@epsilonEqu
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@epsilonEqu
$LN3@epsilonEqu:
	mov	DWORD PTR tv68[rsp], 0
$LN4@epsilonEqu:
	movzx	eax, BYTE PTR tv68[rsp]

; 23   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilonEqual@M@glm@@YA_NAEBM00@Z ENDP		; glm::epsilonEqual<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?trunc@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?trunc@@YAMM@Z PROC					; trunc, COMDAT

; 280  : _NODISCARD _Check_return_ inline float trunc(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 281  : #if _HAS_CMATH_INTRINSICS
; 282  :     return __truncf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	truncf

; 283  : #elif defined(__clang__)
; 284  :     return __builtin_truncf(_Xx);
; 285  : #else // ^^^ defined(__clang__) ^^^ / vvv intrinsics unavailable vvv
; 286  :     return _CSTD truncf(_Xx);
; 287  : #endif // ^^^ intrinsics unavailable ^^^
; 288  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?trunc@@YAMM@Z ENDP					; trunc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?fmod@@YAMMM@Z
_TEXT	SEGMENT
_Xx$ = 64
_Yx$ = 72
?fmod@@YAMMM@Z PROC					; fmod, COMDAT

; 146  : _NODISCARD _Check_return_ inline float fmod(_In_ float _Xx, _In_ float _Yx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 147  :     return _CSTD fmodf(_Xx, _Yx);

	movss	xmm1, DWORD PTR _Yx$[rsp]
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_fmodf

; 148  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?fmod@@YAMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ?fpclassify@@YAHM@Z
_TEXT	SEGMENT
_X$ = 48
?fpclassify@@YAHM@Z PROC				; fpclassify, COMDAT

; 289  :     {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 290  :         return _fdtest(&_X);

	lea	rcx, QWORD PTR _X$[rsp]
	call	QWORD PTR __imp__fdtest
	cwde

; 291  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?fpclassify@@YAHM@Z ENDP				; fpclassify
_TEXT	ENDS
END
