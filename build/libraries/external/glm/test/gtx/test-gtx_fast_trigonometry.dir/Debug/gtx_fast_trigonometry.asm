; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG57654 DB	'fastCosNew %ld clocks', 0aH, 00H
	ORG $+1
$SG57696 DB	'fastCosDeterminisctic %ld clocks', 0aH, 00H
	ORG $+2
$SG61098 DB	'%s', 00H
	ORG $+1
$SG57737 DB	'fastCosRef %ld clocks', 0aH, 00H
	ORG $+1
$SG57771 DB	'fastCosOld %ld clocks', 0aH, 00H
	ORG $+1
$SG57801 DB	'cos %ld clocks', 0aH, 00H
$SG57957 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'x', 00H, '\', 00H, 'g', 00H, 't', 00H, 'x'
	DB	00H, '_', 00H, 'f', 00H, 'a', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'o'
	DB	00H, 'm', 00H, 'e', 00H, 't', 00H, 'r', 00H, 'y', 00H, '.', 00H
	DB	'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG57958 DB	'm', 00H, 'o', 00H, 'd', 00H, 'A', 00H, 'n', 00H, 'g', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, '.', 00H, '0', 00H, 'f', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'A', 00H, 'n', 00H, 'g'
	DB	00H, 'l', 00H, 'e', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'3', 00H, '6', 00H, '0', 00H, '.', 00H, 'f', 00H, 00H, 00H
	ORG $+4
$SG57959 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'g', 00H, 't', 00H, 'x', 00H, '\', 00H, 'g', 00H, 't', 00H, 'x'
	DB	00H, '_', 00H, 'f', 00H, 'a', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'g', 00H, 'o', 00H, 'n', 00H, 'o'
	DB	00H, 'm', 00H, 'e', 00H, 't', 00H, 'r', 00H, 'y', 00H, '.', 00H
	DB	'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG61101 DB	00H, 00H
	ORG $+2
$SG57960 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+2
$SG61097 DB	'invalid argument', 00H
	ORG $+7
$SG61102 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG61099 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+6
$SG56877 DB	'fastCos Time %d clocks', 0aH, 00H
$SG61100 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
	ORG $+4
$SG56878 DB	'cos Time %d clocks', 0aH, 00H
	ORG $+4
$SG56906 DB	'fastSin Time %d clocks', 0aH, 00H
$SG56907 DB	'sin Time %d clocks', 0aH, 00H
	ORG $+4
$SG56935 DB	'fastTan Time %d clocks', 0aH, 00H
$SG56936 DB	'tan Time %d clocks', 0aH, 00H
	ORG $+4
$SG56964 DB	'fastAcos Time %d clocks', 0aH, 00H
	ORG $+7
$SG56965 DB	'acos Time %d clocks', 0aH, 00H
	ORG $+3
$SG56993 DB	'fastAsin Time %d clocks', 0aH, 00H
	ORG $+7
$SG56994 DB	'asin Time %d clocks', 0aH, 00H
	ORG $+3
$SG57022 DB	'fastAtan Time %d clocks', 0aH, 00H
	ORG $+7
$SG57023 DB	'atan Time %d clocks', 0aH, 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	?max@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::max
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	?fmod@@YAMMM@Z					; fmod
PUBLIC	?nextafter@@YAMMM@Z				; nextafter
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?tan@@YAMM@Z					; tan
PUBLIC	?trunc@@YAMM@Z					; trunc
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$next_float@M@glm@@YAMAEBM@Z			; glm::next_float<float>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?perf@fastCos@@YAH_N@Z				; fastCos::perf
PUBLIC	??$pi@M@glm@@YAMXZ				; glm::pi<float>
PUBLIC	??$fastCos@M@glm@@YAMM@Z			; glm::fastCos<float>
PUBLIC	?perf@fastSin@@YAH_N@Z				; fastSin::perf
PUBLIC	??$fastSin@M@glm@@YAMM@Z			; glm::fastSin<float>
PUBLIC	?perf@fastTan@@YAH_N@Z				; fastTan::perf
PUBLIC	??$fastTan@M@glm@@YAMM@Z			; glm::fastTan<float>
PUBLIC	?perf@fastAcos@@YAH_N@Z				; fastAcos::perf
PUBLIC	??$fastAcos@M@glm@@YAMM@Z			; glm::fastAcos<float>
PUBLIC	?perf@fastAsin@@YAH_N@Z				; fastAsin::perf
PUBLIC	??$fastAsin@M@glm@@YAMM@Z			; glm::fastAsin<float>
PUBLIC	?perf@fastAtan@@YAH_N@Z				; fastAtan::perf
PUBLIC	??$fastAtan@M@glm@@YAMM@Z			; glm::fastAtan<float>
PUBLIC	?perf_fastCosNew@taylorCos@@YAHMM_K@Z		; taylorCos::perf_fastCosNew
PUBLIC	??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
PUBLIC	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
PUBLIC	?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::resize
PUBLIC	?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
PUBLIC	?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity
PUBLIC	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
PUBLIC	?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::fastCosNew<float,0,glm::tvec4>
PUBLIC	?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z ; taylorCos::perf_fastCosDeterminisctic
PUBLIC	??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::fastCosDeterminisctic<float,0,glm::tvec4>
PUBLIC	?perf_fastCosRef@taylorCos@@YAHMM_K@Z		; taylorCos::perf_fastCosRef
PUBLIC	??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::fastRefCos<float,0,glm::tvec4>
PUBLIC	?perf_fastCosOld@taylorCos@@YAHMM_K@Z		; taylorCos::perf_fastCosOld
PUBLIC	??$fastCos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fastCos<float,0,glm::tvec4>
PUBLIC	?perf_cos@taylorCos@@YAHMM_K@Z			; taylorCos::perf_cos
PUBLIC	??$cos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::cos<float,0,glm::tvec4>
PUBLIC	?perf@taylorCos@@YAH_K@Z			; taylorCos::perf
PUBLIC	?test@taylorCos@@YAHXZ				; taylorCos::test
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??$radians@M@glm@@YAMM@Z			; glm::radians<float>
PUBLIC	?length@?$tvec1@M$0A@@glm@@SAHXZ		; glm::tvec1<float,0>::length
PUBLIC	??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec1<float,0>::operator[]
PUBLIC	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec1<float,0>::operator[]
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ; taylorCos::fastRefCos<float,0,glm::tvec1>
PUBLIC	??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ; taylorCos::fastCosNew<float,0,glm::tvec1>
PUBLIC	main
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Resize<std::_Value_init_tag>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$wrapAngle@M@glm@@YAMM@Z			; glm::wrapAngle<float>
PUBLIC	??$half_pi@M@glm@@YAMXZ				; glm::half_pi<float>
PUBLIC	??$cos_52s@M@detail@glm@@YAMM@Z			; glm::detail::cos_52s<float>
PUBLIC	??$two_pi@M@glm@@YAMXZ				; glm::two_pi<float>
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator+<float,0>
PUBLIC	??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::fmod<float,0,glm::tvec4>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator-<float,0>
PUBLIC	??$fastAbs@$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@U12@@Z ; taylorCos::fastAbs<0,glm::tvec4>
PUBLIC	??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec4>
PUBLIC	??$deterministic_fmod@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@M@Z ; taylorCos::deterministic_fmod<float,0,glm::tvec4>
PUBLIC	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
PUBLIC	??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThanEqual<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::taylorSeriesNewCos<float,0,glm::tvec4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$taylorSeriesRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::taylorSeriesRefCos<float,0,glm::tvec4>
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z	; glm::operator+<float,0>
PUBLIC	??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::fmod<float,0,glm::tvec1>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec1>
PUBLIC	??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ; glm::lessThanEqual<float,0,glm::tvec1>
PUBLIC	?length@?$tvec1@_N$0A@@glm@@SAHXZ		; glm::tvec1<bool,0>::length
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<bool,0>::tvec1<bool,0>
PUBLIC	??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec1>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$taylorSeriesRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ; taylorCos::taylorSeriesRefCos<float,0,glm::tvec1>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$fastAbs@$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@U12@@Z ; taylorCos::fastAbs<0,glm::tvec1>
PUBLIC	??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec1>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<float,0> > >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	??$mod@M@glm@@YAMMM@Z				; glm::mod<float>
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<float,0,glm::tvec4,1>::call
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z	; glm::operator-<float,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$trunc@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::trunc<float,0,glm::tvec4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z	; glm::operator*<float,0>
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$factorial@M@glm@@YAMAEBM@Z			; glm::factorial<float>
PUBLIC	?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<float,0,glm::tvec1,1>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@MAEBU10@@Z	; glm::operator-<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
PUBLIC	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::mod<float,0,glm::tvec1>
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator/=<float>
PUBLIC	?call@?$compute_trunc@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_trunc<float,0,glm::tvec4,0>::call
PUBLIC	??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
PUBLIC	??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<float,0> &>
PUBLIC	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
PUBLIC	??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>
PUBLIC	??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >
PUBLIC	??$construct@U?$tvec4@M$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0> >
PUBLIC	?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
PUBLIC	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
PUBLIC	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
PUBLIC	??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<float,0> *>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator/<float,0>
PUBLIC	??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec1>
PUBLIC	?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@37d00d01
PUBLIC	__real@3ab60b61
PUBLIC	__real@3c8efa35
PUBLIC	__real@3cf8e38e
PUBLIC	__real@3d29ef0e
PUBLIC	__real@3d2aaaab
PUBLIC	__real@3d36db6e
PUBLIC	__real@3d5d0dd1
PUBLIC	__real@3d99999a
PUBLIC	__real@3dba2e8c
PUBLIC	__real@3dcccccd
PUBLIC	__real@3de38e39
PUBLIC	__real@3e088889
PUBLIC	__real@3e124925
PUBLIC	__real@3e2aaaab
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3eaaaaab
PUBLIC	__real@3f000000
PUBLIC	__real@3f7fff90
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@40800000
PUBLIC	__real@40c00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41000000
PUBLIC	__real@43340000
PUBLIC	__real@43b40000
PUBLIC	__real@7f7fffff
PUBLIC	__real@baa69eb6
PUBLIC	__real@befff486
PUBLIC	__real@bf800000
PUBLIC	__real@c0490fdb
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp_nextafterf:PROC
EXTRN	__imp_acosf:PROC
EXTRN	__imp_asinf:PROC
EXTRN	__imp_atanf:PROC
EXTRN	__imp_cosf:PROC
EXTRN	__imp_fmodf:PROC
EXTRN	__imp_sinf:PROC
EXTRN	__imp_tanf:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	memmove:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__imp_clock:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	floorf:PROC
EXTRN	truncf:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?AngleShift@taylorCos@@3U?$tvec4@M$0A@@glm@@B DB 010H DUP (?) ; taylorCos::AngleShift
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@M@std@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?max@?$numeric_limits@M@std@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?acos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?acos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?asin@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?asin@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?atan@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?atan@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?cos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?floor@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?floor@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fmod@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?fmod@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?nextafter@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?nextafter@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sin@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sin@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?tan@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?tan@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?trunc@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?trunc@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$next_float@M@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??$next_float@M@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?perf@fastCos@@YAH_N@Z DD imagerel $LN15
	DD	imagerel $LN15+477
	DD	imagerel $unwind$?perf@fastCos@@YAH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pi@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$??$pi@M@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastCos@M@glm@@YAMM@Z DD imagerel $LN6
	DD	imagerel $LN6+171
	DD	imagerel $unwind$??$fastCos@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf@fastSin@@YAH_N@Z DD imagerel $LN15
	DD	imagerel $LN15+477
	DD	imagerel $unwind$?perf@fastSin@@YAH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastSin@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??$fastSin@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf@fastTan@@YAH_N@Z DD imagerel $LN15
	DD	imagerel $LN15+477
	DD	imagerel $unwind$?perf@fastTan@@YAH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastTan@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+152
	DD	imagerel $unwind$??$fastTan@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf@fastAcos@@YAH_N@Z DD imagerel $LN15
	DD	imagerel $LN15+477
	DD	imagerel $unwind$?perf@fastAcos@@YAH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastAcos@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$fastAcos@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf@fastAsin@@YAH_N@Z DD imagerel $LN15
	DD	imagerel $LN15+477
	DD	imagerel $unwind$?perf@fastAsin@@YAH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastAsin@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+218
	DD	imagerel $unwind$??$fastAsin@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf@fastAtan@@YAH_N@Z DD imagerel $LN15
	DD	imagerel $LN15+477
	DD	imagerel $unwind$?perf@fastAtan@@YAH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastAtan@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+296
	DD	imagerel $unwind$??$fastAtan@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EAngleShift@taylorCos@@YAXXZ DD imagerel ??__EAngleShift@taylorCos@@YAXXZ
	DD	imagerel ??__EAngleShift@taylorCos@@YAXXZ+102
	DD	imagerel $unwind$??__EAngleShift@taylorCos@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?perf_fastCosNew@taylorCos@@YAHMM_K@Z DD imagerel $LN16
	DD	imagerel $LN16+614
	DD	imagerel $unwind$?perf_fastCosNew@taylorCos@@YAHMM_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf_fastCosNew@taylorCos@@YAHMM_K@Z@4HA DD imagerel ?dtor$0@?0??perf_fastCosNew@taylorCos@@YAHMM_K@Z@4HA
	DD	imagerel ?dtor$0@?0??perf_fastCosNew@taylorCos@@YAHMM_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf_fastCosNew@taylorCos@@YAHMM_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+197
	DD	imagerel $unwind$??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+252
	DD	imagerel $unwind$?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+247
	DD	imagerel $unwind$??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z DD imagerel $LN16
	DD	imagerel $LN16+614
	DD	imagerel $unwind$?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z@4HA DD imagerel ?dtor$0@?0??perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z@4HA
	DD	imagerel ?dtor$0@?0??perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+470
	DD	imagerel $unwind$??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf_fastCosRef@taylorCos@@YAHMM_K@Z DD imagerel $LN16
	DD	imagerel $LN16+614
	DD	imagerel $unwind$?perf_fastCosRef@taylorCos@@YAHMM_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf_fastCosRef@taylorCos@@YAHMM_K@Z@4HA DD imagerel ?dtor$0@?0??perf_fastCosRef@taylorCos@@YAHMM_K@Z@4HA
	DD	imagerel ?dtor$0@?0??perf_fastCosRef@taylorCos@@YAHMM_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf_fastCosRef@taylorCos@@YAHMM_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+470
	DD	imagerel $unwind$??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf_fastCosOld@taylorCos@@YAHMM_K@Z DD imagerel $LN16
	DD	imagerel $LN16+614
	DD	imagerel $unwind$?perf_fastCosOld@taylorCos@@YAHMM_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf_fastCosOld@taylorCos@@YAHMM_K@Z@4HA DD imagerel ?dtor$0@?0??perf_fastCosOld@taylorCos@@YAHMM_K@Z@4HA
	DD	imagerel ?dtor$0@?0??perf_fastCosOld@taylorCos@@YAHMM_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf_fastCosOld@taylorCos@@YAHMM_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastCos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$fastCos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf_cos@taylorCos@@YAHMM_K@Z DD imagerel $LN16
	DD	imagerel $LN16+614
	DD	imagerel $unwind$?perf_cos@taylorCos@@YAHMM_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf_cos@taylorCos@@YAHMM_K@Z@4HA DD imagerel ?dtor$0@?0??perf_cos@taylorCos@@YAHMM_K@Z@4HA
	DD	imagerel ?dtor$0@?0??perf_cos@taylorCos@@YAHMM_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf_cos@taylorCos@@YAHMM_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$cos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf@taylorCos@@YAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+209
	DD	imagerel $unwind$?perf@taylorCos@@YAH_K@Z
$pdata$?test@taylorCos@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+378
	DD	imagerel $unwind$?test@taylorCos@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$radians@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$??$radians@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+470
	DD	imagerel $unwind$??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+359
	DD	imagerel $unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$wrapAngle@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$wrapAngle@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$half_pi@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$??$half_pi@M@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cos_52s@M@detail@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$cos_52s@M@detail@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$two_pi@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$??$two_pi@M@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastAbs@$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@U12@@Z DD imagerel $LN3
	DD	imagerel $LN3+214
	DD	imagerel $unwind$??$fastAbs@$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@U12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+325
	DD	imagerel $unwind$??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$deterministic_fmod@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@M@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??$deterministic_fmod@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+412
	DD	imagerel $unwind$??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$taylorSeriesRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+812
	DD	imagerel $unwind$??$taylorSeriesRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$taylorSeriesRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+752
	DD	imagerel $unwind$??$taylorSeriesRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fastAbs@$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@U12@@Z DD imagerel $LN3
	DD	imagerel $LN3+205
	DD	imagerel $unwind$??$fastAbs@$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@U12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+310
	DD	imagerel $unwind$??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+336
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M@glm@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$mod@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$trunc@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$trunc@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+247
	DD	imagerel $unwind$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$factorial@M@glm@@YAMAEBM@Z DD imagerel $LN6
	DD	imagerel $LN6+108
	DD	imagerel $unwind$??$factorial@M@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+230
	DD	imagerel $unwind$?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_trunc@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_trunc@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec4@M$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$construct@U?$tvec4@M$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
CRT$XCU	SEGMENT
?AngleShift$initializer$@taylorCos@@3P6AXXZEA DQ FLAT:??__EAngleShift@taylorCos@@YAXXZ ; taylorCos::AngleShift$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0490fdb
CONST	SEGMENT
__real@c0490fdb DD 0c0490fdbr			; -3.14159
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@befff486
CONST	SEGMENT
__real@befff486 DD 0befff486r			; -0.499912
CONST	ENDS
;	COMDAT __real@baa69eb6
CONST	SEGMENT
__real@baa69eb6 DD 0baa69eb6r			; -0.00127121
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fff90
CONST	SEGMENT
__real@3f7fff90 DD 03f7fff90r			; 0.999993
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eaaaaab
CONST	SEGMENT
__real@3eaaaaab DD 03eaaaaabr			; 0.333333
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e2aaaab
CONST	SEGMENT
__real@3e2aaaab DD 03e2aaaabr			; 0.166667
CONST	ENDS
;	COMDAT __real@3e124925
CONST	SEGMENT
__real@3e124925 DD 03e124925r			; 0.142857
CONST	ENDS
;	COMDAT __real@3e088889
CONST	SEGMENT
__real@3e088889 DD 03e088889r			; 0.133333
CONST	ENDS
;	COMDAT __real@3de38e39
CONST	SEGMENT
__real@3de38e39 DD 03de38e39r			; 0.111111
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3dba2e8c
CONST	SEGMENT
__real@3dba2e8c DD 03dba2e8cr			; 0.0909091
CONST	ENDS
;	COMDAT __real@3d99999a
CONST	SEGMENT
__real@3d99999a DD 03d99999ar			; 0.075
CONST	ENDS
;	COMDAT __real@3d5d0dd1
CONST	SEGMENT
__real@3d5d0dd1 DD 03d5d0dd1r			; 0.0539683
CONST	ENDS
;	COMDAT __real@3d36db6e
CONST	SEGMENT
__real@3d36db6e DD 03d36db6er			; 0.0446429
CONST	ENDS
;	COMDAT __real@3d2aaaab
CONST	SEGMENT
__real@3d2aaaab DD 03d2aaaabr			; 0.0416667
CONST	ENDS
;	COMDAT __real@3d29ef0e
CONST	SEGMENT
__real@3d29ef0e DD 03d29ef0er			; 0.0414877
CONST	ENDS
;	COMDAT __real@3cf8e38e
CONST	SEGMENT
__real@3cf8e38e DD 03cf8e38er			; 0.0303819
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3ab60b61
CONST	SEGMENT
__real@3ab60b61 DD 03ab60b61r			; 0.00138889
CONST	ENDS
;	COMDAT __real@37d00d01
CONST	SEGMENT
__real@37d00d01 DD 037d00d01r			; 2.48016e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'1', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec4@M$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_trunc@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z DD 022f01H
	DD	070157219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcVarDesc DD 024H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
	DD	04H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$factorial@M@glm@@YAMAEBM@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z DD 033001H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$trunc@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M@glm@@YAMMM@Z DD 021101H
	DD	0700d7211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 06H
	DB	00H
	DB	00H
	DB	'~'
	DB	02H
	DB	'd'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD 022a11H
	DD	070109214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<float,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcVarDesc DD 028H ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<float,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<float,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'U', 03H
	DB	02H
	DB	0a8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021419H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z DD 032b01H
	DD	0140112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$0 DB 050H ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec1>
	DB	06fH
	DB	077H
	DB	065H
	DB	064H
	DB	032H
	DB	00H
	ORG $+1
??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$1 DB 050H ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec1>
	DB	06fH
	DB	077H
	DB	065H
	DB	064H
	DB	034H
	DB	00H
	ORG $+1
??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$2 DB 050H ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec1>
	DB	06fH
	DB	077H
	DB	065H
	DB	064H
	DB	036H
	DB	00H
	ORG $+1
??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcFrameData DD 03H ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcVarDesc
	ORG $+8
??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 064H ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastAbs@$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@U12@@Z DD 020e01H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$taylorSeriesRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z DD 031201H
	DD	0180112H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<float,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<float,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<float,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$taylorSeriesRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD 031201H
	DD	03c0112H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD 032b01H
	DD	02c0112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$0 DB 050H ; taylorCos::taylorSeriesNewCos<float,0,glm::tvec4>
	DB	06fH
	DB	077H
	DB	065H
	DB	064H
	DB	032H
	DB	00H
	ORG $+1
??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$1 DB 050H ; taylorCos::taylorSeriesNewCos<float,0,glm::tvec4>
	DB	06fH
	DB	077H
	DB	065H
	DB	064H
	DB	034H
	DB	00H
	ORG $+1
??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$2 DB 050H ; taylorCos::taylorSeriesNewCos<float,0,glm::tvec4>
	DB	06fH
	DB	077H
	DB	065H
	DB	064H
	DB	036H
	DB	00H
	ORG $+1
??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$3 DB 050H ; taylorCos::taylorSeriesNewCos<float,0,glm::tvec4>
	DB	06fH
	DB	077H
	DB	065H
	DB	064H
	DB	038H
	DB	00H
	ORG $+1
??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 0b8H ; taylorCos::taylorSeriesNewCos<float,0,glm::tvec4>
	DD	010H
	DQ	FLAT:??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$0
	ORG $+192
??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcFrameData DD 04H ; taylorCos::taylorSeriesNewCos<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThanEqual<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThanEqual<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThanEqual<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$deterministic_fmod@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@M@Z DD 021501H
	DD	070119215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD 032b01H
	DD	0220112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$0 DB 050H ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec4>
	DB	06fH
	DB	077H
	DB	065H
	DB	064H
	DB	032H
	DB	00H
	ORG $+1
??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$1 DB 050H ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec4>
	DB	06fH
	DB	077H
	DB	065H
	DB	064H
	DB	034H
	DB	00H
	ORG $+1
??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$2 DB 050H ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec4>
	DB	06fH
	DB	077H
	DB	065H
	DB	064H
	DB	036H
	DB	00H
	ORG $+1
??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcFrameData DD 03H ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcVarDesc
	ORG $+8
??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 088H ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec4>
	DD	010H
	DQ	FLAT:??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastAbs@$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@U12@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$two_pi@M@glm@@YAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cos_52s@M@detail@glm@@YAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$half_pi@M@glm@@YAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$wrapAngle@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$0 DB 041H ; taylorCos::fastCosNew<float,0,glm::tvec1>
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	030H
	DB	05fH
	DB	050H
	DB	049H
	DB	00H
	ORG $+6
??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 024H ; taylorCos::fastCosNew<float,0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$0
	ORG $+48
??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcFrameData DD 01H ; taylorCos::fastCosNew<float,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z DD 032b01H
	DD	01e0112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$0 DB 041H ; taylorCos::fastRefCos<float,0,glm::tvec1>
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	030H
	DB	05fH
	DB	050H
	DB	049H
	DB	00H
	ORG $+6
??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$1 DB 046H ; taylorCos::fastRefCos<float,0,glm::tvec1>
	DB	069H
	DB	072H
	DB	073H
	DB	074H
	DB	051H
	DB	075H
	DB	061H
	DB	072H
	DB	074H
	DB	065H
	DB	072H
	DB	050H
	DB	069H
	DB	00H
	ORG $+1
??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$2 DB 052H ; taylorCos::fastRefCos<float,0,glm::tvec1>
	DB	065H
	DB	076H
	DB	065H
	DB	072H
	DB	074H
	DB	041H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+4
??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$3 DB 052H ; taylorCos::fastRefCos<float,0,glm::tvec1>
	DB	065H
	DB	074H
	DB	075H
	DB	072H
	DB	06eH
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+5
??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$4 DB 053H ; taylorCos::fastRefCos<float,0,glm::tvec1>
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	041H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+3
??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 0a4H ; taylorCos::fastRefCos<float,0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$4
	DD	084H
	DD	04H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$3
	DD	064H
	DD	04H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$2
	DD	044H
	DD	01H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcName$0
	ORG $+240
??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcFrameData DD 05H ; taylorCos::fastRefCos<float,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$radians@M@glm@@YAMM@Z DD 020b01H
	DD	07007120bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastCos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD 032b01H
	DD	0340112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$0 DB 041H ; taylorCos::fastRefCos<float,0,glm::tvec4>
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	030H
	DB	05fH
	DB	050H
	DB	049H
	DB	00H
	ORG $+6
??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$1 DB 046H ; taylorCos::fastRefCos<float,0,glm::tvec4>
	DB	069H
	DB	072H
	DB	073H
	DB	074H
	DB	051H
	DB	075H
	DB	061H
	DB	072H
	DB	074H
	DB	065H
	DB	072H
	DB	050H
	DB	069H
	DB	00H
	ORG $+1
??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$2 DB 052H ; taylorCos::fastRefCos<float,0,glm::tvec4>
	DB	065H
	DB	076H
	DB	065H
	DB	072H
	DB	074H
	DB	041H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+4
??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$3 DB 052H ; taylorCos::fastRefCos<float,0,glm::tvec4>
	DB	065H
	DB	074H
	DB	075H
	DB	072H
	DB	06eH
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+5
??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$4 DB 053H ; taylorCos::fastRefCos<float,0,glm::tvec4>
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	041H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+3
??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 0d8H ; taylorCos::fastRefCos<float,0,glm::tvec4>
	DD	010H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$4
	DD	0a8H
	DD	010H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$3
	DD	078H
	DD	010H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$0
	ORG $+240
??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcFrameData DD 05H ; taylorCos::fastRefCos<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD 032b01H
	DD	0340112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$0 DB 041H ; taylorCos::fastCosDeterminisctic<float,0,glm::tvec4>
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	030H
	DB	05fH
	DB	050H
	DB	049H
	DB	00H
	ORG $+6
??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$1 DB 046H ; taylorCos::fastCosDeterminisctic<float,0,glm::tvec4>
	DB	069H
	DB	072H
	DB	073H
	DB	074H
	DB	051H
	DB	075H
	DB	061H
	DB	072H
	DB	074H
	DB	065H
	DB	072H
	DB	050H
	DB	069H
	DB	00H
	ORG $+1
??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$2 DB 052H ; taylorCos::fastCosDeterminisctic<float,0,glm::tvec4>
	DB	065H
	DB	076H
	DB	065H
	DB	072H
	DB	074H
	DB	041H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+4
??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$3 DB 052H ; taylorCos::fastCosDeterminisctic<float,0,glm::tvec4>
	DB	065H
	DB	074H
	DB	075H
	DB	072H
	DB	06eH
	DB	053H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+5
??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$4 DB 053H ; taylorCos::fastCosDeterminisctic<float,0,glm::tvec4>
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	041H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+3
??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 0d8H ; taylorCos::fastCosDeterminisctic<float,0,glm::tvec4>
	DD	010H
	DQ	FLAT:??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$4
	DD	0a8H
	DD	010H
	DQ	FLAT:??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$3
	DD	078H
	DD	010H
	DQ	FLAT:??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$0
	ORG $+240
??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcFrameData DD 05H ; taylorCos::fastCosDeterminisctic<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z DD 042c01H
	DD	0150113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$0 DB 041H ; taylorCos::fastCosNew<float,0,glm::tvec4>
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	030H
	DB	05fH
	DB	050H
	DB	049H
	DB	00H
	ORG $+6
??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 028H ; taylorCos::fastCosNew<float,0,glm::tvec4>
	DD	010H
	DQ	FLAT:??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcName$0
	ORG $+48
??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcFrameData DD 01H ; taylorCos::fastCosNew<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcName$0 DB 05fH ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcVarDesc DD 024H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcFrameData DD 01H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf_cos@taylorCos@@YAHMM_K@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf_fastCosOld@taylorCos@@YAHMM_K@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf_fastCosRef@taylorCos@@YAHMM_K@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf_fastCosNew@taylorCos@@YAHMM_K@Z@4HA
	DD	00H
	DD	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EAngleShift@taylorCos@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastAtan@M@glm@@YAMM@Z DD 020b01H
	DD	07007120bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastAsin@M@glm@@YAMM@Z DD 020b01H
	DD	07007120bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastAcos@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastTan@M@glm@@YAMM@Z DD 020b01H
	DD	07007120bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastSin@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fastCos@M@glm@@YAMM@Z DD 020b01H
	DD	07007720bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pi@M@glm@@YAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
xdata	SEGMENT
$unwind$?perf@fastCos@@YAH_N@Z DD 022501H
	DD	07005f20cH
$unwind$?perf@fastSin@@YAH_N@Z DD 022501H
	DD	07005f20cH
$unwind$?perf@fastTan@@YAH_N@Z DD 022501H
	DD	07005f20cH
$unwind$?perf@fastAcos@@YAH_N@Z DD 022501H
	DD	07005f20cH
$unwind$?perf@fastAsin@@YAH_N@Z DD 022501H
	DD	07005f20cH
$unwind$?perf@fastAtan@@YAH_N@Z DD 022501H
	DD	07005f20cH
$unwind$?perf_fastCosNew@taylorCos@@YAHMM_K@Z DD 042b11H
	DD	019011aH
	DD	060127013H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf_fastCosNew@taylorCos@@YAHMM_K@Z
$cppxdata$?perf_fastCosNew@taylorCos@@YAHMM_K@Z DB 028H
	DD	imagerel $stateUnwindMap$?perf_fastCosNew@taylorCos@@YAHMM_K@Z
	DD	imagerel $ip2state$?perf_fastCosNew@taylorCos@@YAHMM_K@Z
$stateUnwindMap$?perf_fastCosNew@taylorCos@@YAHMM_K@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf_fastCosNew@taylorCos@@YAHMM_K@Z@4HA
$ip2state$?perf_fastCosNew@taylorCos@@YAHMM_K@Z DB 06H
	DB	00H
	DB	00H
	DB	'l'
	DB	02H
	DB	09H, 08H
	DB	00H
$cppxdata$?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z DB 028H
	DD	imagerel $stateUnwindMap$?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z
	DD	imagerel $ip2state$?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z
$unwind$?dtor$0@?0??perf_fastCosNew@taylorCos@@YAHMM_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z DD 042b11H
	DD	019011aH
	DD	060127013H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z
$stateUnwindMap$?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z@4HA
$ip2state$?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z DB 06H
	DB	00H
	DB	00H
	DB	'l'
	DB	02H
	DB	09H, 08H
	DB	00H
$cppxdata$?perf_fastCosRef@taylorCos@@YAHMM_K@Z DB 028H
	DD	imagerel $stateUnwindMap$?perf_fastCosRef@taylorCos@@YAHMM_K@Z
	DD	imagerel $ip2state$?perf_fastCosRef@taylorCos@@YAHMM_K@Z
$cppxdata$?perf_fastCosOld@taylorCos@@YAHMM_K@Z DB 028H
	DD	imagerel $stateUnwindMap$?perf_fastCosOld@taylorCos@@YAHMM_K@Z
	DD	imagerel $ip2state$?perf_fastCosOld@taylorCos@@YAHMM_K@Z
$unwind$?dtor$0@?0??perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?perf_fastCosRef@taylorCos@@YAHMM_K@Z DD 042b11H
	DD	019011aH
	DD	060127013H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf_fastCosRef@taylorCos@@YAHMM_K@Z
$stateUnwindMap$?perf_fastCosRef@taylorCos@@YAHMM_K@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf_fastCosRef@taylorCos@@YAHMM_K@Z@4HA
$ip2state$?perf_fastCosRef@taylorCos@@YAHMM_K@Z DB 06H
	DB	00H
	DB	00H
	DB	'l'
	DB	02H
	DB	09H, 08H
	DB	00H
$stateUnwindMap$?perf_fastCosOld@taylorCos@@YAHMM_K@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf_fastCosOld@taylorCos@@YAHMM_K@Z@4HA
$unwind$?dtor$0@?0??perf_fastCosRef@taylorCos@@YAHMM_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?perf_fastCosOld@taylorCos@@YAHMM_K@Z DD 042b11H
	DD	019011aH
	DD	060127013H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf_fastCosOld@taylorCos@@YAHMM_K@Z
$ip2state$?perf_fastCosOld@taylorCos@@YAHMM_K@Z DB 06H
	DB	00H
	DB	00H
	DB	'l'
	DB	02H
	DB	09H, 08H
	DB	00H
$unwind$?dtor$0@?0??perf_fastCosOld@taylorCos@@YAHMM_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?perf_cos@taylorCos@@YAHMM_K@Z DD 042b11H
	DD	019011aH
	DD	060127013H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf_cos@taylorCos@@YAHMM_K@Z
$cppxdata$?perf_cos@taylorCos@@YAHMM_K@Z DB 028H
	DD	imagerel $stateUnwindMap$?perf_cos@taylorCos@@YAHMM_K@Z
	DD	imagerel $ip2state$?perf_cos@taylorCos@@YAHMM_K@Z
$stateUnwindMap$?perf_cos@taylorCos@@YAHMM_K@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf_cos@taylorCos@@YAHMM_K@Z@4HA
$ip2state$?perf_cos@taylorCos@@YAHMM_K@Z DB 06H
	DB	00H
	DB	00H
	DB	'l'
	DB	02H
	DB	09H, 08H
	DB	00H
	ORG $+1
$unwind$?dtor$0@?0??perf_cos@taylorCos@@YAHMM_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?perf@taylorCos@@YAH_K@Z DD 020a01H
	DD	07006520aH
$unwind$?test@taylorCos@@YAHXZ DD 020601H
	DD	070029206H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
	ORG $+3
?perf@fastCos@@YAH_N@Z$rtcName$0 DB 069H		; fastCos::perf
	DB	00H
	ORG $+2
?perf@fastCos@@YAH_N@Z$rtcName$1 DB 069H		; fastCos::perf
	DB	00H
	ORG $+2
?perf@fastCos@@YAH_N@Z$rtcVarDesc DD 054H		; fastCos::perf
	DD	04H
	DQ	FLAT:?perf@fastCos@@YAH_N@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?perf@fastCos@@YAH_N@Z$rtcName$0
	ORG $+96
?perf@fastCos@@YAH_N@Z$rtcFrameData DD 02H		; fastCos::perf
	DD	00H
	DQ	FLAT:?perf@fastCos@@YAH_N@Z$rtcVarDesc
?perf@fastSin@@YAH_N@Z$rtcName$0 DB 069H		; fastSin::perf
	DB	00H
	ORG $+2
?perf@fastSin@@YAH_N@Z$rtcName$1 DB 069H		; fastSin::perf
	DB	00H
	ORG $+2
?perf@fastSin@@YAH_N@Z$rtcFrameData DD 02H		; fastSin::perf
	DD	00H
	DQ	FLAT:?perf@fastSin@@YAH_N@Z$rtcVarDesc
?perf@fastTan@@YAH_N@Z$rtcName$0 DB 069H		; fastTan::perf
	DB	00H
	ORG $+6
?perf@fastSin@@YAH_N@Z$rtcVarDesc DD 054H		; fastSin::perf
	DD	04H
	DQ	FLAT:?perf@fastSin@@YAH_N@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?perf@fastSin@@YAH_N@Z$rtcName$0
	ORG $+96
?perf@fastTan@@YAH_N@Z$rtcName$1 DB 069H		; fastTan::perf
	DB	00H
	ORG $+6
?perf@fastTan@@YAH_N@Z$rtcFrameData DD 02H		; fastTan::perf
	DD	00H
	DQ	FLAT:?perf@fastTan@@YAH_N@Z$rtcVarDesc
?perf@fastAcos@@YAH_N@Z$rtcName$0 DB 069H		; fastAcos::perf
	DB	00H
	ORG $+6
?perf@fastTan@@YAH_N@Z$rtcVarDesc DD 054H		; fastTan::perf
	DD	04H
	DQ	FLAT:?perf@fastTan@@YAH_N@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?perf@fastTan@@YAH_N@Z$rtcName$0
	ORG $+96
?perf@fastAcos@@YAH_N@Z$rtcName$1 DB 069H		; fastAcos::perf
	DB	00H
	ORG $+6
?perf@fastAcos@@YAH_N@Z$rtcFrameData DD 02H		; fastAcos::perf
	DD	00H
	DQ	FLAT:?perf@fastAcos@@YAH_N@Z$rtcVarDesc
?perf@fastAsin@@YAH_N@Z$rtcName$0 DB 069H		; fastAsin::perf
	DB	00H
	ORG $+6
?perf@fastAcos@@YAH_N@Z$rtcVarDesc DD 054H		; fastAcos::perf
	DD	04H
	DQ	FLAT:?perf@fastAcos@@YAH_N@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?perf@fastAcos@@YAH_N@Z$rtcName$0
	ORG $+96
?perf@fastAsin@@YAH_N@Z$rtcName$1 DB 069H		; fastAsin::perf
	DB	00H
	ORG $+6
?perf@fastAsin@@YAH_N@Z$rtcFrameData DD 02H		; fastAsin::perf
	DD	00H
	DQ	FLAT:?perf@fastAsin@@YAH_N@Z$rtcVarDesc
?perf@fastAtan@@YAH_N@Z$rtcName$0 DB 069H		; fastAtan::perf
	DB	00H
	ORG $+6
?perf@fastAsin@@YAH_N@Z$rtcVarDesc DD 054H		; fastAsin::perf
	DD	04H
	DQ	FLAT:?perf@fastAsin@@YAH_N@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?perf@fastAsin@@YAH_N@Z$rtcName$0
	ORG $+96
?perf@fastAtan@@YAH_N@Z$rtcName$1 DB 069H		; fastAtan::perf
	DB	00H
	ORG $+6
?perf@fastAtan@@YAH_N@Z$rtcFrameData DD 02H		; fastAtan::perf
	DD	00H
	DQ	FLAT:?perf@fastAtan@@YAH_N@Z$rtcVarDesc
?perf_fastCosNew@taylorCos@@YAHMM_K@Z$rtcName$0 DB 052H	; taylorCos::perf_fastCosNew
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	073H
	DB	00H
?perf@fastAtan@@YAH_N@Z$rtcVarDesc DD 054H		; fastAtan::perf
	DD	04H
	DQ	FLAT:?perf@fastAtan@@YAH_N@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?perf@fastAtan@@YAH_N@Z$rtcName$0
	ORG $+96
?perf_fastCosNew@taylorCos@@YAHMM_K@Z$rtcVarDesc DD 028H ; taylorCos::perf_fastCosNew
	DD	020H
	DQ	FLAT:?perf_fastCosNew@taylorCos@@YAHMM_K@Z$rtcName$0
	ORG $+48
?perf_fastCosNew@taylorCos@@YAHMM_K@Z$rtcFrameData DD 01H ; taylorCos::perf_fastCosNew
	DD	00H
	DQ	FLAT:?perf_fastCosNew@taylorCos@@YAHMM_K@Z$rtcVarDesc
?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z$rtcName$0 DB 052H ; taylorCos::perf_fastCosDeterminisctic
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	073H
	DB	00H
?perf_fastCosRef@taylorCos@@YAHMM_K@Z$rtcName$0 DB 052H	; taylorCos::perf_fastCosRef
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	073H
	DB	00H
?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z$rtcVarDesc DD 028H ; taylorCos::perf_fastCosDeterminisctic
	DD	020H
	DQ	FLAT:?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z$rtcName$0
	ORG $+48
?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z$rtcFrameData DD 01H ; taylorCos::perf_fastCosDeterminisctic
	DD	00H
	DQ	FLAT:?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z$rtcVarDesc
?perf_fastCosRef@taylorCos@@YAHMM_K@Z$rtcVarDesc DD 028H ; taylorCos::perf_fastCosRef
	DD	020H
	DQ	FLAT:?perf_fastCosRef@taylorCos@@YAHMM_K@Z$rtcName$0
	ORG $+48
?perf_fastCosRef@taylorCos@@YAHMM_K@Z$rtcFrameData DD 01H ; taylorCos::perf_fastCosRef
	DD	00H
	DQ	FLAT:?perf_fastCosRef@taylorCos@@YAHMM_K@Z$rtcVarDesc
?perf_fastCosOld@taylorCos@@YAHMM_K@Z$rtcName$0 DB 052H	; taylorCos::perf_fastCosOld
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	073H
	DB	00H
?perf_cos@taylorCos@@YAHMM_K@Z$rtcName$0 DB 052H	; taylorCos::perf_cos
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	073H
	DB	00H
?perf_fastCosOld@taylorCos@@YAHMM_K@Z$rtcVarDesc DD 028H ; taylorCos::perf_fastCosOld
	DD	020H
	DQ	FLAT:?perf_fastCosOld@taylorCos@@YAHMM_K@Z$rtcName$0
	ORG $+48
?perf_fastCosOld@taylorCos@@YAHMM_K@Z$rtcFrameData DD 01H ; taylorCos::perf_fastCosOld
	DD	00H
	DQ	FLAT:?perf_fastCosOld@taylorCos@@YAHMM_K@Z$rtcVarDesc
?perf_cos@taylorCos@@YAHMM_K@Z$rtcVarDesc DD 028H	; taylorCos::perf_cos
	DD	020H
	DQ	FLAT:?perf_cos@taylorCos@@YAHMM_K@Z$rtcName$0
	ORG $+48
?perf_cos@taylorCos@@YAHMM_K@Z$rtcFrameData DD 01H	; taylorCos::perf_cos
	DD	00H
	DQ	FLAT:?perf_cos@taylorCos@@YAHMM_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$next_float@M@glm@@YAMAEBM@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?trunc@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?tan@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sin@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?nextafter@@YAMMM@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fmod@@YAMMM@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?floor@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?atan@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?asin@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?acos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@M@std@@SAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec1>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 393  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 394  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 			v1.x / v2.x);
; 396  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec4<float,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<float,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 681  :         }
; 682  :     }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z PROC ; std::forward<glm::tvec4<float,0> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ENDP ; std::forward<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_To_address<glm::tvec4<float,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_To_address<glm::tvec4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_div<float,0,0>::call, COMDAT

; 68   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 69   : 			return tvec4<T, P>(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	divss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	divss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	divss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	divss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 70   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_div<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
__$ReturnUdt$ = 64
a$ = 72
b$ = 80
?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call, COMDAT

; 254  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 255  : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
; 256  : 			return a - b * floor(a / b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec1>
	mov	r8, rax
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 257  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec4@M$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
??$construct@U?$tvec4@M$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<float,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@XZ		; glm::tvec4<float,0>::tvec4<float,0>

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@U?$tvec4@M$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z PROC ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z ENDP ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec4<float,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z PROC ; std::move<glm::tvec4<float,0> &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ENDP ; std::move<glm::tvec4<float,0> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_trunc@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_trunc@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_trunc<float,0,glm::tvec4,0>::call, COMDAT

; 236  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 237  : 			return detail::functor1<T, T, P, vecType>::call(trunc, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?trunc@@YAMM@Z		; trunc
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 238  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_trunc@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_trunc<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator/=<float>, COMDAT

; 432  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 433  : 		return (*this = detail::compute_vec4_div<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 434  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z PROC ; glm::mod<float,0,glm::tvec1>, COMDAT

; 453  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 454  : 		return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, vecType<T, P>(y));

	movss	xmm1, DWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 455  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ENDP ; glm::mod<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 67   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
a$ = 64
b$ = 72
?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec1>::call, COMDAT

; 60   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 61   : 			return tvec1<T, P>(Func(a.x, b.x));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv78 = 56
__$ReturnUdt$ = 80
Func$ = 88
a$ = 96
b$ = 104
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec4>::call, COMDAT

; 87   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 88   : 			return tvec4<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z), Func(a.w, b.w));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 130  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG61097
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG61098
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 135				; 00000087H
	lea	rdx, OFFSET FLAT:$SG61099
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG61100
	lea	rdx, OFFSET FLAT:$SG61101
	lea	rcx, OFFSET FLAT:$SG61102
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 143  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 669  :         }
; 670  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec4@M$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR _Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 16
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<float,0> &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 358  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 359  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 360  : 			v.x * scalar);
; 361  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 329  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 331  : 			v1.x + v2.x);
; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
scalar$ = 56
v$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@MAEBU10@@Z PROC	; glm::operator-<float,0>, COMDAT

; 344  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 345  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	subss	xmm0, DWORD PTR [rax]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 346  : 			scalar - v.x);
; 347  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 379  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 380  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR scalar$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 			v.x / scalar);
; 382  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv83 = 56
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
a$ = 104
?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<float,0>::tvec1<float,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec1<float,0>::operator[]
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_fmod<float,0,glm::tvec1,1>::call, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 14   : 			return detail::functor2<T, P, vecType>::call(std::fmod, a, b);

	mov	r9, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR a$[rsp]
	lea	rdx, OFFSET FLAT:?fmod@@YAMMM@Z		; fmod
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 15   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_fmod<float,0,glm::tvec1,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\integer.inl
;	COMDAT ??$factorial@M@glm@@YAMAEBM@Z
_TEXT	SEGMENT
Temp$ = 16
Result$ = 20
x$ = 48
??$factorial@M@glm@@YAMAEBM@Z PROC			; glm::factorial<float>, COMDAT

; 74   : 	{

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 75   : 		genType Temp = x;

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR Temp$[rsp], xmm0

; 76   : 		genType Result;
; 77   : 		for(Result = 1; Temp > 1; --Temp)

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR Result$[rsp], xmm0
	jmp	SHORT $LN4@factorial
$LN2@factorial:
	movss	xmm0, DWORD PTR Temp$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR Temp$[rsp], xmm0
$LN4@factorial:
	movss	xmm0, DWORD PTR Temp$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN3@factorial

; 78   : 			Result *= Temp;

	movss	xmm0, DWORD PTR Result$[rsp]
	mulss	xmm0, DWORD PTR Temp$[rsp]
	movss	DWORD PTR Result$[rsp], xmm0
	jmp	SHORT $LN2@factorial
$LN3@factorial:

; 79   : 		return Result;

	movss	xmm0, DWORD PTR Result$[rsp]

; 80   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$factorial@M@glm@@YAMAEBM@Z ENDP			; glm::factorial<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv83 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
a$ = 136
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
scalar$ = 88
v$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 706  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 707  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 708  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$trunc@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$trunc@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::trunc<float,0,glm::tvec4>, COMDAT

; 353  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 354  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'trunc' only accept floating-point inputs");
; 355  : 		return detail::compute_trunc<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_trunc@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_trunc<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 356  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$trunc@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::trunc<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 724  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 725  : 		return tvec4<T, P>(v) /= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator/=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 726  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
scalar$ = 88
v$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z PROC	; glm::operator-<float,0>, COMDAT

; 676  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 677  : 		return tvec4<T, P>(scalar) -= v;

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, rax
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 678  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 390  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 391  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 392  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_fmod<float,0,glm::tvec4,1>::call, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 14   : 			return detail::functor2<T, P, vecType>::call(std::fmod, a, b);

	mov	r9, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR a$[rsp]
	lea	rdx, OFFSET FLAT:?fmod@@YAMMM@Z		; fmod
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 15   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_fmod<float,0,glm::tvec4,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 369  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 370  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 371  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M@glm@@YAMMM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
x$ = 80
y$ = 88
??$mod@M@glm@@YAMMM@Z PROC				; glm::mod<float>, COMDAT

; 441  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H

; 442  : #		if GLM_COMPILER & GLM_COMPILER_CUDA
; 443  : 			// Another Cuda compiler bug https://github.com/g-truc/glm/issues/530
; 444  : 			tvec1<genType, defaultp> Result(mod(tvec1<genType, defaultp>(x), y));
; 445  : 			return Result.x;
; 446  : #		else
; 447  : 			return mod(tvec1<genType, defaultp>(x), y).x;

	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	movss	xmm2, DWORD PTR y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::mod<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]

; 448  : #		endif
; 449  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$mod@M@glm@@YAMMM@Z ENDP				; glm::mod<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 972  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 973  :     // deallocate a plain pointer using an allocator
; 974  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 975  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 976  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 977  :     } else {
; 978  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 979  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 980  :     }
; 981  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<float,0> > >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);
; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1843 :             return _First + _Count;
; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
	npad	1

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
	mov	rax, QWORD PTR $T4[rsp]

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<float,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<float,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Resize_reallocate<std::_Value_init_tag>, COMDAT

; 1357 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 1358 :         if (_Newsize > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Resize_rea

; 1359 :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength
$LN2@Resize_rea:

; 1360 :         }
; 1361 : 
; 1362 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1363 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1364 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1365 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1366 : 
; 1367 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1368 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 1369 : 
; 1370 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1371 :         const pointer _Appended_first = _Newvec + _Oldsize;

	imul	rax, QWORD PTR _Oldsize$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Appended_first$[rsp], rax

; 1372 :         pointer _Appended_last        = _Appended_first;

	mov	rax, QWORD PTR _Appended_first$[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1373 : 
; 1374 :         _TRY_BEGIN
; 1375 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1376 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1377 :         } else {
; 1378 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1379 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Appended_first$[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<float,0> > >
	mov	QWORD PTR tv140[rsp], rax
	mov	rax, QWORD PTR tv140[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1380 :         }
; 1381 : 
; 1382 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1383 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	npad	1
	jmp	SHORT $LN7@Resize_rea
$LN8@Resize_rea:
$LN7@Resize_rea:

; 1384 :         } else {
; 1385 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1386 :         }
; 1387 :         _CATCH_ALL
; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);
; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);
; 1390 :         _RERAISE;
; 1391 :         _CATCH_END
; 1392 : 
; 1393 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array

; 1394 :     }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
$LN9@Resize_rea:
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA PROC ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0

; 1387 :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z$0:

; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Appended_last$[rbp]
	mov	rcx, QWORD PTR _Appended_first$[rbp]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate

; 1390 :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 1391 :         _CATCH_END

	lea	rax, $LN8@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA ENDP ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
Powed2$ = 36
Powed4$ = 68
Powed6$ = 100
$T6 = 116
$T7 = 120
$T8 = 124
$T9 = 128
$T10 = 132
tv74 = 136
tv80 = 144
__$ReturnUdt$ = 176
x$ = 184
??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z PROC ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec1>, COMDAT

; 194  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 195  : 		vecType<T, P> const Powed2(x * x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR Powed2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 196  : 		vecType<T, P> const Powed4(Powed2 * Powed2);

	lea	r8, QWORD PTR Powed2$[rsp]
	lea	rdx, QWORD PTR Powed2$[rsp]
	lea	rcx, QWORD PTR Powed4$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 197  : 		vecType<T, P> const Powed6(Powed4 * Powed2);

	lea	r8, QWORD PTR Powed2$[rsp]
	lea	rdx, QWORD PTR Powed4$[rsp]
	lea	rcx, QWORD PTR Powed6$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 198  : 
; 199  : 		return static_cast<T>(1)

	movss	xmm2, DWORD PTR __real@3ab60b61
	lea	rdx, QWORD PTR Powed6$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	movss	xmm2, DWORD PTR __real@3d2aaaab
	lea	rdx, QWORD PTR Powed4$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv80[rsp], rax
	movss	xmm2, DWORD PTR __real@3f000000
	lea	rdx, QWORD PTR Powed2$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv80[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 200  : 			- Powed2 * static_cast<T>(0.5)
; 201  : 			+ Powed4 * static_cast<T>(0.04166666666666666666666666666667)
; 202  : 			- Powed6 * static_cast<T>(0.00138888888888888888888888888889);
; 203  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ENDP ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$fastAbs@$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@U12@@Z
_TEXT	SEGMENT
Pointer$ = 32
__$ReturnUdt$ = 64
x$ = 72
??$fastAbs@$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@U12@@Z PROC ; taylorCos::fastAbs<0,glm::tvec1>, COMDAT

; 207  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 208  : 		int* Pointer = reinterpret_cast<int*>(&x[0]);

	xor	edx, edx
	lea	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec1<float,0>::operator[]
	mov	QWORD PTR Pointer$[rsp], rax

; 209  : 		Pointer[0] &= 0x7fffffff;

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Pointer$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	btr	eax, 31
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR Pointer$[rsp]
	mov	DWORD PTR [rdx+rcx], eax

; 210  : 		Pointer[1] &= 0x7fffffff;

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Pointer$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	btr	eax, 31
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR Pointer$[rsp]
	mov	DWORD PTR [rdx+rcx], eax

; 211  : 		Pointer[2] &= 0x7fffffff;

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR Pointer$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	btr	eax, 31
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR Pointer$[rsp]
	mov	DWORD PTR [rdx+rcx], eax

; 212  : 		Pointer[3] &= 0x7fffffff;

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR Pointer$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	btr	eax, 31
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR Pointer$[rsp]
	mov	DWORD PTR [rdx+rcx], eax

; 213  : 		return x;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 214  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$fastAbs@$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@U12@@Z ENDP ; taylorCos::fastAbs<0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 372  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 373  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 			v1.x * v2.x);
; 375  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$taylorSeriesRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
$T5 = 48
$T6 = 52
$T7 = 56
$T8 = 60
$T9 = 64
$T10 = 68
$T11 = 72
$T12 = 76
$T13 = 80
$T14 = 84
$T15 = 88
$T16 = 92
$T17 = 96
$T18 = 100
$T19 = 104
$T20 = 108
$T21 = 112
$T22 = 116
$T23 = 120
$T24 = 124
$T25 = 128
$T26 = 132
$T27 = 136
tv66 = 140
tv65 = 144
tv134 = 152
tv133 = 160
tv162 = 168
tv161 = 176
tv182 = 184
__$ReturnUdt$ = 208
x$ = 216
??$taylorSeriesRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z PROC ; taylorCos::taylorSeriesRefCos<float,0,glm::tvec1>, COMDAT

; 297  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 192				; 000000c0H

; 298  : 		return static_cast<T>(1)

	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR $T1[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR $T10[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR $T17[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T22[rsp], xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$factorial@M@glm@@YAMAEBM@Z		; glm::factorial<float>
	movss	DWORD PTR tv66[rsp], xmm0
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	movss	xmm0, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$factorial@M@glm@@YAMAEBM@Z		; glm::factorial<float>
	movss	DWORD PTR tv134[rsp], xmm0
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	movss	xmm0, DWORD PTR tv134[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv133[rsp], rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$factorial@M@glm@@YAMAEBM@Z		; glm::factorial<float>
	movss	DWORD PTR tv162[rsp], xmm0
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	movss	xmm0, DWORD PTR tv162[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv161[rsp], rax
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$factorial@M@glm@@YAMAEBM@Z		; glm::factorial<float>
	movss	DWORD PTR tv182[rsp], xmm0
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	movss	xmm0, DWORD PTR tv182[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv161[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv133[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 299  : 			- (x * x) / glm::factorial(static_cast<T>(2))
; 300  : 			+ (x * x * x * x) / glm::factorial(static_cast<T>(4))
; 301  : 			- (x * x * x * x * x * x) / glm::factorial(static_cast<T>(6))
; 302  : 			+ (x * x * x * x * x * x * x * x) / glm::factorial(static_cast<T>(8));
; 303  : 	}

	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
??$taylorSeriesRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ENDP ; taylorCos::taylorSeriesRefCos<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z PROC ; glm::mix<float,bool,0,glm::tvec1>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@M_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ENDP ; glm::mix<float,bool,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<bool,0>::tvec1<bool,0>, COMDAT

; 34   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<bool,0>::tvec1<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 71   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 73   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 74   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_N$0A@@glm@@SAHXZ PROC			; glm::tvec1<bool,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z PROC ; glm::lessThanEqual<float,0,glm::tvec1>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ENDP ; glm::lessThanEqual<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec1>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z PROC	; glm::operator-<float,0>, COMDAT

; 337  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 338  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR scalar$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 339  : 			v.x - scalar);
; 340  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z PROC ; glm::fmod<float,0,glm::tvec1>, COMDAT

; 103  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 104  : 		return detail::compute_fmod<T, P, vecType, std::numeric_limits<T>::is_iec559>::call(x, vecType<T, P>(y));

	movss	xmm1, DWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fmod@M$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<float,0,glm::tvec1,1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 105  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ENDP ; glm::fmod<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z PROC	; glm::operator+<float,0>, COMDAT

; 315  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 316  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR scalar$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 317  : 			v.x + scalar);
; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$taylorSeriesRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 52
$T4 = 68
$T5 = 84
$T6 = 100
$T7 = 116
$T8 = 132
$T9 = 148
$T10 = 164
$T11 = 168
$T12 = 184
$T13 = 200
$T14 = 216
$T15 = 232
$T16 = 248
$T17 = 264
$T18 = 268
$T19 = 284
$T20 = 300
$T21 = 316
$T22 = 332
$T23 = 336
$T24 = 352
$T25 = 368
$T26 = 384
$T27 = 400
tv66 = 416
tv65 = 424
tv134 = 432
tv133 = 440
tv162 = 448
tv161 = 456
tv182 = 464
__$ReturnUdt$ = 496
x$ = 504
??$taylorSeriesRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z PROC ; taylorCos::taylorSeriesRefCos<float,0,glm::tvec4>, COMDAT

; 297  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 480				; 000001e0H

; 298  : 		return static_cast<T>(1)

	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR $T1[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR $T10[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR $T17[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T22[rsp], xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$factorial@M@glm@@YAMAEBM@Z		; glm::factorial<float>
	movss	DWORD PTR tv66[rsp], xmm0
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	movss	xmm0, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$factorial@M@glm@@YAMAEBM@Z		; glm::factorial<float>
	movss	DWORD PTR tv134[rsp], xmm0
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	movss	xmm0, DWORD PTR tv134[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv133[rsp], rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$factorial@M@glm@@YAMAEBM@Z		; glm::factorial<float>
	movss	DWORD PTR tv162[rsp], xmm0
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	movss	xmm0, DWORD PTR tv162[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv161[rsp], rax
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$factorial@M@glm@@YAMAEBM@Z		; glm::factorial<float>
	movss	DWORD PTR tv182[rsp], xmm0
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	movss	xmm0, DWORD PTR tv182[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv161[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv133[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 299  : 			- (x * x) / glm::factorial(static_cast<T>(2))
; 300  : 			+ (x * x * x * x) / glm::factorial(static_cast<T>(4))
; 301  : 			- (x * x * x * x * x * x) / glm::factorial(static_cast<T>(6))
; 302  : 			+ (x * x * x * x * x * x * x * x) / glm::factorial(static_cast<T>(8));
; 303  : 	}

	add	rsp, 480				; 000001e0H
	pop	rdi
	ret	0
??$taylorSeriesRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ENDP ; taylorCos::taylorSeriesRefCos<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
Powed2$ = 40
Powed4$ = 88
Powed6$ = 136
Powed8$ = 184
$T7 = 212
$T8 = 228
$T9 = 244
$T10 = 260
$T11 = 276
$T12 = 292
$T13 = 308
tv77 = 328
tv83 = 336
tv89 = 344
__$ReturnUdt$ = 368
x$ = 376
??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z PROC ; taylorCos::taylorSeriesNewCos<float,0,glm::tvec4>, COMDAT

; 179  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 352				; 00000160H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+368]

; 180  : 		vecType<T, P> const Powed2(x * x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR Powed2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 181  : 		vecType<T, P> const Powed4(Powed2 * Powed2);

	lea	r8, QWORD PTR Powed2$[rsp]
	lea	rdx, QWORD PTR Powed2$[rsp]
	lea	rcx, QWORD PTR Powed4$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 182  : 		vecType<T, P> const Powed6(Powed4 * Powed2);

	lea	r8, QWORD PTR Powed2$[rsp]
	lea	rdx, QWORD PTR Powed4$[rsp]
	lea	rcx, QWORD PTR Powed6$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 183  : 		vecType<T, P> const Powed8(Powed4 * Powed4);

	lea	r8, QWORD PTR Powed4$[rsp]
	lea	rdx, QWORD PTR Powed4$[rsp]
	lea	rcx, QWORD PTR Powed8$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 184  : 
; 185  : 		return static_cast<T>(1)

	movss	xmm2, DWORD PTR __real@37d00d01
	lea	rdx, QWORD PTR Powed8$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv77[rsp], rax
	movss	xmm2, DWORD PTR __real@3ab60b61
	lea	rdx, QWORD PTR Powed6$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv83[rsp], rax
	movss	xmm2, DWORD PTR __real@3d2aaaab
	lea	rdx, QWORD PTR Powed4$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv89[rsp], rax
	movss	xmm2, DWORD PTR __real@3f000000
	lea	rdx, QWORD PTR Powed2$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv89[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv83[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv77[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 186  : 			- Powed2 * static_cast<T>(0.5)
; 187  : 			+ Powed4 * static_cast<T>(0.04166666666666666666666666666667)
; 188  : 			- Powed6 * static_cast<T>(0.00138888888888888888888888888889)
; 189  : 			+ Powed8 * static_cast<T>(2.4801587301587301587301587301587e-5);
; 190  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 352				; 00000160H
	pop	rdi
	ret	0
??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ENDP ; taylorCos::taylorSeriesNewCos<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::mix<float,bool,0,glm::tvec4>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::mix<float,bool,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::lessThanEqual<float,0,glm::tvec4>, COMDAT

; 22   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 23   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThanEq
	mov	r8d, 23
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThanEq:

; 24   : 
; 25   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 26   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThanEq
$LN2@lessThanEq:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThanEq:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThanEq

; 27   : 			Result[i] = x[i] <= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN7@lessThanEq
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThanEq
$LN7@lessThanEq:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThanEq:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThanEq
$LN3@lessThanEq:

; 28   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::lessThanEqual<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$deterministic_fmod@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$deterministic_fmod@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@M@Z PROC ; taylorCos::deterministic_fmod<float,0,glm::tvec4>, COMDAT

; 256  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 257  : 		return x - y * trunc(x / y);

	movss	xmm2, DWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$trunc@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::trunc<float,0,glm::tvec4>
	mov	r8, rax
	movss	xmm1, DWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 258  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$deterministic_fmod@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@M@Z ENDP ; taylorCos::deterministic_fmod<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
Powed2$ = 40
Powed4$ = 88
Powed6$ = 136
$T6 = 164
$T7 = 180
$T8 = 196
$T9 = 212
$T10 = 228
tv74 = 248
tv80 = 256
__$ReturnUdt$ = 288
x$ = 296
??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z PROC ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec4>, COMDAT

; 194  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+288]

; 195  : 		vecType<T, P> const Powed2(x * x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR Powed2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 196  : 		vecType<T, P> const Powed4(Powed2 * Powed2);

	lea	r8, QWORD PTR Powed2$[rsp]
	lea	rdx, QWORD PTR Powed2$[rsp]
	lea	rcx, QWORD PTR Powed4$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 197  : 		vecType<T, P> const Powed6(Powed4 * Powed2);

	lea	r8, QWORD PTR Powed2$[rsp]
	lea	rdx, QWORD PTR Powed4$[rsp]
	lea	rcx, QWORD PTR Powed6$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 198  : 
; 199  : 		return static_cast<T>(1)

	movss	xmm2, DWORD PTR __real@3ab60b61
	lea	rdx, QWORD PTR Powed6$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	movss	xmm2, DWORD PTR __real@3d2aaaab
	lea	rdx, QWORD PTR Powed4$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv80[rsp], rax
	movss	xmm2, DWORD PTR __real@3f000000
	lea	rdx, QWORD PTR Powed2$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv80[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 200  : 			- Powed2 * static_cast<T>(0.5)
; 201  : 			+ Powed4 * static_cast<T>(0.04166666666666666666666666666667)
; 202  : 			- Powed6 * static_cast<T>(0.00138888888888888888888888888889);
; 203  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 272				; 00000110H
	pop	rdi
	ret	0
??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ENDP ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$fastAbs@$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@U12@@Z
_TEXT	SEGMENT
Pointer$ = 32
__$ReturnUdt$ = 80
x$ = 88
??$fastAbs@$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@U12@@Z PROC ; taylorCos::fastAbs<0,glm::tvec4>, COMDAT

; 207  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 208  : 		int* Pointer = reinterpret_cast<int*>(&x[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR Pointer$[rsp], rax

; 209  : 		Pointer[0] &= 0x7fffffff;

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Pointer$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	btr	eax, 31
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR Pointer$[rsp]
	mov	DWORD PTR [rdx+rcx], eax

; 210  : 		Pointer[1] &= 0x7fffffff;

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Pointer$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	btr	eax, 31
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR Pointer$[rsp]
	mov	DWORD PTR [rdx+rcx], eax

; 211  : 		Pointer[2] &= 0x7fffffff;

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR Pointer$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	btr	eax, 31
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR Pointer$[rsp]
	mov	DWORD PTR [rdx+rcx], eax

; 212  : 		Pointer[3] &= 0x7fffffff;

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR Pointer$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	btr	eax, 31
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR Pointer$[rsp]
	mov	DWORD PTR [rdx+rcx], eax

; 213  : 		return x;

	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR x$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 214  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$fastAbs@$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@U12@@Z ENDP ; taylorCos::fastAbs<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator-<float,0>, COMDAT

; 664  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 665  : 		return tvec4<T, P>(v) -= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\common.inl
;	COMDAT ??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC ; glm::fmod<float,0,glm::tvec4>, COMDAT

; 103  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 104  : 		return detail::compute_fmod<T, P, vecType, std::numeric_limits<T>::is_iec559>::call(x, vecType<T, P>(y));

	movss	xmm1, DWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fmod@M$0A@Utvec4@glm@@$00@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_fmod<float,0,glm::tvec4,1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 105  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP ; glm::fmod<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator+<float,0>, COMDAT

; 634  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 635  : 		return tvec4<T, P>(v) += scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 636  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$two_pi@M@glm@@YAMXZ
_TEXT	SEGMENT
??$two_pi@M@glm@@YAMXZ PROC				; glm::two_pi<float>, COMDAT

; 34   : 	{

$LN3:
	push	rdi
	sub	rsp, 16

; 35   : 		return genType(6.28318530717958647692528676655900576);

	movss	xmm0, DWORD PTR __real@40c90fdb

; 36   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$two_pi@M@glm@@YAMXZ ENDP				; glm::two_pi<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\fast_trigonometry.inl
;	COMDAT ??$cos_52s@M@detail@glm@@YAMM@Z
_TEXT	SEGMENT
xx$ = 16
x$ = 48
??$cos_52s@M@detail@glm@@YAMM@Z PROC			; glm::detail::cos_52s<float>, COMDAT

; 19   : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 20   : 		T const xx(x * x);

	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR xx$[rsp], xmm0

; 21   : 		return (T(0.9999932946) + xx * (T(-0.4999124376) + xx * (T(0.0414877472) + xx * T(-0.0012712095))));

	movss	xmm0, DWORD PTR xx$[rsp]
	mulss	xmm0, DWORD PTR __real@baa69eb6
	movss	xmm1, DWORD PTR __real@3d29ef0e
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR xx$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@befff486
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR xx$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f7fff90
	addss	xmm1, xmm0
	movaps	xmm0, xmm1

; 22   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$cos_52s@M@detail@glm@@YAMM@Z ENDP			; glm::detail::cos_52s<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$half_pi@M@glm@@YAMXZ
_TEXT	SEGMENT
??$half_pi@M@glm@@YAMXZ PROC				; glm::half_pi<float>, COMDAT

; 46   : 	{

$LN3:
	push	rdi
	sub	rsp, 16

; 47   : 		return genType(1.57079632679489661923132169163975144);

	movss	xmm0, DWORD PTR __real@3fc90fdb

; 48   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$half_pi@M@glm@@YAMXZ ENDP				; glm::half_pi<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\fast_trigonometry.inl
;	COMDAT ??$wrapAngle@M@glm@@YAMM@Z
_TEXT	SEGMENT
angle$ = 64
??$wrapAngle@M@glm@@YAMM@Z PROC				; glm::wrapAngle<float>, COMDAT

; 34   : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 35   : 		return abs<T>(mod<T>(angle, two_pi<T>()));

	call	??$two_pi@M@glm@@YAMXZ			; glm::two_pi<float>
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR angle$[rsp]
	call	??$mod@M@glm@@YAMMM@Z			; glm::mod<float>
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>

; 36   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$wrapAngle@M@glm@@YAMM@Z ENDP				; glm::wrapAngle<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 256  :     }
; 257  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 32
$T1 = 40
this$ = 64
_Al$ = 72
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	QWORD PTR _New_proxy$[rsp], rax

; 1058 :         _Construct_in_place(*_New_proxy, this);

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1059 :         _Myproxy            = _New_proxy;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	mov	QWORD PTR [rax], rcx

; 1060 :         _New_proxy->_Mycont = this;

	mov	rax, QWORD PTR _New_proxy$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], rcx

; 1061 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 984  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 985  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 986  :     using _Ty = typename _Alloc::value_type;
; 987  :     _Ptr->~_Ty();
; 988  :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 989  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 609  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 610  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newlast$1 = 72
_Oldcapacity$2 = 80
_Oldlast$3 = 88
this$ = 112
_Newsize$ = 120
_Val$ = 128
??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Resize<std::_Value_init_tag>, COMDAT

; 1397 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 1398 :         // trim or append elements, provide strong guarantee
; 1399 :         auto& _Al           = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1400 :         auto& _My_data      = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1401 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1402 :         pointer& _Mylast    = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1403 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1404 :         if (_Newsize < _Oldsize) { // trim

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jae	SHORT $LN2@Resize

; 1405 :             const pointer _Newlast = _Myfirst + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 16
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR _Newlast$1[rsp], rax

; 1406 :             _Orphan_range(_Newlast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Newlast$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range

; 1407 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 1408 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1409 :             _Mylast = _Newlast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	mov	QWORD PTR [rax], rcx

; 1410 :             return;

	jmp	$LN1@Resize
$LN2@Resize:

; 1411 :         }
; 1412 : 
; 1413 :         if (_Newsize > _Oldsize) { // append

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	$LN3@Resize

; 1414 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldcapacity$2[rsp], rax

; 1415 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	rax, QWORD PTR _Oldcapacity$2[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN4@Resize

; 1416 :                 _Resize_reallocate(_Newsize, _Val);

	mov	r8, QWORD PTR _Val$[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Resize_reallocate<std::_Value_init_tag>

; 1417 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1418 :             }
; 1419 : 
; 1420 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1421 :             const pointer _Oldlast = _Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Oldlast$3[rsp], rax

; 1422 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1423 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1424 :             } else {
; 1425 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1426 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Oldlast$3[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<float,0> > >
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1427 :             }
; 1428 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1429 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	r8, QWORD PTR _Oldlast$3[rsp]
	mov	rdx, QWORD PTR _Oldlast$3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range
$LN3@Resize:
$LN1@Resize:

; 1430 :         }
; 1431 : 
; 1432 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1433 :     }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 429  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 430  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 431  : 
; 432  : 	Error += ::taylorCos::test();

	call	?test@taylorCos@@YAHXZ			; taylorCos::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 433  : 	Error += ::taylorCos::perf(1000);

	mov	ecx, 1000				; 000003e8H
	call	?perf@taylorCos@@YAH_K@Z		; taylorCos::perf
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 434  : 
; 435  : #	ifdef NDEBUG
; 436  : 		::fastCos::perf(false);
; 437  : 		::fastSin::perf(false);
; 438  : 		::fastTan::perf(false);
; 439  : 		::fastAcos::perf(false);
; 440  : 		::fastAsin::perf(false);
; 441  : 		::fastAtan::perf(false);
; 442  : #	endif//NDEBUG
; 443  : 
; 444  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 445  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
Angle0_PI$ = 36
$T4 = 52
$T5 = 56
$T6 = 60
tv66 = 64
tv69 = 68
__$ReturnUdt$ = 96
x$ = 104
??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z PROC ; taylorCos::fastCosNew<float,0,glm::tvec1>, COMDAT

; 218  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 219  : 		vecType<T, P> const Angle0_PI(fastAbs(fmod(x + glm::pi<T>(), glm::two_pi<T>()) - glm::pi<T>()));

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR tv66[rsp], xmm0
	call	??$two_pi@M@glm@@YAMXZ			; glm::two_pi<float>
	movss	DWORD PTR tv69[rsp], xmm0
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	movss	xmm0, DWORD PTR tv69[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::fmod<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR Angle0_PI$[rsp]
	call	??$fastAbs@$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@U12@@Z ; taylorCos::fastAbs<0,glm::tvec1>

; 220  : 		return taylorSeriesNewCos6(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$taylorSeriesNewCos6@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 221  : /*
; 222  : 		vecType<bool, P> const FirstQuarterPi(lessThanEqual(Angle0_PI, vecType<T, P>(glm::half_pi<T>())));
; 223  : 
; 224  : 		vecType<T, P> const RevertAngle(mix(vecType<T, P>(glm::pi<T>()), vecType<T, P>(0), FirstQuarterPi));
; 225  : 		vecType<T, P> const ReturnSign(mix(vecType<T, P>(-1), vecType<T, P>(1), FirstQuarterPi));
; 226  : 		vecType<T, P> const SectionAngle(RevertAngle - Angle0_PI);
; 227  : 
; 228  : 		return ReturnSign * taylorSeriesNewCos(SectionAngle);
; 229  : */
; 230  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ENDP ; taylorCos::fastCosNew<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
Angle0_PI$ = 36
FirstQuarterPi$ = 68
RevertAngle$ = 100
ReturnSign$ = 132
SectionAngle$ = 164
$T8 = 180
$T9 = 184
$T10 = 188
$T11 = 192
$T12 = 196
$T13 = 200
$T14 = 204
$T15 = 208
$T16 = 212
tv66 = 216
tv69 = 220
tv91 = 224
tv134 = 232
__$ReturnUdt$ = 256
x$ = 264
??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z PROC ; taylorCos::fastRefCos<float,0,glm::tvec1>, COMDAT

; 307  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 240				; 000000f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+256]

; 308  : 		vecType<T, P> const Angle0_PI(glm::abs(fmod(x + glm::pi<T>(), glm::two_pi<T>()) - glm::pi<T>()));

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR tv66[rsp], xmm0
	call	??$two_pi@M@glm@@YAMXZ			; glm::two_pi<float>
	movss	DWORD PTR tv69[rsp], xmm0
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	movss	xmm0, DWORD PTR tv69[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$fmod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::fmod<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Angle0_PI$[rsp]
	call	??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec1>

; 309  : //		return taylorSeriesRefCos(Angle0_PI);
; 310  : 
; 311  : 		vecType<bool, P> const FirstQuarterPi(lessThanEqual(Angle0_PI, vecType<T, P>(glm::half_pi<T>())));

	call	??$half_pi@M@glm@@YAMXZ			; glm::half_pi<float>
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Angle0_PI$[rsp]
	lea	rcx, QWORD PTR FirstQuarterPi$[rsp]
	call	??$lessThanEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ; glm::lessThanEqual<float,0,glm::tvec1>

; 312  : 
; 313  : 		vecType<T, P> const RevertAngle(mix(vecType<T, P>(glm::pi<T>()), vecType<T, P>(0), FirstQuarterPi));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv91[rsp], rax
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	lea	r9, QWORD PTR FirstQuarterPi$[rsp]
	mov	rcx, QWORD PTR tv91[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR RevertAngle$[rsp]
	call	??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec1>

; 314  : 		vecType<T, P> const ReturnSign(mix(vecType<T, P>(-1), vecType<T, P>(1), FirstQuarterPi));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv134[rsp], rax
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	lea	r9, QWORD PTR FirstQuarterPi$[rsp]
	mov	rcx, QWORD PTR tv134[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR ReturnSign$[rsp]
	call	??$mix@M_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec1>

; 315  : 		vecType<T, P> const SectionAngle(RevertAngle - Angle0_PI);

	lea	r8, QWORD PTR Angle0_PI$[rsp]
	lea	rdx, QWORD PTR RevertAngle$[rsp]
	lea	rcx, QWORD PTR SectionAngle$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 316  : 
; 317  : 		return ReturnSign * taylorSeriesRefCos(SectionAngle);

	lea	rdx, QWORD PTR SectionAngle$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$taylorSeriesRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ; taylorCos::taylorSeriesRefCos<float,0,glm::tvec1>
	mov	r8, rax
	lea	rdx, QWORD PTR ReturnSign$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ENDP ; taylorCos::fastRefCos<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 39   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 34   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT

; 71   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 73   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$0A@@glm@@SAHXZ PROC			; glm::tvec1<float,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@M$0A@@glm@@SAHXZ ENDP			; glm::tvec1<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$radians@M@glm@@YAMM@Z
_TEXT	SEGMENT
degrees$ = 32
??$radians@M@glm@@YAMM@Z PROC				; glm::radians<float>, COMDAT

; 13   : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 16

; 14   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559, "'radians' only accept floating-point input");
; 15   : 
; 16   : 		return degrees * static_cast<genType>(0.01745329251994329576923690768489);

	movss	xmm0, DWORD PTR degrees$[rsp]
	mulss	xmm0, DWORD PTR __real@3c8efa35

; 17   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$radians@M@glm@@YAMM@Z ENDP				; glm::radians<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
Error$ = 32
Angle$1 = 36
modAngle$2 = 40
radAngle$3 = 44
Cos0$4 = 48
Cos1$5 = 52
Cos2$6 = 56
$T7 = 60
$T8 = 64
$T9 = 68
$T10 = 72
tv92 = 76
?test@taylorCos@@YAHXZ PROC				; taylorCos::test

; 403  : 	{

$LN11:
	push	rdi
	sub	rsp, 80					; 00000050H

; 404  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 405  : 
; 406  : 		//for(float Angle = -4.0f * glm::pi<float>(); Angle < 4.0f * glm::pi<float>(); Angle += 0.1f)
; 407  : 		//for(float Angle = -720.0f; Angle < 720.0f; Angle += 0.1f)
; 408  : 		for(float Angle = 0.0f; Angle < 180.0f; Angle += 0.1f)

	xorps	xmm0, xmm0
	movss	DWORD PTR Angle$1[rsp], xmm0
	jmp	SHORT $LN4@test
$LN2@test:
	movss	xmm0, DWORD PTR Angle$1[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR Angle$1[rsp], xmm0
$LN4@test:
	movss	xmm0, DWORD PTR __real@43340000
	comiss	xmm0, DWORD PTR Angle$1[rsp]
	jbe	$LN3@test

; 409  : 		{
; 410  : 			float const modAngle = std::fmod(glm::abs(Angle), 360.f);

	movss	xmm0, DWORD PTR Angle$1[rsp]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	xmm1, DWORD PTR __real@43b40000
	call	?fmod@@YAMMM@Z				; fmod
	movss	DWORD PTR modAngle$2[rsp], xmm0

; 411  : 			assert(modAngle >= 0.0f && modAngle <= 360.f);

	movss	xmm0, DWORD PTR modAngle$2[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN6@test
	movss	xmm0, DWORD PTR __real@43b40000
	comiss	xmm0, DWORD PTR modAngle$2[rsp]
	jae	SHORT $LN7@test
$LN6@test:
	mov	r8d, 411				; 0000019bH
	lea	rdx, OFFSET FLAT:$SG57957
	lea	rcx, OFFSET FLAT:$SG57958
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@test:

; 412  : 			float const radAngle = glm::radians(modAngle);

	movss	xmm0, DWORD PTR modAngle$2[rsp]
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	movss	DWORD PTR radAngle$3[rsp], xmm0

; 413  : 			float const Cos0 = std::cos(radAngle);

	movss	xmm0, DWORD PTR radAngle$3[rsp]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR Cos0$4[rsp], xmm0

; 414  : 
; 415  : 			float const Cos1 = taylorCos::fastRefCos(glm::fvec1(radAngle)).x;

	movss	xmm1, DWORD PTR radAngle$3[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$fastRefCos@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ; taylorCos::fastRefCos<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR Cos1$5[rsp], xmm0

; 416  : 			Error += glm::abs(Cos1 - Cos0) < 0.1f ? 0 : 1;

	movss	xmm0, DWORD PTR Cos1$5[rsp]
	subss	xmm0, DWORD PTR Cos0$4[rsp]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	xmm1, DWORD PTR __real@3dcccccd
	comiss	xmm1, xmm0
	jbe	SHORT $LN8@test
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN9@test
$LN8@test:
	mov	DWORD PTR tv92[rsp], 1
$LN9@test:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 417  : 
; 418  : 			float const Cos2 = taylorCos::fastCosNew(glm::fvec1(radAngle)).x;

	movss	xmm1, DWORD PTR radAngle$3[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$fastCosNew@M$0A@Utvec1@glm@@@taylorCos@@YA?AU?$tvec1@M$0A@@glm@@AEBU12@@Z ; taylorCos::fastCosNew<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR Cos2$6[rsp], xmm0

; 419  : 			//Error += glm::abs(Cos2 - Cos0) < 0.1f ? 0 : 1;
; 420  : 
; 421  : 			assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN10@test
	mov	r8d, 421				; 000001a5H
	lea	rdx, OFFSET FLAT:$SG57959
	lea	rcx, OFFSET FLAT:$SG57960
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@test:

; 422  : 		}

	jmp	$LN2@test
$LN3@test:

; 423  : 
; 424  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 425  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test@taylorCos@@YAHXZ ENDP				; taylorCos::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
Error$ = 32
Begin$ = 36
End$ = 40
Samples$ = 64
?perf@taylorCos@@YAH_K@Z PROC				; taylorCos::perf

; 387  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 388  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 389  : 
; 390  : 		float const Begin = -glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR Begin$[rsp], xmm0

; 391  : 		float const End = glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR End$[rsp], xmm0

; 392  : 
; 393  : 		Error += perf_cos(Begin, End, Samples);

	mov	r8, QWORD PTR Samples$[rsp]
	movss	xmm1, DWORD PTR __real@40490fdb
	movss	xmm0, DWORD PTR __real@c0490fdb
	call	?perf_cos@taylorCos@@YAHMM_K@Z		; taylorCos::perf_cos
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 394  : 		Error += perf_fastCosOld(Begin, End, Samples);

	mov	r8, QWORD PTR Samples$[rsp]
	movss	xmm1, DWORD PTR __real@40490fdb
	movss	xmm0, DWORD PTR __real@c0490fdb
	call	?perf_fastCosOld@taylorCos@@YAHMM_K@Z	; taylorCos::perf_fastCosOld
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 395  : 		Error += perf_fastCosRef(Begin, End, Samples);

	mov	r8, QWORD PTR Samples$[rsp]
	movss	xmm1, DWORD PTR __real@40490fdb
	movss	xmm0, DWORD PTR __real@c0490fdb
	call	?perf_fastCosRef@taylorCos@@YAHMM_K@Z	; taylorCos::perf_fastCosRef
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 396  : 		//Error += perf_fastCosNew(Begin, End, Samples);
; 397  : 		Error += perf_fastCosDeterminisctic(Begin, End, Samples);

	mov	r8, QWORD PTR Samples$[rsp]
	movss	xmm1, DWORD PTR __real@40490fdb
	movss	xmm0, DWORD PTR __real@c0490fdb
	call	?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z ; taylorCos::perf_fastCosDeterminisctic
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 398  : 
; 399  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 400  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?perf@taylorCos@@YAH_K@Z ENDP				; taylorCos::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_trigonometric.inl
;	COMDAT ??$cos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$cos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::cos<float,0,glm::tvec4>, COMDAT

; 54   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 55   : 		return detail::functor1<T, T, P, vecType>::call(cos, v);

	mov	r8, QWORD PTR v$[rsp]
	lea	rdx, OFFSET FLAT:?cos@@YAMM@Z		; cos
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 56   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$cos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::cos<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
Results$ = 40
Steps$ = 84
TimeStampBegin$ = 88
i$4 = 96
TimeStampEnd$ = 104
Error$ = 108
i$5 = 112
$T6 = 120
$T7 = 136
$T8 = 152
$T9 = 168
tv78 = 176
tv140 = 184
Begin$ = 224
End$ = 232
Samples$ = 240
?perf_cos@taylorCos@@YAHMM_K@Z PROC			; taylorCos::perf_cos

; 365  : 	{

$LN16:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 366  : 		std::vector<glm::vec4> Results;

	lea	rcx, QWORD PTR Results$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 367  : 		Results.resize(Samples);

	mov	rdx, QWORD PTR Samples$[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::resize

; 368  : 
; 369  : 		float Steps = (End - Begin) / Samples;

	movss	xmm0, DWORD PTR End$[rsp]
	subss	xmm0, DWORD PTR Begin$[rsp]
	mov	rax, QWORD PTR Samples$[rsp]
	test	rax, rax
	jl	SHORT $LN14@perf_cos
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN15@perf_cos
$LN14@perf_cos:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN15@perf_cos:
	divss	xmm0, xmm1
	movss	DWORD PTR Steps$[rsp], xmm0

; 370  : 
; 371  : 		std::clock_t const TimeStampBegin = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimeStampBegin$[rsp], eax

; 372  : 
; 373  : 		for(std::size_t i = 0; i < Samples; ++i)

	mov	QWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@perf_cos
$LN2@perf_cos:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@perf_cos:
	mov	rax, QWORD PTR Samples$[rsp]
	cmp	QWORD PTR i$4[rsp], rax
	jae	$LN3@perf_cos

; 374  : 			Results[i] = glm::cos(AngleShift + glm::vec4(Begin + Steps * i));

	mov	rax, QWORD PTR i$4[rsp]
	test	rax, rax
	jl	SHORT $LN12@perf_cos
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN13@perf_cos
$LN12@perf_cos:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN13@perf_cos:
	movss	xmm1, DWORD PTR Steps$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR Begin$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, OFFSET FLAT:?AngleShift@taylorCos@@3U?$tvec4@M$0A@@glm@@B
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$cos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::cos<float,0,glm::tvec4>
	mov	QWORD PTR tv78[rsp], rax
	mov	rdx, QWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv78[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN2@perf_cos
$LN3@perf_cos:

; 375  : 
; 376  : 		std::clock_t const TimeStampEnd = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimeStampEnd$[rsp], eax

; 377  : 
; 378  : 		std::printf("cos %ld clocks\n", TimeStampEnd - TimeStampBegin);

	mov	eax, DWORD PTR TimeStampBegin$[rsp]
	mov	ecx, DWORD PTR TimeStampEnd$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57801
	call	printf

; 379  : 
; 380  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 381  : 		for(std::size_t i = 0; i < Samples; ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN7@perf_cos
$LN5@perf_cos:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN7@perf_cos:
	mov	rax, QWORD PTR Samples$[rsp]
	cmp	QWORD PTR i$5[rsp], rax
	jae	SHORT $LN6@perf_cos

; 382  : 			Error += Results[i].x >= -1.0f && Results[i].x <= 1.0f ? 0 : 1;

	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR __real@bf800000
	jb	SHORT $LN9@perf_cos
	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN9@perf_cos
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN10@perf_cos
$LN9@perf_cos:
	mov	DWORD PTR tv140[rsp], 1
$LN10@perf_cos:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN5@perf_cos
$LN6@perf_cos:

; 383  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T9[rsp], eax
	lea	rcx, QWORD PTR Results$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T9[rsp]

; 384  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf_cos@taylorCos@@YAHMM_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?perf_cos@taylorCos@@YAHMM_K@Z ENDP			; taylorCos::perf_cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Results$ = 40
Steps$ = 84
TimeStampBegin$ = 88
i$4 = 96
TimeStampEnd$ = 104
Error$ = 108
i$5 = 112
$T6 = 120
$T7 = 136
$T8 = 152
$T9 = 168
tv78 = 176
tv140 = 184
Begin$ = 224
End$ = 232
Samples$ = 240
?dtor$0@?0??perf_cos@taylorCos@@YAHMM_K@Z@4HA PROC	; `taylorCos::perf_cos'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Results$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf_cos@taylorCos@@YAHMM_K@Z@4HA ENDP	; `taylorCos::perf_cos'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\fast_trigonometry.inl
;	COMDAT ??$fastCos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$fastCos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::fastCos<float,0,glm::tvec4>, COMDAT

; 62   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 63   : 		return detail::functor1<T, T, P, vecType>::call(fastCos, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$fastCos@M@glm@@YAMM@Z ; glm::fastCos<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 64   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$fastCos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::fastCos<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
Results$ = 40
Steps$ = 84
TimeStampBegin$ = 88
i$4 = 96
TimeStampEnd$ = 104
Error$ = 108
i$5 = 112
$T6 = 120
$T7 = 136
$T8 = 152
$T9 = 168
tv78 = 176
tv140 = 184
Begin$ = 224
End$ = 232
Samples$ = 240
?perf_fastCosOld@taylorCos@@YAHMM_K@Z PROC		; taylorCos::perf_fastCosOld

; 343  : 	{

$LN16:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 344  : 		std::vector<glm::vec4> Results;

	lea	rcx, QWORD PTR Results$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 345  : 		Results.resize(Samples);

	mov	rdx, QWORD PTR Samples$[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::resize

; 346  : 
; 347  : 		float Steps = (End - Begin) / Samples;

	movss	xmm0, DWORD PTR End$[rsp]
	subss	xmm0, DWORD PTR Begin$[rsp]
	mov	rax, QWORD PTR Samples$[rsp]
	test	rax, rax
	jl	SHORT $LN14@perf_fastC
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN15@perf_fastC
$LN14@perf_fastC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN15@perf_fastC:
	divss	xmm0, xmm1
	movss	DWORD PTR Steps$[rsp], xmm0

; 348  : 
; 349  : 		std::clock_t const TimeStampBegin = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimeStampBegin$[rsp], eax

; 350  : 
; 351  : 		for(std::size_t i = 0; i < Samples; ++i)

	mov	QWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@perf_fastC
$LN2@perf_fastC:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@perf_fastC:
	mov	rax, QWORD PTR Samples$[rsp]
	cmp	QWORD PTR i$4[rsp], rax
	jae	$LN3@perf_fastC

; 352  : 			Results[i] = glm::fastCos(AngleShift + glm::vec4(Begin + Steps * i));

	mov	rax, QWORD PTR i$4[rsp]
	test	rax, rax
	jl	SHORT $LN12@perf_fastC
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN13@perf_fastC
$LN12@perf_fastC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN13@perf_fastC:
	movss	xmm1, DWORD PTR Steps$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR Begin$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, OFFSET FLAT:?AngleShift@taylorCos@@3U?$tvec4@M$0A@@glm@@B
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$fastCos@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::fastCos<float,0,glm::tvec4>
	mov	QWORD PTR tv78[rsp], rax
	mov	rdx, QWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv78[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN2@perf_fastC
$LN3@perf_fastC:

; 353  : 
; 354  : 		std::clock_t const TimeStampEnd = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimeStampEnd$[rsp], eax

; 355  : 
; 356  : 		std::printf("fastCosOld %ld clocks\n", TimeStampEnd - TimeStampBegin);

	mov	eax, DWORD PTR TimeStampBegin$[rsp]
	mov	ecx, DWORD PTR TimeStampEnd$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57771
	call	printf

; 357  : 
; 358  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 359  : 		for(std::size_t i = 0; i < Samples; ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN7@perf_fastC
$LN5@perf_fastC:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN7@perf_fastC:
	mov	rax, QWORD PTR Samples$[rsp]
	cmp	QWORD PTR i$5[rsp], rax
	jae	SHORT $LN6@perf_fastC

; 360  : 			Error += Results[i].x >= -1.0f && Results[i].x <= 1.0f ? 0 : 1;

	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR __real@bf800000
	jb	SHORT $LN9@perf_fastC
	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN9@perf_fastC
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN10@perf_fastC
$LN9@perf_fastC:
	mov	DWORD PTR tv140[rsp], 1
$LN10@perf_fastC:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN5@perf_fastC
$LN6@perf_fastC:

; 361  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T9[rsp], eax
	lea	rcx, QWORD PTR Results$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T9[rsp]

; 362  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf_fastCosOld@taylorCos@@YAHMM_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?perf_fastCosOld@taylorCos@@YAHMM_K@Z ENDP		; taylorCos::perf_fastCosOld
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Results$ = 40
Steps$ = 84
TimeStampBegin$ = 88
i$4 = 96
TimeStampEnd$ = 104
Error$ = 108
i$5 = 112
$T6 = 120
$T7 = 136
$T8 = 152
$T9 = 168
tv78 = 176
tv140 = 184
Begin$ = 224
End$ = 232
Samples$ = 240
?dtor$0@?0??perf_fastCosOld@taylorCos@@YAHMM_K@Z@4HA PROC ; `taylorCos::perf_fastCosOld'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Results$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf_fastCosOld@taylorCos@@YAHMM_K@Z@4HA ENDP ; `taylorCos::perf_fastCosOld'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
Angle0_PI$ = 40
FirstQuarterPi$ = 84
RevertAngle$ = 120
ReturnSign$ = 168
SectionAngle$ = 216
$T8 = 244
$T9 = 260
$T10 = 276
$T11 = 292
$T12 = 308
$T13 = 324
$T14 = 340
$T15 = 356
$T16 = 372
tv66 = 388
tv69 = 392
tv91 = 400
tv134 = 408
__$ReturnUdt$ = 432
x$ = 440
??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z PROC ; taylorCos::fastRefCos<float,0,glm::tvec4>, COMDAT

; 307  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+432]

; 308  : 		vecType<T, P> const Angle0_PI(glm::abs(fmod(x + glm::pi<T>(), glm::two_pi<T>()) - glm::pi<T>()));

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR tv66[rsp], xmm0
	call	??$two_pi@M@glm@@YAMXZ			; glm::two_pi<float>
	movss	DWORD PTR tv69[rsp], xmm0
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	movss	xmm0, DWORD PTR tv69[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::fmod<float,0,glm::tvec4>
	movss	xmm0, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Angle0_PI$[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>

; 309  : //		return taylorSeriesRefCos(Angle0_PI);
; 310  : 
; 311  : 		vecType<bool, P> const FirstQuarterPi(lessThanEqual(Angle0_PI, vecType<T, P>(glm::half_pi<T>())));

	call	??$half_pi@M@glm@@YAMXZ			; glm::half_pi<float>
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Angle0_PI$[rsp]
	lea	rcx, QWORD PTR FirstQuarterPi$[rsp]
	call	??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThanEqual<float,0,glm::tvec4>

; 312  : 
; 313  : 		vecType<T, P> const RevertAngle(mix(vecType<T, P>(glm::pi<T>()), vecType<T, P>(0), FirstQuarterPi));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv91[rsp], rax
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR FirstQuarterPi$[rsp]
	mov	rcx, QWORD PTR tv91[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR RevertAngle$[rsp]
	call	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>

; 314  : 		vecType<T, P> const ReturnSign(mix(vecType<T, P>(-1), vecType<T, P>(1), FirstQuarterPi));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv134[rsp], rax
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR FirstQuarterPi$[rsp]
	mov	rcx, QWORD PTR tv134[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR ReturnSign$[rsp]
	call	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>

; 315  : 		vecType<T, P> const SectionAngle(RevertAngle - Angle0_PI);

	lea	r8, QWORD PTR Angle0_PI$[rsp]
	lea	rdx, QWORD PTR RevertAngle$[rsp]
	lea	rcx, QWORD PTR SectionAngle$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 316  : 
; 317  : 		return ReturnSign * taylorSeriesRefCos(SectionAngle);

	lea	rdx, QWORD PTR SectionAngle$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$taylorSeriesRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::taylorSeriesRefCos<float,0,glm::tvec4>
	mov	r8, rax
	lea	rdx, QWORD PTR ReturnSign$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 416				; 000001a0H
	pop	rdi
	ret	0
??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ENDP ; taylorCos::fastRefCos<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
Results$ = 40
Steps$ = 84
TimeStampBegin$ = 88
i$4 = 96
TimeStampEnd$ = 104
Error$ = 108
i$5 = 112
$T6 = 120
$T7 = 136
$T8 = 152
$T9 = 168
tv78 = 176
tv140 = 184
Begin$ = 224
End$ = 232
Samples$ = 240
?perf_fastCosRef@taylorCos@@YAHMM_K@Z PROC		; taylorCos::perf_fastCosRef

; 321  : 	{

$LN16:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 322  : 		std::vector<glm::vec4> Results;

	lea	rcx, QWORD PTR Results$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 323  : 		Results.resize(Samples);

	mov	rdx, QWORD PTR Samples$[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::resize

; 324  : 
; 325  : 		float Steps = (End - Begin) / Samples;

	movss	xmm0, DWORD PTR End$[rsp]
	subss	xmm0, DWORD PTR Begin$[rsp]
	mov	rax, QWORD PTR Samples$[rsp]
	test	rax, rax
	jl	SHORT $LN14@perf_fastC
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN15@perf_fastC
$LN14@perf_fastC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN15@perf_fastC:
	divss	xmm0, xmm1
	movss	DWORD PTR Steps$[rsp], xmm0

; 326  : 
; 327  : 		std::clock_t const TimeStampBegin = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimeStampBegin$[rsp], eax

; 328  : 
; 329  : 		for(std::size_t i = 0; i < Samples; ++i)

	mov	QWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@perf_fastC
$LN2@perf_fastC:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@perf_fastC:
	mov	rax, QWORD PTR Samples$[rsp]
	cmp	QWORD PTR i$4[rsp], rax
	jae	$LN3@perf_fastC

; 330  : 			Results[i] = taylorCos::fastRefCos(AngleShift + glm::vec4(Begin + Steps * i));

	mov	rax, QWORD PTR i$4[rsp]
	test	rax, rax
	jl	SHORT $LN12@perf_fastC
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN13@perf_fastC
$LN12@perf_fastC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN13@perf_fastC:
	movss	xmm1, DWORD PTR Steps$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR Begin$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, OFFSET FLAT:?AngleShift@taylorCos@@3U?$tvec4@M$0A@@glm@@B
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$fastRefCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::fastRefCos<float,0,glm::tvec4>
	mov	QWORD PTR tv78[rsp], rax
	mov	rdx, QWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv78[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN2@perf_fastC
$LN3@perf_fastC:

; 331  : 
; 332  : 		std::clock_t const TimeStampEnd = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimeStampEnd$[rsp], eax

; 333  : 
; 334  : 		std::printf("fastCosRef %ld clocks\n", TimeStampEnd - TimeStampBegin);

	mov	eax, DWORD PTR TimeStampBegin$[rsp]
	mov	ecx, DWORD PTR TimeStampEnd$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57737
	call	printf

; 335  : 
; 336  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 337  : 		for(std::size_t i = 0; i < Samples; ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN7@perf_fastC
$LN5@perf_fastC:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN7@perf_fastC:
	mov	rax, QWORD PTR Samples$[rsp]
	cmp	QWORD PTR i$5[rsp], rax
	jae	SHORT $LN6@perf_fastC

; 338  : 			Error += Results[i].x >= -1.0f && Results[i].x <= 1.0f ? 0 : 1;

	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR __real@bf800000
	jb	SHORT $LN9@perf_fastC
	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN9@perf_fastC
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN10@perf_fastC
$LN9@perf_fastC:
	mov	DWORD PTR tv140[rsp], 1
$LN10@perf_fastC:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN5@perf_fastC
$LN6@perf_fastC:

; 339  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T9[rsp], eax
	lea	rcx, QWORD PTR Results$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T9[rsp]

; 340  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf_fastCosRef@taylorCos@@YAHMM_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?perf_fastCosRef@taylorCos@@YAHMM_K@Z ENDP		; taylorCos::perf_fastCosRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Results$ = 40
Steps$ = 84
TimeStampBegin$ = 88
i$4 = 96
TimeStampEnd$ = 104
Error$ = 108
i$5 = 112
$T6 = 120
$T7 = 136
$T8 = 152
$T9 = 168
tv78 = 176
tv140 = 184
Begin$ = 224
End$ = 232
Samples$ = 240
?dtor$0@?0??perf_fastCosRef@taylorCos@@YAHMM_K@Z@4HA PROC ; `taylorCos::perf_fastCosRef'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Results$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf_fastCosRef@taylorCos@@YAHMM_K@Z@4HA ENDP ; `taylorCos::perf_fastCosRef'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
Angle0_PI$ = 40
FirstQuarterPi$ = 84
RevertAngle$ = 120
ReturnSign$ = 168
SectionAngle$ = 216
$T8 = 244
$T9 = 260
$T10 = 276
$T11 = 292
$T12 = 308
$T13 = 324
$T14 = 340
$T15 = 356
$T16 = 372
tv66 = 388
tv69 = 392
tv91 = 400
tv134 = 408
__$ReturnUdt$ = 432
x$ = 440
??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z PROC ; taylorCos::fastCosDeterminisctic<float,0,glm::tvec4>, COMDAT

; 262  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+432]

; 263  : 		vecType<T, P> const Angle0_PI(abs(deterministic_fmod(x + glm::pi<T>(), glm::two_pi<T>()) - glm::pi<T>()));

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR tv66[rsp], xmm0
	call	??$two_pi@M@glm@@YAMXZ			; glm::two_pi<float>
	movss	DWORD PTR tv69[rsp], xmm0
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	movss	xmm0, DWORD PTR tv69[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$deterministic_fmod@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@M@Z ; taylorCos::deterministic_fmod<float,0,glm::tvec4>
	movss	xmm0, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Angle0_PI$[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>

; 264  : 		vecType<bool, P> const FirstQuarterPi(lessThanEqual(Angle0_PI, vecType<T, P>(glm::half_pi<T>())));

	call	??$half_pi@M@glm@@YAMXZ			; glm::half_pi<float>
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Angle0_PI$[rsp]
	lea	rcx, QWORD PTR FirstQuarterPi$[rsp]
	call	??$lessThanEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThanEqual<float,0,glm::tvec4>

; 265  : 
; 266  : 		vecType<T, P> const RevertAngle(mix(vecType<T, P>(glm::pi<T>()), vecType<T, P>(0), FirstQuarterPi));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv91[rsp], rax
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR FirstQuarterPi$[rsp]
	mov	rcx, QWORD PTR tv91[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR RevertAngle$[rsp]
	call	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>

; 267  : 		vecType<T, P> const ReturnSign(mix(vecType<T, P>(-1), vecType<T, P>(1), FirstQuarterPi));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv134[rsp], rax
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR FirstQuarterPi$[rsp]
	mov	rcx, QWORD PTR tv134[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR ReturnSign$[rsp]
	call	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>

; 268  : 		vecType<T, P> const SectionAngle(RevertAngle - Angle0_PI);

	lea	r8, QWORD PTR Angle0_PI$[rsp]
	lea	rdx, QWORD PTR RevertAngle$[rsp]
	lea	rcx, QWORD PTR SectionAngle$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>

; 269  : 
; 270  : 		return ReturnSign * taylorSeriesNewCos(SectionAngle);

	lea	rdx, QWORD PTR SectionAngle$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$taylorSeriesNewCos@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::taylorSeriesNewCos<float,0,glm::tvec4>
	mov	r8, rax
	lea	rdx, QWORD PTR ReturnSign$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 271  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 416				; 000001a0H
	pop	rdi
	ret	0
??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ENDP ; taylorCos::fastCosDeterminisctic<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
Results$ = 40
Steps$ = 84
TimeStampBegin$ = 88
i$4 = 96
TimeStampEnd$ = 104
Error$ = 108
i$5 = 112
$T6 = 120
$T7 = 136
$T8 = 152
$T9 = 168
tv78 = 176
tv140 = 184
Begin$ = 224
End$ = 232
Samples$ = 240
?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z PROC	; taylorCos::perf_fastCosDeterminisctic

; 274  : 	{

$LN16:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 275  : 		std::vector<glm::vec4> Results;

	lea	rcx, QWORD PTR Results$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 276  : 		Results.resize(Samples);

	mov	rdx, QWORD PTR Samples$[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::resize

; 277  : 
; 278  : 		float Steps = (End - Begin) / Samples;

	movss	xmm0, DWORD PTR End$[rsp]
	subss	xmm0, DWORD PTR Begin$[rsp]
	mov	rax, QWORD PTR Samples$[rsp]
	test	rax, rax
	jl	SHORT $LN14@perf_fastC
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN15@perf_fastC
$LN14@perf_fastC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN15@perf_fastC:
	divss	xmm0, xmm1
	movss	DWORD PTR Steps$[rsp], xmm0

; 279  : 
; 280  : 		std::clock_t const TimeStampBegin = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimeStampBegin$[rsp], eax

; 281  : 
; 282  : 		for(std::size_t i = 0; i < Samples; ++i)

	mov	QWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@perf_fastC
$LN2@perf_fastC:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@perf_fastC:
	mov	rax, QWORD PTR Samples$[rsp]
	cmp	QWORD PTR i$4[rsp], rax
	jae	$LN3@perf_fastC

; 283  : 			Results[i] = taylorCos::fastCosDeterminisctic(AngleShift + glm::vec4(Begin + Steps * i));

	mov	rax, QWORD PTR i$4[rsp]
	test	rax, rax
	jl	SHORT $LN12@perf_fastC
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN13@perf_fastC
$LN12@perf_fastC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN13@perf_fastC:
	movss	xmm1, DWORD PTR Steps$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR Begin$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, OFFSET FLAT:?AngleShift@taylorCos@@3U?$tvec4@M$0A@@glm@@B
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$fastCosDeterminisctic@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::fastCosDeterminisctic<float,0,glm::tvec4>
	mov	QWORD PTR tv78[rsp], rax
	mov	rdx, QWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv78[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN2@perf_fastC
$LN3@perf_fastC:

; 284  : 
; 285  : 		std::clock_t const TimeStampEnd = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimeStampEnd$[rsp], eax

; 286  : 
; 287  : 		std::printf("fastCosDeterminisctic %ld clocks\n", TimeStampEnd - TimeStampBegin);

	mov	eax, DWORD PTR TimeStampBegin$[rsp]
	mov	ecx, DWORD PTR TimeStampEnd$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57696
	call	printf

; 288  : 
; 289  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 290  : 		for(std::size_t i = 0; i < Samples; ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN7@perf_fastC
$LN5@perf_fastC:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN7@perf_fastC:
	mov	rax, QWORD PTR Samples$[rsp]
	cmp	QWORD PTR i$5[rsp], rax
	jae	SHORT $LN6@perf_fastC

; 291  : 			Error += Results[i].x >= -1.0f && Results[i].x <= 1.0f ? 0 : 1;

	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR __real@bf800000
	jb	SHORT $LN9@perf_fastC
	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN9@perf_fastC
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN10@perf_fastC
$LN9@perf_fastC:
	mov	DWORD PTR tv140[rsp], 1
$LN10@perf_fastC:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN5@perf_fastC
$LN6@perf_fastC:

; 292  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T9[rsp], eax
	lea	rcx, QWORD PTR Results$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T9[rsp]

; 293  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z ENDP	; taylorCos::perf_fastCosDeterminisctic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Results$ = 40
Steps$ = 84
TimeStampBegin$ = 88
i$4 = 96
TimeStampEnd$ = 104
Error$ = 108
i$5 = 112
$T6 = 120
$T7 = 136
$T8 = 152
$T9 = 168
tv78 = 176
tv140 = 184
Begin$ = 224
End$ = 232
Samples$ = 240
?dtor$0@?0??perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z@4HA PROC ; `taylorCos::perf_fastCosDeterminisctic'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Results$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf_fastCosDeterminisctic@taylorCos@@YAHMM_K@Z@4HA ENDP ; `taylorCos::perf_fastCosDeterminisctic'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
Angle0_PI$ = 40
$T4 = 68
$T5 = 84
$T6 = 100
$T7 = 128
tv66 = 144
tv69 = 148
__$ReturnUdt$ = 192
x$ = 200
??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z PROC ; taylorCos::fastCosNew<float,0,glm::tvec4>, COMDAT

; 218  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]

; 219  : 		vecType<T, P> const Angle0_PI(fastAbs(fmod(x + glm::pi<T>(), glm::two_pi<T>()) - glm::pi<T>()));

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR tv66[rsp], xmm0
	call	??$two_pi@M@glm@@YAMXZ			; glm::two_pi<float>
	movss	DWORD PTR tv69[rsp], xmm0
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator+<float,0>
	movss	xmm0, DWORD PTR tv69[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$fmod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::fmod<float,0,glm::tvec4>
	movss	xmm0, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator-<float,0>
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR Angle0_PI$[rsp]
	call	??$fastAbs@$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@U12@@Z ; taylorCos::fastAbs<0,glm::tvec4>

; 220  : 		return taylorSeriesNewCos6(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$taylorSeriesNewCos6@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::taylorSeriesNewCos6<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 221  : /*
; 222  : 		vecType<bool, P> const FirstQuarterPi(lessThanEqual(Angle0_PI, vecType<T, P>(glm::half_pi<T>())));
; 223  : 
; 224  : 		vecType<T, P> const RevertAngle(mix(vecType<T, P>(glm::pi<T>()), vecType<T, P>(0), FirstQuarterPi));
; 225  : 		vecType<T, P> const ReturnSign(mix(vecType<T, P>(-1), vecType<T, P>(1), FirstQuarterPi));
; 226  : 		vecType<T, P> const SectionAngle(RevertAngle - Angle0_PI);
; 227  : 
; 228  : 		return ReturnSign * taylorSeriesNewCos(SectionAngle);
; 229  : */
; 230  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ENDP ; taylorCos::fastCosNew<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA PROC ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA ENDP ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	imul	rax, QWORD PTR _Pos$[rsp], 16
	mov	rcx, QWORD PTR _My_data$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 4

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Newsize$ = 72
?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::resize, COMDAT

; 1436 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1437 :         // trim or append value-initialized elements, provide strong guarantee
; 1438 :         _Resize(_Newsize, _Value_init_tag{});

	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Resize<std::_Value_init_tag>

; 1439 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S1$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S1$[rsp]
	call	??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
	lea	rax, QWORD PTR $S1$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 1152921504606846975		; 0fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<float,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<float,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<float,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<float,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
Results$ = 40
Steps$ = 84
TimeStampBegin$ = 88
i$4 = 96
TimeStampEnd$ = 104
Error$ = 108
i$5 = 112
$T6 = 120
$T7 = 136
$T8 = 152
$T9 = 168
tv78 = 176
tv140 = 184
Begin$ = 224
End$ = 232
Samples$ = 240
?perf_fastCosNew@taylorCos@@YAHMM_K@Z PROC		; taylorCos::perf_fastCosNew

; 233  : 	{

$LN16:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 234  : 		std::vector<glm::vec4> Results;

	lea	rcx, QWORD PTR Results$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 235  : 		Results.resize(Samples);

	mov	rdx, QWORD PTR Samples$[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	?resize@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::resize

; 236  : 
; 237  : 		float Steps = (End - Begin) / Samples;

	movss	xmm0, DWORD PTR End$[rsp]
	subss	xmm0, DWORD PTR Begin$[rsp]
	mov	rax, QWORD PTR Samples$[rsp]
	test	rax, rax
	jl	SHORT $LN14@perf_fastC
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN15@perf_fastC
$LN14@perf_fastC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN15@perf_fastC:
	divss	xmm0, xmm1
	movss	DWORD PTR Steps$[rsp], xmm0

; 238  : 
; 239  : 		std::clock_t const TimeStampBegin = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimeStampBegin$[rsp], eax

; 240  : 
; 241  : 		for(std::size_t i = 0; i < Samples; ++i)

	mov	QWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@perf_fastC
$LN2@perf_fastC:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@perf_fastC:
	mov	rax, QWORD PTR Samples$[rsp]
	cmp	QWORD PTR i$4[rsp], rax
	jae	$LN3@perf_fastC

; 242  : 			Results[i] = fastCosNew(AngleShift + glm::vec4(Begin + Steps * i));

	mov	rax, QWORD PTR i$4[rsp]
	test	rax, rax
	jl	SHORT $LN12@perf_fastC
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN13@perf_fastC
$LN12@perf_fastC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN13@perf_fastC:
	movss	xmm1, DWORD PTR Steps$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR Begin$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	lea	rdx, OFFSET FLAT:?AngleShift@taylorCos@@3U?$tvec4@M$0A@@glm@@B
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$fastCosNew@M$0A@Utvec4@glm@@@taylorCos@@YA?AU?$tvec4@M$0A@@glm@@AEBU12@@Z ; taylorCos::fastCosNew<float,0,glm::tvec4>
	mov	QWORD PTR tv78[rsp], rax
	mov	rdx, QWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv78[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN2@perf_fastC
$LN3@perf_fastC:

; 243  : 
; 244  : 		std::clock_t const TimeStampEnd = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimeStampEnd$[rsp], eax

; 245  : 
; 246  : 		std::printf("fastCosNew %ld clocks\n", TimeStampEnd - TimeStampBegin);

	mov	eax, DWORD PTR TimeStampBegin$[rsp]
	mov	ecx, DWORD PTR TimeStampEnd$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57654
	call	printf

; 247  : 
; 248  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 249  : 		for(std::size_t i = 0; i < Samples; ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN7@perf_fastC
$LN5@perf_fastC:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN7@perf_fastC:
	mov	rax, QWORD PTR Samples$[rsp]
	cmp	QWORD PTR i$5[rsp], rax
	jae	SHORT $LN6@perf_fastC

; 250  : 			Error += Results[i].x >= -1.0f && Results[i].x <= 1.0f ? 0 : 1;

	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR __real@bf800000
	jb	SHORT $LN9@perf_fastC
	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Results$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN9@perf_fastC
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN10@perf_fastC
$LN9@perf_fastC:
	mov	DWORD PTR tv140[rsp], 1
$LN10@perf_fastC:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN5@perf_fastC
$LN6@perf_fastC:

; 251  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T9[rsp], eax
	lea	rcx, QWORD PTR Results$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T9[rsp]

; 252  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf_fastCosNew@taylorCos@@YAHMM_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?perf_fastCosNew@taylorCos@@YAHMM_K@Z ENDP		; taylorCos::perf_fastCosNew
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Results$ = 40
Steps$ = 84
TimeStampBegin$ = 88
i$4 = 96
TimeStampEnd$ = 104
Error$ = 108
i$5 = 112
$T6 = 120
$T7 = 136
$T8 = 152
$T9 = 168
tv78 = 176
tv140 = 184
Begin$ = 224
End$ = 232
Samples$ = 240
?dtor$0@?0??perf_fastCosNew@taylorCos@@YAHMM_K@Z@4HA PROC ; `taylorCos::perf_fastCosNew'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Results$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf_fastCosNew@taylorCos@@YAHMM_K@Z@4HA ENDP ; `taylorCos::perf_fastCosNew'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
;	COMDAT ??__EAngleShift@taylorCos@@YAXXZ
text$di	SEGMENT
tv67 = 48
tv70 = 52
??__EAngleShift@taylorCos@@YAXXZ PROC			; taylorCos::`dynamic initializer for 'AngleShift'', COMDAT

; 175  : 	glm::vec4 const AngleShift(0.0f, glm::pi<float>() * 0.5f, glm::pi<float>() * 1.0f, glm::pi<float>() * 1.5f);

	push	rdi
	sub	rsp, 64					; 00000040H
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR tv67[rsp], xmm0
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv70[rsp], xmm0
	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR tv67[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movaps	xmm2, xmm0
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?AngleShift@taylorCos@@3U?$tvec4@M$0A@@glm@@B
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??__EAngleShift@taylorCos@@YAXXZ ENDP			; taylorCos::`dynamic initializer for 'AngleShift''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\fast_trigonometry.inl
;	COMDAT ??$fastAtan@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 32
??$fastAtan@M@glm@@YAMM@Z PROC				; glm::fastAtan<float>, COMDAT

; 134  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 16

; 135  : 		return x - (x * x * x * T(0.333333333333)) + (x * x * x * x * x * T(0.2)) - (x * x * x * x * x * x * x * T(0.1428571429)) + (x * x * x * x * x * x * x * x * x * T(0.111111111111)) - (x * x * x * x * x * x * x * x * x * x * x * T(0.0909090909));

	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR __real@3eaaaaab
	movss	xmm1, DWORD PTR x$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR __real@3e4ccccd
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR __real@3e124925
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR __real@3de38e39
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR __real@3dba2e8c
	subss	xmm0, xmm1

; 136  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$fastAtan@M@glm@@YAMM@Z ENDP				; glm::fastAtan<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
begin$ = 32
end$ = 36
result$ = 40
timestamp1$ = 44
i$5 = 52
timestamp2$ = 68
i$6 = 84
timestamp3$ = 100
time_fast$ = 104
time_default$ = 108
tv73 = 112
tv83 = 116
tv95 = 120
NextFloat$ = 144
?perf@fastAtan@@YAH_N@Z PROC				; fastAtan::perf

; 153  : 	{

$LN15:
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+144]

; 154  : 		const float begin = -glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR begin$[rsp], xmm0

; 155  : 		const float end = glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR end$[rsp], xmm0

; 156  : 		float result = 0.f;

	xorps	xmm0, xmm0
	movss	DWORD PTR result$[rsp], xmm0

; 157  : 		const std::clock_t timestamp1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp1$[rsp], eax

; 158  : 		for(float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$5[rsp], xmm0
	jmp	SHORT $LN4@perf
$LN2@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN9@perf
	lea	rcx, QWORD PTR i$5[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv73[rsp], xmm0
	jmp	SHORT $LN10@perf
$LN9@perf:
	movss	xmm0, DWORD PTR i$5[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$5[rsp], xmm0
	movss	xmm0, DWORD PTR i$5[rsp]
	movss	DWORD PTR tv73[rsp], xmm0
$LN10@perf:
	movss	xmm0, DWORD PTR tv73[rsp]
	movss	DWORD PTR i$5[rsp], xmm0
$LN4@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$5[rsp]
	jbe	SHORT $LN3@perf

; 159  : 			result = glm::fastAtan(i);

	movss	xmm0, DWORD PTR i$5[rsp]
	call	??$fastAtan@M@glm@@YAMM@Z		; glm::fastAtan<float>
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN2@perf
$LN3@perf:

; 160  : 		const std::clock_t timestamp2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp2$[rsp], eax

; 161  : 		for(float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$6[rsp], xmm0
	jmp	SHORT $LN7@perf
$LN5@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN11@perf
	lea	rcx, QWORD PTR i$6[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN12@perf
$LN11@perf:
	movss	xmm0, DWORD PTR i$6[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$6[rsp], xmm0
	movss	xmm0, DWORD PTR i$6[rsp]
	movss	DWORD PTR tv83[rsp], xmm0
$LN12@perf:
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR i$6[rsp], xmm0
$LN7@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$6[rsp]
	jbe	SHORT $LN6@perf

; 162  : 			result = glm::atan(i);

	movss	xmm0, DWORD PTR i$6[rsp]
	call	?atan@@YAMM@Z				; atan
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN5@perf
$LN6@perf:

; 163  : 		const std::clock_t timestamp3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp3$[rsp], eax

; 164  : 		const std::clock_t time_fast = timestamp2 - timestamp1;

	mov	eax, DWORD PTR timestamp1$[rsp]
	mov	ecx, DWORD PTR timestamp2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_fast$[rsp], eax

; 165  : 		const std::clock_t time_default = timestamp3 - timestamp2;

	mov	eax, DWORD PTR timestamp2$[rsp]
	mov	ecx, DWORD PTR timestamp3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_default$[rsp], eax

; 166  : 		std::printf("fastAtan Time %d clocks\n", static_cast<unsigned int>(time_fast));

	mov	edx, DWORD PTR time_fast$[rsp]
	lea	rcx, OFFSET FLAT:$SG57022
	call	printf

; 167  : 		std::printf("atan Time %d clocks\n", static_cast<unsigned int>(time_default));

	mov	edx, DWORD PTR time_default$[rsp]
	lea	rcx, OFFSET FLAT:$SG57023
	call	printf

; 168  : 
; 169  : 		return time_fast <= time_default ? 0 : 1;

	mov	eax, DWORD PTR time_default$[rsp]
	cmp	DWORD PTR time_fast$[rsp], eax
	jg	SHORT $LN13@perf
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN14@perf
$LN13@perf:
	mov	DWORD PTR tv95[rsp], 1
$LN14@perf:
	mov	eax, DWORD PTR tv95[rsp]

; 170  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf@fastAtan@@YAH_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?perf@fastAtan@@YAH_N@Z ENDP				; fastAtan::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\fast_trigonometry.inl
;	COMDAT ??$fastAsin@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 32
??$fastAsin@M@glm@@YAMM@Z PROC				; glm::fastAsin<float>, COMDAT

; 95   : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 16

; 96   : 		return x + (x * x * x * T(0.166666667)) + (x * x * x * x * x * T(0.075)) + (x * x * x * x * x * x * x * T(0.0446428571)) + (x * x * x * x * x * x * x * x * x * T(0.0303819444));// + (x * x * x * x * x * x * x * x * x * x * x * T(0.022372159));

	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR __real@3e2aaaab
	movss	xmm1, DWORD PTR x$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR __real@3d99999a
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR __real@3d36db6e
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR __real@3cf8e38e
	addss	xmm0, xmm1

; 97   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$fastAsin@M@glm@@YAMM@Z ENDP				; glm::fastAsin<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
begin$ = 32
end$ = 36
result$ = 40
timestamp1$ = 44
i$5 = 52
timestamp2$ = 68
i$6 = 84
timestamp3$ = 100
time_fast$ = 104
time_default$ = 108
tv73 = 112
tv83 = 116
tv95 = 120
NextFloat$ = 144
?perf@fastAsin@@YAH_N@Z PROC				; fastAsin::perf

; 130  : 	{

$LN15:
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+144]

; 131  : 		const float begin = -glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR begin$[rsp], xmm0

; 132  : 		const float end = glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR end$[rsp], xmm0

; 133  : 		float result = 0.f;

	xorps	xmm0, xmm0
	movss	DWORD PTR result$[rsp], xmm0

; 134  : 		const std::clock_t timestamp1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp1$[rsp], eax

; 135  : 		for(float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$5[rsp], xmm0
	jmp	SHORT $LN4@perf
$LN2@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN9@perf
	lea	rcx, QWORD PTR i$5[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv73[rsp], xmm0
	jmp	SHORT $LN10@perf
$LN9@perf:
	movss	xmm0, DWORD PTR i$5[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$5[rsp], xmm0
	movss	xmm0, DWORD PTR i$5[rsp]
	movss	DWORD PTR tv73[rsp], xmm0
$LN10@perf:
	movss	xmm0, DWORD PTR tv73[rsp]
	movss	DWORD PTR i$5[rsp], xmm0
$LN4@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$5[rsp]
	jbe	SHORT $LN3@perf

; 136  : 			result = glm::fastAsin(i);

	movss	xmm0, DWORD PTR i$5[rsp]
	call	??$fastAsin@M@glm@@YAMM@Z		; glm::fastAsin<float>
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN2@perf
$LN3@perf:

; 137  : 		const std::clock_t timestamp2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp2$[rsp], eax

; 138  : 		for(float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$6[rsp], xmm0
	jmp	SHORT $LN7@perf
$LN5@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN11@perf
	lea	rcx, QWORD PTR i$6[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN12@perf
$LN11@perf:
	movss	xmm0, DWORD PTR i$6[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$6[rsp], xmm0
	movss	xmm0, DWORD PTR i$6[rsp]
	movss	DWORD PTR tv83[rsp], xmm0
$LN12@perf:
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR i$6[rsp], xmm0
$LN7@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$6[rsp]
	jbe	SHORT $LN6@perf

; 139  : 			result = glm::asin(i);

	movss	xmm0, DWORD PTR i$6[rsp]
	call	?asin@@YAMM@Z				; asin
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN5@perf
$LN6@perf:

; 140  : 		const std::clock_t timestamp3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp3$[rsp], eax

; 141  : 		const std::clock_t time_fast = timestamp2 - timestamp1;

	mov	eax, DWORD PTR timestamp1$[rsp]
	mov	ecx, DWORD PTR timestamp2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_fast$[rsp], eax

; 142  : 		const std::clock_t time_default = timestamp3 - timestamp2;

	mov	eax, DWORD PTR timestamp2$[rsp]
	mov	ecx, DWORD PTR timestamp3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_default$[rsp], eax

; 143  : 		std::printf("fastAsin Time %d clocks\n", static_cast<unsigned int>(time_fast));

	mov	edx, DWORD PTR time_fast$[rsp]
	lea	rcx, OFFSET FLAT:$SG56993
	call	printf

; 144  : 		std::printf("asin Time %d clocks\n", static_cast<unsigned int>(time_default));

	mov	edx, DWORD PTR time_default$[rsp]
	lea	rcx, OFFSET FLAT:$SG56994
	call	printf

; 145  : 
; 146  : 		return time_fast <= time_default ? 0 : 1;

	mov	eax, DWORD PTR time_default$[rsp]
	cmp	DWORD PTR time_fast$[rsp], eax
	jg	SHORT $LN13@perf
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN14@perf
$LN13@perf:
	mov	DWORD PTR tv95[rsp], 1
$LN14@perf:
	mov	eax, DWORD PTR tv95[rsp]

; 147  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf@fastAsin@@YAH_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?perf@fastAsin@@YAH_N@Z ENDP				; fastAsin::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\fast_trigonometry.inl
;	COMDAT ??$fastAcos@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$fastAcos@M@glm@@YAMM@Z PROC				; glm::fastAcos<float>, COMDAT

; 108  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 109  : 		return T(1.5707963267948966192313216916398) - fastAsin(x); //(PI / 2)

	movss	xmm0, DWORD PTR x$[rsp]
	call	??$fastAsin@M@glm@@YAMM@Z		; glm::fastAsin<float>
	movss	xmm1, DWORD PTR __real@3fc90fdb
	subss	xmm1, xmm0
	movaps	xmm0, xmm1

; 110  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$fastAcos@M@glm@@YAMM@Z ENDP				; glm::fastAcos<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
begin$ = 32
end$ = 36
result$ = 40
timestamp1$ = 44
i$5 = 52
timestamp2$ = 68
i$6 = 84
timestamp3$ = 100
time_fast$ = 104
time_default$ = 108
tv73 = 112
tv83 = 116
tv95 = 120
NextFloat$ = 144
?perf@fastAcos@@YAH_N@Z PROC				; fastAcos::perf

; 103  : 	{

$LN15:
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+144]

; 104  : 		const float begin = -glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR begin$[rsp], xmm0

; 105  : 		const float end = glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR end$[rsp], xmm0

; 106  : 		float result = 0.f;

	xorps	xmm0, xmm0
	movss	DWORD PTR result$[rsp], xmm0

; 107  : 
; 108  : 		const std::clock_t timestamp1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp1$[rsp], eax

; 109  : 		for(float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$5[rsp], xmm0
	jmp	SHORT $LN4@perf
$LN2@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN9@perf
	lea	rcx, QWORD PTR i$5[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv73[rsp], xmm0
	jmp	SHORT $LN10@perf
$LN9@perf:
	movss	xmm0, DWORD PTR i$5[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$5[rsp], xmm0
	movss	xmm0, DWORD PTR i$5[rsp]
	movss	DWORD PTR tv73[rsp], xmm0
$LN10@perf:
	movss	xmm0, DWORD PTR tv73[rsp]
	movss	DWORD PTR i$5[rsp], xmm0
$LN4@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$5[rsp]
	jbe	SHORT $LN3@perf

; 110  : 			result = glm::fastAcos(i);

	movss	xmm0, DWORD PTR i$5[rsp]
	call	??$fastAcos@M@glm@@YAMM@Z		; glm::fastAcos<float>
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN2@perf
$LN3@perf:

; 111  : 
; 112  : 		const std::clock_t timestamp2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp2$[rsp], eax

; 113  : 		for(float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$6[rsp], xmm0
	jmp	SHORT $LN7@perf
$LN5@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN11@perf
	lea	rcx, QWORD PTR i$6[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN12@perf
$LN11@perf:
	movss	xmm0, DWORD PTR i$6[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$6[rsp], xmm0
	movss	xmm0, DWORD PTR i$6[rsp]
	movss	DWORD PTR tv83[rsp], xmm0
$LN12@perf:
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR i$6[rsp], xmm0
$LN7@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$6[rsp]
	jbe	SHORT $LN6@perf

; 114  : 			result = glm::acos(i);

	movss	xmm0, DWORD PTR i$6[rsp]
	call	?acos@@YAMM@Z				; acos
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN5@perf
$LN6@perf:

; 115  : 
; 116  : 		const std::clock_t timestamp3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp3$[rsp], eax

; 117  : 		const std::clock_t time_fast = timestamp2 - timestamp1;

	mov	eax, DWORD PTR timestamp1$[rsp]
	mov	ecx, DWORD PTR timestamp2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_fast$[rsp], eax

; 118  : 		const std::clock_t time_default = timestamp3 - timestamp2;

	mov	eax, DWORD PTR timestamp2$[rsp]
	mov	ecx, DWORD PTR timestamp3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_default$[rsp], eax

; 119  : 
; 120  : 		std::printf("fastAcos Time %d clocks\n", static_cast<unsigned int>(time_fast));

	mov	edx, DWORD PTR time_fast$[rsp]
	lea	rcx, OFFSET FLAT:$SG56964
	call	printf

; 121  : 		std::printf("acos Time %d clocks\n", static_cast<unsigned int>(time_default));

	mov	edx, DWORD PTR time_default$[rsp]
	lea	rcx, OFFSET FLAT:$SG56965
	call	printf

; 122  : 
; 123  : 		return time_fast <= time_default ? 0 : 1;

	mov	eax, DWORD PTR time_default$[rsp]
	cmp	DWORD PTR time_fast$[rsp], eax
	jg	SHORT $LN13@perf
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN14@perf
$LN13@perf:
	mov	DWORD PTR tv95[rsp], 1
$LN14@perf:
	mov	eax, DWORD PTR tv95[rsp]

; 124  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf@fastAcos@@YAH_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?perf@fastAcos@@YAH_N@Z ENDP				; fastAcos::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\fast_trigonometry.inl
;	COMDAT ??$fastTan@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 32
??$fastTan@M@glm@@YAMM@Z PROC				; glm::fastTan<float>, COMDAT

; 82   : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 16

; 83   : 		return x + (x * x * x * T(0.3333333333)) + (x * x * x * x * x * T(0.1333333333333)) + (x * x * x * x * x * x * x * T(0.0539682539));

	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR __real@3eaaaaab
	movss	xmm1, DWORD PTR x$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR __real@3e088889
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, DWORD PTR __real@3d5d0dd1
	addss	xmm0, xmm1

; 84   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$fastTan@M@glm@@YAMM@Z ENDP				; glm::fastTan<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
begin$ = 32
end$ = 36
result$ = 40
timestamp1$ = 44
i$5 = 52
timestamp2$ = 68
i$6 = 84
timestamp3$ = 100
time_fast$ = 104
time_default$ = 108
tv73 = 112
tv83 = 116
tv95 = 120
NextFloat$ = 144
?perf@fastTan@@YAH_N@Z PROC				; fastTan::perf

; 77   : 	{

$LN15:
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+144]

; 78   : 		const float begin = -glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR begin$[rsp], xmm0

; 79   : 		const float end = glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR end$[rsp], xmm0

; 80   : 		float result = 0.f;

	xorps	xmm0, xmm0
	movss	DWORD PTR result$[rsp], xmm0

; 81   : 
; 82   : 		const std::clock_t timestamp1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp1$[rsp], eax

; 83   : 		for(float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$5[rsp], xmm0
	jmp	SHORT $LN4@perf
$LN2@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN9@perf
	lea	rcx, QWORD PTR i$5[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv73[rsp], xmm0
	jmp	SHORT $LN10@perf
$LN9@perf:
	movss	xmm0, DWORD PTR i$5[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$5[rsp], xmm0
	movss	xmm0, DWORD PTR i$5[rsp]
	movss	DWORD PTR tv73[rsp], xmm0
$LN10@perf:
	movss	xmm0, DWORD PTR tv73[rsp]
	movss	DWORD PTR i$5[rsp], xmm0
$LN4@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$5[rsp]
	jbe	SHORT $LN3@perf

; 84   : 			result = glm::fastTan(i);

	movss	xmm0, DWORD PTR i$5[rsp]
	call	??$fastTan@M@glm@@YAMM@Z		; glm::fastTan<float>
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN2@perf
$LN3@perf:

; 85   : 
; 86   : 		const std::clock_t timestamp2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp2$[rsp], eax

; 87   : 		for (float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$6[rsp], xmm0
	jmp	SHORT $LN7@perf
$LN5@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN11@perf
	lea	rcx, QWORD PTR i$6[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN12@perf
$LN11@perf:
	movss	xmm0, DWORD PTR i$6[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$6[rsp], xmm0
	movss	xmm0, DWORD PTR i$6[rsp]
	movss	DWORD PTR tv83[rsp], xmm0
$LN12@perf:
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR i$6[rsp], xmm0
$LN7@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$6[rsp]
	jbe	SHORT $LN6@perf

; 88   : 			result = glm::tan(i);

	movss	xmm0, DWORD PTR i$6[rsp]
	call	?tan@@YAMM@Z				; tan
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN5@perf
$LN6@perf:

; 89   : 
; 90   : 		const std::clock_t timestamp3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp3$[rsp], eax

; 91   : 		const std::clock_t time_fast = timestamp2 - timestamp1;

	mov	eax, DWORD PTR timestamp1$[rsp]
	mov	ecx, DWORD PTR timestamp2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_fast$[rsp], eax

; 92   : 		const std::clock_t time_default = timestamp3 - timestamp2;

	mov	eax, DWORD PTR timestamp2$[rsp]
	mov	ecx, DWORD PTR timestamp3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_default$[rsp], eax

; 93   : 		std::printf("fastTan Time %d clocks\n", static_cast<unsigned int>(time_fast));

	mov	edx, DWORD PTR time_fast$[rsp]
	lea	rcx, OFFSET FLAT:$SG56935
	call	printf

; 94   : 		std::printf("tan Time %d clocks\n", static_cast<unsigned int>(time_default));

	mov	edx, DWORD PTR time_default$[rsp]
	lea	rcx, OFFSET FLAT:$SG56936
	call	printf

; 95   : 
; 96   : 		return time_fast <= time_default ? 0 : 1;

	mov	eax, DWORD PTR time_default$[rsp]
	cmp	DWORD PTR time_fast$[rsp], eax
	jg	SHORT $LN13@perf
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN14@perf
$LN13@perf:
	mov	DWORD PTR tv95[rsp], 1
$LN14@perf:
	mov	eax, DWORD PTR tv95[rsp]

; 97   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf@fastTan@@YAH_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?perf@fastTan@@YAH_N@Z ENDP				; fastTan::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\fast_trigonometry.inl
;	COMDAT ??$fastSin@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$fastSin@M@glm@@YAMM@Z PROC				; glm::fastSin<float>, COMDAT

; 69   : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 		return fastCos<T>(half_pi<T>() - x);

	call	??$half_pi@M@glm@@YAMXZ			; glm::half_pi<float>
	subss	xmm0, DWORD PTR x$[rsp]
	call	??$fastCos@M@glm@@YAMM@Z		; glm::fastCos<float>

; 71   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$fastSin@M@glm@@YAMM@Z ENDP				; glm::fastSin<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
begin$ = 32
end$ = 36
result$ = 40
timestamp1$ = 44
i$5 = 52
timestamp2$ = 68
i$6 = 84
timestamp3$ = 100
time_fast$ = 104
time_default$ = 108
tv73 = 112
tv83 = 116
tv95 = 120
NextFloat$ = 144
?perf@fastSin@@YAH_N@Z PROC				; fastSin::perf

; 51   : 	{

$LN15:
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+144]

; 52   : 		const float begin = -glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR begin$[rsp], xmm0

; 53   : 		const float end = glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR end$[rsp], xmm0

; 54   : 		float result = 0.f;

	xorps	xmm0, xmm0
	movss	DWORD PTR result$[rsp], xmm0

; 55   : 
; 56   : 		const std::clock_t timestamp1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp1$[rsp], eax

; 57   : 		for(float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$5[rsp], xmm0
	jmp	SHORT $LN4@perf
$LN2@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN9@perf
	lea	rcx, QWORD PTR i$5[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv73[rsp], xmm0
	jmp	SHORT $LN10@perf
$LN9@perf:
	movss	xmm0, DWORD PTR i$5[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$5[rsp], xmm0
	movss	xmm0, DWORD PTR i$5[rsp]
	movss	DWORD PTR tv73[rsp], xmm0
$LN10@perf:
	movss	xmm0, DWORD PTR tv73[rsp]
	movss	DWORD PTR i$5[rsp], xmm0
$LN4@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$5[rsp]
	jbe	SHORT $LN3@perf

; 58   : 			result = glm::fastSin(i);

	movss	xmm0, DWORD PTR i$5[rsp]
	call	??$fastSin@M@glm@@YAMM@Z		; glm::fastSin<float>
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN2@perf
$LN3@perf:

; 59   : 
; 60   : 		const std::clock_t timestamp2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp2$[rsp], eax

; 61   : 		for(float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$6[rsp], xmm0
	jmp	SHORT $LN7@perf
$LN5@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN11@perf
	lea	rcx, QWORD PTR i$6[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN12@perf
$LN11@perf:
	movss	xmm0, DWORD PTR i$6[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$6[rsp], xmm0
	movss	xmm0, DWORD PTR i$6[rsp]
	movss	DWORD PTR tv83[rsp], xmm0
$LN12@perf:
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR i$6[rsp], xmm0
$LN7@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$6[rsp]
	jbe	SHORT $LN6@perf

; 62   : 			result = glm::sin(i);

	movss	xmm0, DWORD PTR i$6[rsp]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN5@perf
$LN6@perf:

; 63   : 
; 64   : 		const std::clock_t timestamp3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp3$[rsp], eax

; 65   : 		const std::clock_t time_fast = timestamp2 - timestamp1;

	mov	eax, DWORD PTR timestamp1$[rsp]
	mov	ecx, DWORD PTR timestamp2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_fast$[rsp], eax

; 66   : 		const std::clock_t time_default = timestamp3 - timestamp2;

	mov	eax, DWORD PTR timestamp2$[rsp]
	mov	ecx, DWORD PTR timestamp3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_default$[rsp], eax

; 67   : 		std::printf("fastSin Time %d clocks\n", static_cast<unsigned int>(time_fast));

	mov	edx, DWORD PTR time_fast$[rsp]
	lea	rcx, OFFSET FLAT:$SG56906
	call	printf

; 68   : 		std::printf("sin Time %d clocks\n", static_cast<unsigned int>(time_default));

	mov	edx, DWORD PTR time_default$[rsp]
	lea	rcx, OFFSET FLAT:$SG56907
	call	printf

; 69   : 
; 70   : 		return time_fast <= time_default ? 0 : 1;

	mov	eax, DWORD PTR time_default$[rsp]
	cmp	DWORD PTR time_fast$[rsp], eax
	jg	SHORT $LN13@perf
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN14@perf
$LN13@perf:
	mov	DWORD PTR tv95[rsp], 1
$LN14@perf:
	mov	eax, DWORD PTR tv95[rsp]

; 71   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf@fastSin@@YAH_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?perf@fastSin@@YAH_N@Z ENDP				; fastSin::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtx\fast_trigonometry.inl
;	COMDAT ??$fastCos@M@glm@@YAMM@Z
_TEXT	SEGMENT
angle$ = 48
x$ = 80
??$fastCos@M@glm@@YAMM@Z PROC				; glm::fastCos<float>, COMDAT

; 47   : 	{

$LN6:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H

; 48   : 		T const angle(wrapAngle<T>(x));

	movss	xmm0, DWORD PTR x$[rsp]
	call	??$wrapAngle@M@glm@@YAMM@Z		; glm::wrapAngle<float>
	movss	DWORD PTR angle$[rsp], xmm0

; 49   : 
; 50   : 		if(angle < half_pi<T>())

	call	??$half_pi@M@glm@@YAMXZ			; glm::half_pi<float>
	comiss	xmm0, DWORD PTR angle$[rsp]
	jbe	SHORT $LN2@fastCos

; 51   : 			return detail::cos_52s(angle);

	movss	xmm0, DWORD PTR angle$[rsp]
	call	??$cos_52s@M@detail@glm@@YAMM@Z		; glm::detail::cos_52s<float>
	jmp	SHORT $LN1@fastCos
$LN2@fastCos:

; 52   : 		if(angle < pi<T>())

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	comiss	xmm0, DWORD PTR angle$[rsp]
	jbe	SHORT $LN3@fastCos

; 53   : 			return -detail::cos_52s(pi<T>() - angle);

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	subss	xmm0, DWORD PTR angle$[rsp]
	call	??$cos_52s@M@detail@glm@@YAMM@Z		; glm::detail::cos_52s<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	jmp	SHORT $LN1@fastCos
$LN3@fastCos:

; 54   : 		if(angle < (T(3) * half_pi<T>()))

	call	??$half_pi@M@glm@@YAMXZ			; glm::half_pi<float>
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	comiss	xmm0, DWORD PTR angle$[rsp]
	jbe	SHORT $LN4@fastCos

; 55   : 			return -detail::cos_52s(angle - pi<T>());

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	xmm1, DWORD PTR angle$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	??$cos_52s@M@detail@glm@@YAMM@Z		; glm::detail::cos_52s<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	jmp	SHORT $LN1@fastCos
$LN4@fastCos:

; 56   : 
; 57   : 		return detail::cos_52s(two_pi<T>() - angle);

	call	??$two_pi@M@glm@@YAMXZ			; glm::two_pi<float>
	subss	xmm0, DWORD PTR angle$[rsp]
	call	??$cos_52s@M@detail@glm@@YAMM@Z		; glm::detail::cos_52s<float>
$LN1@fastCos:

; 58   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$fastCos@M@glm@@YAMM@Z ENDP				; glm::fastCos<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$pi@M@glm@@YAMXZ
_TEXT	SEGMENT
??$pi@M@glm@@YAMXZ PROC					; glm::pi<float>, COMDAT

; 28   : 	{

$LN3:
	push	rdi
	sub	rsp, 16

; 29   : 		return genType(3.14159265358979323846264338327950288);

	movss	xmm0, DWORD PTR __real@40490fdb

; 30   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$pi@M@glm@@YAMXZ ENDP					; glm::pi<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\gtx\gtx_fast_trigonometry.cpp
_TEXT	SEGMENT
begin$ = 32
end$ = 36
result$ = 40
timestamp1$ = 44
i$5 = 52
timestamp2$ = 68
i$6 = 84
timestamp3$ = 100
time_fast$ = 104
time_default$ = 108
tv73 = 112
tv83 = 116
tv95 = 120
NextFloat$ = 144
?perf@fastCos@@YAH_N@Z PROC				; fastCos::perf

; 17   : 	{

$LN15:
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+144]

; 18   : 		const float begin = -glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR begin$[rsp], xmm0

; 19   : 		const float end = glm::pi<float>();

	call	??$pi@M@glm@@YAMXZ			; glm::pi<float>
	movss	DWORD PTR end$[rsp], xmm0

; 20   : 		float result = 0.f;

	xorps	xmm0, xmm0
	movss	DWORD PTR result$[rsp], xmm0

; 21   : 
; 22   : 		const std::clock_t timestamp1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp1$[rsp], eax

; 23   : 		for(float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$5[rsp], xmm0
	jmp	SHORT $LN4@perf
$LN2@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN9@perf
	lea	rcx, QWORD PTR i$5[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv73[rsp], xmm0
	jmp	SHORT $LN10@perf
$LN9@perf:
	movss	xmm0, DWORD PTR i$5[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$5[rsp], xmm0
	movss	xmm0, DWORD PTR i$5[rsp]
	movss	DWORD PTR tv73[rsp], xmm0
$LN10@perf:
	movss	xmm0, DWORD PTR tv73[rsp]
	movss	DWORD PTR i$5[rsp], xmm0
$LN4@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$5[rsp]
	jbe	SHORT $LN3@perf

; 24   : 			result = glm::fastCos(i);

	movss	xmm0, DWORD PTR i$5[rsp]
	call	??$fastCos@M@glm@@YAMM@Z		; glm::fastCos<float>
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN2@perf
$LN3@perf:

; 25   : 
; 26   : 		const std::clock_t timestamp2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp2$[rsp], eax

; 27   : 		for(float i = begin; i < end; i = NextFloat ? glm::next_float(i) : i += 0.1f)

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR i$6[rsp], xmm0
	jmp	SHORT $LN7@perf
$LN5@perf:
	movzx	eax, BYTE PTR NextFloat$[rsp]
	test	eax, eax
	je	SHORT $LN11@perf
	lea	rcx, QWORD PTR i$6[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN12@perf
$LN11@perf:
	movss	xmm0, DWORD PTR i$6[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR i$6[rsp], xmm0
	movss	xmm0, DWORD PTR i$6[rsp]
	movss	DWORD PTR tv83[rsp], xmm0
$LN12@perf:
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR i$6[rsp], xmm0
$LN7@perf:
	movss	xmm0, DWORD PTR __real@40490fdb
	comiss	xmm0, DWORD PTR i$6[rsp]
	jbe	SHORT $LN6@perf

; 28   : 			result = glm::cos(i);

	movss	xmm0, DWORD PTR i$6[rsp]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR result$[rsp], xmm0
	jmp	SHORT $LN5@perf
$LN6@perf:

; 29   : 
; 30   : 		const std::clock_t timestamp3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR timestamp3$[rsp], eax

; 31   : 		const std::clock_t time_fast = timestamp2 - timestamp1;

	mov	eax, DWORD PTR timestamp1$[rsp]
	mov	ecx, DWORD PTR timestamp2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_fast$[rsp], eax

; 32   : 		const std::clock_t time_default = timestamp3 - timestamp2;

	mov	eax, DWORD PTR timestamp2$[rsp]
	mov	ecx, DWORD PTR timestamp3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR time_default$[rsp], eax

; 33   : 		std::printf("fastCos Time %d clocks\n", static_cast<unsigned int>(time_fast));

	mov	edx, DWORD PTR time_fast$[rsp]
	lea	rcx, OFFSET FLAT:$SG56877
	call	printf

; 34   : 		std::printf("cos Time %d clocks\n", static_cast<unsigned int>(time_default));

	mov	edx, DWORD PTR time_default$[rsp]
	lea	rcx, OFFSET FLAT:$SG56878
	call	printf

; 35   : 
; 36   : 		return time_fast <= time_default ? 0 : 1;

	mov	eax, DWORD PTR time_default$[rsp]
	cmp	DWORD PTR time_fast$[rsp], eax
	jg	SHORT $LN13@perf
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN14@perf
$LN13@perf:
	mov	DWORD PTR tv95[rsp], 1
$LN14@perf:
	mov	eax, DWORD PTR tv95[rsp]

; 37   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf@fastCos@@YAH_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?perf@fastCos@@YAH_N@Z ENDP				; fastCos::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1078 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1079 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1080 :         _Orphan_all_unlocked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1081 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1219 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1220 :     if (!_Myproxy) { // no proxy, already done

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@Orphan_all

; 1221 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1222 :     }
; 1223 : 
; 1224 :     // proxy allocated, drain it
; 1225 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1226 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1227 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1228 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1229 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1231 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1232 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1233 : #if _HAS_CXX20
; 1234 :     if (_STD is_constant_evaluated()) {
; 1235 :         _Orphan_all_unlocked_v3();
; 1236 :     } else
; 1237 : #endif // _HAS_CXX20
; 1238 :     {
; 1239 :         _Orphan_all_locked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1240 :     }
; 1241 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1242 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1048 : 
; 1049 :     _Container_base12(const _Container_base12&) = delete;
; 1050 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1051 : 
; 1052 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1053 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1054 : 
; 1055 :     template <class _Alloc>
; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1058 :         _Construct_in_place(*_New_proxy, this);
; 1059 :         _Myproxy            = _New_proxy;
; 1060 :         _New_proxy->_Mycont = this;
; 1061 :     }
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1065 :         // pre: no iterators refer to the existing proxy
; 1066 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1067 :         _Construct_in_place(*_New_proxy, this);
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1070 :     }
; 1071 : 
; 1072 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1040 : 
; 1041 :     const _Container_base12* _Mycont       = nullptr;
; 1042 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 154				; 0000009aH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 166  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 80   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 319  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ??$next_float@M@glm@@YAMAEBM@Z
_TEXT	SEGMENT
x$ = 64
??$next_float@M@glm@@YAMAEBM@Z PROC			; glm::next_float<float>, COMDAT

; 176  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 177  : #		if GLM_HAS_CXX11_STL
; 178  : 			return std::nextafter(x, std::numeric_limits<float>::max());

	call	?max@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::max
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?nextafter@@YAMMM@Z			; nextafter

; 179  : #		elif((GLM_COMPILER & GLM_COMPILER_VC) || ((GLM_COMPILER & GLM_COMPILER_INTEL) && (GLM_PLATFORM & GLM_PLATFORM_WINDOWS)))
; 180  : 			return detail::nextafterf(x, FLT_MAX);
; 181  : #		elif(GLM_PLATFORM & GLM_PLATFORM_ANDROID)
; 182  : 			return __builtin_nextafterf(x, FLT_MAX);
; 183  : #		else
; 184  : 			return nextafterf(x, FLT_MAX);
; 185  : #		endif
; 186  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$next_float@M@glm@@YAMAEBM@Z ENDP			; glm::next_float<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?trunc@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?trunc@@YAMM@Z PROC					; trunc, COMDAT

; 280  : _NODISCARD _Check_return_ inline float trunc(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 281  : #if _HAS_CMATH_INTRINSICS
; 282  :     return __truncf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	truncf

; 283  : #elif defined(__clang__)
; 284  :     return __builtin_truncf(_Xx);
; 285  : #else // ^^^ defined(__clang__) ^^^ / vvv intrinsics unavailable vvv
; 286  :     return _CSTD truncf(_Xx);
; 287  : #endif // ^^^ intrinsics unavailable ^^^
; 288  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?trunc@@YAMM@Z ENDP					; trunc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?tan@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?tan@@YAMM@Z PROC					; tan, COMDAT

; 268  : _NODISCARD _Check_return_ inline float tan(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 269  :     return _CSTD tanf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_tanf

; 270  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?tan@@YAMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sin@@YAMM@Z PROC					; sin, COMDAT

; 256  : _NODISCARD _Check_return_ inline float sin(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 257  :     return _CSTD sinf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sinf

; 258  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?nextafter@@YAMMM@Z
_TEXT	SEGMENT
_Xx$ = 64
_Yx$ = 72
?nextafter@@YAMMM@Z PROC				; nextafter, COMDAT

; 214  : _NODISCARD _Check_return_ inline float nextafter(_In_ float _Xx, _In_ float _Yx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 215  :     return _CSTD nextafterf(_Xx, _Yx);

	movss	xmm1, DWORD PTR _Yx$[rsp]
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_nextafterf

; 216  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?nextafter@@YAMMM@Z ENDP				; nextafter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?fmod@@YAMMM@Z
_TEXT	SEGMENT
_Xx$ = 64
_Yx$ = 72
?fmod@@YAMMM@Z PROC					; fmod, COMDAT

; 146  : _NODISCARD _Check_return_ inline float fmod(_In_ float _Xx, _In_ float _Yx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 147  :     return _CSTD fmodf(_Xx, _Yx);

	movss	xmm1, DWORD PTR _Yx$[rsp]
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_fmodf

; 148  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?fmod@@YAMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?floor@@YAMM@Z PROC					; floor, COMDAT

; 124  : _NODISCARD _Check_return_ inline float floor(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 125  : #if _HAS_CMATH_INTRINSICS
; 126  :     return __floorf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	floorf

; 127  : #elif defined(__clang__)
; 128  :     return __builtin_floorf(_Xx);
; 129  : #else // ^^^ defined(__clang__) ^^^ / vvv intrinsics unavailable vvv
; 130  :     return _CSTD floorf(_Xx);
; 131  : #endif // ^^^ intrinsics unavailable ^^^
; 132  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?cos@@YAMM@Z PROC					; cos, COMDAT

; 88   : _NODISCARD _Check_return_ inline float cos(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 89   :     return _CSTD cosf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_cosf

; 90   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?atan@@YAMM@Z PROC					; atan, COMDAT

; 52   : _NODISCARD _Check_return_ inline float atan(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 53   :     return _CSTD atanf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_atanf

; 54   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?asin@@YAMM@Z PROC					; asin, COMDAT

; 44   : _NODISCARD _Check_return_ inline float asin(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 45   :     return _CSTD asinf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_asinf

; 46   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?acos@@YAMM@Z PROC					; acos, COMDAT

; 36   : _NODISCARD _Check_return_ inline float acos(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 37   :     return _CSTD acosf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_acosf

; 38   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?max@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::max, COMDAT

; 864  :     _NODISCARD static constexpr float(max)() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 865  :         return FLT_MAX;

	movss	xmm0, DWORD PTR __real@7f7fffff

; 866  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?max@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
